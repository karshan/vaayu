
project_build/project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .mios32_bsl   00004000  08000000  08000000  00008000  2**0  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .isr_vector   00000188  08004000  08004000  0000c000  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00007c14  08010000  08010000  00010000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000006ac  08017c14  08017c14  00017c14  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         00000060  20000000  080182c0  00020000  2**3  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00003bb8  20000060  08018320  00020060  2**3  ALLOC
  6 ._usrstack    00000100  20003c18  08018320  00023c18  2**0  ALLOC
  7 .comment      00000070  00000000  00000000  00020060  2**0  CONTENTS, READONLY
  8 .ARM.attributes 00000033  00000000  00000000  000200d0  2**0  CONTENTS, READONLY
  9 .debug_aranges 00001d60  00000000  00000000  00020103  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0003433c  00000000  00000000  00021e63  2**0  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000076cd  00000000  00000000  0005619f  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d3d1  00000000  00000000  0005d86c  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000045d8  00000000  00000000  0006ac40  2**2  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000aa7f  00000000  00000000  0006f218  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001501e  00000000  00000000  00079c97  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001fa0  00000000  00000000  0008ecb5  2**0  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08010000 <reset_encoders>:
u8 led_state[NUM_LEDS][3]; // GRB

void reset_encoders() {
    int i;
    for (i = 0; i < NUM_ENCODERS; i++) {
        encoder_state[i] = 64;
 8010000:	4b05      	ldr	r3, [pc, #20]	; (8010018 <reset_encoders+0x18>)
 8010002:	2240      	movs	r2, #64	; 0x40
 8010004:	601a      	str	r2, [r3, #0]
 8010006:	605a      	str	r2, [r3, #4]
 8010008:	609a      	str	r2, [r3, #8]
 801000a:	60da      	str	r2, [r3, #12]
 801000c:	611a      	str	r2, [r3, #16]
 801000e:	615a      	str	r2, [r3, #20]
 8010010:	619a      	str	r2, [r3, #24]
 8010012:	61da      	str	r2, [r3, #28]
 8010014:	4770      	bx	lr
 8010016:	bf00      	nop
 8010018:	20000610 	.word	0x20000610

0801001c <APP_Init>:

/////////////////////////////////////////////////////////////////////////////
// This hook is called after startup to initialize the application
/////////////////////////////////////////////////////////////////////////////
void APP_Init(void)
{
 801001c:	b510      	push	{r4, lr}
  int i, pin, row, col;

  // initialize all LEDs
  MIOS32_BOARD_LED_Init(0xffffffff);
 801001e:	f04f 30ff 	mov.w	r0, #4294967295
 8010022:	f002 f9ab 	bl	801237c <MIOS32_BOARD_LED_Init>

  for (pin = 0; pin < BUTTON_COLS; pin++) {
    MIOS32_BOARD_J10_PinInit(pin, MIOS32_BOARD_PIN_MODE_OUTPUT_PP);
 8010026:	2105      	movs	r1, #5
 8010028:	2000      	movs	r0, #0
 801002a:	f002 fa7f 	bl	801252c <MIOS32_BOARD_J10_PinInit>
 801002e:	2001      	movs	r0, #1
 8010030:	2105      	movs	r1, #5
 8010032:	f002 fa7b 	bl	801252c <MIOS32_BOARD_J10_PinInit>
 8010036:	2402      	movs	r4, #2
  }

  for (pin = BUTTON_COLS; pin < 16; pin++) {
    MIOS32_BOARD_J10_PinInit(pin, MIOS32_BOARD_PIN_MODE_INPUT_PD);
 8010038:	b2e0      	uxtb	r0, r4
 801003a:	2103      	movs	r1, #3

  for (pin = 0; pin < BUTTON_COLS; pin++) {
    MIOS32_BOARD_J10_PinInit(pin, MIOS32_BOARD_PIN_MODE_OUTPUT_PP);
  }

  for (pin = BUTTON_COLS; pin < 16; pin++) {
 801003c:	3401      	adds	r4, #1
    MIOS32_BOARD_J10_PinInit(pin, MIOS32_BOARD_PIN_MODE_INPUT_PD);
 801003e:	f002 fa75 	bl	801252c <MIOS32_BOARD_J10_PinInit>

  for (pin = 0; pin < BUTTON_COLS; pin++) {
    MIOS32_BOARD_J10_PinInit(pin, MIOS32_BOARD_PIN_MODE_OUTPUT_PP);
  }

  for (pin = BUTTON_COLS; pin < 16; pin++) {
 8010042:	2c10      	cmp	r4, #16
 8010044:	d1f8      	bne.n	8010038 <APP_Init+0x1c>
    MIOS32_BOARD_J10_PinInit(pin, MIOS32_BOARD_PIN_MODE_INPUT_PD);
  }

  for (pin = 0; pin < BUTTON_ROWS - (16 - BUTTON_COLS); pin++) {
    MIOS32_BOARD_J5_PinInit(pin, MIOS32_BOARD_PIN_MODE_INPUT_PD);
 8010046:	2103      	movs	r1, #3
 8010048:	2000      	movs	r0, #0
 801004a:	f002 fa0b 	bl	8012464 <MIOS32_BOARD_J5_PinInit>
 801004e:	2103      	movs	r1, #3
 8010050:	2001      	movs	r0, #1
 8010052:	f002 fa07 	bl	8012464 <MIOS32_BOARD_J5_PinInit>
  }

  MIOS32_BOARD_J5_PinInit(LED_PIN, MIOS32_BOARD_PIN_MODE_OUTPUT_PP);
 8010056:	2002      	movs	r0, #2
 8010058:	2105      	movs	r1, #5
 801005a:	f002 fa03 	bl	8012464 <MIOS32_BOARD_J5_PinInit>
 801005e:	2300      	movs	r3, #0

  for (row = 0; row < BUTTON_ROWS; row++) {
      for (col = 0; col < BUTTON_COLS; col++) {
          button_state[row][col] = 0;
 8010060:	490a      	ldr	r1, [pc, #40]	; (801008c <APP_Init+0x70>)
 8010062:	2200      	movs	r2, #0
 8010064:	1858      	adds	r0, r3, r1
 8010066:	545a      	strb	r2, [r3, r1]
 8010068:	3302      	adds	r3, #2
    MIOS32_BOARD_J5_PinInit(pin, MIOS32_BOARD_PIN_MODE_INPUT_PD);
  }

  MIOS32_BOARD_J5_PinInit(LED_PIN, MIOS32_BOARD_PIN_MODE_OUTPUT_PP);

  for (row = 0; row < BUTTON_ROWS; row++) {
 801006a:	2b20      	cmp	r3, #32
      for (col = 0; col < BUTTON_COLS; col++) {
          button_state[row][col] = 0;
 801006c:	7042      	strb	r2, [r0, #1]
    MIOS32_BOARD_J5_PinInit(pin, MIOS32_BOARD_PIN_MODE_INPUT_PD);
  }

  MIOS32_BOARD_J5_PinInit(LED_PIN, MIOS32_BOARD_PIN_MODE_OUTPUT_PP);

  for (row = 0; row < BUTTON_ROWS; row++) {
 801006e:	d1f7      	bne.n	8010060 <APP_Init+0x44>
      for (col = 0; col < BUTTON_COLS; col++) {
          button_state[row][col] = 0;
      }
  }

  reset_encoders();  
 8010070:	f7ff ffc6 	bl	8010000 <reset_encoders>
 8010074:	4a06      	ldr	r2, [pc, #24]	; (8010090 <APP_Init+0x74>)
}

/////////////////////////////////////////////////////////////////////////////
// This hook is called after startup to initialize the application
/////////////////////////////////////////////////////////////////////////////
void APP_Init(void)
 8010076:	f102 0160 	add.w	r1, r2, #96	; 0x60
  }

  reset_encoders();  

  for (i = 0; i < NUM_LEDS; i++) {
    led_state[i][0] = 0; 
 801007a:	2000      	movs	r0, #0
 801007c:	7010      	strb	r0, [r2, #0]
    led_state[i][1] = 0;
 801007e:	7050      	strb	r0, [r2, #1]
    led_state[i][2] = 0;
 8010080:	7090      	strb	r0, [r2, #2]
 8010082:	3203      	adds	r2, #3
      }
  }

  reset_encoders();  

  for (i = 0; i < NUM_LEDS; i++) {
 8010084:	428a      	cmp	r2, r1
 8010086:	d1f8      	bne.n	801007a <APP_Init+0x5e>
    led_state[i][0] = 0; 
    led_state[i][1] = 0;
    led_state[i][2] = 0;
  }
}
 8010088:	bd10      	pop	{r4, pc}
 801008a:	bf00      	nop
 801008c:	20000630 	.word	0x20000630
 8010090:	200005b0 	.word	0x200005b0

08010094 <APP_Background>:


void APP_Background(void)
{
 8010094:	4770      	bx	lr

08010096 <APP_MIDI_NotifyPackage>:
}

void APP_MIDI_NotifyPackage(mios32_midi_port_t port, mios32_midi_package_t midi_package)
{
 8010096:	4770      	bx	lr

08010098 <ws2812_low>:
}

inline void ws2812_low() {
 8010098:	b508      	push	{r3, lr}
  MIOS32_BOARD_J5_PinSet(LED_PIN, 1);
 801009a:	2002      	movs	r0, #2
 801009c:	2101      	movs	r1, #1
 801009e:	f002 fa05 	bl	80124ac <MIOS32_BOARD_J5_PinSet>
asm volatile("nop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\t");
 80100a2:	bf00      	nop
 80100a4:	bf00      	nop
 80100a6:	bf00      	nop
 80100a8:	bf00      	nop
 80100aa:	bf00      	nop
 80100ac:	bf00      	nop
 80100ae:	bf00      	nop
 80100b0:	bf00      	nop
 80100b2:	bf00      	nop
 80100b4:	bf00      	nop
 80100b6:	bf00      	nop
 80100b8:	bf00      	nop
 80100ba:	bf00      	nop
 80100bc:	bf00      	nop
 80100be:	bf00      	nop
 80100c0:	bf00      	nop
 80100c2:	bf00      	nop
 80100c4:	bf00      	nop
 80100c6:	bf00      	nop
 80100c8:	bf00      	nop
 80100ca:	bf00      	nop
 80100cc:	bf00      	nop
 80100ce:	bf00      	nop
 80100d0:	bf00      	nop
 80100d2:	bf00      	nop
 80100d4:	bf00      	nop
 80100d6:	bf00      	nop
 80100d8:	bf00      	nop
 80100da:	bf00      	nop
 80100dc:	bf00      	nop
 80100de:	bf00      	nop
 80100e0:	bf00      	nop
 80100e2:	bf00      	nop
 80100e4:	bf00      	nop
 80100e6:	bf00      	nop
 80100e8:	bf00      	nop
 80100ea:	bf00      	nop
 80100ec:	bf00      	nop

  MIOS32_BOARD_J5_PinSet(LED_PIN, 0);
 80100ee:	2002      	movs	r0, #2
 80100f0:	2100      	movs	r1, #0
 80100f2:	f002 f9db 	bl	80124ac <MIOS32_BOARD_J5_PinSet>
asm volatile("nop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\t");
 80100f6:	bf00      	nop
 80100f8:	bf00      	nop
 80100fa:	bf00      	nop
 80100fc:	bf00      	nop
 80100fe:	bf00      	nop
 8010100:	bf00      	nop
 8010102:	bf00      	nop
 8010104:	bf00      	nop
 8010106:	bf00      	nop
 8010108:	bf00      	nop
 801010a:	bf00      	nop
 801010c:	bf00      	nop
 801010e:	bf00      	nop
 8010110:	bf00      	nop
 8010112:	bf00      	nop
 8010114:	bf00      	nop
 8010116:	bf00      	nop
 8010118:	bf00      	nop
 801011a:	bf00      	nop
 801011c:	bf00      	nop
 801011e:	bf00      	nop
 8010120:	bf00      	nop
 8010122:	bf00      	nop
 8010124:	bf00      	nop
 8010126:	bf00      	nop
 8010128:	bf00      	nop
 801012a:	bf00      	nop
 801012c:	bf00      	nop
 801012e:	bf00      	nop
 8010130:	bf00      	nop
 8010132:	bf00      	nop
 8010134:	bf00      	nop
 8010136:	bf00      	nop
 8010138:	bf00      	nop
 801013a:	bf00      	nop
 801013c:	bf00      	nop
 801013e:	bf00      	nop
 8010140:	bf00      	nop
 8010142:	bf00      	nop
 8010144:	bf00      	nop
 8010146:	bf00      	nop
 8010148:	bf00      	nop
 801014a:	bf00      	nop
 801014c:	bf00      	nop
 801014e:	bf00      	nop
 8010150:	bf00      	nop
 8010152:	bf00      	nop
 8010154:	bf00      	nop
 8010156:	bf00      	nop
 8010158:	bf00      	nop
 801015a:	bf00      	nop
 801015c:	bf00      	nop
 801015e:	bf00      	nop
 8010160:	bf00      	nop
 8010162:	bf00      	nop
 8010164:	bf00      	nop
 8010166:	bf00      	nop
 8010168:	bf00      	nop
 801016a:	bf00      	nop
 801016c:	bf00      	nop
 801016e:	bf00      	nop
 8010170:	bf00      	nop
 8010172:	bf00      	nop
 8010174:	bf00      	nop
 8010176:	bf00      	nop
 8010178:	bf00      	nop
 801017a:	bf00      	nop
 801017c:	bf00      	nop
 801017e:	bf00      	nop
 8010180:	bf00      	nop
 8010182:	bf00      	nop
 8010184:	bf00      	nop
 8010186:	bf00      	nop
 8010188:	bf00      	nop
 801018a:	bf00      	nop
 801018c:	bf00      	nop
 801018e:	bf00      	nop
 8010190:	bf00      	nop
 8010192:	bf00      	nop
 8010194:	bf00      	nop
 8010196:	bf00      	nop
 8010198:	bd08      	pop	{r3, pc}

0801019a <ws2812_high>:

}

inline void ws2812_high() {
 801019a:	b508      	push	{r3, lr}
  MIOS32_BOARD_J5_PinSet(LED_PIN, 1);
 801019c:	2002      	movs	r0, #2
 801019e:	2101      	movs	r1, #1
 80101a0:	f002 f984 	bl	80124ac <MIOS32_BOARD_J5_PinSet>
asm volatile("nop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\t");
 80101a4:	bf00      	nop
 80101a6:	bf00      	nop
 80101a8:	bf00      	nop
 80101aa:	bf00      	nop
 80101ac:	bf00      	nop
 80101ae:	bf00      	nop
 80101b0:	bf00      	nop
 80101b2:	bf00      	nop
 80101b4:	bf00      	nop
 80101b6:	bf00      	nop
 80101b8:	bf00      	nop
 80101ba:	bf00      	nop
 80101bc:	bf00      	nop
 80101be:	bf00      	nop
 80101c0:	bf00      	nop
 80101c2:	bf00      	nop
 80101c4:	bf00      	nop
 80101c6:	bf00      	nop
 80101c8:	bf00      	nop
 80101ca:	bf00      	nop
 80101cc:	bf00      	nop
 80101ce:	bf00      	nop
 80101d0:	bf00      	nop
 80101d2:	bf00      	nop
 80101d4:	bf00      	nop
 80101d6:	bf00      	nop
 80101d8:	bf00      	nop
 80101da:	bf00      	nop
 80101dc:	bf00      	nop
 80101de:	bf00      	nop
 80101e0:	bf00      	nop
 80101e2:	bf00      	nop
 80101e4:	bf00      	nop
 80101e6:	bf00      	nop
 80101e8:	bf00      	nop
 80101ea:	bf00      	nop
 80101ec:	bf00      	nop
 80101ee:	bf00      	nop
 80101f0:	bf00      	nop
 80101f2:	bf00      	nop
 80101f4:	bf00      	nop
 80101f6:	bf00      	nop
 80101f8:	bf00      	nop
 80101fa:	bf00      	nop
 80101fc:	bf00      	nop
 80101fe:	bf00      	nop
 8010200:	bf00      	nop
 8010202:	bf00      	nop
 8010204:	bf00      	nop
 8010206:	bf00      	nop
 8010208:	bf00      	nop
 801020a:	bf00      	nop
 801020c:	bf00      	nop
 801020e:	bf00      	nop
 8010210:	bf00      	nop
 8010212:	bf00      	nop
 8010214:	bf00      	nop
 8010216:	bf00      	nop
 8010218:	bf00      	nop
 801021a:	bf00      	nop
 801021c:	bf00      	nop
 801021e:	bf00      	nop
 8010220:	bf00      	nop
 8010222:	bf00      	nop
 8010224:	bf00      	nop
 8010226:	bf00      	nop
 8010228:	bf00      	nop
 801022a:	bf00      	nop
 801022c:	bf00      	nop
 801022e:	bf00      	nop
 8010230:	bf00      	nop
 8010232:	bf00      	nop
 8010234:	bf00      	nop
 8010236:	bf00      	nop
 8010238:	bf00      	nop
 801023a:	bf00      	nop

  MIOS32_BOARD_J5_PinSet(LED_PIN, 0);
 801023c:	2002      	movs	r0, #2
 801023e:	2100      	movs	r1, #0
 8010240:	f002 f934 	bl	80124ac <MIOS32_BOARD_J5_PinSet>
asm volatile("nop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\t");
 8010244:	bf00      	nop
 8010246:	bf00      	nop
 8010248:	bf00      	nop
 801024a:	bf00      	nop
 801024c:	bf00      	nop
 801024e:	bf00      	nop
 8010250:	bf00      	nop
 8010252:	bf00      	nop
 8010254:	bf00      	nop
 8010256:	bf00      	nop
 8010258:	bf00      	nop
 801025a:	bf00      	nop
 801025c:	bf00      	nop
 801025e:	bf00      	nop
 8010260:	bf00      	nop
 8010262:	bf00      	nop
 8010264:	bf00      	nop
 8010266:	bf00      	nop
 8010268:	bf00      	nop
 801026a:	bf00      	nop
 801026c:	bf00      	nop
 801026e:	bf00      	nop
 8010270:	bf00      	nop
 8010272:	bf00      	nop
 8010274:	bf00      	nop
 8010276:	bf00      	nop
 8010278:	bf00      	nop
 801027a:	bf00      	nop
 801027c:	bf00      	nop
 801027e:	bf00      	nop
 8010280:	bf00      	nop
 8010282:	bf00      	nop
 8010284:	bf00      	nop
 8010286:	bf00      	nop
 8010288:	bf00      	nop
 801028a:	bf00      	nop
 801028c:	bf00      	nop
 801028e:	bf00      	nop
 8010290:	bf00      	nop
 8010292:	bf00      	nop
 8010294:	bf00      	nop
 8010296:	bf00      	nop
 8010298:	bf00      	nop
 801029a:	bd08      	pop	{r3, pc}

0801029c <ws2812_shiftOut>:
}

inline void ws2812_shiftOut(u8 a) {
 801029c:	b538      	push	{r3, r4, r5, lr}
 801029e:	4605      	mov	r5, r0
  int i;
  for (i = 7; i >= 0; i--) {
 80102a0:	2407      	movs	r4, #7
    if (a & (1 << i)) {
 80102a2:	fa45 f304 	asr.w	r3, r5, r4
 80102a6:	07db      	lsls	r3, r3, #31
 80102a8:	d502      	bpl.n	80102b0 <ws2812_shiftOut+0x14>
      ws2812_high();
 80102aa:	f7ff ff76 	bl	801019a <ws2812_high>
 80102ae:	e001      	b.n	80102b4 <ws2812_shiftOut+0x18>
    } else {
      ws2812_low();
 80102b0:	f7ff fef2 	bl	8010098 <ws2812_low>
asm volatile("nop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\tnop\n\t");
}

inline void ws2812_shiftOut(u8 a) {
  int i;
  for (i = 7; i >= 0; i--) {
 80102b4:	f114 34ff 	adds.w	r4, r4, #4294967295
 80102b8:	d2f3      	bcs.n	80102a2 <ws2812_shiftOut+0x6>
      ws2812_high();
    } else {
      ws2812_low();
    }
  }
}
 80102ba:	bd38      	pop	{r3, r4, r5, pc}

080102bc <update_encoder_state>:
    ws2812_shiftOut(led_state[i][2]);
  }
  MIOS32_BOARD_J10_PinSet(LED_PIN, 0);
}

void update_encoder_state(u8 encoder, u8 ov, u8 nv) {
 80102bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    u8 cw[] = { 2, 0, 3, 1 };  // 0 -> 2, 1 -> 3, 2 -> 3, 3 -> 1 sequence: 0 2 3 1
 80102be:	4d1a      	ldr	r5, [pc, #104]	; (8010328 <update_encoder_state+0x6c>)
    ws2812_shiftOut(led_state[i][2]);
  }
  MIOS32_BOARD_J10_PinSet(LED_PIN, 0);
}

void update_encoder_state(u8 encoder, u8 ov, u8 nv) {
 80102c0:	4604      	mov	r4, r0
    u8 cw[] = { 2, 0, 3, 1 };  // 0 -> 2, 1 -> 3, 2 -> 3, 3 -> 1 sequence: 0 2 3 1
 80102c2:	f855 0b04 	ldr.w	r0, [r5], #4
    ws2812_shiftOut(led_state[i][2]);
  }
  MIOS32_BOARD_J10_PinSet(LED_PIN, 0);
}

void update_encoder_state(u8 encoder, u8 ov, u8 nv) {
 80102c6:	460e      	mov	r6, r1
 80102c8:	4613      	mov	r3, r2
    u8 cw[] = { 2, 0, 3, 1 };  // 0 -> 2, 1 -> 3, 2 -> 3, 3 -> 1 sequence: 0 2 3 1
    u8 ccw[] = { 1, 3, 0, 2 }; // 0 -> 1, 1 -> 3, 2 -> 0, 3 -> 2 sequence: 0 1 3 2
    if (cw[ov] == nv) {
 80102ca:	aa02      	add	r2, sp, #8
  }
  MIOS32_BOARD_J10_PinSet(LED_PIN, 0);
}

void update_encoder_state(u8 encoder, u8 ov, u8 nv) {
    u8 cw[] = { 2, 0, 3, 1 };  // 0 -> 2, 1 -> 3, 2 -> 3, 3 -> 1 sequence: 0 2 3 1
 80102cc:	9000      	str	r0, [sp, #0]
    u8 ccw[] = { 1, 3, 0, 2 }; // 0 -> 1, 1 -> 3, 2 -> 0, 3 -> 2 sequence: 0 1 3 2
    if (cw[ov] == nv) {
 80102ce:	1990      	adds	r0, r2, r6
  MIOS32_BOARD_J10_PinSet(LED_PIN, 0);
}

void update_encoder_state(u8 encoder, u8 ov, u8 nv) {
    u8 cw[] = { 2, 0, 3, 1 };  // 0 -> 2, 1 -> 3, 2 -> 3, 3 -> 1 sequence: 0 2 3 1
    u8 ccw[] = { 1, 3, 0, 2 }; // 0 -> 1, 1 -> 3, 2 -> 0, 3 -> 2 sequence: 0 1 3 2
 80102d0:	6829      	ldr	r1, [r5, #0]
    if (cw[ov] == nv) {
 80102d2:	f810 5c08 	ldrb.w	r5, [r0, #-8]
  MIOS32_BOARD_J10_PinSet(LED_PIN, 0);
}

void update_encoder_state(u8 encoder, u8 ov, u8 nv) {
    u8 cw[] = { 2, 0, 3, 1 };  // 0 -> 2, 1 -> 3, 2 -> 3, 3 -> 1 sequence: 0 2 3 1
    u8 ccw[] = { 1, 3, 0, 2 }; // 0 -> 1, 1 -> 3, 2 -> 0, 3 -> 2 sequence: 0 1 3 2
 80102d6:	9101      	str	r1, [sp, #4]
    if (cw[ov] == nv) {
 80102d8:	429d      	cmp	r5, r3
 80102da:	4d14      	ldr	r5, [pc, #80]	; (801032c <update_encoder_state+0x70>)
 80102dc:	d103      	bne.n	80102e6 <update_encoder_state+0x2a>
        encoder_state[encoder]++;
 80102de:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 80102e2:	1c42      	adds	r2, r0, #1
 80102e4:	e006      	b.n	80102f4 <update_encoder_state+0x38>
    } else if (ccw[ov] == nv) {
 80102e6:	f810 1c04 	ldrb.w	r1, [r0, #-4]
 80102ea:	4299      	cmp	r1, r3
 80102ec:	d105      	bne.n	80102fa <update_encoder_state+0x3e>
        encoder_state[encoder]--;
 80102ee:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80102f2:	1e5a      	subs	r2, r3, #1
 80102f4:	f845 2024 	str.w	r2, [r5, r4, lsl #2]
 80102f8:	e004      	b.n	8010304 <update_encoder_state+0x48>
    } else {
        MIOS32_MIDI_SendDebugMessage("encode: %d: ov = %x, nv = %x\n", encoder, ov, nv);
 80102fa:	480d      	ldr	r0, [pc, #52]	; (8010330 <update_encoder_state+0x74>)
 80102fc:	4621      	mov	r1, r4
 80102fe:	4632      	mov	r2, r6
 8010300:	f001 f90a 	bl	8011518 <MIOS32_MIDI_SendDebugMessage>
    }
    if (encoder_state[encoder] >= 127) encoder_state[encoder] = 127;
 8010304:	f855 1024 	ldr.w	r1, [r5, r4, lsl #2]
 8010308:	297e      	cmp	r1, #126	; 0x7e
 801030a:	dd03      	ble.n	8010314 <update_encoder_state+0x58>
 801030c:	4b07      	ldr	r3, [pc, #28]	; (801032c <update_encoder_state+0x70>)
 801030e:	227f      	movs	r2, #127	; 0x7f
 8010310:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    if (encoder_state[encoder] < 0) encoder_state[encoder] = 0;
 8010314:	4805      	ldr	r0, [pc, #20]	; (801032c <update_encoder_state+0x70>)
 8010316:	f850 1024 	ldr.w	r1, [r0, r4, lsl #2]
 801031a:	2900      	cmp	r1, #0
 801031c:	da02      	bge.n	8010324 <update_encoder_state+0x68>
 801031e:	2200      	movs	r2, #0
 8010320:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
}
 8010324:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 8010326:	bf00      	nop
 8010328:	08017c14 	.word	0x08017c14
 801032c:	20000610 	.word	0x20000610
 8010330:	08017c1f 	.word	0x08017c1f

08010334 <notify_button>:

void notify_button(int row, int col, int old_val, int new_val) {
    if (old_val ^ new_val) {
 8010334:	429a      	cmp	r2, r3
    }
    if (encoder_state[encoder] >= 127) encoder_state[encoder] = 127;
    if (encoder_state[encoder] < 0) encoder_state[encoder] = 0;
}

void notify_button(int row, int col, int old_val, int new_val) {
 8010336:	b570      	push	{r4, r5, r6, lr}
 8010338:	4606      	mov	r6, r0
 801033a:	460d      	mov	r5, r1
 801033c:	461c      	mov	r4, r3
    if (old_val ^ new_val) {
 801033e:	d013      	beq.n	8010368 <notify_button+0x34>
        MIOS32_MIDI_SendDebugMessage("press on (%d, %d): %d\n", row, col, new_val);
 8010340:	4631      	mov	r1, r6
 8010342:	462a      	mov	r2, r5
 8010344:	4809      	ldr	r0, [pc, #36]	; (801036c <notify_button+0x38>)
 8010346:	f001 f8e7 	bl	8011518 <MIOS32_MIDI_SendDebugMessage>
        MIOS32_MIDI_SendNoteOn(DEFAULT, Chn1, (col * BUTTON_ROWS + row + 24) & 0x7f, new_val ? 0x7f : 0x0);
 801034a:	3618      	adds	r6, #24
 801034c:	2000      	movs	r0, #0
 801034e:	eb06 1205 	add.w	r2, r6, r5, lsl #4
 8010352:	4601      	mov	r1, r0
 8010354:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8010358:	4284      	cmp	r4, r0
 801035a:	bf14      	ite	ne
 801035c:	237f      	movne	r3, #127	; 0x7f
 801035e:	4603      	moveq	r3, r0
    }
}
 8010360:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
}

void notify_button(int row, int col, int old_val, int new_val) {
    if (old_val ^ new_val) {
        MIOS32_MIDI_SendDebugMessage("press on (%d, %d): %d\n", row, col, new_val);
        MIOS32_MIDI_SendNoteOn(DEFAULT, Chn1, (col * BUTTON_ROWS + row + 24) & 0x7f, new_val ? 0x7f : 0x0);
 8010364:	f000 bfab 	b.w	80112be <MIOS32_MIDI_SendNoteOn>
 8010368:	bd70      	pop	{r4, r5, r6, pc}
 801036a:	bf00      	nop
 801036c:	08017c3d 	.word	0x08017c3d

08010370 <notify_encoder>:
    }
}

void notify_encoder(int encoder, int old_val, int new_val)
{
    if (old_val ^ new_val) {
 8010370:	4291      	cmp	r1, r2
        MIOS32_MIDI_SendNoteOn(DEFAULT, Chn1, (col * BUTTON_ROWS + row + 24) & 0x7f, new_val ? 0x7f : 0x0);
    }
}

void notify_encoder(int encoder, int old_val, int new_val)
{
 8010372:	b570      	push	{r4, r5, r6, lr}
 8010374:	4604      	mov	r4, r0
    if (old_val ^ new_val) {
 8010376:	d011      	beq.n	801039c <notify_encoder+0x2c>
        update_encoder_state(encoder, old_val, new_val);
 8010378:	b2c5      	uxtb	r5, r0
 801037a:	4628      	mov	r0, r5
 801037c:	b2c9      	uxtb	r1, r1
 801037e:	b2d2      	uxtb	r2, r2
 8010380:	f7ff ff9c 	bl	80102bc <update_encoder_state>
        MIOS32_MIDI_SendCC(DEFAULT, Chn1, 0x10 + encoder, encoder_state[encoder]);
 8010384:	4b06      	ldr	r3, [pc, #24]	; (80103a0 <notify_encoder+0x30>)
 8010386:	f105 0210 	add.w	r2, r5, #16
 801038a:	2000      	movs	r0, #0
 801038c:	f813 3024 	ldrb.w	r3, [r3, r4, lsl #2]
 8010390:	4601      	mov	r1, r0
 8010392:	b2d2      	uxtb	r2, r2
    }
}
 8010394:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

void notify_encoder(int encoder, int old_val, int new_val)
{
    if (old_val ^ new_val) {
        update_encoder_state(encoder, old_val, new_val);
        MIOS32_MIDI_SendCC(DEFAULT, Chn1, 0x10 + encoder, encoder_state[encoder]);
 8010398:	f000 bf95 	b.w	80112c6 <MIOS32_MIDI_SendCC>
 801039c:	bd70      	pop	{r4, r5, r6, pc}
 801039e:	bf00      	nop
 80103a0:	20000610 	.word	0x20000610

080103a4 <setColumns>:
    }
}

void setColumns(u8 value) {
 80103a4:	b510      	push	{r4, lr}
 80103a6:	4604      	mov	r4, r0
  int i;
  for (i = 0; i < BUTTON_COLS; i++) {
    MIOS32_BOARD_J10_PinSet(i, (value & (1 << i)) ? 1 : 0);
 80103a8:	f004 0101 	and.w	r1, r4, #1
 80103ac:	2000      	movs	r0, #0
 80103ae:	f002 f8e1 	bl	8012574 <MIOS32_BOARD_J10_PinSet>
 80103b2:	2001      	movs	r0, #1
 80103b4:	f3c4 0140 	ubfx	r1, r4, #1, #1
  }
}
 80103b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void setColumns(u8 value) {
  int i;
  for (i = 0; i < BUTTON_COLS; i++) {
    MIOS32_BOARD_J10_PinSet(i, (value & (1 << i)) ? 1 : 0);
 80103bc:	f002 b8da 	b.w	8012574 <MIOS32_BOARD_J10_PinSet>

080103c0 <getRows>:
  }
}

void getRows(u8 *out) {
 80103c0:	b538      	push	{r3, r4, r5, lr}
 80103c2:	4605      	mov	r5, r0
    int pin;
    int out_index = 0;
    for (pin = BUTTON_COLS; pin < 16; pin++) {
 80103c4:	2402      	movs	r4, #2
        out[out_index++] = MIOS32_BOARD_J10_PinGet(pin);
 80103c6:	b2e0      	uxtb	r0, r4
 80103c8:	f002 f8f6 	bl	80125b8 <MIOS32_BOARD_J10_PinGet>
  for (i = 0; i < BUTTON_COLS; i++) {
    MIOS32_BOARD_J10_PinSet(i, (value & (1 << i)) ? 1 : 0);
  }
}

void getRows(u8 *out) {
 80103cc:	192b      	adds	r3, r5, r4
    int pin;
    int out_index = 0;
    for (pin = BUTTON_COLS; pin < 16; pin++) {
 80103ce:	3401      	adds	r4, #1
 80103d0:	2c10      	cmp	r4, #16
        out[out_index++] = MIOS32_BOARD_J10_PinGet(pin);
 80103d2:	f803 0c02 	strb.w	r0, [r3, #-2]
}

void getRows(u8 *out) {
    int pin;
    int out_index = 0;
    for (pin = BUTTON_COLS; pin < 16; pin++) {
 80103d6:	d1f6      	bne.n	80103c6 <getRows+0x6>
        out[out_index++] = MIOS32_BOARD_J10_PinGet(pin);
    }
    for (pin = 0; pin < BUTTON_ROWS - (16 - BUTTON_COLS); pin++) {
        out[out_index++] = MIOS32_BOARD_J5_PinGet(pin);
 80103d8:	2000      	movs	r0, #0
 80103da:	f002 f889 	bl	80124f0 <MIOS32_BOARD_J5_PinGet>
 80103de:	73a8      	strb	r0, [r5, #14]
 80103e0:	2001      	movs	r0, #1
 80103e2:	f002 f885 	bl	80124f0 <MIOS32_BOARD_J5_PinGet>
 80103e6:	73e8      	strb	r0, [r5, #15]
 80103e8:	bd38      	pop	{r3, r4, r5, pc}

080103ea <interpolate>:
    }
}

void interpolate(u8 *out, u8 *a, u8 *b, int s) {
 80103ea:	b5f0      	push	{r4, r5, r6, r7, lr}
    int i;
    for (i = 0; i < 3; i++) {
 80103ec:	2400      	movs	r4, #0
        out[i] = (a[i] * (128 - s) + b[i] * s)/128;
 80103ee:	5d16      	ldrb	r6, [r2, r4]
 80103f0:	5d0f      	ldrb	r7, [r1, r4]
 80103f2:	435e      	muls	r6, r3
 80103f4:	f1c3 0580 	rsb	r5, r3, #128	; 0x80
 80103f8:	fb05 6507 	mla	r5, r5, r7, r6
 80103fc:	2680      	movs	r6, #128	; 0x80
 80103fe:	fb95 f5f6 	sdiv	r5, r5, r6
 8010402:	5505      	strb	r5, [r0, r4]
    }
}

void interpolate(u8 *out, u8 *a, u8 *b, int s) {
    int i;
    for (i = 0; i < 3; i++) {
 8010404:	3401      	adds	r4, #1
 8010406:	2c03      	cmp	r4, #3
 8010408:	d1f1      	bne.n	80103ee <interpolate+0x4>
        out[i] = (a[i] * (128 - s) + b[i] * s)/128;
    }
}
 801040a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801040c <set_color_by_encoder_value>:

void set_color_by_encoder_value(u8 *c, int v) {
 801040c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801040e:	460b      	mov	r3, r1
    u8 blue[] = { 0, 0, 64 };
 8010410:	2140      	movs	r1, #64	; 0x40
 8010412:	f88d 1006 	strb.w	r1, [sp, #6]
    u8 white[] = { 32, 32, 32 };
 8010416:	490f      	ldr	r1, [pc, #60]	; (8010454 <set_color_by_encoder_value+0x48>)
 8010418:	880c      	ldrh	r4, [r1, #0]
 801041a:	7889      	ldrb	r1, [r1, #2]
 801041c:	f8ad 4008 	strh.w	r4, [sp, #8]
        out[i] = (a[i] * (128 - s) + b[i] * s)/128;
    }
}

void set_color_by_encoder_value(u8 *c, int v) {
    u8 blue[] = { 0, 0, 64 };
 8010420:	2200      	movs	r2, #0
    u8 white[] = { 32, 32, 32 };
 8010422:	f88d 100a 	strb.w	r1, [sp, #10]
    u8 red[] = { 0, 128, 0 };
 8010426:	2180      	movs	r1, #128	; 0x80
    if (v <= 64) {
 8010428:	2b40      	cmp	r3, #64	; 0x40
        out[i] = (a[i] * (128 - s) + b[i] * s)/128;
    }
}

void set_color_by_encoder_value(u8 *c, int v) {
    u8 blue[] = { 0, 0, 64 };
 801042a:	f88d 2004 	strb.w	r2, [sp, #4]
 801042e:	f88d 2005 	strb.w	r2, [sp, #5]
    u8 white[] = { 32, 32, 32 };
    u8 red[] = { 0, 128, 0 };
 8010432:	f88d 200c 	strb.w	r2, [sp, #12]
 8010436:	f88d 100d 	strb.w	r1, [sp, #13]
 801043a:	f88d 200e 	strb.w	r2, [sp, #14]
    if (v <= 64) {
 801043e:	dc02      	bgt.n	8010446 <set_color_by_encoder_value+0x3a>
        interpolate(c, blue, white, v * 2);
 8010440:	a901      	add	r1, sp, #4
 8010442:	aa02      	add	r2, sp, #8
 8010444:	e002      	b.n	801044c <set_color_by_encoder_value+0x40>
    } else {
        interpolate(c, white, red, (v - 64) * 2);
 8010446:	3b40      	subs	r3, #64	; 0x40
 8010448:	a902      	add	r1, sp, #8
 801044a:	aa03      	add	r2, sp, #12
 801044c:	005b      	lsls	r3, r3, #1
 801044e:	f7ff ffcc 	bl	80103ea <interpolate>
    }
}
 8010452:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
 8010454:	08017c1c 	.word	0x08017c1c

08010458 <color_leds_by_encoder_state>:

void color_leds_by_encoder_state() {
 8010458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801045c:	2400      	movs	r4, #0
    int i, x;
    for (i = 0; i < NUM_ENCODERS; i++) {
 801045e:	4625      	mov	r5, r4
        // 0 -> 0 % n, n
        // 1 -> n*2 * 1, n + 1
        // 2 -> n*2 * 2,
        // 3 -> n*2 * 3, 
        if (i < 4) {
 8010460:	2d03      	cmp	r5, #3
 8010462:	f04f 0803 	mov.w	r8, #3
 8010466:	4f0f      	ldr	r7, [pc, #60]	; (80104a4 <color_leds_by_encoder_state+0x4c>)
 8010468:	4e0f      	ldr	r6, [pc, #60]	; (80104a8 <color_leds_by_encoder_state+0x50>)
 801046a:	dc06      	bgt.n	801047a <color_leds_by_encoder_state+0x22>
            x = (BUTTON_COLS * 2) * i;
            set_color_by_encoder_value(led_state[x], encoder_state[i]);
 801046c:	5931      	ldr	r1, [r6, r4]
 801046e:	fb08 7004 	mla	r0, r8, r4, r7
 8010472:	f7ff ffcb 	bl	801040c <set_color_by_encoder_value>
    } else {
        interpolate(c, white, red, (v - 64) * 2);
    }
}

void color_leds_by_encoder_state() {
 8010476:	1ca1      	adds	r1, r4, #2
 8010478:	e008      	b.n	801048c <color_leds_by_encoder_state+0x34>
 801047a:	f1a4 000f 	sub.w	r0, r4, #15
            x = (BUTTON_COLS * 2) * i;
            set_color_by_encoder_value(led_state[x], encoder_state[i]);
            set_color_by_encoder_value(led_state[x + BUTTON_COLS], encoder_state[i]);
        } else {
            x = ((BUTTON_COLS * 2) * (i - 4)) + 1;
            set_color_by_encoder_value(led_state[x], encoder_state[i]);
 801047e:	5931      	ldr	r1, [r6, r4]
 8010480:	fb08 7000 	mla	r0, r8, r0, r7
 8010484:	f7ff ffc2 	bl	801040c <set_color_by_encoder_value>
    } else {
        interpolate(c, white, red, (v - 64) * 2);
    }
}

void color_leds_by_encoder_state() {
 8010488:	f1a4 010d 	sub.w	r1, r4, #13
            set_color_by_encoder_value(led_state[x], encoder_state[i]);
            set_color_by_encoder_value(led_state[x + BUTTON_COLS], encoder_state[i]);
        } else {
            x = ((BUTTON_COLS * 2) * (i - 4)) + 1;
            set_color_by_encoder_value(led_state[x], encoder_state[i]);
            set_color_by_encoder_value(led_state[x + BUTTON_COLS], encoder_state[i]);
 801048c:	fb08 7001 	mla	r0, r8, r1, r7
    }
}

void color_leds_by_encoder_state() {
    int i, x;
    for (i = 0; i < NUM_ENCODERS; i++) {
 8010490:	3501      	adds	r5, #1
            set_color_by_encoder_value(led_state[x], encoder_state[i]);
            set_color_by_encoder_value(led_state[x + BUTTON_COLS], encoder_state[i]);
        } else {
            x = ((BUTTON_COLS * 2) * (i - 4)) + 1;
            set_color_by_encoder_value(led_state[x], encoder_state[i]);
            set_color_by_encoder_value(led_state[x + BUTTON_COLS], encoder_state[i]);
 8010492:	5931      	ldr	r1, [r6, r4]
 8010494:	f7ff ffba 	bl	801040c <set_color_by_encoder_value>
 8010498:	3404      	adds	r4, #4
    }
}

void color_leds_by_encoder_state() {
    int i, x;
    for (i = 0; i < NUM_ENCODERS; i++) {
 801049a:	2d08      	cmp	r5, #8
 801049c:	d1e0      	bne.n	8010460 <color_leds_by_encoder_state+0x8>
            x = ((BUTTON_COLS * 2) * (i - 4)) + 1;
            set_color_by_encoder_value(led_state[x], encoder_state[i]);
            set_color_by_encoder_value(led_state[x + BUTTON_COLS], encoder_state[i]);
        }
    }
}
 801049e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104a2:	bf00      	nop
 80104a4:	200005b0 	.word	0x200005b0
 80104a8:	20000610 	.word	0x20000610

080104ac <APP_Tick>:
    return (a ? 2 : 0) | (b ? 1 : 0);
}

int time_ = 0;
void APP_Tick()
{
 80104ac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    int col, row;
    u8 rows_out[BUTTON_ROWS];

    if (time_ % 10 == 0) {
 80104b0:	4b37      	ldr	r3, [pc, #220]	; (8010590 <APP_Tick+0xe4>)
 80104b2:	681a      	ldr	r2, [r3, #0]
 80104b4:	200a      	movs	r0, #10
 80104b6:	fb92 f1f0 	sdiv	r1, r2, r0
 80104ba:	fb00 2411 	mls	r4, r0, r1, r2
 80104be:	b994      	cbnz	r4, 80104e6 <APP_Tick+0x3a>
 80104c0:	4e34      	ldr	r6, [pc, #208]	; (8010594 <APP_Tick+0xe8>)
u8 encoder_bits(u8 a, u8 b) {
    return (a ? 2 : 0) | (b ? 1 : 0);
}

int time_ = 0;
void APP_Tick()
 80104c2:	f106 0560 	add.w	r5, r6, #96	; 0x60
}

void TASK_LED(void *p) {
  int i;
  for (i = 0; i < NUM_LEDS; i++) {
    ws2812_shiftOut(led_state[i][0]);
 80104c6:	7830      	ldrb	r0, [r6, #0]
 80104c8:	f7ff fee8 	bl	801029c <ws2812_shiftOut>
    ws2812_shiftOut(led_state[i][1]);
 80104cc:	7870      	ldrb	r0, [r6, #1]
 80104ce:	f7ff fee5 	bl	801029c <ws2812_shiftOut>
    ws2812_shiftOut(led_state[i][2]);
 80104d2:	78b0      	ldrb	r0, [r6, #2]
 80104d4:	3603      	adds	r6, #3
 80104d6:	f7ff fee1 	bl	801029c <ws2812_shiftOut>
  }
}

void TASK_LED(void *p) {
  int i;
  for (i = 0; i < NUM_LEDS; i++) {
 80104da:	42ae      	cmp	r6, r5
 80104dc:	d1f3      	bne.n	80104c6 <APP_Tick+0x1a>
    ws2812_shiftOut(led_state[i][0]);
    ws2812_shiftOut(led_state[i][1]);
    ws2812_shiftOut(led_state[i][2]);
  }
  MIOS32_BOARD_J10_PinSet(LED_PIN, 0);
 80104de:	2002      	movs	r0, #2
 80104e0:	2100      	movs	r1, #0
 80104e2:	f002 f847 	bl	8012574 <MIOS32_BOARD_J10_PinSet>
    return (a ? 2 : 0) | (b ? 1 : 0);
}

int time_ = 0;
void APP_Tick()
{
 80104e6:	2500      	movs	r5, #0
    if (time_ % 10 == 0) {
        TASK_LED(NULL);
    }

	for (col = 0; col < BUTTON_COLS; col++) {
        setColumns(1 << col);
 80104e8:	2701      	movs	r7, #1
 80104ea:	fa07 f705 	lsl.w	r7, r7, r5
 80104ee:	b2f8      	uxtb	r0, r7
 80104f0:	f7ff ff58 	bl	80103a4 <setColumns>

        MIOS32_DELAY_Wait_uS(100); //TODO fine tune to save time
 80104f4:	2064      	movs	r0, #100	; 0x64
 80104f6:	f002 f8d5 	bl	80126a4 <MIOS32_DELAY_Wait_uS>

        getRows(rows_out);
 80104fa:	4668      	mov	r0, sp
 80104fc:	f7ff ff60 	bl	80103c0 <getRows>
u8 encoder_bits(u8 a, u8 b) {
    return (a ? 2 : 0) | (b ? 1 : 0);
}

int time_ = 0;
void APP_Tick()
 8010500:	4b25      	ldr	r3, [pc, #148]	; (8010598 <APP_Tick+0xec>)
 8010502:	ea4f 0885 	mov.w	r8, r5, lsl #2
 8010506:	18ee      	adds	r6, r5, r3

        MIOS32_DELAY_Wait_uS(100); //TODO fine tune to save time

        getRows(rows_out);

        for (row = 0; row < 8; row += 2) { // encoders
 8010508:	2400      	movs	r4, #0
u8 encoder_bits(u8 a, u8 b) {
    return (a ? 2 : 0) | (b ? 1 : 0);
}

int time_ = 0;
void APP_Tick()
 801050a:	a800      	add	r0, sp, #0
 801050c:	1907      	adds	r7, r0, r4
        }
    }
}

u8 encoder_bits(u8 a, u8 b) {
    return (a ? 2 : 0) | (b ? 1 : 0);
 801050e:	7832      	ldrb	r2, [r6, #0]
 8010510:	787b      	ldrb	r3, [r7, #1]
        MIOS32_DELAY_Wait_uS(100); //TODO fine tune to save time

        getRows(rows_out);

        for (row = 0; row < 8; row += 2) { // encoders
            u8 old_val = encoder_bits(button_state[row + 1][col], button_state[row][col]);
 8010512:	f816 ec02 	ldrb.w	lr, [r6, #-2]
        }
    }
}

u8 encoder_bits(u8 a, u8 b) {
    return (a ? 2 : 0) | (b ? 1 : 0);
 8010516:	2a00      	cmp	r2, #0
 8010518:	bf14      	ite	ne
 801051a:	2102      	movne	r1, #2
 801051c:	2100      	moveq	r1, #0

        getRows(rows_out);

        for (row = 0; row < 8; row += 2) { // encoders
            u8 old_val = encoder_bits(button_state[row + 1][col], button_state[row][col]);
            u8 new_val = encoder_bits(rows_out[row + 1], rows_out[row]);
 801051e:	f81d 2004 	ldrb.w	r2, [sp, r4]
        }
    }
}

u8 encoder_bits(u8 a, u8 b) {
    return (a ? 2 : 0) | (b ? 1 : 0);
 8010522:	2b00      	cmp	r3, #0
 8010524:	bf14      	ite	ne
 8010526:	2302      	movne	r3, #2
 8010528:	2300      	moveq	r3, #0

        for (row = 0; row < 8; row += 2) { // encoders
            u8 old_val = encoder_bits(button_state[row + 1][col], button_state[row][col]);
            u8 new_val = encoder_bits(rows_out[row + 1], rows_out[row]);

            notify_encoder(col * 4 + (row / 2), old_val, new_val);
 801052a:	eb08 0064 	add.w	r0, r8, r4, asr #1
 801052e:	f1be 0f00 	cmp.w	lr, #0
 8010532:	bf18      	it	ne
 8010534:	f041 0101 	orrne.w	r1, r1, #1
 8010538:	2a00      	cmp	r2, #0
 801053a:	bf0c      	ite	eq
 801053c:	461a      	moveq	r2, r3
 801053e:	f043 0201 	orrne.w	r2, r3, #1
 8010542:	f7ff ff15 	bl	8010370 <notify_encoder>

            button_state[row][col] = rows_out[row];
 8010546:	f81d 1004 	ldrb.w	r1, [sp, r4]
            button_state[row + 1][col] = rows_out[row + 1];
 801054a:	7878      	ldrb	r0, [r7, #1]
            u8 old_val = encoder_bits(button_state[row + 1][col], button_state[row][col]);
            u8 new_val = encoder_bits(rows_out[row + 1], rows_out[row]);

            notify_encoder(col * 4 + (row / 2), old_val, new_val);

            button_state[row][col] = rows_out[row];
 801054c:	f806 1c02 	strb.w	r1, [r6, #-2]

        MIOS32_DELAY_Wait_uS(100); //TODO fine tune to save time

        getRows(rows_out);

        for (row = 0; row < 8; row += 2) { // encoders
 8010550:	3402      	adds	r4, #2
 8010552:	2c08      	cmp	r4, #8
            u8 new_val = encoder_bits(rows_out[row + 1], rows_out[row]);

            notify_encoder(col * 4 + (row / 2), old_val, new_val);

            button_state[row][col] = rows_out[row];
            button_state[row + 1][col] = rows_out[row + 1];
 8010554:	f806 0b04 	strb.w	r0, [r6], #4

        MIOS32_DELAY_Wait_uS(100); //TODO fine tune to save time

        getRows(rows_out);

        for (row = 0; row < 8; row += 2) { // encoders
 8010558:	d1d7      	bne.n	801050a <APP_Tick+0x5e>
u8 encoder_bits(u8 a, u8 b) {
    return (a ? 2 : 0) | (b ? 1 : 0);
}

int time_ = 0;
void APP_Tick()
 801055a:	4e10      	ldr	r6, [pc, #64]	; (801059c <APP_Tick+0xf0>)
            button_state[row][col] = rows_out[row];
            button_state[row + 1][col] = rows_out[row + 1];
        }
        for (row = 8; row < 16; row++) { // buttons
            u8 old_val = button_state[row][col];
            u8 new_val = rows_out[row];
 801055c:	f81d 7004 	ldrb.w	r7, [sp, r4]
u8 encoder_bits(u8 a, u8 b) {
    return (a ? 2 : 0) | (b ? 1 : 0);
}

int time_ = 0;
void APP_Tick()
 8010560:	1976      	adds	r6, r6, r5
        }
        for (row = 8; row < 16; row++) { // buttons
            u8 old_val = button_state[row][col];
            u8 new_val = rows_out[row];

            notify_button(row, col, old_val, new_val);
 8010562:	4620      	mov	r0, r4
 8010564:	f816 2014 	ldrb.w	r2, [r6, r4, lsl #1]
 8010568:	4629      	mov	r1, r5
 801056a:	463b      	mov	r3, r7
 801056c:	f7ff fee2 	bl	8010334 <notify_button>

            button_state[row][col] = new_val;
 8010570:	f806 7014 	strb.w	r7, [r6, r4, lsl #1]
            notify_encoder(col * 4 + (row / 2), old_val, new_val);

            button_state[row][col] = rows_out[row];
            button_state[row + 1][col] = rows_out[row + 1];
        }
        for (row = 8; row < 16; row++) { // buttons
 8010574:	3401      	adds	r4, #1
 8010576:	2c10      	cmp	r4, #16
 8010578:	d1ef      	bne.n	801055a <APP_Tick+0xae>

    if (time_ % 10 == 0) {
        TASK_LED(NULL);
    }

	for (col = 0; col < BUTTON_COLS; col++) {
 801057a:	3501      	adds	r5, #1
 801057c:	2d02      	cmp	r5, #2
 801057e:	d1b3      	bne.n	80104e8 <APP_Tick+0x3c>

            button_state[row][col] = new_val;
        }
    }

    color_leds_by_encoder_state();
 8010580:	f7ff ff6a 	bl	8010458 <color_leds_by_encoder_state>
    time_++;
 8010584:	4b02      	ldr	r3, [pc, #8]	; (8010590 <APP_Tick+0xe4>)
 8010586:	681a      	ldr	r2, [r3, #0]
 8010588:	1c51      	adds	r1, r2, #1
 801058a:	6019      	str	r1, [r3, #0]
}
 801058c:	e8bd 81ff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, pc}
 8010590:	20000060 	.word	0x20000060
 8010594:	200005b0 	.word	0x200005b0
 8010598:	20000632 	.word	0x20000632
 801059c:	20000630 	.word	0x20000630

080105a0 <TASK_Hooks>:

/////////////////////////////////////////////////////////////////////////////
// Remaining application hooks
/////////////////////////////////////////////////////////////////////////////
static void TASK_Hooks(void *pvParameters)
{
 80105a0:	b507      	push	{r0, r1, r2, lr}
  portTickType xLastExecutionTime;

  // Initialise the xLastExecutionTime variable on task entry
  xLastExecutionTime = xTaskGetTickCount();
 80105a2:	f000 fa47 	bl	8010a34 <xTaskGetTickCount>
 80105a6:	9001      	str	r0, [sp, #4]

  while( 1 ) {
    vTaskDelayUntil(&xLastExecutionTime, 1 / portTICK_RATE_MS);
 80105a8:	2101      	movs	r1, #1
 80105aa:	a801      	add	r0, sp, #4
 80105ac:	f000 fb5a 	bl	8010c64 <vTaskDelayUntil>

    // skip delay gap if we had to wait for more than 5 ticks to avoid 
    // unnecessary repeats until xLastExecutionTime reached xTaskGetTickCount() again
    portTickType xCurrentTickCount = xTaskGetTickCount();
 80105b0:	f000 fa40 	bl	8010a34 <xTaskGetTickCount>
    if( xLastExecutionTime < (xCurrentTickCount-5) )
 80105b4:	9b01      	ldr	r3, [sp, #4]
 80105b6:	1f42      	subs	r2, r0, #5
 80105b8:	4293      	cmp	r3, r2
      xLastExecutionTime = xCurrentTickCount;
 80105ba:	bf38      	it	cc
 80105bc:	9001      	strcc	r0, [sp, #4]
    MIOS32_COM_Receive_Handler();
#endif

    // optional APP_Tick() hook
    // helps to save memory (re-use the TASK_Hooks for other purposes...)
    APP_Tick();
 80105be:	f7ff ff75 	bl	80104ac <APP_Tick>
  }
 80105c2:	e7f1      	b.n	80105a8 <TASK_Hooks+0x8>

080105c4 <APP_MIDI_Tick>:
__attribute__ ((weak)) void APP_Tick(void)
{
}

__attribute__ ((weak)) void APP_MIDI_Tick(void)
{
 80105c4:	4770      	bx	lr
	...

080105c8 <TASK_MIDI_Hooks>:
// MIDI task (separated from TASK_Hooks() to ensure parallel handling of
// MIDI events if a hook in TASK_Hooks() blocks)
/////////////////////////////////////////////////////////////////////////////
#if !defined(MIOS32_DONT_USE_MIDI)
static void TASK_MIDI_Hooks(void *pvParameters)
{
 80105c8:	b507      	push	{r0, r1, r2, lr}
  portTickType xLastExecutionTime;

  // Initialise the xLastExecutionTime variable on task entry
  xLastExecutionTime = xTaskGetTickCount();
 80105ca:	f000 fa33 	bl	8010a34 <xTaskGetTickCount>
 80105ce:	9001      	str	r0, [sp, #4]

  while( 1 ) {
    vTaskDelayUntil(&xLastExecutionTime, 1 / portTICK_RATE_MS);
 80105d0:	2101      	movs	r1, #1
 80105d2:	a801      	add	r0, sp, #4
 80105d4:	f000 fb46 	bl	8010c64 <vTaskDelayUntil>

    // skip delay gap if we had to wait for more than 5 ticks to avoid 
    // unnecessary repeats until xLastExecutionTime reached xTaskGetTickCount() again
    portTickType xCurrentTickCount = xTaskGetTickCount();
 80105d8:	f000 fa2c 	bl	8010a34 <xTaskGetTickCount>
    if( xLastExecutionTime < (xCurrentTickCount-5) )
 80105dc:	9b01      	ldr	r3, [sp, #4]
 80105de:	1f42      	subs	r2, r0, #5
 80105e0:	4293      	cmp	r3, r2
      xLastExecutionTime = xCurrentTickCount;
 80105e2:	bf38      	it	cc
 80105e4:	9001      	strcc	r0, [sp, #4]

    // handle timeout/expire counters and USB packages
    MIOS32_MIDI_Periodic_mS();
 80105e6:	f000 ffe7 	bl	80115b8 <MIOS32_MIDI_Periodic_mS>

    // check for incoming MIDI packages and call hook
    MIOS32_MIDI_Receive_Handler(APP_MIDI_NotifyPackage);
 80105ea:	4803      	ldr	r0, [pc, #12]	; (80105f8 <TASK_MIDI_Hooks+0x30>)
 80105ec:	f001 fa98 	bl	8011b20 <MIOS32_MIDI_Receive_Handler>

    // optional application specific hook
    // helps to save memory (re-use the TASK_Hooks for other purposes...)
    APP_MIDI_Tick();
 80105f0:	f7ff ffe8 	bl	80105c4 <APP_MIDI_Tick>
  }
 80105f4:	e7ec      	b.n	80105d0 <TASK_MIDI_Hooks+0x8>
 80105f6:	bf00      	nop
 80105f8:	08010097 	.word	0x08010097

080105fc <main>:

/////////////////////////////////////////////////////////////////////////////
// Main function
/////////////////////////////////////////////////////////////////////////////
int main(void)
{
 80105fc:	b530      	push	{r4, r5, lr}
  // initialize hardware and MIOS32 modules
#ifndef MIOS32_DONT_USE_SYS
  MIOS32_SYS_Init(0);
 80105fe:	2000      	movs	r0, #0

/////////////////////////////////////////////////////////////////////////////
// Main function
/////////////////////////////////////////////////////////////////////////////
int main(void)
{
 8010600:	b085      	sub	sp, #20
  // initialize hardware and MIOS32 modules
#ifndef MIOS32_DONT_USE_SYS
  MIOS32_SYS_Init(0);
 8010602:	f001 fd8d 	bl	8012120 <MIOS32_SYS_Init>
#endif
#ifndef MIOS32_DONT_USE_DELAY
  MIOS32_DELAY_Init(0);
 8010606:	2000      	movs	r0, #0
 8010608:	f002 f82a 	bl	8012660 <MIOS32_DELAY_Init>
#endif
#ifndef MIOS32_DONT_USE_TIMESTAMP
  MIOS32_TIMESTAMP_Init(0);
 801060c:	2000      	movs	r0, #0
 801060e:	f001 fcc9 	bl	8011fa4 <MIOS32_TIMESTAMP_Init>
#endif
#ifndef MIOS32_DONT_USE_BOARD
  MIOS32_BOARD_Init(0);
 8010612:	2000      	movs	r0, #0
 8010614:	f001 fea4 	bl	8012360 <MIOS32_BOARD_Init>
#endif
#ifndef MIOS32_DONT_USE_IIC_BS
  MIOS32_IIC_BS_Init(0);
#endif
#ifndef MIOS32_DONT_USE_MIDI
  MIOS32_MIDI_Init(0);
 8010618:	2000      	movs	r0, #0
 801061a:	f000 fd9b 	bl	8011154 <MIOS32_MIDI_Init>
#endif
#ifndef MIOS32_DONT_USE_USB
  MIOS32_USB_Init(0);
 801061e:	2000      	movs	r0, #0
 8010620:	f002 f9e8 	bl	80129f4 <MIOS32_USB_Init>
#endif
#ifndef MIOS32_DONT_USE_OSC
  MIOS32_OSC_Init(0);
 8010624:	2000      	movs	r0, #0
 8010626:	f001 fb09 	bl	8011c3c <MIOS32_OSC_Init>
#ifdef MIOS32_USE_I2S
  MIOS32_I2S_Init(0);
#endif

  // call C++ constructors
  __libc_init_array();
 801062a:	f007 fa9f 	bl	8017b6c <__libc_init_array>

  // initialize application
  APP_Init();
 801062e:	f7ff fcf5 	bl	801001c <APP_Init>
 8010632:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0

  // wait for given delay (usually 2 seconds)
# ifndef MIOS32_DONT_USE_DELAY
  int delay = 0;
  for(delay=0; delay<MIOS32_LCD_BOOT_MSG_DELAY; ++delay)
    MIOS32_DELAY_Wait_uS(1000);
 8010636:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801063a:	f002 f833 	bl	80126a4 <MIOS32_DELAY_Wait_uS>
# endif

  // wait for given delay (usually 2 seconds)
# ifndef MIOS32_DONT_USE_DELAY
  int delay = 0;
  for(delay=0; delay<MIOS32_LCD_BOOT_MSG_DELAY; ++delay)
 801063e:	3c01      	subs	r4, #1
 8010640:	d1f9      	bne.n	8010636 <main+0x3a>
    MIOS32_DELAY_Wait_uS(1000);
# endif
#endif

  // start the task which calls the application hooks
  xTaskCreate(TASK_Hooks, (signed portCHAR *)"Hooks", configMINIMAL_STACK_SIZE, NULL, PRIORITY_TASK_HOOKS, NULL);
 8010642:	2503      	movs	r5, #3
 8010644:	4623      	mov	r3, r4
 8010646:	9500      	str	r5, [sp, #0]
 8010648:	9401      	str	r4, [sp, #4]
 801064a:	9402      	str	r4, [sp, #8]
 801064c:	9403      	str	r4, [sp, #12]
 801064e:	490b      	ldr	r1, [pc, #44]	; (801067c <main+0x80>)
 8010650:	480b      	ldr	r0, [pc, #44]	; (8010680 <main+0x84>)
 8010652:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010656:	f000 f8f5 	bl	8010844 <xTaskGenericCreate>
#if !defined(MIOS32_DONT_USE_MIDI)
  xTaskCreate(TASK_MIDI_Hooks, (signed portCHAR *)"MIDI_Hooks", configMINIMAL_STACK_SIZE, NULL, PRIORITY_TASK_HOOKS, NULL);
 801065a:	490a      	ldr	r1, [pc, #40]	; (8010684 <main+0x88>)
 801065c:	9500      	str	r5, [sp, #0]
 801065e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010662:	4623      	mov	r3, r4
 8010664:	9401      	str	r4, [sp, #4]
 8010666:	9402      	str	r4, [sp, #8]
 8010668:	9403      	str	r4, [sp, #12]
 801066a:	4807      	ldr	r0, [pc, #28]	; (8010688 <main+0x8c>)
 801066c:	f000 f8ea 	bl	8010844 <xTaskGenericCreate>
#endif

  // start the scheduler
  vTaskStartScheduler();
 8010670:	f000 f9b2 	bl	80109d8 <vTaskStartScheduler>

  // Will only get here if there was not enough heap space to create the idle task
  return 0;
}
 8010674:	4620      	mov	r0, r4
 8010676:	b005      	add	sp, #20
 8010678:	bd30      	pop	{r4, r5, pc}
 801067a:	bf00      	nop
 801067c:	08017c59 	.word	0x08017c59
 8010680:	080105a1 	.word	0x080105a1
 8010684:	08017c54 	.word	0x08017c54
 8010688:	080105c9 	.word	0x080105c9

0801068c <vApplicationTickHook>:
}

void vApplicationTickHook(void)
{
#if !defined(MIOS32_DONT_USE_TIMESTAMP)
  MIOS32_TIMESTAMP_Inc();
 801068c:	f001 bc94 	b.w	8011fb8 <MIOS32_TIMESTAMP_Inc>

08010690 <vApplicationIdleHook>:
/////////////////////////////////////////////////////////////////////////////
// Idle Hook (called by FreeRTOS when nothing else to do)
/////////////////////////////////////////////////////////////////////////////
void vApplicationIdleHook(void)
{
  APP_Background();
 8010690:	f7ff bd00 	b.w	8010094 <APP_Background>

08010694 <_abort>:
// This function aborts any operations, but keeps MIDI alive (for uploading
// a new firmware)
// If MIDI isn't enabled, the status LED will be flashed
/////////////////////////////////////////////////////////////////////////////
void _abort(void)
{
 8010694:	b510      	push	{r4, lr}
#ifndef MIOS32_DONT_USE_MIDI
  // keep MIDI alive, so that program code can be updated
  u32 delay_ctr = 0;
 8010696:	2400      	movs	r4, #0
  while( 1 ) {
    ++delay_ctr;
 8010698:	3401      	adds	r4, #1

    if( (delay_ctr % 100) == 0 ) {
 801069a:	2364      	movs	r3, #100	; 0x64
 801069c:	fbb4 f2f3 	udiv	r2, r4, r3
 80106a0:	fb03 4012 	mls	r0, r3, r2, r4
 80106a4:	b908      	cbnz	r0, 80106aa <_abort+0x16>
      // handle timeout/expire counters and USB packages
      MIOS32_MIDI_Periodic_mS();
 80106a6:	f000 ff87 	bl	80115b8 <MIOS32_MIDI_Periodic_mS>
    }

    // check for incoming MIDI packages and call hook
    MIOS32_MIDI_Receive_Handler(APP_MIDI_NotifyPackage);
 80106aa:	4809      	ldr	r0, [pc, #36]	; (80106d0 <_abort+0x3c>)
 80106ac:	f001 fa38 	bl	8011b20 <MIOS32_MIDI_Receive_Handler>

    if( (delay_ctr % 10000) == 0 ) {
 80106b0:	f242 7110 	movw	r1, #10000	; 0x2710
 80106b4:	fbb4 f3f1 	udiv	r3, r4, r1
 80106b8:	fb01 4213 	mls	r2, r1, r3, r4
 80106bc:	2a00      	cmp	r2, #0
 80106be:	d1eb      	bne.n	8010698 <_abort+0x4>
      // toggle board LED
      MIOS32_BOARD_LED_Set(1, ~MIOS32_BOARD_LED_Get());
 80106c0:	f001 feba 	bl	8012438 <MIOS32_BOARD_LED_Get>
 80106c4:	43c1      	mvns	r1, r0
 80106c6:	2001      	movs	r0, #1
 80106c8:	f001 fe84 	bl	80123d4 <MIOS32_BOARD_LED_Set>
 80106cc:	e7e4      	b.n	8010698 <_abort+0x4>
 80106ce:	bf00      	nop
 80106d0:	08010097 	.word	0x08010097

080106d4 <HardFault_Handler_c>:

/////////////////////////////////////////////////////////////////////////////
// Customized HardFault Handler which prints out debugging informations
/////////////////////////////////////////////////////////////////////////////
void HardFault_Handler_c(unsigned int * hardfault_args)
{
 80106d4:	b510      	push	{r4, lr}
  volatile unsigned int stacked_r12;
  volatile unsigned int stacked_lr;
  volatile unsigned int stacked_pc;
  volatile unsigned int stacked_psr;

  stacked_r0 = ((unsigned long) hardfault_args[0]);
 80106d6:	6803      	ldr	r3, [r0, #0]
  stacked_r1 = ((unsigned long) hardfault_args[1]);
 80106d8:	6841      	ldr	r1, [r0, #4]
  stacked_r2 = ((unsigned long) hardfault_args[2]);
 80106da:	6882      	ldr	r2, [r0, #8]
  stacked_r3 = ((unsigned long) hardfault_args[3]);
 80106dc:	68c4      	ldr	r4, [r0, #12]

/////////////////////////////////////////////////////////////////////////////
// Customized HardFault Handler which prints out debugging informations
/////////////////////////////////////////////////////////////////////////////
void HardFault_Handler_c(unsigned int * hardfault_args)
{
 80106de:	b088      	sub	sp, #32
  volatile unsigned int stacked_r12;
  volatile unsigned int stacked_lr;
  volatile unsigned int stacked_pc;
  volatile unsigned int stacked_psr;

  stacked_r0 = ((unsigned long) hardfault_args[0]);
 80106e0:	9300      	str	r3, [sp, #0]
  stacked_r1 = ((unsigned long) hardfault_args[1]);
  stacked_r2 = ((unsigned long) hardfault_args[2]);
  stacked_r3 = ((unsigned long) hardfault_args[3]);

  stacked_r12 = ((unsigned long) hardfault_args[4]);
 80106e2:	6903      	ldr	r3, [r0, #16]
  volatile unsigned int stacked_lr;
  volatile unsigned int stacked_pc;
  volatile unsigned int stacked_psr;

  stacked_r0 = ((unsigned long) hardfault_args[0]);
  stacked_r1 = ((unsigned long) hardfault_args[1]);
 80106e4:	9101      	str	r1, [sp, #4]
  stacked_r2 = ((unsigned long) hardfault_args[2]);
 80106e6:	9202      	str	r2, [sp, #8]
  stacked_r3 = ((unsigned long) hardfault_args[3]);

  stacked_r12 = ((unsigned long) hardfault_args[4]);
  stacked_lr = ((unsigned long) hardfault_args[5]);
 80106e8:	6941      	ldr	r1, [r0, #20]
  stacked_pc = ((unsigned long) hardfault_args[6]);
 80106ea:	6982      	ldr	r2, [r0, #24]
  stacked_psr = ((unsigned long) hardfault_args[7]);
 80106ec:	69c0      	ldr	r0, [r0, #28]
  volatile unsigned int stacked_psr;

  stacked_r0 = ((unsigned long) hardfault_args[0]);
  stacked_r1 = ((unsigned long) hardfault_args[1]);
  stacked_r2 = ((unsigned long) hardfault_args[2]);
  stacked_r3 = ((unsigned long) hardfault_args[3]);
 80106ee:	9403      	str	r4, [sp, #12]

  stacked_r12 = ((unsigned long) hardfault_args[4]);
 80106f0:	9304      	str	r3, [sp, #16]
  stacked_lr = ((unsigned long) hardfault_args[5]);
  stacked_pc = ((unsigned long) hardfault_args[6]);
  stacked_psr = ((unsigned long) hardfault_args[7]);
  
  MIOS32_MIDI_SendDebugMessage("Hard Fault PC = %08x\n", stacked_pc); // ensure that at least the PC will be sent
  MIOS32_MIDI_SendDebugMessage("==================\n");
 80106f2:	4c26      	ldr	r4, [pc, #152]	; (801078c <HardFault_Handler_c+0xb8>)
  stacked_r1 = ((unsigned long) hardfault_args[1]);
  stacked_r2 = ((unsigned long) hardfault_args[2]);
  stacked_r3 = ((unsigned long) hardfault_args[3]);

  stacked_r12 = ((unsigned long) hardfault_args[4]);
  stacked_lr = ((unsigned long) hardfault_args[5]);
 80106f4:	9105      	str	r1, [sp, #20]
  stacked_pc = ((unsigned long) hardfault_args[6]);
 80106f6:	9206      	str	r2, [sp, #24]
  stacked_psr = ((unsigned long) hardfault_args[7]);
 80106f8:	9007      	str	r0, [sp, #28]
  
  MIOS32_MIDI_SendDebugMessage("Hard Fault PC = %08x\n", stacked_pc); // ensure that at least the PC will be sent
 80106fa:	9906      	ldr	r1, [sp, #24]
 80106fc:	4824      	ldr	r0, [pc, #144]	; (8010790 <HardFault_Handler_c+0xbc>)
 80106fe:	f000 ff0b 	bl	8011518 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("==================\n");
 8010702:	4620      	mov	r0, r4
 8010704:	f000 ff08 	bl	8011518 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("!!! HARD FAULT !!!\n");
 8010708:	4822      	ldr	r0, [pc, #136]	; (8010794 <HardFault_Handler_c+0xc0>)
 801070a:	f000 ff05 	bl	8011518 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("==================\n");
 801070e:	4620      	mov	r0, r4
 8010710:	f000 ff02 	bl	8011518 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("R0 = %08x\n", stacked_r0);
 8010714:	9900      	ldr	r1, [sp, #0]
 8010716:	4820      	ldr	r0, [pc, #128]	; (8010798 <HardFault_Handler_c+0xc4>)
  MIOS32_MIDI_SendDebugMessage("PSR = %08x\n", stacked_psr);
  MIOS32_MIDI_SendDebugMessage("BFAR = %08x\n", (*((volatile unsigned long *)(0xE000ED38))));
  MIOS32_MIDI_SendDebugMessage("CFSR = %08x\n", (*((volatile unsigned long *)(0xE000ED28))));
  MIOS32_MIDI_SendDebugMessage("HFSR = %08x\n", (*((volatile unsigned long *)(0xE000ED2C))));
  MIOS32_MIDI_SendDebugMessage("DFSR = %08x\n", (*((volatile unsigned long *)(0xE000ED30))));
  MIOS32_MIDI_SendDebugMessage("AFSR = %08x\n", (*((volatile unsigned long *)(0xE000ED3C))));
 8010718:	4c20      	ldr	r4, [pc, #128]	; (801079c <HardFault_Handler_c+0xc8>)
  
  MIOS32_MIDI_SendDebugMessage("Hard Fault PC = %08x\n", stacked_pc); // ensure that at least the PC will be sent
  MIOS32_MIDI_SendDebugMessage("==================\n");
  MIOS32_MIDI_SendDebugMessage("!!! HARD FAULT !!!\n");
  MIOS32_MIDI_SendDebugMessage("==================\n");
  MIOS32_MIDI_SendDebugMessage("R0 = %08x\n", stacked_r0);
 801071a:	f000 fefd 	bl	8011518 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("R1 = %08x\n", stacked_r1);
 801071e:	9901      	ldr	r1, [sp, #4]
 8010720:	481f      	ldr	r0, [pc, #124]	; (80107a0 <HardFault_Handler_c+0xcc>)
 8010722:	f000 fef9 	bl	8011518 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("R2 = %08x\n", stacked_r2);
 8010726:	9902      	ldr	r1, [sp, #8]
 8010728:	481e      	ldr	r0, [pc, #120]	; (80107a4 <HardFault_Handler_c+0xd0>)
 801072a:	f000 fef5 	bl	8011518 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("R3 = %08x\n", stacked_r3);
 801072e:	9903      	ldr	r1, [sp, #12]
 8010730:	481d      	ldr	r0, [pc, #116]	; (80107a8 <HardFault_Handler_c+0xd4>)
 8010732:	f000 fef1 	bl	8011518 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("R12 = %08x\n", stacked_r12);
 8010736:	9904      	ldr	r1, [sp, #16]
 8010738:	481c      	ldr	r0, [pc, #112]	; (80107ac <HardFault_Handler_c+0xd8>)
 801073a:	f000 feed 	bl	8011518 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("LR = %08x\n", stacked_lr);
 801073e:	9905      	ldr	r1, [sp, #20]
 8010740:	481b      	ldr	r0, [pc, #108]	; (80107b0 <HardFault_Handler_c+0xdc>)
 8010742:	f000 fee9 	bl	8011518 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("PC = %08x\n", stacked_pc);
 8010746:	9906      	ldr	r1, [sp, #24]
 8010748:	481a      	ldr	r0, [pc, #104]	; (80107b4 <HardFault_Handler_c+0xe0>)
 801074a:	f000 fee5 	bl	8011518 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("PSR = %08x\n", stacked_psr);
 801074e:	9907      	ldr	r1, [sp, #28]
 8010750:	4819      	ldr	r0, [pc, #100]	; (80107b8 <HardFault_Handler_c+0xe4>)
 8010752:	f000 fee1 	bl	8011518 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("BFAR = %08x\n", (*((volatile unsigned long *)(0xE000ED38))));
 8010756:	4b19      	ldr	r3, [pc, #100]	; (80107bc <HardFault_Handler_c+0xe8>)
 8010758:	4819      	ldr	r0, [pc, #100]	; (80107c0 <HardFault_Handler_c+0xec>)
 801075a:	6819      	ldr	r1, [r3, #0]
 801075c:	f000 fedc 	bl	8011518 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("CFSR = %08x\n", (*((volatile unsigned long *)(0xE000ED28))));
 8010760:	4918      	ldr	r1, [pc, #96]	; (80107c4 <HardFault_Handler_c+0xf0>)
 8010762:	4819      	ldr	r0, [pc, #100]	; (80107c8 <HardFault_Handler_c+0xf4>)
 8010764:	6809      	ldr	r1, [r1, #0]
 8010766:	f000 fed7 	bl	8011518 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("HFSR = %08x\n", (*((volatile unsigned long *)(0xE000ED2C))));
 801076a:	4a18      	ldr	r2, [pc, #96]	; (80107cc <HardFault_Handler_c+0xf8>)
 801076c:	4818      	ldr	r0, [pc, #96]	; (80107d0 <HardFault_Handler_c+0xfc>)
 801076e:	6811      	ldr	r1, [r2, #0]
 8010770:	f000 fed2 	bl	8011518 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("DFSR = %08x\n", (*((volatile unsigned long *)(0xE000ED30))));
 8010774:	4817      	ldr	r0, [pc, #92]	; (80107d4 <HardFault_Handler_c+0x100>)
 8010776:	6801      	ldr	r1, [r0, #0]
 8010778:	4817      	ldr	r0, [pc, #92]	; (80107d8 <HardFault_Handler_c+0x104>)
 801077a:	f000 fecd 	bl	8011518 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_MIDI_SendDebugMessage("AFSR = %08x\n", (*((volatile unsigned long *)(0xE000ED3C))));
 801077e:	6821      	ldr	r1, [r4, #0]
 8010780:	4816      	ldr	r0, [pc, #88]	; (80107dc <HardFault_Handler_c+0x108>)
 8010782:	f000 fec9 	bl	8011518 <MIOS32_MIDI_SendDebugMessage>
  MIOS32_LCD_PrintString("!! HARD FAULT !!");
  MIOS32_LCD_CursorSet(0, 1);
  MIOS32_LCD_PrintFormattedString("at PC=0x%08x", stacked_pc);
#endif

  _abort();
 8010786:	f7ff ff85 	bl	8010694 <_abort>
 801078a:	bf00      	nop
 801078c:	08017ca0 	.word	0x08017ca0
 8010790:	08017c8a 	.word	0x08017c8a
 8010794:	08017cb4 	.word	0x08017cb4
 8010798:	08017cc8 	.word	0x08017cc8
 801079c:	e000ed3c 	.word	0xe000ed3c
 80107a0:	08017cd3 	.word	0x08017cd3
 80107a4:	08017cde 	.word	0x08017cde
 80107a8:	08017ce9 	.word	0x08017ce9
 80107ac:	08017cf4 	.word	0x08017cf4
 80107b0:	08017d00 	.word	0x08017d00
 80107b4:	08017c95 	.word	0x08017c95
 80107b8:	08017d0b 	.word	0x08017d0b
 80107bc:	e000ed38 	.word	0xe000ed38
 80107c0:	08017d17 	.word	0x08017d17
 80107c4:	e000ed28 	.word	0xe000ed28
 80107c8:	08017d24 	.word	0x08017d24
 80107cc:	e000ed2c 	.word	0xe000ed2c
 80107d0:	08017d31 	.word	0x08017d31
 80107d4:	e000ed30 	.word	0xe000ed30
 80107d8:	08017d3e 	.word	0x08017d3e
 80107dc:	08017d4b 	.word	0x08017d4b

080107e0 <HardFault_Handler>:
}


void HardFault_Handler(void)
{
  __asm("TST LR, #4");
 80107e0:	f01e 0f04 	tst.w	lr, #4
  __asm("ITE EQ");
 80107e4:	bf0c      	ite	eq
  __asm("MRSEQ R0, MSP");
 80107e6:	f3ef 8008 	mrseq	r0, MSP
  __asm("MRSNE R0, PSP");
 80107ea:	f3ef 8009 	mrsne	r0, PSP
  __asm("B HardFault_Handler_c");
 80107ee:	f7ff bf71 	b.w	80106d4 <HardFault_Handler_c>
 80107f2:	4770      	bx	lr

080107f4 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 80107f4:	4b0e      	ldr	r3, [pc, #56]	; (8010830 <prvAddCurrentTaskToDelayedList+0x3c>)
 80107f6:	681a      	ldr	r2, [r3, #0]
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
 80107f8:	b510      	push	{r4, lr}
 80107fa:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 80107fc:	6050      	str	r0, [r2, #4]

	if( xTimeToWake < xTickCount )
 80107fe:	480d      	ldr	r0, [pc, #52]	; (8010834 <prvAddCurrentTaskToDelayedList+0x40>)
 8010800:	6801      	ldr	r1, [r0, #0]
 8010802:	428c      	cmp	r4, r1
 8010804:	d207      	bcs.n	8010816 <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8010806:	4a0c      	ldr	r2, [pc, #48]	; (8010838 <prvAddCurrentTaskToDelayedList+0x44>)
 8010808:	6810      	ldr	r0, [r2, #0]
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	1d19      	adds	r1, r3, #4
		if( xTimeToWake < xNextTaskUnblockTime )
		{
			xNextTaskUnblockTime = xTimeToWake;
		}
	}
}
 801080e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8010812:	f000 baa8 	b.w	8010d66 <vListInsert>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8010816:	4a09      	ldr	r2, [pc, #36]	; (801083c <prvAddCurrentTaskToDelayedList+0x48>)
 8010818:	6810      	ldr	r0, [r2, #0]
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	1d19      	adds	r1, r3, #4
 801081e:	f000 faa2 	bl	8010d66 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 8010822:	4807      	ldr	r0, [pc, #28]	; (8010840 <prvAddCurrentTaskToDelayedList+0x4c>)
 8010824:	6801      	ldr	r1, [r0, #0]
 8010826:	428c      	cmp	r4, r1
		{
			xNextTaskUnblockTime = xTimeToWake;
 8010828:	bf38      	it	cc
 801082a:	6004      	strcc	r4, [r0, #0]
 801082c:	bd10      	pop	{r4, pc}
 801082e:	bf00      	nop
 8010830:	2000011c 	.word	0x2000011c
 8010834:	20000134 	.word	0x20000134
 8010838:	20000138 	.word	0x20000138
 801083c:	2000007c 	.word	0x2000007c
 8010840:	20000000 	.word	0x20000000

08010844 <xTaskGenericCreate>:
#endif

/*lint +e956 */

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
 8010844:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010848:	4683      	mov	fp, r0
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 801084a:	2048      	movs	r0, #72	; 0x48
#endif

/*lint +e956 */

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
 801084c:	4688      	mov	r8, r1
 801084e:	4617      	mov	r7, r2
 8010850:	469a      	mov	sl, r3
 8010852:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8010854:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8010858:	9d0c      	ldr	r5, [sp, #48]	; 0x30
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 801085a:	f000 fbc3 	bl	8010fe4 <pvPortMalloc>

	if( pxNewTCB != NULL )
 801085e:	4604      	mov	r4, r0
 8010860:	2800      	cmp	r0, #0
 8010862:	f000 8099 	beq.w	8010998 <xTaskGenericCreate+0x154>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
 8010866:	b91d      	cbnz	r5, 8010870 <xTaskGenericCreate+0x2c>
 8010868:	00b8      	lsls	r0, r7, #2
 801086a:	f000 fbbb 	bl	8010fe4 <pvPortMalloc>
 801086e:	4605      	mov	r5, r0
 8010870:	6325      	str	r5, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
 8010872:	b91d      	cbnz	r5, 801087c <xTaskGenericCreate+0x38>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
 8010874:	4620      	mov	r0, r4
 8010876:	f000 fb7b 	bl	8010f70 <vPortFree>
 801087a:	e08d      	b.n	8010998 <xTaskGenericCreate+0x154>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
 801087c:	00ba      	lsls	r2, r7, #2
 801087e:	4628      	mov	r0, r5
 8010880:	21a5      	movs	r1, #165	; 0xa5
 8010882:	f007 f9a2 	bl	8017bca <memset>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 8010886:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010888:	3f01      	subs	r7, #1
 801088a:	eb03 0087 	add.w	r0, r3, r7, lsl #2
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
 801088e:	2210      	movs	r2, #16
 8010890:	4641      	mov	r1, r8
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
 8010892:	f020 0707 	bic.w	r7, r0, #7
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
 8010896:	f104 0034 	add.w	r0, r4, #52	; 0x34
 801089a:	f007 f9a6 	bl	8017bea <strncpy>
 801089e:	2e04      	cmp	r6, #4
 80108a0:	bf34      	ite	cc
 80108a2:	4635      	movcc	r5, r6
 80108a4:	2504      	movcs	r5, #4
	}
	#endif /* configMAX_TASK_NAME_LEN */
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
 80108a6:	2100      	movs	r1, #0
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 80108a8:	f104 0804 	add.w	r8, r4, #4
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
	}
	#endif /* configMAX_TASK_NAME_LEN */
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
 80108ac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 80108b0:	4640      	mov	r0, r8
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
 80108b2:	62e5      	str	r5, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 80108b4:	6465      	str	r5, [r4, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 80108b6:	f000 fa46 	bl	8010d46 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 80108ba:	f104 0018 	add.w	r0, r4, #24
 80108be:	f000 fa42 	bl	8010d46 <vListInitialiseItem>
	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
 80108c2:	f1c5 0205 	rsb	r2, r5, #5
 80108c6:	61a2      	str	r2, [r4, #24]
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
	vListInitialiseItem( &( pxTCB->xEventListItem ) );

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 80108c8:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 80108ca:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80108cc:	4638      	mov	r0, r7
 80108ce:	4659      	mov	r1, fp
 80108d0:	4652      	mov	r2, sl
 80108d2:	f000 fa7b 	bl	8010dcc <pxPortInitialiseStack>
 80108d6:	6020      	str	r0, [r4, #0]
		#endif /* portUSING_MPU_WRAPPERS */

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
 80108d8:	f1b9 0f00 	cmp.w	r9, #0
 80108dc:	d001      	beq.n	80108e2 <xTaskGenericCreate+0x9e>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
 80108de:	f8c9 4000 	str.w	r4, [r9]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
 80108e2:	f000 fa9f 	bl	8010e24 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 80108e6:	482e      	ldr	r0, [pc, #184]	; (80109a0 <xTaskGenericCreate+0x15c>)
 80108e8:	6803      	ldr	r3, [r0, #0]
 80108ea:	1c59      	adds	r1, r3, #1
			if( pxCurrentTCB == NULL )
 80108ec:	4b2d      	ldr	r3, [pc, #180]	; (80109a4 <xTaskGenericCreate+0x160>)

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
		{
			uxCurrentNumberOfTasks++;
 80108ee:	6001      	str	r1, [r0, #0]
			if( pxCurrentTCB == NULL )
 80108f0:	681d      	ldr	r5, [r3, #0]
 80108f2:	bb15      	cbnz	r5, 801093a <xTaskGenericCreate+0xf6>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 80108f4:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 80108f6:	6803      	ldr	r3, [r0, #0]
 80108f8:	2b01      	cmp	r3, #1
 80108fa:	d126      	bne.n	801094a <xTaskGenericCreate+0x106>
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
 80108fc:	482a      	ldr	r0, [pc, #168]	; (80109a8 <xTaskGenericCreate+0x164>)
 80108fe:	2714      	movs	r7, #20
 8010900:	fb07 0005 	mla	r0, r7, r5, r0

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 8010904:	3501      	adds	r5, #1
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
 8010906:	f000 fa13 	bl	8010d30 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 801090a:	2d05      	cmp	r5, #5
 801090c:	d1f6      	bne.n	80108fc <xTaskGenericCreate+0xb8>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
 801090e:	4f27      	ldr	r7, [pc, #156]	; (80109ac <xTaskGenericCreate+0x168>)
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
 8010910:	4d27      	ldr	r5, [pc, #156]	; (80109b0 <xTaskGenericCreate+0x16c>)
	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
 8010912:	4638      	mov	r0, r7
 8010914:	f000 fa0c 	bl	8010d30 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
 8010918:	4628      	mov	r0, r5
 801091a:	f000 fa09 	bl	8010d30 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
 801091e:	4825      	ldr	r0, [pc, #148]	; (80109b4 <xTaskGenericCreate+0x170>)
 8010920:	f000 fa06 	bl	8010d30 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
 8010924:	4824      	ldr	r0, [pc, #144]	; (80109b8 <xTaskGenericCreate+0x174>)
 8010926:	f000 fa03 	bl	8010d30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
 801092a:	4824      	ldr	r0, [pc, #144]	; (80109bc <xTaskGenericCreate+0x178>)
 801092c:	f000 fa00 	bl	8010d30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010930:	4923      	ldr	r1, [pc, #140]	; (80109c0 <xTaskGenericCreate+0x17c>)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010932:	4a24      	ldr	r2, [pc, #144]	; (80109c4 <xTaskGenericCreate+0x180>)
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010934:	600f      	str	r7, [r1, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010936:	6015      	str	r5, [r2, #0]
 8010938:	e007      	b.n	801094a <xTaskGenericCreate+0x106>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 801093a:	4a23      	ldr	r2, [pc, #140]	; (80109c8 <xTaskGenericCreate+0x184>)
 801093c:	6810      	ldr	r0, [r2, #0]
 801093e:	b920      	cbnz	r0, 801094a <xTaskGenericCreate+0x106>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 8010940:	6819      	ldr	r1, [r3, #0]
 8010942:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8010944:	42b2      	cmp	r2, r6
					{
						pxCurrentTCB = pxNewTCB;
 8010946:	bf98      	it	ls
 8010948:	601c      	strls	r4, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
 801094a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801094c:	4c1f      	ldr	r4, [pc, #124]	; (80109cc <xTaskGenericCreate+0x188>)
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
			}

			uxTaskNumber++;
 801094e:	4a20      	ldr	r2, [pc, #128]	; (80109d0 <xTaskGenericCreate+0x18c>)
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
 8010950:	6820      	ldr	r0, [r4, #0]
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
			}

			uxTaskNumber++;
 8010952:	6811      	ldr	r1, [r2, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
 8010954:	4283      	cmp	r3, r0
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
 8010956:	bf88      	it	hi
 8010958:	6023      	strhi	r3, [r4, #0]
			}

			uxTaskNumber++;
 801095a:	1c4c      	adds	r4, r1, #1
 801095c:	6014      	str	r4, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyQueue( pxNewTCB );
 801095e:	4a1d      	ldr	r2, [pc, #116]	; (80109d4 <xTaskGenericCreate+0x190>)
 8010960:	2401      	movs	r4, #1
 8010962:	6811      	ldr	r1, [r2, #0]
 8010964:	fa04 f003 	lsl.w	r0, r4, r3
 8010968:	4301      	orrs	r1, r0
 801096a:	6011      	str	r1, [r2, #0]
 801096c:	4a0e      	ldr	r2, [pc, #56]	; (80109a8 <xTaskGenericCreate+0x164>)
 801096e:	2014      	movs	r0, #20
 8010970:	fb00 2003 	mla	r0, r0, r3, r2
 8010974:	4641      	mov	r1, r8
 8010976:	f000 f9e9 	bl	8010d4c <vListInsertEnd>

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 801097a:	f000 fa61 	bl	8010e40 <vPortExitCritical>
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
 801097e:	4b12      	ldr	r3, [pc, #72]	; (80109c8 <xTaskGenericCreate+0x184>)
 8010980:	6819      	ldr	r1, [r3, #0]
 8010982:	b131      	cbz	r1, 8010992 <xTaskGenericCreate+0x14e>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 8010984:	4807      	ldr	r0, [pc, #28]	; (80109a4 <xTaskGenericCreate+0x160>)
 8010986:	6802      	ldr	r2, [r0, #0]
 8010988:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 801098a:	42b3      	cmp	r3, r6
 801098c:	d201      	bcs.n	8010992 <xTaskGenericCreate+0x14e>
			{
				portYIELD_WITHIN_API();
 801098e:	f000 fa39 	bl	8010e04 <vPortYieldFromISR>
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyQueue( pxNewTCB );

			xReturn = pdPASS;
 8010992:	4620      	mov	r0, r4
 8010994:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010998:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return xReturn;
}
 801099c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109a0:	2000015c 	.word	0x2000015c
 80109a4:	2000011c 	.word	0x2000011c
 80109a8:	200000b0 	.word	0x200000b0
 80109ac:	20000144 	.word	0x20000144
 80109b0:	2000009c 	.word	0x2000009c
 80109b4:	20000120 	.word	0x20000120
 80109b8:	20000088 	.word	0x20000088
 80109bc:	20000068 	.word	0x20000068
 80109c0:	2000007c 	.word	0x2000007c
 80109c4:	20000138 	.word	0x20000138
 80109c8:	20000080 	.word	0x20000080
 80109cc:	20000160 	.word	0x20000160
 80109d0:	20000140 	.word	0x20000140
 80109d4:	2000013c 	.word	0x2000013c

080109d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80109d8:	b530      	push	{r4, r5, lr}
 80109da:	b085      	sub	sp, #20
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
 80109dc:	2400      	movs	r4, #0
 80109de:	9400      	str	r4, [sp, #0]
 80109e0:	9401      	str	r4, [sp, #4]
 80109e2:	9402      	str	r4, [sp, #8]
 80109e4:	9403      	str	r4, [sp, #12]
 80109e6:	480b      	ldr	r0, [pc, #44]	; (8010a14 <vTaskStartScheduler+0x3c>)
 80109e8:	490b      	ldr	r1, [pc, #44]	; (8010a18 <vTaskStartScheduler+0x40>)
 80109ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80109ee:	4623      	mov	r3, r4
 80109f0:	f7ff ff28 	bl	8010844 <xTaskGenericCreate>
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80109f4:	2801      	cmp	r0, #1
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
 80109f6:	4605      	mov	r5, r0
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80109f8:	d10a      	bne.n	8010a10 <vTaskStartScheduler+0x38>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
 80109fa:	f000 fa0b 	bl	8010e14 <ulPortSetInterruptMask>

		xSchedulerRunning = pdTRUE;
 80109fe:	4b07      	ldr	r3, [pc, #28]	; (8010a1c <vTaskStartScheduler+0x44>)
		xTickCount = ( portTickType ) 0U;
 8010a00:	4807      	ldr	r0, [pc, #28]	; (8010a20 <vTaskStartScheduler+0x48>)

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();

		xSchedulerRunning = pdTRUE;
 8010a02:	601d      	str	r5, [r3, #0]
		xTickCount = ( portTickType ) 0U;
 8010a04:	6004      	str	r4, [r0, #0]
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
 8010a06:	b005      	add	sp, #20
 8010a08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010a0c:	f000 ba5c 	b.w	8010ec8 <xPortStartScheduler>
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
 8010a10:	b005      	add	sp, #20
 8010a12:	bd30      	pop	{r4, r5, pc}
 8010a14:	08010bfd 	.word	0x08010bfd
 8010a18:	08017d58 	.word	0x08017d58
 8010a1c:	20000080 	.word	0x20000080
 8010a20:	20000134 	.word	0x20000134

08010a24 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
 8010a24:	4b02      	ldr	r3, [pc, #8]	; (8010a30 <vTaskSuspendAll+0xc>)
 8010a26:	681a      	ldr	r2, [r3, #0]
 8010a28:	1c50      	adds	r0, r2, #1
 8010a2a:	6018      	str	r0, [r3, #0]
 8010a2c:	4770      	bx	lr
 8010a2e:	bf00      	nop
 8010a30:	20000114 	.word	0x20000114

08010a34 <xTaskGetTickCount>:
	return xAlreadyYielded;
}
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCount( void )
{
 8010a34:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
 8010a36:	f000 f9f5 	bl	8010e24 <vPortEnterCritical>
	{
		xTicks = xTickCount;
 8010a3a:	4b03      	ldr	r3, [pc, #12]	; (8010a48 <xTaskGetTickCount+0x14>)
 8010a3c:	681c      	ldr	r4, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8010a3e:	f000 f9ff 	bl	8010e40 <vPortExitCritical>

	return xTicks;
}
 8010a42:	4620      	mov	r0, r4
 8010a44:	bd10      	pop	{r4, pc}
 8010a46:	bf00      	nop
 8010a48:	20000134 	.word	0x20000134

08010a4c <vTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
 8010a4c:	b538      	push	{r3, r4, r5, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8010a4e:	4b31      	ldr	r3, [pc, #196]	; (8010b14 <vTaskIncrementTick+0xc8>)
 8010a50:	6818      	ldr	r0, [r3, #0]
 8010a52:	2800      	cmp	r0, #0
 8010a54:	d14f      	bne.n	8010af6 <vTaskIncrementTick+0xaa>
	{
		++xTickCount;
 8010a56:	4830      	ldr	r0, [pc, #192]	; (8010b18 <vTaskIncrementTick+0xcc>)
 8010a58:	6801      	ldr	r1, [r0, #0]
 8010a5a:	1c4a      	adds	r2, r1, #1
 8010a5c:	6002      	str	r2, [r0, #0]
		if( xTickCount == ( portTickType ) 0U )
 8010a5e:	6803      	ldr	r3, [r0, #0]
 8010a60:	b9ab      	cbnz	r3, 8010a8e <vTaskIncrementTick+0x42>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );

			pxTemp = pxDelayedTaskList;
 8010a62:	4b2e      	ldr	r3, [pc, #184]	; (8010b1c <vTaskIncrementTick+0xd0>)
			pxDelayedTaskList = pxOverflowDelayedTaskList;
 8010a64:	4a2e      	ldr	r2, [pc, #184]	; (8010b20 <vTaskIncrementTick+0xd4>)
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );

			pxTemp = pxDelayedTaskList;
 8010a66:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
 8010a68:	6810      	ldr	r0, [r2, #0]
 8010a6a:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
 8010a6c:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
 8010a6e:	4a2d      	ldr	r2, [pc, #180]	; (8010b24 <vTaskIncrementTick+0xd8>)
 8010a70:	6811      	ldr	r1, [r2, #0]
 8010a72:	1c48      	adds	r0, r1, #1
 8010a74:	6010      	str	r0, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010a76:	681a      	ldr	r2, [r3, #0]
 8010a78:	482b      	ldr	r0, [pc, #172]	; (8010b28 <vTaskIncrementTick+0xdc>)
 8010a7a:	6811      	ldr	r1, [r2, #0]
 8010a7c:	b911      	cbnz	r1, 8010a84 <vTaskIncrementTick+0x38>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
 8010a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8010a82:	e003      	b.n	8010a8c <vTaskIncrementTick+0x40>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	68da      	ldr	r2, [r3, #12]
 8010a88:	68d1      	ldr	r1, [r2, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8010a8a:	684b      	ldr	r3, [r1, #4]
 8010a8c:	6003      	str	r3, [r0, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
 8010a8e:	4822      	ldr	r0, [pc, #136]	; (8010b18 <vTaskIncrementTick+0xcc>)
 8010a90:	4925      	ldr	r1, [pc, #148]	; (8010b28 <vTaskIncrementTick+0xdc>)
 8010a92:	6802      	ldr	r2, [r0, #0]
 8010a94:	680b      	ldr	r3, [r1, #0]
 8010a96:	429a      	cmp	r2, r3
 8010a98:	d333      	bcc.n	8010b02 <vTaskIncrementTick+0xb6>
 8010a9a:	4820      	ldr	r0, [pc, #128]	; (8010b1c <vTaskIncrementTick+0xd0>)
 8010a9c:	6802      	ldr	r2, [r0, #0]
 8010a9e:	6811      	ldr	r1, [r2, #0]
 8010aa0:	b921      	cbnz	r1, 8010aac <vTaskIncrementTick+0x60>
 8010aa2:	4821      	ldr	r0, [pc, #132]	; (8010b28 <vTaskIncrementTick+0xdc>)
 8010aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8010aa8:	6001      	str	r1, [r0, #0]
 8010aaa:	e02a      	b.n	8010b02 <vTaskIncrementTick+0xb6>
 8010aac:	6804      	ldr	r4, [r0, #0]
 8010aae:	4a1a      	ldr	r2, [pc, #104]	; (8010b18 <vTaskIncrementTick+0xcc>)
 8010ab0:	68e3      	ldr	r3, [r4, #12]
 8010ab2:	68dc      	ldr	r4, [r3, #12]
 8010ab4:	6811      	ldr	r1, [r2, #0]
 8010ab6:	6860      	ldr	r0, [r4, #4]
 8010ab8:	4281      	cmp	r1, r0
 8010aba:	d202      	bcs.n	8010ac2 <vTaskIncrementTick+0x76>
 8010abc:	4b1a      	ldr	r3, [pc, #104]	; (8010b28 <vTaskIncrementTick+0xdc>)
 8010abe:	6018      	str	r0, [r3, #0]
 8010ac0:	e01f      	b.n	8010b02 <vTaskIncrementTick+0xb6>
 8010ac2:	1d25      	adds	r5, r4, #4
 8010ac4:	4628      	mov	r0, r5
 8010ac6:	f000 f966 	bl	8010d96 <uxListRemove>
 8010aca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010acc:	b11b      	cbz	r3, 8010ad6 <vTaskIncrementTick+0x8a>
 8010ace:	f104 0018 	add.w	r0, r4, #24
 8010ad2:	f000 f960 	bl	8010d96 <uxListRemove>
 8010ad6:	4a15      	ldr	r2, [pc, #84]	; (8010b2c <vTaskIncrementTick+0xe0>)
 8010ad8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010ada:	6810      	ldr	r0, [r2, #0]
 8010adc:	2101      	movs	r1, #1
 8010ade:	fa01 f103 	lsl.w	r1, r1, r3
 8010ae2:	4301      	orrs	r1, r0
 8010ae4:	6011      	str	r1, [r2, #0]
 8010ae6:	4a12      	ldr	r2, [pc, #72]	; (8010b30 <vTaskIncrementTick+0xe4>)
 8010ae8:	2014      	movs	r0, #20
 8010aea:	fb00 2003 	mla	r0, r0, r3, r2
 8010aee:	4629      	mov	r1, r5
 8010af0:	f000 f92c 	bl	8010d4c <vListInsertEnd>
 8010af4:	e7d1      	b.n	8010a9a <vTaskIncrementTick+0x4e>
	}
	else
	{
		++uxMissedTicks;
 8010af6:	490f      	ldr	r1, [pc, #60]	; (8010b34 <vTaskIncrementTick+0xe8>)
 8010af8:	680a      	ldr	r2, [r1, #0]
 8010afa:	1c53      	adds	r3, r2, #1
 8010afc:	600b      	str	r3, [r1, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8010afe:	f7ff fdc5 	bl	801068c <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
 8010b02:	4a0c      	ldr	r2, [pc, #48]	; (8010b34 <vTaskIncrementTick+0xe8>)
 8010b04:	6813      	ldr	r3, [r2, #0]
 8010b06:	b91b      	cbnz	r3, 8010b10 <vTaskIncrementTick+0xc4>
		{
			vApplicationTickHook();
		}
	}
	#endif /* configUSE_TICK_HOOK */
}
 8010b08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
		{
			vApplicationTickHook();
 8010b0c:	f7ff bdbe 	b.w	801068c <vApplicationTickHook>
 8010b10:	bd38      	pop	{r3, r4, r5, pc}
 8010b12:	bf00      	nop
 8010b14:	20000114 	.word	0x20000114
 8010b18:	20000134 	.word	0x20000134
 8010b1c:	2000007c 	.word	0x2000007c
 8010b20:	20000138 	.word	0x20000138
 8010b24:	20000118 	.word	0x20000118
 8010b28:	20000000 	.word	0x20000000
 8010b2c:	2000013c 	.word	0x2000013c
 8010b30:	200000b0 	.word	0x200000b0
 8010b34:	20000064 	.word	0x20000064

08010b38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
 8010b38:	b570      	push	{r4, r5, r6, lr}
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010b3a:	f000 f973 	bl	8010e24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010b3e:	4b27      	ldr	r3, [pc, #156]	; (8010bdc <xTaskResumeAll+0xa4>)
 8010b40:	681a      	ldr	r2, [r3, #0]
 8010b42:	1e50      	subs	r0, r2, #1
 8010b44:	6018      	str	r0, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8010b46:	681d      	ldr	r5, [r3, #0]
 8010b48:	b10d      	cbz	r5, 8010b4e <xTaskResumeAll+0x16>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 8010b4a:	2400      	movs	r4, #0
 8010b4c:	e041      	b.n	8010bd2 <xTaskResumeAll+0x9a>
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
 8010b4e:	4924      	ldr	r1, [pc, #144]	; (8010be0 <xTaskResumeAll+0xa8>)
 8010b50:	680c      	ldr	r4, [r1, #0]
 8010b52:	2c00      	cmp	r4, #0
 8010b54:	d0f9      	beq.n	8010b4a <xTaskResumeAll+0x12>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 8010b56:	4b23      	ldr	r3, [pc, #140]	; (8010be4 <xTaskResumeAll+0xac>)
 8010b58:	681a      	ldr	r2, [r3, #0]
 8010b5a:	b302      	cbz	r2, 8010b9e <xTaskResumeAll+0x66>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
 8010b5c:	68de      	ldr	r6, [r3, #12]
 8010b5e:	68f4      	ldr	r4, [r6, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
					uxListRemove( &( pxTCB->xGenericListItem ) );
 8010b60:	1d26      	adds	r6, r4, #4
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					uxListRemove( &( pxTCB->xEventListItem ) );
 8010b62:	f104 0018 	add.w	r0, r4, #24
 8010b66:	f000 f916 	bl	8010d96 <uxListRemove>
					uxListRemove( &( pxTCB->xGenericListItem ) );
 8010b6a:	4630      	mov	r0, r6
 8010b6c:	f000 f913 	bl	8010d96 <uxListRemove>
					prvAddTaskToReadyQueue( pxTCB );
 8010b70:	4a1d      	ldr	r2, [pc, #116]	; (8010be8 <xTaskResumeAll+0xb0>)
 8010b72:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010b74:	6810      	ldr	r0, [r2, #0]
 8010b76:	2101      	movs	r1, #1
 8010b78:	fa01 f103 	lsl.w	r1, r1, r3
 8010b7c:	4301      	orrs	r1, r0
 8010b7e:	6011      	str	r1, [r2, #0]
 8010b80:	4a1a      	ldr	r2, [pc, #104]	; (8010bec <xTaskResumeAll+0xb4>)
 8010b82:	2014      	movs	r0, #20
 8010b84:	fb00 2003 	mla	r0, r0, r3, r2
 8010b88:	4631      	mov	r1, r6
 8010b8a:	f000 f8df 	bl	8010d4c <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010b8e:	4b18      	ldr	r3, [pc, #96]	; (8010bf0 <xTaskResumeAll+0xb8>)
 8010b90:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 8010b92:	6819      	ldr	r1, [r3, #0]
 8010b94:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
					{
						xYieldRequired = pdTRUE;
 8010b96:	4284      	cmp	r4, r0
 8010b98:	bf28      	it	cs
 8010b9a:	2501      	movcs	r5, #1
 8010b9c:	e7db      	b.n	8010b56 <xTaskResumeAll+0x1e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 8010b9e:	4815      	ldr	r0, [pc, #84]	; (8010bf4 <xTaskResumeAll+0xbc>)
 8010ba0:	6801      	ldr	r1, [r0, #0]
 8010ba2:	b141      	cbz	r1, 8010bb6 <xTaskResumeAll+0x7e>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 8010ba4:	4c13      	ldr	r4, [pc, #76]	; (8010bf4 <xTaskResumeAll+0xbc>)
 8010ba6:	6822      	ldr	r2, [r4, #0]
 8010ba8:	b13a      	cbz	r2, 8010bba <xTaskResumeAll+0x82>
					{
						vTaskIncrementTick();
 8010baa:	f7ff ff4f 	bl	8010a4c <vTaskIncrementTick>
						--uxMissedTicks;
 8010bae:	6823      	ldr	r3, [r4, #0]
 8010bb0:	1e5a      	subs	r2, r3, #1
 8010bb2:	6022      	str	r2, [r4, #0]
 8010bb4:	e7f6      	b.n	8010ba4 <xTaskResumeAll+0x6c>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
 8010bb6:	2d01      	cmp	r5, #1
 8010bb8:	d106      	bne.n	8010bc8 <xTaskResumeAll+0x90>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
 8010bba:	490f      	ldr	r1, [pc, #60]	; (8010bf8 <xTaskResumeAll+0xc0>)
 8010bbc:	2000      	movs	r0, #0
 8010bbe:	6008      	str	r0, [r1, #0]
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
 8010bc0:	2401      	movs	r4, #1
					xMissedYield = pdFALSE;
					portYIELD_WITHIN_API();
 8010bc2:	f000 f91f 	bl	8010e04 <vPortYieldFromISR>
 8010bc6:	e004      	b.n	8010bd2 <xTaskResumeAll+0x9a>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
 8010bc8:	4c0b      	ldr	r4, [pc, #44]	; (8010bf8 <xTaskResumeAll+0xc0>)
 8010bca:	6823      	ldr	r3, [r4, #0]
 8010bcc:	2b01      	cmp	r3, #1
 8010bce:	d1bc      	bne.n	8010b4a <xTaskResumeAll+0x12>
 8010bd0:	e7f3      	b.n	8010bba <xTaskResumeAll+0x82>
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
 8010bd2:	f000 f935 	bl	8010e40 <vPortExitCritical>

	return xAlreadyYielded;
}
 8010bd6:	4620      	mov	r0, r4
 8010bd8:	bd70      	pop	{r4, r5, r6, pc}
 8010bda:	bf00      	nop
 8010bdc:	20000114 	.word	0x20000114
 8010be0:	2000015c 	.word	0x2000015c
 8010be4:	20000120 	.word	0x20000120
 8010be8:	2000013c 	.word	0x2000013c
 8010bec:	200000b0 	.word	0x200000b0
 8010bf0:	2000011c 	.word	0x2000011c
 8010bf4:	20000064 	.word	0x20000064
 8010bf8:	20000158 	.word	0x20000158

08010bfc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010bfc:	b570      	push	{r4, r5, r6, lr}
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 8010bfe:	4c15      	ldr	r4, [pc, #84]	; (8010c54 <prvIdleTask+0x58>)
 8010c00:	6823      	ldr	r3, [r4, #0]
 8010c02:	b1f3      	cbz	r3, 8010c42 <prvIdleTask+0x46>
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8010c04:	4d14      	ldr	r5, [pc, #80]	; (8010c58 <prvIdleTask+0x5c>)

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
 8010c06:	f7ff ff0d 	bl	8010a24 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8010c0a:	682e      	ldr	r6, [r5, #0]
			xTaskResumeAll();
 8010c0c:	f7ff ff94 	bl	8010b38 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8010c10:	2e00      	cmp	r6, #0
 8010c12:	d0f4      	beq.n	8010bfe <prvIdleTask+0x2>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 8010c14:	f000 f906 	bl	8010e24 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 8010c18:	68ea      	ldr	r2, [r5, #12]
 8010c1a:	68d5      	ldr	r5, [r2, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
 8010c1c:	1d28      	adds	r0, r5, #4
 8010c1e:	f000 f8ba 	bl	8010d96 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8010c22:	4b0e      	ldr	r3, [pc, #56]	; (8010c5c <prvIdleTask+0x60>)
 8010c24:	6818      	ldr	r0, [r3, #0]
 8010c26:	1e41      	subs	r1, r0, #1
 8010c28:	6019      	str	r1, [r3, #0]
					--uxTasksDeleted;
 8010c2a:	6826      	ldr	r6, [r4, #0]
 8010c2c:	1e72      	subs	r2, r6, #1
 8010c2e:	6022      	str	r2, [r4, #0]
				}
				taskEXIT_CRITICAL();
 8010c30:	f000 f906 	bl	8010e40 <vPortExitCritical>
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 8010c34:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8010c36:	f000 f99b 	bl	8010f70 <vPortFree>
		vPortFree( pxTCB );
 8010c3a:	4628      	mov	r0, r5
 8010c3c:	f000 f998 	bl	8010f70 <vPortFree>
 8010c40:	e7dd      	b.n	8010bfe <prvIdleTask+0x2>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 8010c42:	4807      	ldr	r0, [pc, #28]	; (8010c60 <prvIdleTask+0x64>)
 8010c44:	6801      	ldr	r1, [r0, #0]
 8010c46:	2901      	cmp	r1, #1
 8010c48:	d901      	bls.n	8010c4e <prvIdleTask+0x52>
			{
				taskYIELD();
 8010c4a:	f000 f8db 	bl	8010e04 <vPortYieldFromISR>
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8010c4e:	f7ff fd1f 	bl	8010690 <vApplicationIdleHook>
				}
				xTaskResumeAll();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 8010c52:	e7d4      	b.n	8010bfe <prvIdleTask+0x2>
 8010c54:	20000084 	.word	0x20000084
 8010c58:	20000088 	.word	0x20000088
 8010c5c:	2000015c 	.word	0x2000015c
 8010c60:	200000b0 	.word	0x200000b0

08010c64 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
 8010c64:	b538      	push	{r3, r4, r5, lr}
 8010c66:	460c      	mov	r4, r1
 8010c68:	4605      	mov	r5, r0
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
 8010c6a:	f7ff fedb 	bl	8010a24 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;

			if( xTickCount < *pxPreviousWakeTime )
 8010c6e:	4a18      	ldr	r2, [pc, #96]	; (8010cd0 <vTaskDelayUntil+0x6c>)
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8010c70:	682b      	ldr	r3, [r5, #0]

			if( xTickCount < *pxPreviousWakeTime )
 8010c72:	6811      	ldr	r1, [r2, #0]
 8010c74:	4299      	cmp	r1, r3
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8010c76:	441c      	add	r4, r3

			if( xTickCount < *pxPreviousWakeTime )
 8010c78:	d202      	bcs.n	8010c80 <vTaskDelayUntil+0x1c>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
 8010c7a:	429c      	cmp	r4, r3
 8010c7c:	d208      	bcs.n	8010c90 <vTaskDelayUntil+0x2c>
 8010c7e:	e001      	b.n	8010c84 <vTaskDelayUntil+0x20>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
 8010c80:	429c      	cmp	r4, r3
 8010c82:	d307      	bcc.n	8010c94 <vTaskDelayUntil+0x30>
 8010c84:	6810      	ldr	r0, [r2, #0]
 8010c86:	4284      	cmp	r4, r0
 8010c88:	bf94      	ite	ls
 8010c8a:	2000      	movls	r0, #0
 8010c8c:	2001      	movhi	r0, #1
 8010c8e:	e002      	b.n	8010c96 <vTaskDelayUntil+0x32>
#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
 8010c90:	2000      	movs	r0, #0
 8010c92:	e000      	b.n	8010c96 <vTaskDelayUntil+0x32>
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
				{
					xShouldDelay = pdTRUE;
 8010c94:	2001      	movs	r0, #1
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8010c96:	602c      	str	r4, [r5, #0]

			if( xShouldDelay != pdFALSE )
 8010c98:	b190      	cbz	r0, 8010cc0 <vTaskDelayUntil+0x5c>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
 8010c9a:	4d0e      	ldr	r5, [pc, #56]	; (8010cd4 <vTaskDelayUntil+0x70>)
 8010c9c:	682b      	ldr	r3, [r5, #0]
 8010c9e:	1d18      	adds	r0, r3, #4
 8010ca0:	f000 f879 	bl	8010d96 <uxListRemove>
 8010ca4:	b948      	cbnz	r0, 8010cba <vTaskDelayUntil+0x56>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8010ca6:	4b0c      	ldr	r3, [pc, #48]	; (8010cd8 <vTaskDelayUntil+0x74>)
 8010ca8:	6819      	ldr	r1, [r3, #0]
 8010caa:	682a      	ldr	r2, [r5, #0]
 8010cac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8010cae:	2001      	movs	r0, #1
 8010cb0:	fa00 f202 	lsl.w	r2, r0, r2
 8010cb4:	ea21 0102 	bic.w	r1, r1, r2
 8010cb8:	6019      	str	r1, [r3, #0]
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
 8010cba:	4620      	mov	r0, r4
 8010cbc:	f7ff fd9a 	bl	80107f4 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8010cc0:	f7ff ff3a 	bl	8010b38 <xTaskResumeAll>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010cc4:	b918      	cbnz	r0, 8010cce <vTaskDelayUntil+0x6a>
		{
			portYIELD_WITHIN_API();
		}
	}
 8010cc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
 8010cca:	f000 b89b 	b.w	8010e04 <vPortYieldFromISR>
 8010cce:	bd38      	pop	{r3, r4, r5, pc}
 8010cd0:	20000134 	.word	0x20000134
 8010cd4:	2000011c 	.word	0x2000011c
 8010cd8:	2000013c 	.word	0x2000013c

08010cdc <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 8010cdc:	4b0f      	ldr	r3, [pc, #60]	; (8010d1c <vTaskSwitchContext+0x40>)
 8010cde:	6818      	ldr	r0, [r3, #0]
 8010ce0:	b110      	cbz	r0, 8010ce8 <vTaskSwitchContext+0xc>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
 8010ce2:	2201      	movs	r2, #1
 8010ce4:	4b0e      	ldr	r3, [pc, #56]	; (8010d20 <vTaskSwitchContext+0x44>)
 8010ce6:	e016      	b.n	8010d16 <vTaskSwitchContext+0x3a>
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
 8010ce8:	490e      	ldr	r1, [pc, #56]	; (8010d24 <vTaskSwitchContext+0x48>)
 8010cea:	680a      	ldr	r2, [r1, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline unsigned char ucPortCountLeadingZeros( unsigned long ulBitmap )
	{
	unsigned char ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8010cec:	fab2 f382 	clz	r3, r2
 8010cf0:	4a0d      	ldr	r2, [pc, #52]	; (8010d28 <vTaskSwitchContext+0x4c>)
 8010cf2:	b2d8      	uxtb	r0, r3
 8010cf4:	2114      	movs	r1, #20
 8010cf6:	f1c0 031f 	rsb	r3, r0, #31
 8010cfa:	fb01 2003 	mla	r0, r1, r3, r2
 8010cfe:	f100 0108 	add.w	r1, r0, #8
 8010d02:	6843      	ldr	r3, [r0, #4]
 8010d04:	685a      	ldr	r2, [r3, #4]
 8010d06:	4b09      	ldr	r3, [pc, #36]	; (8010d2c <vTaskSwitchContext+0x50>)
 8010d08:	6042      	str	r2, [r0, #4]
 8010d0a:	428a      	cmp	r2, r1
 8010d0c:	bf04      	itt	eq
 8010d0e:	6852      	ldreq	r2, [r2, #4]
 8010d10:	6042      	streq	r2, [r0, #4]
 8010d12:	6840      	ldr	r0, [r0, #4]
 8010d14:	68c2      	ldr	r2, [r0, #12]
 8010d16:	601a      	str	r2, [r3, #0]
 8010d18:	4770      	bx	lr
 8010d1a:	bf00      	nop
 8010d1c:	20000114 	.word	0x20000114
 8010d20:	20000158 	.word	0x20000158
 8010d24:	2000013c 	.word	0x2000013c
 8010d28:	200000b0 	.word	0x200000b0
 8010d2c:	2000011c 	.word	0x2000011c

08010d30 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 8010d30:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010d34:	f04f 32ff 	mov.w	r2, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 8010d38:	2100      	movs	r1, #0
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010d3a:	6082      	str	r2, [r0, #8]
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 8010d3c:	6043      	str	r3, [r0, #4]
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
 8010d3e:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
 8010d40:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 8010d42:	6001      	str	r1, [r0, #0]
 8010d44:	4770      	bx	lr

08010d46 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8010d46:	2300      	movs	r3, #0
 8010d48:	6103      	str	r3, [r0, #16]
 8010d4a:	4770      	bx	lr

08010d4c <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
 8010d4c:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
 8010d4e:	685a      	ldr	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
 8010d50:	608b      	str	r3, [r1, #8]
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;

	pxNewListItem->pxNext = pxIndex->pxNext;
 8010d52:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 8010d54:	685a      	ldr	r2, [r3, #4]
 8010d56:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 8010d58:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 8010d5a:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8010d5c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8010d5e:	6801      	ldr	r1, [r0, #0]
 8010d60:	1c4b      	adds	r3, r1, #1
 8010d62:	6003      	str	r3, [r0, #0]
 8010d64:	4770      	bx	lr

08010d66 <vListInsert>:
{
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 8010d66:	680a      	ldr	r2, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010d68:	1c53      	adds	r3, r2, #1
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
 8010d6a:	b510      	push	{r4, lr}
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010d6c:	d101      	bne.n	8010d72 <vListInsert+0xc>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010d6e:	6903      	ldr	r3, [r0, #16]
 8010d70:	e007      	b.n	8010d82 <vListInsert+0x1c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8010d72:	f100 0308 	add.w	r3, r0, #8
 8010d76:	685c      	ldr	r4, [r3, #4]
 8010d78:	6824      	ldr	r4, [r4, #0]
 8010d7a:	4294      	cmp	r4, r2
 8010d7c:	d801      	bhi.n	8010d82 <vListInsert+0x1c>
 8010d7e:	685b      	ldr	r3, [r3, #4]
 8010d80:	e7f9      	b.n	8010d76 <vListInsert+0x10>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010d82:	685a      	ldr	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIterator;
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8010d84:	6108      	str	r0, [r1, #16]
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 8010d86:	6091      	str	r1, [r2, #8]
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010d88:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
	pxNewListItem->pxPrevious = pxIterator;
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 8010d8a:	6059      	str	r1, [r3, #4]
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
	pxNewListItem->pxPrevious = pxIterator;
 8010d8c:	608b      	str	r3, [r1, #8]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8010d8e:	6801      	ldr	r1, [r0, #0]
 8010d90:	1c4b      	adds	r3, r1, #1
 8010d92:	6003      	str	r3, [r0, #0]
 8010d94:	bd10      	pop	{r4, pc}

08010d96 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010d96:	6843      	ldr	r3, [r0, #4]
 8010d98:	6882      	ldr	r2, [r0, #8]
 8010d9a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010d9c:	6882      	ldr	r2, [r0, #8]
 8010d9e:	6053      	str	r3, [r2, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 8010da0:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010da2:	6859      	ldr	r1, [r3, #4]
 8010da4:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010da6:	bf08      	it	eq
 8010da8:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
 8010daa:	2200      	movs	r2, #0
 8010dac:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8010dae:	6818      	ldr	r0, [r3, #0]
 8010db0:	1e41      	subs	r1, r0, #1
 8010db2:	6019      	str	r1, [r3, #0]

	return pxList->uxNumberOfItems;
 8010db4:	6818      	ldr	r0, [r3, #0]
}
 8010db6:	4770      	bx	lr

08010db8 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8010db8:	4803      	ldr	r0, [pc, #12]	; (8010dc8 <prvPortStartFirstTask+0x10>)
 8010dba:	6800      	ldr	r0, [r0, #0]
 8010dbc:	6800      	ldr	r0, [r0, #0]
 8010dbe:	f380 8808 	msr	MSP, r0
 8010dc2:	b662      	cpsie	i
 8010dc4:	df00      	svc	0
 8010dc6:	bf00      	nop
 8010dc8:	e000ed08 	.word	0xe000ed08

08010dcc <pxPortInitialiseStack>:
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010dcc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
 8010dd0:	e900 000a 	stmdb	r0, {r1, r3}
	pxTopOfStack--;
	*pxTopOfStack = 0;	/* LR */
 8010dd4:	2300      	movs	r3, #0
 8010dd6:	f840 3c0c 	str.w	r3, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
 8010dda:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
 8010dde:	3840      	subs	r0, #64	; 0x40
 8010de0:	4770      	bx	lr
	...

08010de4 <vPortSVCHandler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010de4:	4b06      	ldr	r3, [pc, #24]	; (8010e00 <pxCurrentTCBConst2>)
 8010de6:	6819      	ldr	r1, [r3, #0]
 8010de8:	6808      	ldr	r0, [r1, #0]
 8010dea:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8010dee:	f380 8809 	msr	PSP, r0
 8010df2:	f04f 0000 	mov.w	r0, #0
 8010df6:	f380 8811 	msr	BASEPRI, r0
 8010dfa:	f04e 0e0d 	orr.w	lr, lr, #13
 8010dfe:	4770      	bx	lr

08010e00 <pxCurrentTCBConst2>:
 8010e00:	2000011c 	.word	0x2000011c

08010e04 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010e04:	4b02      	ldr	r3, [pc, #8]	; (8010e10 <vPortYieldFromISR+0xc>)
 8010e06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e0a:	601a      	str	r2, [r3, #0]
 8010e0c:	4770      	bx	lr
 8010e0e:	bf00      	nop
 8010e10:	e000ed04 	.word	0xe000ed04

08010e14 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
 8010e14:	f3ef 8011 	mrs	r0, BASEPRI
 8010e18:	f04f 01bf 	mov.w	r1, #191	; 0xbf
 8010e1c:	f381 8811 	msr	BASEPRI, r1
 8010e20:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
 8010e22:	2000      	movs	r0, #0

08010e24 <vPortEnterCritical>:
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010e24:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
 8010e26:	f7ff fff5 	bl	8010e14 <ulPortSetInterruptMask>
	uxCriticalNesting++;
 8010e2a:	4b02      	ldr	r3, [pc, #8]	; (8010e34 <vPortEnterCritical+0x10>)
 8010e2c:	681a      	ldr	r2, [r3, #0]
 8010e2e:	1c50      	adds	r0, r2, #1
 8010e30:	6018      	str	r0, [r3, #0]
 8010e32:	bd08      	pop	{r3, pc}
 8010e34:	20000004 	.word	0x20000004

08010e38 <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
 8010e38:	f380 8811 	msr	BASEPRI, r0
 8010e3c:	4770      	bx	lr
	...

08010e40 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	uxCriticalNesting--;
 8010e40:	4b03      	ldr	r3, [pc, #12]	; (8010e50 <vPortExitCritical+0x10>)
 8010e42:	6818      	ldr	r0, [r3, #0]
 8010e44:	3801      	subs	r0, #1
 8010e46:	6018      	str	r0, [r3, #0]
	if( uxCriticalNesting == 0 )
 8010e48:	b908      	cbnz	r0, 8010e4e <vPortExitCritical+0xe>
	{
		portENABLE_INTERRUPTS();
 8010e4a:	f7ff bff5 	b.w	8010e38 <vPortClearInterruptMask>
 8010e4e:	4770      	bx	lr
 8010e50:	20000004 	.word	0x20000004

08010e54 <xPortPendSVHandler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010e54:	f3ef 8009 	mrs	r0, PSP
 8010e58:	4b0c      	ldr	r3, [pc, #48]	; (8010e8c <pxCurrentTCBConst>)
 8010e5a:	681a      	ldr	r2, [r3, #0]
 8010e5c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8010e60:	6010      	str	r0, [r2, #0]
 8010e62:	e92d 4008 	stmdb	sp!, {r3, lr}
 8010e66:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8010e6a:	f380 8811 	msr	BASEPRI, r0
 8010e6e:	f7ff ff35 	bl	8010cdc <vTaskSwitchContext>
 8010e72:	f04f 0000 	mov.w	r0, #0
 8010e76:	f380 8811 	msr	BASEPRI, r0
 8010e7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010e7e:	6819      	ldr	r1, [r3, #0]
 8010e80:	6808      	ldr	r0, [r1, #0]
 8010e82:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8010e86:	f380 8809 	msr	PSP, r0
 8010e8a:	4770      	bx	lr

08010e8c <pxCurrentTCBConst>:
 8010e8c:	2000011c 	.word	0x2000011c

08010e90 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010e90:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010e92:	4b06      	ldr	r3, [pc, #24]	; (8010eac <xPortSysTickHandler+0x1c>)
 8010e94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e98:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
 8010e9a:	f7ff ffbb 	bl	8010e14 <ulPortSetInterruptMask>
	{
		vTaskIncrementTick();
 8010e9e:	f7ff fdd5 	bl	8010a4c <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
 8010ea2:	2000      	movs	r0, #0
}
 8010ea4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
	{
		vTaskIncrementTick();
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
 8010ea8:	f7ff bfc6 	b.w	8010e38 <vPortClearInterruptMask>
 8010eac:	e000ed04 	.word	0xe000ed04

08010eb0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
 8010eb0:	4b03      	ldr	r3, [pc, #12]	; (8010ec0 <vPortSetupTimerInterrupt+0x10>)
 8010eb2:	4a04      	ldr	r2, [pc, #16]	; (8010ec4 <vPortSetupTimerInterrupt+0x14>)
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8010eb4:	2007      	movs	r0, #7
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
 8010eb6:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8010eb8:	f843 0c04 	str.w	r0, [r3, #-4]
 8010ebc:	4770      	bx	lr
 8010ebe:	bf00      	nop
 8010ec0:	e000e014 	.word	0xe000e014
 8010ec4:	0002903f 	.word	0x0002903f

08010ec8 <xPortStartScheduler>:
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010ec8:	4b09      	ldr	r3, [pc, #36]	; (8010ef0 <xPortStartScheduler+0x28>)
 8010eca:	681a      	ldr	r2, [r3, #0]
 8010ecc:	f442 007f 	orr.w	r0, r2, #16711680	; 0xff0000

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
 8010ed0:	b510      	push	{r4, lr}
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010ed2:	6018      	str	r0, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010ed4:	6819      	ldr	r1, [r3, #0]
 8010ed6:	f041 447f 	orr.w	r4, r1, #4278190080	; 0xff000000
 8010eda:	601c      	str	r4, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010edc:	f7ff ffe8 	bl	8010eb0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010ee0:	4b04      	ldr	r3, [pc, #16]	; (8010ef4 <xPortStartScheduler+0x2c>)
 8010ee2:	2400      	movs	r4, #0
 8010ee4:	601c      	str	r4, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010ee6:	f7ff ff67 	bl	8010db8 <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
}
 8010eea:	4620      	mov	r0, r4
 8010eec:	bd10      	pop	{r4, pc}
 8010eee:	bf00      	nop
 8010ef0:	e000ed20 	.word	0xe000ed20
 8010ef4:	20000004 	.word	0x20000004

08010ef8 <umm_disconnect_from_free_list>:
     UMM_NBLOCK(c)                                = (c+blocks) | freemask;
}

// ----------------------------------------------------------------------------

static void umm_disconnect_from_free_list( unsigned short int c ) {
 8010ef8:	b530      	push	{r4, r5, lr}
    // Disconnect this block from the FREE list

    UMM_NFREE(UMM_PFREE(c)) = UMM_NFREE(c);
 8010efa:	4a09      	ldr	r2, [pc, #36]	; (8010f20 <umm_disconnect_from_free_list+0x28>)
 8010efc:	210c      	movs	r1, #12
 8010efe:	4348      	muls	r0, r1
 8010f00:	1813      	adds	r3, r2, r0
 8010f02:	88dc      	ldrh	r4, [r3, #6]
 8010f04:	889d      	ldrh	r5, [r3, #4]
 8010f06:	fb01 2404 	mla	r4, r1, r4, r2
 8010f0a:	80a5      	strh	r5, [r4, #4]
    UMM_PFREE(UMM_NFREE(c)) = UMM_PFREE(c);
 8010f0c:	889d      	ldrh	r5, [r3, #4]
 8010f0e:	88dc      	ldrh	r4, [r3, #6]
 8010f10:	fb01 2105 	mla	r1, r1, r5, r2
 8010f14:	80cc      	strh	r4, [r1, #6]

    // And clear the free block indicator

    UMM_NBLOCK(c) &= (~UMM_FREELIST_MASK);
 8010f16:	881b      	ldrh	r3, [r3, #0]
 8010f18:	0459      	lsls	r1, r3, #17
 8010f1a:	0c4b      	lsrs	r3, r1, #17
 8010f1c:	5213      	strh	r3, [r2, r0]
 8010f1e:	bd30      	pop	{r4, r5, pc}
 8010f20:	2000065c 	.word	0x2000065c

08010f24 <umm_assimilate_up>:

// ----------------------------------------------------------------------------

// static int foo = 0;

static void umm_assimilate_up( unsigned short int c ) {
 8010f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  if( UMM_NBLOCK(UMM_NBLOCK(c)) & UMM_FREELIST_MASK ) {
 8010f28:	250c      	movs	r5, #12
 8010f2a:	4c10      	ldr	r4, [pc, #64]	; (8010f6c <umm_assimilate_up+0x48>)
 8010f2c:	fb05 f700 	mul.w	r7, r5, r0
 8010f30:	19e6      	adds	r6, r4, r7

// ----------------------------------------------------------------------------

// static int foo = 0;

static void umm_assimilate_up( unsigned short int c ) {
 8010f32:	4680      	mov	r8, r0

  if( UMM_NBLOCK(UMM_NBLOCK(c)) & UMM_FREELIST_MASK ) {
 8010f34:	8830      	ldrh	r0, [r6, #0]
 8010f36:	fb05 4300 	mla	r3, r5, r0, r4
 8010f3a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8010f3e:	2900      	cmp	r1, #0
 8010f40:	da12      	bge.n	8010f68 <umm_assimilate_up+0x44>

    DBG_LOG_DEBUG( "Assimilate up to next block, which is FREE\n" );

    // Disconnect the next block from the FREE list

    umm_disconnect_from_free_list( UMM_NBLOCK(c) );
 8010f42:	f7ff ffd9 	bl	8010ef8 <umm_disconnect_from_free_list>

    // Assimilate the next block with this one

    UMM_PBLOCK(UMM_NBLOCK(UMM_NBLOCK(c)) & UMM_BLOCKNO_MASK) = c;
 8010f46:	8830      	ldrh	r0, [r6, #0]
 8010f48:	fb05 4200 	mla	r2, r5, r0, r4
 8010f4c:	8813      	ldrh	r3, [r2, #0]
 8010f4e:	0459      	lsls	r1, r3, #17
 8010f50:	0c48      	lsrs	r0, r1, #17
 8010f52:	fb05 4200 	mla	r2, r5, r0, r4
 8010f56:	f8a2 8002 	strh.w	r8, [r2, #2]
    UMM_NBLOCK(c) = UMM_NBLOCK(UMM_NBLOCK(c)) & UMM_BLOCKNO_MASK;
 8010f5a:	8833      	ldrh	r3, [r6, #0]
 8010f5c:	fb05 4503 	mla	r5, r5, r3, r4
 8010f60:	8829      	ldrh	r1, [r5, #0]
 8010f62:	0448      	lsls	r0, r1, #17
 8010f64:	0c42      	lsrs	r2, r0, #17
 8010f66:	53e2      	strh	r2, [r4, r7]
 8010f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f6c:	2000065c 	.word	0x2000065c

08010f70 <vPortFree>:
    return( UMM_PBLOCK(c) );
}

// ----------------------------------------------------------------------------

void umm_free( void *ptr ) {
 8010f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  unsigned short int c;

  // If we're being asked to free a NULL pointer, well that's just silly!

  if( (void *)0 == ptr ) {
 8010f72:	4607      	mov	r7, r0
 8010f74:	2800      	cmp	r0, #0
 8010f76:	d032      	beq.n	8010fde <vPortFree+0x6e>
  //
  UMM_CRITICAL_ENTRY();

  // Figure out which block we're in. Note the use of truncated division...

  c = (ptr-(void *)(&(umm_heap[0])))/sizeof(umm_block);
 8010f78:	4c19      	ldr	r4, [pc, #100]	; (8010fe0 <vPortFree+0x70>)
 8010f7a:	250c      	movs	r5, #12
 8010f7c:	1b3f      	subs	r7, r7, r4
  // NOTE:  See the new umm_info() function that you can use to see if a ptr is
  //        on the free list!

  // Protect the critical section...
  //
  UMM_CRITICAL_ENTRY();
 8010f7e:	f7ff fd51 	bl	8010a24 <vTaskSuspendAll>

  // Figure out which block we're in. Note the use of truncated division...

  c = (ptr-(void *)(&(umm_heap[0])))/sizeof(umm_block);
 8010f82:	fbb7 f0f5 	udiv	r0, r7, r5
 8010f86:	b286      	uxth	r6, r0
  // Release the critical section...
  //
  UMM_CRITICAL_EXIT();

  return( ptr );
}
 8010f88:	4637      	mov	r7, r6

  umm_assimilate_up( c );

  // Then assimilate with the previous block if possible

  if( UMM_NBLOCK(UMM_PBLOCK(c)) & UMM_FREELIST_MASK ) {
 8010f8a:	436f      	muls	r7, r5

  DBG_LOG_DEBUG( "Freeing block %6d\n", c );

  // Now let's assimilate this block with the next one if possible.

  umm_assimilate_up( c );
 8010f8c:	4630      	mov	r0, r6
 8010f8e:	f7ff ffc9 	bl	8010f24 <umm_assimilate_up>

  // Then assimilate with the previous block if possible

  if( UMM_NBLOCK(UMM_PBLOCK(c)) & UMM_FREELIST_MASK ) {
 8010f92:	19e3      	adds	r3, r4, r7
 8010f94:	8859      	ldrh	r1, [r3, #2]
 8010f96:	4369      	muls	r1, r5
 8010f98:	5e62      	ldrsh	r2, [r4, r1]
 8010f9a:	2a00      	cmp	r2, #0
 8010f9c:	da0b      	bge.n	8010fb6 <vPortFree+0x46>

// ----------------------------------------------------------------------------

static unsigned short int umm_assimilate_down( unsigned short int c, unsigned short int freemask ) {

    UMM_NBLOCK(UMM_PBLOCK(c)) = UMM_NBLOCK(c) | freemask;
 8010f9e:	881a      	ldrh	r2, [r3, #0]
 8010fa0:	ea6f 4042 	mvn.w	r0, r2, lsl #17
 8010fa4:	ea6f 4250 	mvn.w	r2, r0, lsr #17
 8010fa8:	5262      	strh	r2, [r4, r1]
    UMM_PBLOCK(UMM_NBLOCK(c)) = UMM_PBLOCK(c);
 8010faa:	8859      	ldrh	r1, [r3, #2]
 8010fac:	881b      	ldrh	r3, [r3, #0]
 8010fae:	fb05 4403 	mla	r4, r5, r3, r4
 8010fb2:	8061      	strh	r1, [r4, #2]
 8010fb4:	e00f      	b.n	8010fd6 <vPortFree+0x66>
    // The previous block is not a free block, so add this one to the head
    // of the free list

    DBG_LOG_DEBUG( "Just add to head of free list\n" );

    UMM_PFREE(UMM_NFREE(0)) = c;
 8010fb6:	88a0      	ldrh	r0, [r4, #4]
 8010fb8:	b281      	uxth	r1, r0
 8010fba:	fb05 4501 	mla	r5, r5, r1, r4
    UMM_NFREE(c)            = UMM_NFREE(0);
    UMM_PFREE(c)            = 0;
 8010fbe:	2200      	movs	r2, #0
    // The previous block is not a free block, so add this one to the head
    // of the free list

    DBG_LOG_DEBUG( "Just add to head of free list\n" );

    UMM_PFREE(UMM_NFREE(0)) = c;
 8010fc0:	80ee      	strh	r6, [r5, #6]
    UMM_NFREE(c)            = UMM_NFREE(0);
 8010fc2:	8098      	strh	r0, [r3, #4]
    UMM_PFREE(c)            = 0;
 8010fc4:	719a      	strb	r2, [r3, #6]
 8010fc6:	71da      	strb	r2, [r3, #7]
    UMM_NFREE(0)            = c;
 8010fc8:	80a6      	strh	r6, [r4, #4]

    UMM_NBLOCK(c)          |= UMM_FREELIST_MASK;
 8010fca:	881b      	ldrh	r3, [r3, #0]
 8010fcc:	ea6f 4043 	mvn.w	r0, r3, lsl #17
 8010fd0:	ea6f 4150 	mvn.w	r1, r0, lsr #17
 8010fd4:	53e1      	strh	r1, [r4, r7]
#endif

  // Release the critical section...
  //
  UMM_CRITICAL_EXIT();
}
 8010fd6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  }
#endif

  // Release the critical section...
  //
  UMM_CRITICAL_EXIT();
 8010fda:	f7ff bdad 	b.w	8010b38 <xTaskResumeAll>
 8010fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010fe0:	2000065c 	.word	0x2000065c

08010fe4 <pvPortMalloc>:
}

// ----------------------------------------------------------------------------

void *umm_malloc( size_t size ) {
 8010fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // the very first thing we do is figure out if we're being asked to allocate
  // a size of 0 - and if we are we'll simply return a null pointer. if not
  // then reduce the size by 1 byte so that the subsequent calculations on
  // the number of blocks to allocate are easier...

  if( 0 == size ) {
 8010fe6:	4604      	mov	r4, r0
 8010fe8:	2800      	cmp	r0, #0
 8010fea:	f000 8083 	beq.w	80110f4 <pvPortMalloc+0x110>
    return( (void *)NULL );
  }

  // Protect the critical section...
  //
  UMM_CRITICAL_ENTRY();
 8010fee:	f7ff fd19 	bl	8010a24 <vTaskSuspendAll>
  //
  // When a block removed from the free list, the space used by the free
  // pointers is available for data. That's what the first calculation
  // of size is doing.

  if( size <= (sizeof(((umm_block *)0)->body)) )
 8010ff2:	2c08      	cmp	r4, #8
 8010ff4:	d907      	bls.n	8011006 <pvPortMalloc+0x22>
    return( 1 );

  // If it's for more than that, then we need to figure out the number of
  // additional whole blocks the size of an umm_block are required.

  size -= ( 1 + (sizeof(((umm_block *)0)->body)) );
 8010ff6:	f1a4 0109 	sub.w	r1, r4, #9

  return( 2 + size/(sizeof(umm_block)) );
 8010ffa:	230c      	movs	r3, #12
 8010ffc:	fbb1 f0f3 	udiv	r0, r1, r3
 8011000:	1c82      	adds	r2, r0, #2
 8011002:	b291      	uxth	r1, r2
 8011004:	e000      	b.n	8011008 <pvPortMalloc+0x24>
  // When a block removed from the free list, the space used by the free
  // pointers is available for data. That's what the first calculation
  // of size is doing.

  if( size <= (sizeof(((umm_block *)0)->body)) )
    return( 1 );
 8011006:	2101      	movs	r1, #1
  // enough to hold the number of blocks we need.
  //
  // This part may be customized to be a best-fit, worst-fit, or first-fit
  // algorithm

  cf = UMM_NFREE(0);
 8011008:	4c3b      	ldr	r4, [pc, #236]	; (80110f8 <pvPortMalloc+0x114>)
 801100a:	88a2      	ldrh	r2, [r4, #4]

  bestBlock = UMM_NFREE(0);
  bestSize  = 0x7FFF;
 801100c:	f647 76ff 	movw	r6, #32767	; 0x7fff
  // This part may be customized to be a best-fit, worst-fit, or first-fit
  // algorithm

  cf = UMM_NFREE(0);

  bestBlock = UMM_NFREE(0);
 8011010:	4614      	mov	r4, r2
// ----------------------------------------------------------------------------

void *umm_malloc( size_t size ) {

  unsigned short int blocks;
  unsigned short int blockSize = 0;
 8011012:	2000      	movs	r0, #0
  cf = UMM_NFREE(0);

  bestBlock = UMM_NFREE(0);
  bestSize  = 0x7FFF;

  while( UMM_NFREE(cf) ) {
 8011014:	4b38      	ldr	r3, [pc, #224]	; (80110f8 <pvPortMalloc+0x114>)
 8011016:	250c      	movs	r5, #12
 8011018:	fb05 3e02 	mla	lr, r5, r2, r3
 801101c:	f8be 7004 	ldrh.w	r7, [lr, #4]
 8011020:	b16f      	cbz	r7, 801103e <pvPortMalloc+0x5a>
    blockSize = (UMM_NBLOCK(cf) & UMM_BLOCKNO_MASK) - cf;
 8011022:	f8be 5000 	ldrh.w	r5, [lr]
 8011026:	046b      	lsls	r3, r5, #17
 8011028:	ebc2 4053 	rsb	r0, r2, r3, lsr #17
 801102c:	b280      	uxth	r0, r0
#if defined UMM_FIRST_FIT
    // This is the first block that fits!
    if( (blockSize >= blocks) )
        break;
#elif defined UMM_BEST_FIT
    if( (blockSize >= blocks) && (blockSize < bestSize) ) {
 801102e:	4288      	cmp	r0, r1
 8011030:	d303      	bcc.n	801103a <pvPortMalloc+0x56>
 8011032:	42b0      	cmp	r0, r6
 8011034:	bf3c      	itt	cc
 8011036:	4614      	movcc	r4, r2
 8011038:	4606      	movcc	r6, r0
 801103a:	463a      	mov	r2, r7
 801103c:	e7ea      	b.n	8011014 <pvPortMalloc+0x30>
#endif

    cf = UMM_NFREE(cf);
  }

  if( 0x7FFF != bestSize ) {
 801103e:	f647 77ff 	movw	r7, #32767	; 0x7fff
 8011042:	42be      	cmp	r6, r7
 8011044:	bf08      	it	eq
 8011046:	4614      	moveq	r4, r2
    cf        = bestBlock;
    blockSize = bestSize;
  }

  if( UMM_NBLOCK(cf) & UMM_BLOCKNO_MASK ) {
 8011048:	fb05 3204 	mla	r2, r5, r4, r3
#endif

    cf = UMM_NFREE(cf);
  }

  if( 0x7FFF != bestSize ) {
 801104c:	bf18      	it	ne
 801104e:	4630      	movne	r0, r6
    cf        = bestBlock;
    blockSize = bestSize;
  }

  if( UMM_NBLOCK(cf) & UMM_BLOCKNO_MASK ) {
 8011050:	8817      	ldrh	r7, [r2, #0]
 8011052:	047a      	lsls	r2, r7, #17
 8011054:	46a4      	mov	ip, r4
 8011056:	0c57      	lsrs	r7, r2, #17
 8011058:	b1e2      	cbz	r2, 8011094 <pvPortMalloc+0xb0>
    // This is an existing block in the memory heap, we just need to split off
    // what we need, unlink it from the free list and mark it as in use, and
    // link the rest of the block back into the freelist as if it was a new
    // block on the free list...

    if( blockSize == blocks ) {
 801105a:	4288      	cmp	r0, r1
 801105c:	d103      	bne.n	8011066 <pvPortMalloc+0x82>
      // It's an exact fit and we don't neet to split off a block.
      DBG_LOG_DEBUG( "Allocating %6d blocks starting at %6d - exact\n", blocks, cf );

      // Disconnect this block from the FREE list

      umm_disconnect_from_free_list( cf );
 801105e:	4620      	mov	r0, r4
 8011060:	f7ff ff4a 	bl	8010ef8 <umm_disconnect_from_free_list>
 8011064:	e03e      	b.n	80110e4 <pvPortMalloc+0x100>

    } else {
     // It's not an exact fit and we need to split off a block.
     DBG_LOG_DEBUG( "Allocating %6d blocks starting at %6d - existing\n", blocks, cf );

     umm_make_new_block( cf, blockSize-blocks, UMM_FREELIST_MASK );
 8011066:	1a40      	subs	r0, r0, r1

static void umm_make_new_block( unsigned short int c,
                                unsigned short int blocks,
                                unsigned short int freemask ) {

     UMM_NBLOCK(c+blocks) = UMM_NBLOCK(c) & UMM_BLOCKNO_MASK;
 8011068:	fa14 f080 	uxtah	r0, r4, r0
 801106c:	fb05 f200 	mul.w	r2, r5, r0
 8011070:	1899      	adds	r1, r3, r2
 8011072:	529f      	strh	r7, [r3, r2]
     UMM_PBLOCK(c+blocks) = c;
 8011074:	804c      	strh	r4, [r1, #2]

     UMM_PBLOCK(UMM_NBLOCK(c) & UMM_BLOCKNO_MASK) = (c+blocks);
 8011076:	b284      	uxth	r4, r0
 8011078:	fb05 f00c 	mul.w	r0, r5, ip
 801107c:	5a1a      	ldrh	r2, [r3, r0]
 801107e:	0451      	lsls	r1, r2, #17
 8011080:	0c4a      	lsrs	r2, r1, #17
 8011082:	fb05 3502 	mla	r5, r5, r2, r3
     UMM_NBLOCK(c)                                = (c+blocks) | freemask;
 8011086:	ea6f 4144 	mvn.w	r1, r4, lsl #17
 801108a:	ea6f 4251 	mvn.w	r2, r1, lsr #17
                                unsigned short int freemask ) {

     UMM_NBLOCK(c+blocks) = UMM_NBLOCK(c) & UMM_BLOCKNO_MASK;
     UMM_PBLOCK(c+blocks) = c;

     UMM_PBLOCK(UMM_NBLOCK(c) & UMM_BLOCKNO_MASK) = (c+blocks);
 801108e:	806c      	strh	r4, [r5, #2]
     UMM_NBLOCK(c)                                = (c+blocks) | freemask;
 8011090:	521a      	strh	r2, [r3, r0]
 8011092:	e027      	b.n	80110e4 <pvPortMalloc+0x100>
    // We're at the end of the heap - allocate a new block, but check to see if
    // there's enough memory left for the requested block! Actually, we may need
    // one more than that if we're initializing the umm_heap for the first
    // time, which happens in the next conditional...

    if( UMM_NUMBLOCKS <= cf+blocks+1 ) {
 8011094:	1860      	adds	r0, r4, r1
 8011096:	f5b0 7f55 	cmp.w	r0, #852	; 0x354
 801109a:	db07      	blt.n	80110ac <pvPortMalloc+0xc8>
      DBG_LOG_WARNING(  "Can't allocate %5d blocks at %5d\n", blocks, cf );
 801109c:	4622      	mov	r2, r4
 801109e:	4817      	ldr	r0, [pc, #92]	; (80110fc <pvPortMalloc+0x118>)
 80110a0:	f000 fa3a 	bl	8011518 <MIOS32_MIDI_SendDebugMessage>

      // Release the critical section...
      //
      UMM_CRITICAL_EXIT();
 80110a4:	f7ff fd48 	bl	8010b38 <xTaskResumeAll>

      return( (void *)NULL );
 80110a8:	4638      	mov	r0, r7
 80110aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    // Now check to see if we need to initialize the free list...this assumes
    // that the BSS is set to 0 on startup. We should rarely get to the end of
    // the free list so this is the "cheapest" place to put the initialization!

    if( 0 == cf ) {
 80110ac:	b92c      	cbnz	r4, 80110ba <pvPortMalloc+0xd6>
      DBG_LOG_DEBUG( "Initializing malloc free block pointer\n" );
      UMM_NBLOCK(0) = 1;
 80110ae:	2501      	movs	r5, #1
 80110b0:	705c      	strb	r4, [r3, #1]
      UMM_NFREE(0)  = 1;
 80110b2:	715c      	strb	r4, [r3, #5]
    // that the BSS is set to 0 on startup. We should rarely get to the end of
    // the free list so this is the "cheapest" place to put the initialization!

    if( 0 == cf ) {
      DBG_LOG_DEBUG( "Initializing malloc free block pointer\n" );
      UMM_NBLOCK(0) = 1;
 80110b4:	701d      	strb	r5, [r3, #0]
      UMM_NFREE(0)  = 1;
 80110b6:	711d      	strb	r5, [r3, #4]
      cf            = 1;
 80110b8:	462c      	mov	r4, r5
    }

    DBG_LOG_DEBUG( "Allocating %6d blocks starting at %6d - new     \n", blocks, cf );

    UMM_NFREE(UMM_PFREE(cf)) = cf+blocks;
 80110ba:	4b0f      	ldr	r3, [pc, #60]	; (80110f8 <pvPortMalloc+0x114>)
 80110bc:	200c      	movs	r0, #12
 80110be:	fb00 f504 	mul.w	r5, r0, r4
 80110c2:	195a      	adds	r2, r3, r5
 80110c4:	1861      	adds	r1, r4, r1
 80110c6:	88d6      	ldrh	r6, [r2, #6]
 80110c8:	fb00 3706 	mla	r7, r0, r6, r3
 80110cc:	460e      	mov	r6, r1
 80110ce:	80b9      	strh	r1, [r7, #4]

    memcpy( &UMM_BLOCK(cf+blocks), &UMM_BLOCK(cf), sizeof(umm_block) );
 80110d0:	6817      	ldr	r7, [r2, #0]
 80110d2:	4341      	muls	r1, r0
 80110d4:	1858      	adds	r0, r3, r1
 80110d6:	505f      	str	r7, [r3, r1]
 80110d8:	6851      	ldr	r1, [r2, #4]
 80110da:	6041      	str	r1, [r0, #4]
 80110dc:	6892      	ldr	r2, [r2, #8]
 80110de:	6082      	str	r2, [r0, #8]

    UMM_NBLOCK(cf)           = cf+blocks;
 80110e0:	535e      	strh	r6, [r3, r5]
    UMM_PBLOCK(cf+blocks)    = cf;
 80110e2:	8044      	strh	r4, [r0, #2]
  }

  // Release the critical section...
  //
  UMM_CRITICAL_EXIT();
 80110e4:	f7ff fd28 	bl	8010b38 <xTaskResumeAll>

  return( (void *)&UMM_DATA(cf) );
 80110e8:	4b03      	ldr	r3, [pc, #12]	; (80110f8 <pvPortMalloc+0x114>)
 80110ea:	200c      	movs	r0, #12
 80110ec:	fb00 3404 	mla	r4, r0, r4, r3
 80110f0:	1d20      	adds	r0, r4, #4
 80110f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
}
 80110f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80110f6:	bf00      	nop
 80110f8:	2000065c 	.word	0x2000065c
 80110fc:	08017e82 	.word	0x08017e82

08011100 <Default_Handler>:
 * @param  None     
 * @retval : None       
*/

void Default_Handler(void) 
{
 8011100:	e7fe      	b.n	8011100 <Default_Handler>
	...

08011104 <Reset_Handler>:
 * @param  None
 * @retval : None
*/

void Reset_Handler(void)
{
 8011104:	4668      	mov	r0, sp
 8011106:	f020 0107 	bic.w	r1, r0, #7
 801110a:	468d      	mov	sp, r1
 801110c:	b501      	push	{r0, lr}
  unsigned long *pulSrc, *pulDest;

  /* Copy the data segment initializers from flash to SRAM */
  pulSrc = &_sidata;

  for(pulDest = &_sdata; pulDest < &_edata; )
 801110e:	2300      	movs	r3, #0
 *          supplied main() routine is called. 
 * @param  None
 * @retval : None
*/

void Reset_Handler(void)
 8011110:	4a0a      	ldr	r2, [pc, #40]	; (801113c <Reset_Handler+0x38>)
  unsigned long *pulSrc, *pulDest;

  /* Copy the data segment initializers from flash to SRAM */
  pulSrc = &_sidata;

  for(pulDest = &_sdata; pulDest < &_edata; )
 8011112:	490b      	ldr	r1, [pc, #44]	; (8011140 <Reset_Handler+0x3c>)
 *          supplied main() routine is called. 
 * @param  None
 * @retval : None
*/

void Reset_Handler(void)
 8011114:	1898      	adds	r0, r3, r2
  unsigned long *pulSrc, *pulDest;

  /* Copy the data segment initializers from flash to SRAM */
  pulSrc = &_sidata;

  for(pulDest = &_sdata; pulDest < &_edata; )
 8011116:	4288      	cmp	r0, r1
 8011118:	d204      	bcs.n	8011124 <Reset_Handler+0x20>
  {
    *(pulDest++) = *(pulSrc++);
 801111a:	490a      	ldr	r1, [pc, #40]	; (8011144 <Reset_Handler+0x40>)
 801111c:	5858      	ldr	r0, [r3, r1]
 801111e:	5098      	str	r0, [r3, r2]
 8011120:	3304      	adds	r3, #4
 8011122:	e7f5      	b.n	8011110 <Reset_Handler+0xc>
  unsigned long *pulSrc, *pulDest;

  /* Copy the data segment initializers from flash to SRAM */
  pulSrc = &_sidata;

  for(pulDest = &_sdata; pulDest < &_edata; )
 8011124:	4b08      	ldr	r3, [pc, #32]	; (8011148 <Reset_Handler+0x44>)
  {
    *(pulDest++) = *(pulSrc++);
  }
  /* Zero fill the bss segment. */
  for(pulDest = &_sbss; pulDest < &_ebss; )
 8011126:	4a09      	ldr	r2, [pc, #36]	; (801114c <Reset_Handler+0x48>)
 8011128:	4293      	cmp	r3, r2
 801112a:	d203      	bcs.n	8011134 <Reset_Handler+0x30>
  {
    *(pulDest++) = 0;
 801112c:	2000      	movs	r0, #0
 801112e:	f843 0b04 	str.w	r0, [r3], #4
 8011132:	e7f8      	b.n	8011126 <Reset_Handler+0x22>
  }

  /* Call the application's entry point.*/
  main();
 8011134:	f7ff fa62 	bl	80105fc <main>
 8011138:	e7fe      	b.n	8011138 <Reset_Handler+0x34>
 801113a:	bf00      	nop
 801113c:	20000000 	.word	0x20000000
 8011140:	20000060 	.word	0x20000060
 8011144:	080182c0 	.word	0x080182c0
 8011148:	20000060 	.word	0x20000060
 801114c:	20003c18 	.word	0x20003c18

08011150 <_init>:
  while( 1 );
}

// dummy for newer gcc versions
void _init()
{
 8011150:	4770      	bx	lr
	...

08011154 <MIOS32_MIDI_Init>:
//! Initializes MIDI layer
//! \param[in] mode currently only mode 0 supported
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_Init(u32 mode)
{
 8011154:	b538      	push	{r3, r4, r5, lr}
  s32 ret = 0;

  // currently only mode 0 supported
  if( mode != 0 )
 8011156:	4604      	mov	r4, r0
 8011158:	2800      	cmp	r0, #0
 801115a:	d13e      	bne.n	80111da <MIOS32_MIDI_Init+0x86>
    return -1; // unsupported mode

  // set default/debug port as defined in mios32.h/mios32_config.h
  default_port = MIOS32_MIDI_DEFAULT_PORT;
 801115c:	4a20      	ldr	r2, [pc, #128]	; (80111e0 <MIOS32_MIDI_Init+0x8c>)
  debug_port = MIOS32_MIDI_DEBUG_PORT;
 801115e:	4921      	ldr	r1, [pc, #132]	; (80111e4 <MIOS32_MIDI_Init+0x90>)

  // disable callback functions
  direct_rx_callback_func = NULL;
 8011160:	4d21      	ldr	r5, [pc, #132]	; (80111e8 <MIOS32_MIDI_Init+0x94>)
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode

  // set default/debug port as defined in mios32.h/mios32_config.h
  default_port = MIOS32_MIDI_DEFAULT_PORT;
 8011162:	2310      	movs	r3, #16
 8011164:	7013      	strb	r3, [r2, #0]
  debug_port = MIOS32_MIDI_DEBUG_PORT;
 8011166:	700b      	strb	r3, [r1, #0]

  // disable callback functions
  direct_rx_callback_func = NULL;
  direct_tx_callback_func = NULL;
 8011168:	4b20      	ldr	r3, [pc, #128]	; (80111ec <MIOS32_MIDI_Init+0x98>)
  sysex_callback_func = NULL;
 801116a:	4a21      	ldr	r2, [pc, #132]	; (80111f0 <MIOS32_MIDI_Init+0x9c>)
  timeout_callback_func = NULL;
 801116c:	4921      	ldr	r1, [pc, #132]	; (80111f4 <MIOS32_MIDI_Init+0xa0>)
  // set default/debug port as defined in mios32.h/mios32_config.h
  default_port = MIOS32_MIDI_DEFAULT_PORT;
  debug_port = MIOS32_MIDI_DEBUG_PORT;

  // disable callback functions
  direct_rx_callback_func = NULL;
 801116e:	6028      	str	r0, [r5, #0]
  direct_tx_callback_func = NULL;
 8011170:	6018      	str	r0, [r3, #0]
  sysex_callback_func = NULL;
  timeout_callback_func = NULL;
  debug_command_callback_func = NULL;
 8011172:	4d21      	ldr	r5, [pc, #132]	; (80111f8 <MIOS32_MIDI_Init+0xa4>)
  filebrowser_command_callback_func = NULL;
 8011174:	4b21      	ldr	r3, [pc, #132]	; (80111fc <MIOS32_MIDI_Init+0xa8>)
  debug_port = MIOS32_MIDI_DEBUG_PORT;

  // disable callback functions
  direct_rx_callback_func = NULL;
  direct_tx_callback_func = NULL;
  sysex_callback_func = NULL;
 8011176:	6010      	str	r0, [r2, #0]
  timeout_callback_func = NULL;
 8011178:	6008      	str	r0, [r1, #0]
  debug_command_callback_func = NULL;
  filebrowser_command_callback_func = NULL;
 801117a:	6018      	str	r0, [r3, #0]
  // disable callback functions
  direct_rx_callback_func = NULL;
  direct_tx_callback_func = NULL;
  sysex_callback_func = NULL;
  timeout_callback_func = NULL;
  debug_command_callback_func = NULL;
 801117c:	6028      	str	r0, [r5, #0]
  filebrowser_command_callback_func = NULL;

  // initialize interfaces
#if !defined(MIOS32_DONT_USE_USB) && !defined(MIOS32_DONT_USE_USB_MIDI)
  if( MIOS32_USB_MIDI_Init(0) < 0 )
 801117e:	f001 fe73 	bl	8012e68 <MIOS32_USB_MIDI_Init>
 8011182:	0fc5      	lsrs	r5, r0, #31
    ret |= (1 << 0);
#endif

#if !defined(MIOS32_DONT_USE_UART) && !defined(MIOS32_DONT_USE_UART_MIDI)
  if( MIOS32_UART_MIDI_Init(0) < 0 )
 8011184:	4620      	mov	r0, r4
 8011186:	f000 fd77 	bl	8011c78 <MIOS32_UART_MIDI_Init>
 801118a:	2800      	cmp	r0, #0
    ret |= (1 << 1);
 801118c:	bfb8      	it	lt
 801118e:	f045 0502 	orrlt.w	r5, r5, #2
#endif

#if !defined(MIOS32_DONT_USE_IIC) && !defined(MIOS32_DONT_USE_IIC_MIDI)
  if( MIOS32_IIC_MIDI_Init(0) < 0 )
 8011192:	2000      	movs	r0, #0
 8011194:	f000 fefe 	bl	8011f94 <MIOS32_IIC_MIDI_Init>
#if !defined(MIOS32_DONT_USE_SPI) && !defined(MIOS32_DONT_USE_SPI_MIDI)
  if( MIOS32_SPI_MIDI_Init(0) < 0 )
    ret |= (1 << 3);
#endif

  last_sysex_port = DEFAULT;
 8011198:	4a19      	ldr	r2, [pc, #100]	; (8011200 <MIOS32_MIDI_Init+0xac>)
  sysex_state.ALL = 0;
 801119a:	4b1a      	ldr	r3, [pc, #104]	; (8011204 <MIOS32_MIDI_Init+0xb0>)
  if( MIOS32_UART_MIDI_Init(0) < 0 )
    ret |= (1 << 1);
#endif

#if !defined(MIOS32_DONT_USE_IIC) && !defined(MIOS32_DONT_USE_IIC_MIDI)
  if( MIOS32_IIC_MIDI_Init(0) < 0 )
 801119c:	2800      	cmp	r0, #0
    ret |= (1 << 2);
 801119e:	bfb8      	it	lt
 80111a0:	f045 0504 	orrlt.w	r5, r5, #4
#if !defined(MIOS32_DONT_USE_SPI) && !defined(MIOS32_DONT_USE_SPI_MIDI)
  if( MIOS32_SPI_MIDI_Init(0) < 0 )
    ret |= (1 << 3);
#endif

  last_sysex_port = DEFAULT;
 80111a4:	2000      	movs	r0, #0
 80111a6:	7010      	strb	r0, [r2, #0]
  sysex_state.ALL = 0;
 80111a8:	7819      	ldrb	r1, [r3, #0]

  sysex_device_id = 0x00;
 80111aa:	4a17      	ldr	r2, [pc, #92]	; (8011208 <MIOS32_MIDI_Init+0xb4>)
  if( MIOS32_SPI_MIDI_Init(0) < 0 )
    ret |= (1 << 3);
#endif

  last_sysex_port = DEFAULT;
  sysex_state.ALL = 0;
 80111ac:	f360 0107 	bfi	r1, r0, #0, #8
 80111b0:	7019      	strb	r1, [r3, #0]

  sysex_device_id = 0x00;
 80111b2:	7010      	strb	r0, [r2, #0]
#ifdef MIOS32_SYS_ADDR_BSL_INFO_BEGIN
  // read from bootloader info range
  u8 *device_id_confirm = (u8 *)MIOS32_SYS_ADDR_DEVICE_ID_CONFIRM;
  u8 *device_id = (u8 *)MIOS32_SYS_ADDR_DEVICE_ID;
  if( *device_id_confirm == 0x42 && *device_id < 0x80 )
 80111b4:	4815      	ldr	r0, [pc, #84]	; (801120c <MIOS32_MIDI_Init+0xb8>)
 80111b6:	7803      	ldrb	r3, [r0, #0]
 80111b8:	2b42      	cmp	r3, #66	; 0x42
 80111ba:	d104      	bne.n	80111c6 <MIOS32_MIDI_Init+0x72>
 80111bc:	4914      	ldr	r1, [pc, #80]	; (8011210 <MIOS32_MIDI_Init+0xbc>)
 80111be:	7808      	ldrb	r0, [r1, #0]
 80111c0:	0601      	lsls	r1, r0, #24
    sysex_device_id = *device_id;
 80111c2:	bf58      	it	pl
 80111c4:	7010      	strbpl	r0, [r2, #0]
#endif

  // SysEx timeout mechanism
  sysex_timeout_ctr = 0;
 80111c6:	4b13      	ldr	r3, [pc, #76]	; (8011214 <MIOS32_MIDI_Init+0xc0>)
  sysex_timeout_ctr_flags.ALL = 0;
 80111c8:	4913      	ldr	r1, [pc, #76]	; (8011218 <MIOS32_MIDI_Init+0xc4>)
  if( *device_id_confirm == 0x42 && *device_id < 0x80 )
    sysex_device_id = *device_id;
#endif

  // SysEx timeout mechanism
  sysex_timeout_ctr = 0;
 80111ca:	2200      	movs	r2, #0
 80111cc:	801a      	strh	r2, [r3, #0]
  sysex_timeout_ctr_flags.ALL = 0;
 80111ce:	2200      	movs	r2, #0
 80111d0:	2300      	movs	r3, #0
 80111d2:	e9c1 2300 	strd	r2, r3, [r1]

  return -ret;
 80111d6:	4268      	negs	r0, r5
 80111d8:	bd38      	pop	{r3, r4, r5, pc}
{
  s32 ret = 0;

  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode
 80111da:	f04f 30ff 	mov.w	r0, #4294967295
  // SysEx timeout mechanism
  sysex_timeout_ctr = 0;
  sysex_timeout_ctr_flags.ALL = 0;

  return -ret;
}
 80111de:	bd38      	pop	{r3, r4, r5, pc}
 80111e0:	20000008 	.word	0x20000008
 80111e4:	2000000a 	.word	0x2000000a
 80111e8:	2000016c 	.word	0x2000016c
 80111ec:	20000164 	.word	0x20000164
 80111f0:	20000190 	.word	0x20000190
 80111f4:	20000194 	.word	0x20000194
 80111f8:	20000184 	.word	0x20000184
 80111fc:	20000170 	.word	0x20000170
 8011200:	20000174 	.word	0x20000174
 8011204:	2000017c 	.word	0x2000017c
 8011208:	20000176 	.word	0x20000176
 801120c:	08003fd0 	.word	0x08003fd0
 8011210:	08003fd1 	.word	0x08003fd1
 8011214:	20000178 	.word	0x20000178
 8011218:	20000188 	.word	0x20000188

0801121c <MIOS32_MIDI_SendPackage>:
//! \return 0 on success
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendPackage(mios32_midi_port_t port, mios32_midi_package_t package)
{
  // if default/debug port: select mapped port
  if( !(port & 0xf0) ) {
 801121c:	f010 0ff0 	tst.w	r0, #240	; 0xf0
//! \param[in] package MIDI package
//! \return -1 if port not available
//! \return 0 on success
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendPackage(mios32_midi_port_t port, mios32_midi_package_t package)
{
 8011220:	b570      	push	{r4, r5, r6, lr}
 8011222:	4604      	mov	r4, r0
 8011224:	460d      	mov	r5, r1
  // if default/debug port: select mapped port
  if( !(port & 0xf0) ) {
 8011226:	d104      	bne.n	8011232 <MIOS32_MIDI_SendPackage+0x16>
    port = (port == MIDI_DEBUG) ? debug_port : default_port;
 8011228:	2801      	cmp	r0, #1
 801122a:	bf0c      	ite	eq
 801122c:	4b19      	ldreq	r3, [pc, #100]	; (8011294 <MIOS32_MIDI_SendPackage+0x78>)
 801122e:	4b1a      	ldrne	r3, [pc, #104]	; (8011298 <MIOS32_MIDI_SendPackage+0x7c>)
 8011230:	781c      	ldrb	r4, [r3, #0]

  // insert subport number into package
  package.cable = port & 0xf;

  // forward to Tx callback function and break if package has been filtered
  if( direct_tx_callback_func != NULL ) {
 8011232:	4b1a      	ldr	r3, [pc, #104]	; (801129c <MIOS32_MIDI_SendPackage+0x80>)
 8011234:	681a      	ldr	r2, [r3, #0]
  if( !(port & 0xf0) ) {
    port = (port == MIDI_DEBUG) ? debug_port : default_port;
  }

  // insert subport number into package
  package.cable = port & 0xf;
 8011236:	f004 060f 	and.w	r6, r4, #15

  // forward to Tx callback function and break if package has been filtered
  if( direct_tx_callback_func != NULL ) {
 801123a:	b972      	cbnz	r2, 801125a <MIOS32_MIDI_SendPackage+0x3e>
    if( (status=direct_tx_callback_func(port, package)) )
      return status;
  }

  // branch depending on selected port
  switch( port & 0xf0 ) {
 801123c:	f004 00f0 	and.w	r0, r4, #240	; 0xf0
 8011240:	2820      	cmp	r0, #32
 8011242:	d012      	beq.n	801126a <MIOS32_MIDI_SendPackage+0x4e>
 8011244:	2830      	cmp	r0, #48	; 0x30
 8011246:	d019      	beq.n	801127c <MIOS32_MIDI_SendPackage+0x60>
 8011248:	2810      	cmp	r0, #16
 801124a:	d120      	bne.n	801128e <MIOS32_MIDI_SendPackage+0x72>
    case USB0://..15
#if !defined(MIOS32_DONT_USE_USB) && !defined(MIOS32_DONT_USE_USB_MIDI)
      return MIOS32_USB_MIDI_PackageSend(package);
 801124c:	f366 1507 	bfi	r5, r6, #4, #4
 8011250:	4628      	mov	r0, r5
      
    default:
      // invalid port
      return -1;
  }
}
 8011252:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  // branch depending on selected port
  switch( port & 0xf0 ) {
    case USB0://..15
#if !defined(MIOS32_DONT_USE_USB) && !defined(MIOS32_DONT_USE_USB_MIDI)
      return MIOS32_USB_MIDI_PackageSend(package);
 8011256:	f001 bf09 	b.w	801306c <MIOS32_USB_MIDI_PackageSend>
  package.cable = port & 0xf;

  // forward to Tx callback function and break if package has been filtered
  if( direct_tx_callback_func != NULL ) {
    s32 status;
    if( (status=direct_tx_callback_func(port, package)) )
 801125a:	f366 1507 	bfi	r5, r6, #4, #4
 801125e:	4620      	mov	r0, r4
 8011260:	4629      	mov	r1, r5
 8011262:	4790      	blx	r2
 8011264:	2800      	cmp	r0, #0
 8011266:	d0e9      	beq.n	801123c <MIOS32_MIDI_SendPackage+0x20>
 8011268:	bd70      	pop	{r4, r5, r6, pc}
      return -1; // USB has been disabled
#endif

    case UART0://..15
#if !defined(MIOS32_DONT_USE_UART) && !defined(MIOS32_DONT_USE_UART_MIDI)
      return MIOS32_UART_MIDI_PackageSend(package.cable, package);
 801126a:	f366 1507 	bfi	r5, r6, #4, #4
 801126e:	f004 000f 	and.w	r0, r4, #15
 8011272:	4629      	mov	r1, r5
      
    default:
      // invalid port
      return -1;
  }
}
 8011274:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return -1; // USB has been disabled
#endif

    case UART0://..15
#if !defined(MIOS32_DONT_USE_UART) && !defined(MIOS32_DONT_USE_UART_MIDI)
      return MIOS32_UART_MIDI_PackageSend(package.cable, package);
 8011278:	f000 bda8 	b.w	8011dcc <MIOS32_UART_MIDI_PackageSend>
      return -1; // UART_MIDI has been disabled
#endif

    case IIC0://..15
#if !defined(MIOS32_DONT_USE_IIC) && !defined(MIOS32_DONT_USE_IIC_MIDI)
      return MIOS32_IIC_MIDI_PackageSend(package.cable, package);
 801127c:	f366 1507 	bfi	r5, r6, #4, #4
 8011280:	f004 000f 	and.w	r0, r4, #15
 8011284:	4629      	mov	r1, r5
      
    default:
      // invalid port
      return -1;
  }
}
 8011286:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return -1; // UART_MIDI has been disabled
#endif

    case IIC0://..15
#if !defined(MIOS32_DONT_USE_IIC) && !defined(MIOS32_DONT_USE_IIC_MIDI)
      return MIOS32_IIC_MIDI_PackageSend(package.cable, package);
 801128a:	f000 be88 	b.w	8011f9e <MIOS32_IIC_MIDI_PackageSend>
      
    case SPIM0://..15
#if !defined(MIOS32_DONT_USE_SPI) && !defined(MIOS32_DONT_USE_SPI_MIDI)
      return MIOS32_SPI_MIDI_PackageSend(package);
#else
      return -1; // SPI_MIDI has been disabled
 801128e:	f04f 30ff 	mov.w	r0, #4294967295
      
    default:
      // invalid port
      return -1;
  }
}
 8011292:	bd70      	pop	{r4, r5, r6, pc}
 8011294:	2000000a 	.word	0x2000000a
 8011298:	20000008 	.word	0x20000008
 801129c:	20000164 	.word	0x20000164

080112a0 <MIOS32_MIDI_SendEvent>:
//! \param[in] evnt2 third MIDI byte
//! \return -1 if port not available
//! \return 0 on success
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendEvent(mios32_midi_port_t port, u8 evnt0, u8 evnt1, u8 evnt2)
{
 80112a0:	b538      	push	{r3, r4, r5, lr}
 80112a2:	460c      	mov	r4, r1

  // MEMO: don't optimize this function by calling MIOS32_MIDI_SendSpecialEvent
  // from here, because the 4 * u8 parameter list of this function leads
  // to best compile results (4*u8 combined to a single u32)

  package.type  = evnt0 >> 4;
 80112a4:	090d      	lsrs	r5, r1, #4
 80112a6:	2100      	movs	r1, #0
 80112a8:	f365 0103 	bfi	r1, r5, #0, #4
  package.evnt0 = evnt0;
 80112ac:	f364 210f 	bfi	r1, r4, #8, #8
  package.evnt1 = evnt1;
 80112b0:	f362 4117 	bfi	r1, r2, #16, #8
  package.evnt2 = evnt2;
 80112b4:	f363 611f 	bfi	r1, r3, #24, #8
  return MIOS32_MIDI_SendPackage(port, package);
 80112b8:	f7ff ffb0 	bl	801121c <MIOS32_MIDI_SendPackage>
}
 80112bc:	bd38      	pop	{r3, r4, r5, pc}

080112be <MIOS32_MIDI_SendNoteOn>:

s32 MIOS32_MIDI_SendNoteOff(mios32_midi_port_t port, mios32_midi_chn_t chn, u8 note, u8 vel)
{ return MIOS32_MIDI_SendEvent(port, 0x80 | chn, note, vel); }

s32 MIOS32_MIDI_SendNoteOn(mios32_midi_port_t port, mios32_midi_chn_t chn, u8 note, u8 vel)
{ return MIOS32_MIDI_SendEvent(port, 0x90 | chn, note, vel); }
 80112be:	f041 0190 	orr.w	r1, r1, #144	; 0x90
 80112c2:	f7ff bfed 	b.w	80112a0 <MIOS32_MIDI_SendEvent>

080112c6 <MIOS32_MIDI_SendCC>:

s32 MIOS32_MIDI_SendPolyPressure(mios32_midi_port_t port, mios32_midi_chn_t chn, u8 note, u8 val)
{ return MIOS32_MIDI_SendEvent(port, 0xa0 | chn, note, val); }

s32 MIOS32_MIDI_SendCC(mios32_midi_port_t port, mios32_midi_chn_t chn, u8 cc_number, u8 val)
{ return MIOS32_MIDI_SendEvent(port, 0xb0 | chn, cc_number,   val); }
 80112c6:	f041 01b0 	orr.w	r1, r1, #176	; 0xb0
 80112ca:	f7ff bfe9 	b.w	80112a0 <MIOS32_MIDI_SendEvent>

080112ce <MIOS32_MIDI_SendSysEx>:
//! \param[in] count number of bytes
//! \return -1 if port not available
//! \return 0 on success
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendSysEx(mios32_midi_port_t port, u8 *stream, u32 count)
{
 80112ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112d2:	4680      	mov	r8, r0
 80112d4:	460e      	mov	r6, r1
 80112d6:	4617      	mov	r7, r2
  u32 offset;
  mios32_midi_package_t package;

  // MEMO: have a look into the project.lss file - gcc optimizes this code pretty well :)

  for(offset=0; offset<count;) {
 80112d8:	2400      	movs	r4, #0
 80112da:	42bc      	cmp	r4, r7
 80112dc:	d235      	bcs.n	801134a <MIOS32_MIDI_SendSysEx+0x7c>
    // package type depends on number of remaining bytes
    switch( count-offset ) {
 80112de:	1b3b      	subs	r3, r7, r4
 80112e0:	2b02      	cmp	r3, #2
 80112e2:	d00d      	beq.n	8011300 <MIOS32_MIDI_SendSysEx+0x32>
 80112e4:	2b03      	cmp	r3, #3
 80112e6:	d019      	beq.n	801131c <MIOS32_MIDI_SendSysEx+0x4e>
 80112e8:	2b01      	cmp	r3, #1
 80112ea:	d119      	bne.n	8011320 <MIOS32_MIDI_SendSysEx+0x52>
      case 1: 
	package.type = 0x5; // SysEx ends with following single byte. 
	package.evnt0 = stream[offset++];
 80112ec:	5d32      	ldrb	r2, [r6, r4]

  for(offset=0; offset<count;) {
    // package type depends on number of remaining bytes
    switch( count-offset ) {
      case 1: 
	package.type = 0x5; // SysEx ends with following single byte. 
 80112ee:	2105      	movs	r1, #5
 80112f0:	f361 0503 	bfi	r5, r1, #0, #4
	package.evnt0 = stream[offset++];
 80112f4:	f362 250f 	bfi	r5, r2, #8, #8
 80112f8:	3401      	adds	r4, #1
	package.evnt1 = 0x00;
 80112fa:	f36f 4517 	bfc	r5, #16, #8
 80112fe:	e00a      	b.n	8011316 <MIOS32_MIDI_SendSysEx+0x48>
	package.evnt2 = 0x00;
	break;
      case 2:
	package.type = 0x6; // SysEx ends with following two bytes.
	package.evnt0 = stream[offset++];
	package.evnt1 = stream[offset++];
 8011300:	1931      	adds	r1, r6, r4
	package.evnt1 = 0x00;
	package.evnt2 = 0x00;
	break;
      case 2:
	package.type = 0x6; // SysEx ends with following two bytes.
	package.evnt0 = stream[offset++];
 8011302:	5d30      	ldrb	r0, [r6, r4]
	package.evnt1 = stream[offset++];
 8011304:	784a      	ldrb	r2, [r1, #1]
	package.evnt0 = stream[offset++];
	package.evnt1 = 0x00;
	package.evnt2 = 0x00;
	break;
      case 2:
	package.type = 0x6; // SysEx ends with following two bytes.
 8011306:	2306      	movs	r3, #6
 8011308:	f363 0503 	bfi	r5, r3, #0, #4
	package.evnt0 = stream[offset++];
 801130c:	f360 250f 	bfi	r5, r0, #8, #8
	package.evnt1 = stream[offset++];
 8011310:	f362 4517 	bfi	r5, r2, #16, #8
 8011314:	3402      	adds	r4, #2
	package.evnt2 = 0x00;
 8011316:	f36f 651f 	bfc	r5, #24, #8
	break;
 801131a:	e00f      	b.n	801133c <MIOS32_MIDI_SendSysEx+0x6e>
      case 3:
	package.type = 0x7; // SysEx ends with following three bytes. 
 801131c:	2007      	movs	r0, #7
 801131e:	e000      	b.n	8011322 <MIOS32_MIDI_SendSysEx+0x54>
	package.evnt0 = stream[offset++];
	package.evnt1 = stream[offset++];
	package.evnt2 = stream[offset++];
	break;
      default:
	package.type = 0x4; // SysEx starts or continues
 8011320:	2004      	movs	r0, #4
 8011322:	f360 0503 	bfi	r5, r0, #0, #4
	package.evnt0 = stream[offset++];
	package.evnt1 = stream[offset++];
 8011326:	1930      	adds	r0, r6, r4
	package.evnt1 = stream[offset++];
	package.evnt2 = stream[offset++];
	break;
      default:
	package.type = 0x4; // SysEx starts or continues
	package.evnt0 = stream[offset++];
 8011328:	5d33      	ldrb	r3, [r6, r4]
	package.evnt1 = stream[offset++];
 801132a:	7841      	ldrb	r1, [r0, #1]
	package.evnt2 = stream[offset++];
 801132c:	7882      	ldrb	r2, [r0, #2]
	package.evnt1 = stream[offset++];
	package.evnt2 = stream[offset++];
	break;
      default:
	package.type = 0x4; // SysEx starts or continues
	package.evnt0 = stream[offset++];
 801132e:	f363 250f 	bfi	r5, r3, #8, #8
	package.evnt1 = stream[offset++];
 8011332:	f361 4517 	bfi	r5, r1, #16, #8
	package.evnt2 = stream[offset++];
 8011336:	f362 651f 	bfi	r5, r2, #24, #8
 801133a:	3403      	adds	r4, #3
    }

    res=MIOS32_MIDI_SendPackage(port, package);
 801133c:	4640      	mov	r0, r8
 801133e:	4629      	mov	r1, r5
 8011340:	f7ff ff6c 	bl	801121c <MIOS32_MIDI_SendPackage>

    // expection? (e.g., port not available)
    if( res < 0 )
 8011344:	2800      	cmp	r0, #0
 8011346:	dac8      	bge.n	80112da <MIOS32_MIDI_SendSysEx+0xc>
 8011348:	e000      	b.n	801134c <MIOS32_MIDI_SendSysEx+0x7e>
      return res;
  }

  return 0;
 801134a:	2000      	movs	r0, #0
}
 801134c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011350 <MIOS32_MIDI_SYSEX_SendAckStr>:

/////////////////////////////////////////////////////////////////////////////
// This function sends an SysEx acknowledge with a string (used on queries)
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_SendAckStr(mios32_midi_port_t port, char *str)
{
 8011350:	b530      	push	{r4, r5, lr}
 8011352:	b0a1      	sub	sp, #132	; 0x84
  u8 sysex_buffer[128]; // should be enough?
  u8 *sysex_buffer_ptr = &sysex_buffer[0];
  int i;

  for(i=0; i<sizeof(mios32_midi_sysex_header); ++i)
    *sysex_buffer_ptr++ = mios32_midi_sysex_header[i];
 8011354:	23f0      	movs	r3, #240	; 0xf0
 8011356:	f88d 3000 	strb.w	r3, [sp]

  // device ID
  *sysex_buffer_ptr++ = MIOS32_MIDI_DeviceIDGet();
 801135a:	4b13      	ldr	r3, [pc, #76]	; (80113a8 <MIOS32_MIDI_SYSEX_SendAckStr+0x58>)
  u8 sysex_buffer[128]; // should be enough?
  u8 *sysex_buffer_ptr = &sysex_buffer[0];
  int i;

  for(i=0; i<sizeof(mios32_midi_sysex_header); ++i)
    *sysex_buffer_ptr++ = mios32_midi_sysex_header[i];
 801135c:	227e      	movs	r2, #126	; 0x7e
 801135e:	2532      	movs	r5, #50	; 0x32
 8011360:	f88d 2003 	strb.w	r2, [sp, #3]

  // device ID
  *sysex_buffer_ptr++ = MIOS32_MIDI_DeviceIDGet();
 8011364:	781a      	ldrb	r2, [r3, #0]
  u8 sysex_buffer[128]; // should be enough?
  u8 *sysex_buffer_ptr = &sysex_buffer[0];
  int i;

  for(i=0; i<sizeof(mios32_midi_sysex_header); ++i)
    *sysex_buffer_ptr++ = mios32_midi_sysex_header[i];
 8011366:	f88d 5004 	strb.w	r5, [sp, #4]
 801136a:	2400      	movs	r4, #0

  // device ID
  *sysex_buffer_ptr++ = MIOS32_MIDI_DeviceIDGet();

  // send ack code
  *sysex_buffer_ptr++ = MIOS32_MIDI_SYSEX_ACK;
 801136c:	250f      	movs	r5, #15
  u8 sysex_buffer[128]; // should be enough?
  u8 *sysex_buffer_ptr = &sysex_buffer[0];
  int i;

  for(i=0; i<sizeof(mios32_midi_sysex_header); ++i)
    *sysex_buffer_ptr++ = mios32_midi_sysex_header[i];
 801136e:	f88d 4001 	strb.w	r4, [sp, #1]
 8011372:	f88d 4002 	strb.w	r4, [sp, #2]

  // device ID
  *sysex_buffer_ptr++ = MIOS32_MIDI_DeviceIDGet();
 8011376:	f88d 2005 	strb.w	r2, [sp, #5]

  // send ack code
  *sysex_buffer_ptr++ = MIOS32_MIDI_SYSEX_ACK;
 801137a:	f88d 5006 	strb.w	r5, [sp, #6]
}

/////////////////////////////////////////////////////////////////////////////
// This function sends an SysEx acknowledge with a string (used on queries)
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_SendAckStr(mios32_midi_port_t port, char *str)
 801137e:	ab02      	add	r3, sp, #8

  // send ack code
  *sysex_buffer_ptr++ = MIOS32_MIDI_SYSEX_ACK;

  // send string
  for(i=0; i<100 && (str[i] != 0); ++i)
 8011380:	5d0d      	ldrb	r5, [r1, r4]
}

/////////////////////////////////////////////////////////////////////////////
// This function sends an SysEx acknowledge with a string (used on queries)
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_SendAckStr(mios32_midi_port_t port, char *str)
 8011382:	1e5a      	subs	r2, r3, #1

  // send ack code
  *sysex_buffer_ptr++ = MIOS32_MIDI_SYSEX_ACK;

  // send string
  for(i=0; i<100 && (str[i] != 0); ++i)
 8011384:	b135      	cbz	r5, 8011394 <MIOS32_MIDI_SYSEX_SendAckStr+0x44>
 8011386:	3401      	adds	r4, #1
}

/////////////////////////////////////////////////////////////////////////////
// This function sends an SysEx acknowledge with a string (used on queries)
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_SendAckStr(mios32_midi_port_t port, char *str)
 8011388:	461a      	mov	r2, r3
  // send ack code
  *sysex_buffer_ptr++ = MIOS32_MIDI_SYSEX_ACK;

  // send string
  for(i=0; i<100 && (str[i] != 0); ++i)
    *sysex_buffer_ptr++ = str[i];
 801138a:	f803 5c01 	strb.w	r5, [r3, #-1]
 801138e:	3301      	adds	r3, #1

  // send ack code
  *sysex_buffer_ptr++ = MIOS32_MIDI_SYSEX_ACK;

  // send string
  for(i=0; i<100 && (str[i] != 0); ++i)
 8011390:	2c64      	cmp	r4, #100	; 0x64
 8011392:	d1f5      	bne.n	8011380 <MIOS32_MIDI_SYSEX_SendAckStr+0x30>
    *sysex_buffer_ptr++ = str[i];

  // send footer
  *sysex_buffer_ptr++ = 0xf7;
 8011394:	21f7      	movs	r1, #247	; 0xf7
 8011396:	f802 1b01 	strb.w	r1, [r2], #1

  // finally send SysEx stream
  return MIOS32_MIDI_SendSysEx(port, (u8 *)sysex_buffer, (u32)sysex_buffer_ptr - ((u32)&sysex_buffer[0]));
 801139a:	4669      	mov	r1, sp
 801139c:	1a52      	subs	r2, r2, r1
 801139e:	f7ff ff96 	bl	80112ce <MIOS32_MIDI_SendSysEx>
}
 80113a2:	b021      	add	sp, #132	; 0x84
 80113a4:	bd30      	pop	{r4, r5, pc}
 80113a6:	bf00      	nop
 80113a8:	20000176 	.word	0x20000176

080113ac <MIOS32_MIDI_SYSEX_SendAck>:
/////////////////////////////////////////////////////////////////////////////
// This function sends a SysEx acknowledge to notify the user about the received command
// expects acknowledge code (e.g. 0x0f for good, 0x0e for error) and additional argument
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_SendAck(mios32_midi_port_t port, u8 ack_code, u8 ack_arg)
{
 80113ac:	b500      	push	{lr}
 80113ae:	b089      	sub	sp, #36	; 0x24
  u8 sysex_buffer[32]; // should be enough?
  u8 *sysex_buffer_ptr = &sysex_buffer[0];
  int i;

  for(i=0; i<sizeof(mios32_midi_sysex_header); ++i)
    *sysex_buffer_ptr++ = mios32_midi_sysex_header[i];
 80113b0:	23f0      	movs	r3, #240	; 0xf0
 80113b2:	f88d 3000 	strb.w	r3, [sp]
 80113b6:	2300      	movs	r3, #0
 80113b8:	f88d 3001 	strb.w	r3, [sp, #1]
 80113bc:	f88d 3002 	strb.w	r3, [sp, #2]
 80113c0:	237e      	movs	r3, #126	; 0x7e
 80113c2:	f88d 3003 	strb.w	r3, [sp, #3]
 80113c6:	2332      	movs	r3, #50	; 0x32
 80113c8:	f88d 3004 	strb.w	r3, [sp, #4]

  // device ID
  *sysex_buffer_ptr++ = MIOS32_MIDI_DeviceIDGet();
 80113cc:	4b08      	ldr	r3, [pc, #32]	; (80113f0 <MIOS32_MIDI_SYSEX_SendAck+0x44>)

  // send ack code and argument
  *sysex_buffer_ptr++ = ack_code;
 80113ce:	f88d 1006 	strb.w	r1, [sp, #6]

  for(i=0; i<sizeof(mios32_midi_sysex_header); ++i)
    *sysex_buffer_ptr++ = mios32_midi_sysex_header[i];

  // device ID
  *sysex_buffer_ptr++ = MIOS32_MIDI_DeviceIDGet();
 80113d2:	781b      	ldrb	r3, [r3, #0]

  // send ack code and argument
  *sysex_buffer_ptr++ = ack_code;
  *sysex_buffer_ptr++ = ack_arg;
 80113d4:	f88d 2007 	strb.w	r2, [sp, #7]

  // send footer
  *sysex_buffer_ptr++ = 0xf7;
 80113d8:	21f7      	movs	r1, #247	; 0xf7
 80113da:	f88d 1008 	strb.w	r1, [sp, #8]

  // finally send SysEx stream
  return MIOS32_MIDI_SendSysEx(port, (u8 *)sysex_buffer, (u32)sysex_buffer_ptr - ((u32)&sysex_buffer[0]));
 80113de:	2209      	movs	r2, #9
 80113e0:	4669      	mov	r1, sp

  for(i=0; i<sizeof(mios32_midi_sysex_header); ++i)
    *sysex_buffer_ptr++ = mios32_midi_sysex_header[i];

  // device ID
  *sysex_buffer_ptr++ = MIOS32_MIDI_DeviceIDGet();
 80113e2:	f88d 3005 	strb.w	r3, [sp, #5]

  // send footer
  *sysex_buffer_ptr++ = 0xf7;

  // finally send SysEx stream
  return MIOS32_MIDI_SendSysEx(port, (u8 *)sysex_buffer, (u32)sysex_buffer_ptr - ((u32)&sysex_buffer[0]));
 80113e6:	f7ff ff72 	bl	80112ce <MIOS32_MIDI_SendSysEx>
}
 80113ea:	b009      	add	sp, #36	; 0x24
 80113ec:	bd00      	pop	{pc}
 80113ee:	bf00      	nop
 80113f0:	20000176 	.word	0x20000176

080113f4 <MIOS32_MIDI_SendDebugStringHeader>:
//! \endcode
//!
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendDebugStringHeader(mios32_midi_port_t port, char command, char first_byte)
{
 80113f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// unfortunately doesn't work, and runtime check would be unnecessary costly
//#if sizeof(mios32_midi_sysex_header) != 5
//# error "Please adapt MIOS32_MIDI_SendDebugString"
//#endif

  package.type = 0x4; // SysEx starts or continues
 80113f8:	2304      	movs	r3, #4
 80113fa:	2400      	movs	r4, #0
//! \endcode
//!
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendDebugStringHeader(mios32_midi_port_t port, char command, char first_byte)
{
 80113fc:	460e      	mov	r6, r1
// unfortunately doesn't work, and runtime check would be unnecessary costly
//#if sizeof(mios32_midi_sysex_header) != 5
//# error "Please adapt MIOS32_MIDI_SendDebugString"
//#endif

  package.type = 0x4; // SysEx starts or continues
 80113fe:	f363 0403 	bfi	r4, r3, #0, #4
  package.evnt0 = mios32_midi_sysex_header[0];
 8011402:	f06f 010f 	mvn.w	r1, #15
 8011406:	f361 240f 	bfi	r4, r1, #8, #8
  package.evnt1 = mios32_midi_sysex_header[1];
 801140a:	f36f 4417 	bfc	r4, #16, #8
  package.evnt2 = mios32_midi_sysex_header[2];
 801140e:	f36f 641f 	bfc	r4, #24, #8
  status |= MIOS32_MIDI_SendPackage(port, package);
 8011412:	4621      	mov	r1, r4
//! \endcode
//!
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendDebugStringHeader(mios32_midi_port_t port, char command, char first_byte)
{
 8011414:	4605      	mov	r5, r0
 8011416:	4690      	mov	r8, r2

  package.type = 0x4; // SysEx starts or continues
  package.evnt0 = mios32_midi_sysex_header[0];
  package.evnt1 = mios32_midi_sysex_header[1];
  package.evnt2 = mios32_midi_sysex_header[2];
  status |= MIOS32_MIDI_SendPackage(port, package);
 8011418:	f7ff ff00 	bl	801121c <MIOS32_MIDI_SendPackage>

  package.type = 0x4; // SysEx starts or continues
  package.evnt0 = mios32_midi_sysex_header[3];
  package.evnt1 = mios32_midi_sysex_header[4];
  package.evnt2 = MIOS32_MIDI_DeviceIDGet();
 801141c:	4b0e      	ldr	r3, [pc, #56]	; (8011458 <MIOS32_MIDI_SendDebugStringHeader+0x64>)

  package.type = 0x4; // SysEx starts or continues
  package.evnt0 = mios32_midi_sysex_header[0];
  package.evnt1 = mios32_midi_sysex_header[1];
  package.evnt2 = mios32_midi_sysex_header[2];
  status |= MIOS32_MIDI_SendPackage(port, package);
 801141e:	4607      	mov	r7, r0

  package.type = 0x4; // SysEx starts or continues
  package.evnt0 = mios32_midi_sysex_header[3];
 8011420:	207e      	movs	r0, #126	; 0x7e
  package.evnt1 = mios32_midi_sysex_header[4];
  package.evnt2 = MIOS32_MIDI_DeviceIDGet();
 8011422:	7819      	ldrb	r1, [r3, #0]
  package.evnt2 = mios32_midi_sysex_header[2];
  status |= MIOS32_MIDI_SendPackage(port, package);

  package.type = 0x4; // SysEx starts or continues
  package.evnt0 = mios32_midi_sysex_header[3];
  package.evnt1 = mios32_midi_sysex_header[4];
 8011424:	2232      	movs	r2, #50	; 0x32
  package.evnt1 = mios32_midi_sysex_header[1];
  package.evnt2 = mios32_midi_sysex_header[2];
  status |= MIOS32_MIDI_SendPackage(port, package);

  package.type = 0x4; // SysEx starts or continues
  package.evnt0 = mios32_midi_sysex_header[3];
 8011426:	f360 240f 	bfi	r4, r0, #8, #8
  package.evnt1 = mios32_midi_sysex_header[4];
 801142a:	f362 4417 	bfi	r4, r2, #16, #8
  package.evnt2 = MIOS32_MIDI_DeviceIDGet();
 801142e:	f361 641f 	bfi	r4, r1, #24, #8
  status |= MIOS32_MIDI_SendPackage(port, package);
 8011432:	4621      	mov	r1, r4
 8011434:	4628      	mov	r0, r5
 8011436:	f7ff fef1 	bl	801121c <MIOS32_MIDI_SendPackage>
 801143a:	4307      	orrs	r7, r0

  package.type = 0x4; // SysEx starts or continues
  package.evnt0 = MIOS32_MIDI_SYSEX_DEBUG;
 801143c:	200d      	movs	r0, #13
 801143e:	f360 240f 	bfi	r4, r0, #8, #8
  package.evnt1 = command; // output string, usually 0x40
 8011442:	f366 4417 	bfi	r4, r6, #16, #8
  package.evnt2 = first_byte; // will be 0x00 if string already ends (""), thats ok, MIOS Studio can handle this
 8011446:	f368 641f 	bfi	r4, r8, #24, #8
  status |= MIOS32_MIDI_SendPackage(port, package);
 801144a:	4628      	mov	r0, r5
 801144c:	4621      	mov	r1, r4
 801144e:	f7ff fee5 	bl	801121c <MIOS32_MIDI_SendPackage>

  return status;
#endif
}
 8011452:	4338      	orrs	r0, r7
 8011454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011458:	20000176 	.word	0x20000176

0801145c <MIOS32_MIDI_SendDebugStringBody>:
//! The string size isn't limited.
//!
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendDebugStringBody(mios32_midi_port_t port, char *str, u32 len)
{
 801145c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011460:	4681      	mov	r9, r0
 8011462:	4688      	mov	r8, r1
  return -1;
#else
  s32 status = 0;
  mios32_midi_package_t package;

  if( len > 0 ) {
 8011464:	4617      	mov	r7, r2
 8011466:	b352      	cbz	r2, 80114be <MIOS32_MIDI_SendDebugStringBody+0x62>
 8011468:	460d      	mov	r5, r1
 801146a:	2600      	movs	r6, #0
    int i = 0;
    for(i=0; i<len; i+=3) {
 801146c:	ebc8 0305 	rsb	r3, r8, r5
 8011470:	42bb      	cmp	r3, r7
 8011472:	d225      	bcs.n	80114c0 <MIOS32_MIDI_SendDebugStringBody+0x64>
      u8 b;
      u8 terminated = 0;

      package.type = 0x4; // SysEx starts or continues
      if( (b=str[i+0]) ) {
 8011474:	7829      	ldrb	r1, [r5, #0]
    int i = 0;
    for(i=0; i<len; i+=3) {
      u8 b;
      u8 terminated = 0;

      package.type = 0x4; // SysEx starts or continues
 8011476:	2004      	movs	r0, #4
 8011478:	f360 0403 	bfi	r4, r0, #0, #4
      if( (b=str[i+0]) ) {
 801147c:	b131      	cbz	r1, 801148c <MIOS32_MIDI_SendDebugStringBody+0x30>
      } else {
	package.evnt0 = 0x00;
	terminated = 1;
      }

      if( !terminated && (b=str[i+1]) ) {
 801147e:	786b      	ldrb	r3, [r5, #1]
      u8 b;
      u8 terminated = 0;

      package.type = 0x4; // SysEx starts or continues
      if( (b=str[i+0]) ) {
	package.evnt0 = b & 0x7f;
 8011480:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 8011484:	f362 240f 	bfi	r4, r2, #8, #8
      } else {
	package.evnt0 = 0x00;
	terminated = 1;
      }

      if( !terminated && (b=str[i+1]) ) {
 8011488:	b91b      	cbnz	r3, 8011492 <MIOS32_MIDI_SendDebugStringBody+0x36>
 801148a:	e00d      	b.n	80114a8 <MIOS32_MIDI_SendDebugStringBody+0x4c>

      package.type = 0x4; // SysEx starts or continues
      if( (b=str[i+0]) ) {
	package.evnt0 = b & 0x7f;
      } else {
	package.evnt0 = 0x00;
 801148c:	f361 240f 	bfi	r4, r1, #8, #8
 8011490:	e00a      	b.n	80114a8 <MIOS32_MIDI_SendDebugStringBody+0x4c>
      } else {
	package.evnt1 = 0x00;
	terminated = 1;
      }

      if( !terminated && (b=str[i+2]) ) {
 8011492:	78a9      	ldrb	r1, [r5, #2]
	package.evnt0 = 0x00;
	terminated = 1;
      }

      if( !terminated && (b=str[i+1]) ) {
	package.evnt1 = b & 0x7f;
 8011494:	f003 007f 	and.w	r0, r3, #127	; 0x7f
 8011498:	f360 4417 	bfi	r4, r0, #16, #8
      } else {
	package.evnt1 = 0x00;
	terminated = 1;
      }

      if( !terminated && (b=str[i+2]) ) {
 801149c:	b131      	cbz	r1, 80114ac <MIOS32_MIDI_SendDebugStringBody+0x50>
	package.evnt2 = b & 0x7f;
 801149e:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 80114a2:	f362 641f 	bfi	r4, r2, #24, #8
 80114a6:	e003      	b.n	80114b0 <MIOS32_MIDI_SendDebugStringBody+0x54>
      }

      if( !terminated && (b=str[i+1]) ) {
	package.evnt1 = b & 0x7f;
      } else {
	package.evnt1 = 0x00;
 80114a8:	f36f 4417 	bfc	r4, #16, #8
      }

      if( !terminated && (b=str[i+2]) ) {
	package.evnt2 = b & 0x7f;
      } else {
	package.evnt2 = 0x00;
 80114ac:	f36f 641f 	bfc	r4, #24, #8
	terminated = 1;
      }

      status |= MIOS32_MIDI_SendPackage(port, package);
 80114b0:	4648      	mov	r0, r9
 80114b2:	4621      	mov	r1, r4
 80114b4:	f7ff feb2 	bl	801121c <MIOS32_MIDI_SendPackage>
 80114b8:	3503      	adds	r5, #3
 80114ba:	4306      	orrs	r6, r0
 80114bc:	e7d6      	b.n	801146c <MIOS32_MIDI_SendDebugStringBody+0x10>
{
#ifdef MIOS32_MIDI_DISABLE_DEBUG_MESSAGE
  // for bootloader to save memory
  return -1;
#else
  s32 status = 0;
 80114be:	4616      	mov	r6, r2
    }
  }

  return status;
#endif
}
 80114c0:	4630      	mov	r0, r6
 80114c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080114c6 <MIOS32_MIDI_SendDebugStringFooter>:
//! Example: see MIOS32_MIDI_SendDebugStringHeader
//!
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendDebugStringFooter(mios32_midi_port_t port)
{
 80114c6:	b508      	push	{r3, lr}
  return -1;
#else
  s32 status = 0;
  mios32_midi_package_t package;

  package.type = 0x5; // SysEx ends with following single byte. 
 80114c8:	2100      	movs	r1, #0
 80114ca:	2305      	movs	r3, #5
 80114cc:	f363 0103 	bfi	r1, r3, #0, #4
  package.evnt0 = 0xf7;
 80114d0:	f06f 0208 	mvn.w	r2, #8
 80114d4:	f362 210f 	bfi	r1, r2, #8, #8
  package.evnt1 = 0x00;
  package.evnt2 = 0x00;
  status |= MIOS32_MIDI_SendPackage(port, package);
 80114d8:	b289      	uxth	r1, r1
 80114da:	f7ff fe9f 	bl	801121c <MIOS32_MIDI_SendPackage>

  return status;
#endif
}
 80114de:	bd08      	pop	{r3, pc}

080114e0 <MIOS32_MIDI_SendDebugString>:
//! The string size isn't limited.
//!
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendDebugString(const char *str)
{
 80114e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114e2:	4605      	mov	r5, r0
#ifdef MIOS32_MIDI_DISABLE_DEBUG_MESSAGE
  // for bootloader to save memory
  return -1;
#else
  s32 status = 0;
  u32 len = strlen(str);
 80114e4:	f006 fb79 	bl	8017bda <strlen>

  status |= MIOS32_MIDI_SendDebugStringHeader(debug_port, 0x40, str[0]);
 80114e8:	4f0a      	ldr	r7, [pc, #40]	; (8011514 <MIOS32_MIDI_SendDebugString+0x34>)
 80114ea:	782a      	ldrb	r2, [r5, #0]
#ifdef MIOS32_MIDI_DISABLE_DEBUG_MESSAGE
  // for bootloader to save memory
  return -1;
#else
  s32 status = 0;
  u32 len = strlen(str);
 80114ec:	4606      	mov	r6, r0

  status |= MIOS32_MIDI_SendDebugStringHeader(debug_port, 0x40, str[0]);
 80114ee:	2140      	movs	r1, #64	; 0x40
 80114f0:	7838      	ldrb	r0, [r7, #0]
 80114f2:	f7ff ff7f 	bl	80113f4 <MIOS32_MIDI_SendDebugStringHeader>
  if( len >= 2 )
 80114f6:	2e01      	cmp	r6, #1
  return -1;
#else
  s32 status = 0;
  u32 len = strlen(str);

  status |= MIOS32_MIDI_SendDebugStringHeader(debug_port, 0x40, str[0]);
 80114f8:	4604      	mov	r4, r0
  if( len >= 2 )
 80114fa:	d905      	bls.n	8011508 <MIOS32_MIDI_SendDebugString+0x28>
    status |= MIOS32_MIDI_SendDebugStringBody(debug_port, (char *)&str[1], len-1);
 80114fc:	7838      	ldrb	r0, [r7, #0]
 80114fe:	1c69      	adds	r1, r5, #1
 8011500:	1e72      	subs	r2, r6, #1
 8011502:	f7ff ffab 	bl	801145c <MIOS32_MIDI_SendDebugStringBody>
 8011506:	4304      	orrs	r4, r0
  status |= MIOS32_MIDI_SendDebugStringFooter(debug_port);
 8011508:	4b02      	ldr	r3, [pc, #8]	; (8011514 <MIOS32_MIDI_SendDebugString+0x34>)
 801150a:	7818      	ldrb	r0, [r3, #0]
 801150c:	f7ff ffdb 	bl	80114c6 <MIOS32_MIDI_SendDebugStringFooter>

  return status;
#endif
}
 8011510:	4320      	orrs	r0, r4
 8011512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011514:	2000000a 	.word	0x2000000a

08011518 <MIOS32_MIDI_SendDebugMessage>:
//! \param[in] *format zero-terminated format string - 128 characters supported maximum!
//! \param ... additional arguments
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendDebugMessage(const char *format, ...)
{
 8011518:	b40f      	push	{r0, r1, r2, r3}
 801151a:	b530      	push	{r4, r5, lr}
 801151c:	b0a3      	sub	sp, #140	; 0x8c
 801151e:	9d26      	ldr	r5, [sp, #152]	; 0x98

  // failsave: if format string is longer than 100 chars, break here
  // note that this is a weak protection: if %s is used, or a lot of other format tokens,
  // the resulting string could still lead to a buffer overflow
  // other the other hand we don't want to allocate too many byte for buffer[] to save stack
  if( strlen(format) > 100 ) {
 8011520:	4628      	mov	r0, r5
 8011522:	f006 fb5a 	bl	8017bda <strlen>
 8011526:	2864      	cmp	r0, #100	; 0x64
 8011528:	d901      	bls.n	801152e <MIOS32_MIDI_SendDebugMessage+0x16>
    // exit with less costly message
    return MIOS32_MIDI_SendDebugString("(ERROR: string passed to MIOS32_MIDI_SendDebugMessage() is longer than 100 chars!\n");
 801152a:	480e      	ldr	r0, [pc, #56]	; (8011564 <MIOS32_MIDI_SendDebugMessage+0x4c>)
 801152c:	e013      	b.n	8011556 <MIOS32_MIDI_SendDebugMessage+0x3e>
  } else {
    // transform formatted string into string
    va_start(args, format);
    vsprintf(str, format, args);
 801152e:	ac02      	add	r4, sp, #8
  if( strlen(format) > 100 ) {
    // exit with less costly message
    return MIOS32_MIDI_SendDebugString("(ERROR: string passed to MIOS32_MIDI_SendDebugMessage() is longer than 100 chars!\n");
  } else {
    // transform formatted string into string
    va_start(args, format);
 8011530:	aa27      	add	r2, sp, #156	; 0x9c
    vsprintf(str, format, args);
 8011532:	4629      	mov	r1, r5
 8011534:	4620      	mov	r0, r4
  if( strlen(format) > 100 ) {
    // exit with less costly message
    return MIOS32_MIDI_SendDebugString("(ERROR: string passed to MIOS32_MIDI_SendDebugMessage() is longer than 100 chars!\n");
  } else {
    // transform formatted string into string
    va_start(args, format);
 8011536:	9201      	str	r2, [sp, #4]
    vsprintf(str, format, args);
 8011538:	f002 fa41 	bl	80139be <vsprintf>
  }

  u32 len = strlen(str);
 801153c:	4620      	mov	r0, r4
 801153e:	f006 fb4c 	bl	8017bda <strlen>
  u8 *str_ptr = (u8 *)str;
  int i;
  for(i=0; i<len; ++i) {
 8011542:	2300      	movs	r3, #0
 8011544:	4283      	cmp	r3, r0
 8011546:	d005      	beq.n	8011554 <MIOS32_MIDI_SendDebugMessage+0x3c>
    *str_ptr++ &= 0x7f; // ensure that MIDI protocol won't be violated
 8011548:	5ce2      	ldrb	r2, [r4, r3]
 801154a:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 801154e:	54e1      	strb	r1, [r4, r3]
  }

  u32 len = strlen(str);
  u8 *str_ptr = (u8 *)str;
  int i;
  for(i=0; i<len; ++i) {
 8011550:	3301      	adds	r3, #1
 8011552:	e7f7      	b.n	8011544 <MIOS32_MIDI_SendDebugMessage+0x2c>
    *str_ptr++ &= 0x7f; // ensure that MIDI protocol won't be violated
  }

  return MIOS32_MIDI_SendDebugString(str);
 8011554:	4620      	mov	r0, r4
 8011556:	f7ff ffc3 	bl	80114e0 <MIOS32_MIDI_SendDebugString>
#endif
}
 801155a:	b023      	add	sp, #140	; 0x8c
 801155c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011560:	b004      	add	sp, #16
 8011562:	4770      	bx	lr
 8011564:	08017eec 	.word	0x08017eec

08011568 <MIOS32_MIDI_TimeOut>:

/////////////////////////////////////////////////////////////////////////////
// This function is called if a MIDI parser runs into timeout
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_TimeOut(mios32_midi_port_t port)
{
 8011568:	b510      	push	{r4, lr}
  // if MIOS32 receives a SysEx command (MY_SYSEX flag set), abort parser if port matches
  if( sysex_state.general.MY_SYSEX && port == last_sysex_port )
 801156a:	4b0e      	ldr	r3, [pc, #56]	; (80115a4 <MIOS32_MIDI_TimeOut+0x3c>)
 801156c:	781a      	ldrb	r2, [r3, #0]
 801156e:	f002 0108 	and.w	r1, r2, #8

/////////////////////////////////////////////////////////////////////////////
// This function is called if a MIDI parser runs into timeout
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_TimeOut(mios32_midi_port_t port)
{
 8011572:	4604      	mov	r4, r0
  // if MIOS32 receives a SysEx command (MY_SYSEX flag set), abort parser if port matches
  if( sysex_state.general.MY_SYSEX && port == last_sysex_port )
 8011574:	b2c8      	uxtb	r0, r1
 8011576:	b148      	cbz	r0, 801158c <MIOS32_MIDI_TimeOut+0x24>
 8011578:	490b      	ldr	r1, [pc, #44]	; (80115a8 <MIOS32_MIDI_TimeOut+0x40>)
 801157a:	7808      	ldrb	r0, [r1, #0]
 801157c:	42a0      	cmp	r0, r4
 801157e:	d105      	bne.n	801158c <MIOS32_MIDI_TimeOut+0x24>
// an invalid message
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_CmdFinished(void)
{
  // clear all status variables
  sysex_state.ALL = 0;
 8011580:	f36f 0207 	bfc	r2, #0, #8
 8011584:	701a      	strb	r2, [r3, #0]
  sysex_cmd = 0;
 8011586:	4b09      	ldr	r3, [pc, #36]	; (80115ac <MIOS32_MIDI_TimeOut+0x44>)
 8011588:	2200      	movs	r2, #0
 801158a:	701a      	strb	r2, [r3, #0]
  // if MIOS32 receives a SysEx command (MY_SYSEX flag set), abort parser if port matches
  if( sysex_state.general.MY_SYSEX && port == last_sysex_port )
    MIOS32_MIDI_SYSEX_CmdFinished();

  // optional hook to application
  if( timeout_callback_func != NULL )
 801158c:	4908      	ldr	r1, [pc, #32]	; (80115b0 <MIOS32_MIDI_TimeOut+0x48>)
 801158e:	680a      	ldr	r2, [r1, #0]
 8011590:	b10a      	cbz	r2, 8011596 <MIOS32_MIDI_TimeOut+0x2e>
    timeout_callback_func(port);
 8011592:	4620      	mov	r0, r4
 8011594:	4790      	blx	r2

#ifndef MIOS32_MIDI_DISABLE_DEBUG_MESSAGE
  // this debug message should always be active, so that common users are informed about the exception
  MIOS32_MIDI_SendDebugMessage("[MIOS32_MIDI_Receive_Handler] Timeout on port 0x%02x\n", port);
 8011596:	4621      	mov	r1, r4
 8011598:	4806      	ldr	r0, [pc, #24]	; (80115b4 <MIOS32_MIDI_TimeOut+0x4c>)
 801159a:	f7ff ffbd 	bl	8011518 <MIOS32_MIDI_SendDebugMessage>
#endif

  return 0; // no error
}
 801159e:	2000      	movs	r0, #0
 80115a0:	bd10      	pop	{r4, pc}
 80115a2:	bf00      	nop
 80115a4:	2000017c 	.word	0x2000017c
 80115a8:	20000174 	.word	0x20000174
 80115ac:	20000168 	.word	0x20000168
 80115b0:	20000194 	.word	0x20000194
 80115b4:	08017f3f 	.word	0x08017f3f

080115b8 <MIOS32_MIDI_Periodic_mS>:
//! by a task in the programming model!
//! 
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_Periodic_mS(void)
{
 80115b8:	b510      	push	{r4, lr}
  s32 status = 0;

#ifndef MIOS32_DONT_USE_USB_MIDI
  status |= MIOS32_USB_MIDI_Periodic_mS();
 80115ba:	f001 fd99 	bl	80130f0 <MIOS32_USB_MIDI_Periodic_mS>
 80115be:	4604      	mov	r4, r0
#endif

#ifndef MIOS32_DONT_USE_UART_MIDI
  status |= MIOS32_UART_MIDI_Periodic_mS();
 80115c0:	f000 fb80 	bl	8011cc4 <MIOS32_UART_MIDI_Periodic_mS>
 80115c4:	4304      	orrs	r4, r0
#endif

#ifndef MIOS32_DONT_USE_IIC_MIDI
  status |= MIOS32_IIC_MIDI_Periodic_mS();
 80115c6:	f000 fce8 	bl	8011f9a <MIOS32_IIC_MIDI_Periodic_mS>
 80115ca:	4304      	orrs	r4, r0
#endif

#ifndef MIOS32_DONT_USE_SPI_MIDI
  status |= MIOS32_SPI_MIDI_Periodic_mS();
 80115cc:	f000 fce0 	bl	8011f90 <MIOS32_SPI_MIDI_Periodic_mS>
#endif

  // increment timeout counter for incoming packages
  // an incomplete event will be timed out after 1000 ticks (1 second)
  if( sysex_timeout_ctr < 65535 )
 80115d0:	4b05      	ldr	r3, [pc, #20]	; (80115e8 <MIOS32_MIDI_Periodic_mS+0x30>)
 80115d2:	881a      	ldrh	r2, [r3, #0]
 80115d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80115d8:	428a      	cmp	r2, r1
#ifndef MIOS32_DONT_USE_IIC_MIDI
  status |= MIOS32_IIC_MIDI_Periodic_mS();
#endif

#ifndef MIOS32_DONT_USE_SPI_MIDI
  status |= MIOS32_SPI_MIDI_Periodic_mS();
 80115da:	ea44 0000 	orr.w	r0, r4, r0
#endif

  // increment timeout counter for incoming packages
  // an incomplete event will be timed out after 1000 ticks (1 second)
  if( sysex_timeout_ctr < 65535 )
 80115de:	d001      	beq.n	80115e4 <MIOS32_MIDI_Periodic_mS+0x2c>
    ++sysex_timeout_ctr;
 80115e0:	3201      	adds	r2, #1
 80115e2:	801a      	strh	r2, [r3, #0]

  return status;
}
 80115e4:	bd10      	pop	{r4, pc}
 80115e6:	bf00      	nop
 80115e8:	20000178 	.word	0x20000178

080115ec <MIOS32_MIDI_SendByteToRxCallback>:
//! \param[in] port MIDI port (DEFAULT, USB0..USB7, UART0..UART3, IIC0..IIC7, SPIM0..SPIM7)
//! \param[in] midi_byte received MIDI byte
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendByteToRxCallback(mios32_midi_port_t port, u8 midi_byte)
{
 80115ec:	b508      	push	{r3, lr}
  // note: here we could filter the user hook execution on special situations
  if( direct_rx_callback_func != NULL )
 80115ee:	4b03      	ldr	r3, [pc, #12]	; (80115fc <MIOS32_MIDI_SendByteToRxCallback+0x10>)
 80115f0:	681a      	ldr	r2, [r3, #0]
 80115f2:	b10a      	cbz	r2, 80115f8 <MIOS32_MIDI_SendByteToRxCallback+0xc>
    return direct_rx_callback_func(port, midi_byte);
 80115f4:	4790      	blx	r2
 80115f6:	bd08      	pop	{r3, pc}
  return 0; // no error
 80115f8:	4610      	mov	r0, r2
}
 80115fa:	bd08      	pop	{r3, pc}
 80115fc:	2000016c 	.word	0x2000016c

08011600 <MIOS32_MIDI_SendPackageToRxCallback>:
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendPackageToRxCallback(mios32_midi_port_t port, mios32_midi_package_t midi_package)
{
  // note: here we could filter the user hook execution on special situations
  if( direct_rx_callback_func != NULL ) {
 8011600:	4b11      	ldr	r3, [pc, #68]	; (8011648 <MIOS32_MIDI_SendPackageToRxCallback+0x48>)
//! \param[in] port MIDI port (DEFAULT, USB0..USB7, UART0..UART3, IIC0..IIC7, SPIM0..SPIM7)
//! \param[in] midi_package received MIDI package
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendPackageToRxCallback(mios32_midi_port_t port, mios32_midi_package_t midi_package)
{
 8011602:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // note: here we could filter the user hook execution on special situations
  if( direct_rx_callback_func != NULL ) {
 8011604:	681c      	ldr	r4, [r3, #0]
//! \param[in] port MIDI port (DEFAULT, USB0..USB7, UART0..UART3, IIC0..IIC7, SPIM0..SPIM7)
//! \param[in] midi_package received MIDI package
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendPackageToRxCallback(mios32_midi_port_t port, mios32_midi_package_t midi_package)
{
 8011606:	4607      	mov	r7, r0
  // note: here we could filter the user hook execution on special situations
  if( direct_rx_callback_func != NULL ) {
 8011608:	b1e4      	cbz	r4, 8011644 <MIOS32_MIDI_SendPackageToRxCallback+0x44>
    u8 buffer[3] = {midi_package.evnt0, midi_package.evnt1, midi_package.evnt2};
 801160a:	f3c1 6407 	ubfx	r4, r1, #24, #8
 801160e:	f3c1 2007 	ubfx	r0, r1, #8, #8
 8011612:	f3c1 4207 	ubfx	r2, r1, #16, #8
    int len = mios32_midi_pcktype_num_bytes[midi_package.cin];
 8011616:	4d0d      	ldr	r5, [pc, #52]	; (801164c <MIOS32_MIDI_SendPackageToRxCallback+0x4c>)
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendPackageToRxCallback(mios32_midi_port_t port, mios32_midi_package_t midi_package)
{
  // note: here we could filter the user hook execution on special situations
  if( direct_rx_callback_func != NULL ) {
    u8 buffer[3] = {midi_package.evnt0, midi_package.evnt1, midi_package.evnt2};
 8011618:	f88d 4006 	strb.w	r4, [sp, #6]
    int len = mios32_midi_pcktype_num_bytes[midi_package.cin];
 801161c:	f001 010f 	and.w	r1, r1, #15
    int i;
    s32 status = 0;
 8011620:	2400      	movs	r4, #0
s32 MIOS32_MIDI_SendPackageToRxCallback(mios32_midi_port_t port, mios32_midi_package_t midi_package)
{
  // note: here we could filter the user hook execution on special situations
  if( direct_rx_callback_func != NULL ) {
    u8 buffer[3] = {midi_package.evnt0, midi_package.evnt1, midi_package.evnt2};
    int len = mios32_midi_pcktype_num_bytes[midi_package.cin];
 8011622:	5c6e      	ldrb	r6, [r5, r1]
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_SendPackageToRxCallback(mios32_midi_port_t port, mios32_midi_package_t midi_package)
{
  // note: here we could filter the user hook execution on special situations
  if( direct_rx_callback_func != NULL ) {
    u8 buffer[3] = {midi_package.evnt0, midi_package.evnt1, midi_package.evnt2};
 8011624:	f88d 0004 	strb.w	r0, [sp, #4]
 8011628:	f88d 2005 	strb.w	r2, [sp, #5]
    int len = mios32_midi_pcktype_num_bytes[midi_package.cin];
    int i;
    s32 status = 0;
    for(i=0; i<len; ++i)
 801162c:	4625      	mov	r5, r4
 801162e:	42b5      	cmp	r5, r6
 8011630:	da08      	bge.n	8011644 <MIOS32_MIDI_SendPackageToRxCallback+0x44>
      status |= direct_rx_callback_func(port, buffer[i]);
 8011632:	aa01      	add	r2, sp, #4
 8011634:	4b04      	ldr	r3, [pc, #16]	; (8011648 <MIOS32_MIDI_SendPackageToRxCallback+0x48>)
 8011636:	5d51      	ldrb	r1, [r2, r5]
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	4638      	mov	r0, r7
 801163c:	4798      	blx	r3
  if( direct_rx_callback_func != NULL ) {
    u8 buffer[3] = {midi_package.evnt0, midi_package.evnt1, midi_package.evnt2};
    int len = mios32_midi_pcktype_num_bytes[midi_package.cin];
    int i;
    s32 status = 0;
    for(i=0; i<len; ++i)
 801163e:	3501      	adds	r5, #1
      status |= direct_rx_callback_func(port, buffer[i]);
 8011640:	4304      	orrs	r4, r0
 8011642:	e7f4      	b.n	801162e <MIOS32_MIDI_SendPackageToRxCallback+0x2e>
    return status;
  }
  return 0; // no error
}
 8011644:	4620      	mov	r0, r4
 8011646:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011648:	2000016c 	.word	0x2000016c
 801164c:	08017edc 	.word	0x08017edc

08011650 <MIOS32_MIDI_DebugPortSet>:
//! \param[in] port MIDI port (USB0..USB7, UART0..UART3, IIC0..IIC7, SPIM0..SPIM7)
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_DebugPortSet(mios32_midi_port_t port)
{
  if( port == MIDI_DEBUG ) // avoid recursion
 8011650:	2801      	cmp	r0, #1
 8011652:	d003      	beq.n	801165c <MIOS32_MIDI_DebugPortSet+0xc>
    return -1;

  debug_port = port;
 8011654:	4b03      	ldr	r3, [pc, #12]	; (8011664 <MIOS32_MIDI_DebugPortSet+0x14>)
 8011656:	7018      	strb	r0, [r3, #0]
 
  return 0; // no error
 8011658:	2000      	movs	r0, #0
 801165a:	4770      	bx	lr
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_DebugPortSet(mios32_midi_port_t port)
{
  if( port == MIDI_DEBUG ) // avoid recursion
    return -1;
 801165c:	f04f 30ff 	mov.w	r0, #4294967295

  debug_port = port;
 
  return 0; // no error
}
 8011660:	4770      	bx	lr
 8011662:	bf00      	nop
 8011664:	2000000a 	.word	0x2000000a

08011668 <MIOS32_MIDI_SYSEX_Cmd>:

/////////////////////////////////////////////////////////////////////////////
// This function handles the sysex commands
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_Cmd(mios32_midi_port_t port, mios32_midi_sysex_cmd_state_t cmd_state, u8 midi_in)
{
 8011668:	b530      	push	{r4, r5, lr}
 801166a:	460b      	mov	r3, r1
 801166c:	4611      	mov	r1, r2
#if MIOS32_MIDI_BSL_ENHANCEMENTS
  // this compile switch should only be activated for the bootloader!
  if( BSL_SYSEX_Cmd(port, cmd_state, midi_in, sysex_cmd) >= 0 )
    return 0; // BSL has serviced this command - no error
#endif
  switch( sysex_cmd ) {
 801166e:	4a5a      	ldr	r2, [pc, #360]	; (80117d8 <MIOS32_MIDI_SYSEX_Cmd+0x170>)
 8011670:	7815      	ldrb	r5, [r2, #0]
 8011672:	2d0d      	cmp	r5, #13

/////////////////////////////////////////////////////////////////////////////
// This function handles the sysex commands
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_Cmd(mios32_midi_port_t port, mios32_midi_sysex_cmd_state_t cmd_state, u8 midi_in)
{
 8011674:	b08b      	sub	sp, #44	; 0x2c
 8011676:	4604      	mov	r4, r0
#if MIOS32_MIDI_BSL_ENHANCEMENTS
  // this compile switch should only be activated for the bootloader!
  if( BSL_SYSEX_Cmd(port, cmd_state, midi_in, sysex_cmd) >= 0 )
    return 0; // BSL has serviced this command - no error
#endif
  switch( sysex_cmd ) {
 8011678:	d057      	beq.n	801172a <MIOS32_MIDI_SYSEX_Cmd+0xc2>
 801167a:	d801      	bhi.n	8011680 <MIOS32_MIDI_SYSEX_Cmd+0x18>
 801167c:	b13d      	cbz	r5, 801168e <MIOS32_MIDI_SYSEX_Cmd+0x26>
 801167e:	e09a      	b.n	80117b6 <MIOS32_MIDI_SYSEX_Cmd+0x14e>
 8011680:	2d0e      	cmp	r5, #14
 8011682:	f000 80a5 	beq.w	80117d0 <MIOS32_MIDI_SYSEX_Cmd+0x168>
 8011686:	2d0f      	cmp	r5, #15
 8011688:	f040 8095 	bne.w	80117b6 <MIOS32_MIDI_SYSEX_Cmd+0x14e>
 801168c:	e087      	b.n	801179e <MIOS32_MIDI_SYSEX_Cmd+0x136>
 801168e:	4a53      	ldr	r2, [pc, #332]	; (80117dc <MIOS32_MIDI_SYSEX_Cmd+0x174>)
static s32 MIOS32_MIDI_SYSEX_Cmd_Query(mios32_midi_port_t port, mios32_midi_sysex_cmd_state_t cmd_state, u8 midi_in)
{
  static u8 query_req = 0;
  char str_buffer[40];

  switch( cmd_state ) {
 8011690:	b11b      	cbz	r3, 801169a <MIOS32_MIDI_SYSEX_Cmd+0x32>
 8011692:	2b01      	cmp	r3, #1
 8011694:	d103      	bne.n	801169e <MIOS32_MIDI_SYSEX_Cmd+0x36>
    case MIOS32_MIDI_SYSEX_CMD_STATE_BEGIN:
      query_req = 0;
      break;

    case MIOS32_MIDI_SYSEX_CMD_STATE_CONT:
      query_req = midi_in;
 8011696:	7011      	strb	r1, [r2, #0]
 8011698:	e09a      	b.n	80117d0 <MIOS32_MIDI_SYSEX_Cmd+0x168>
  char str_buffer[40];

  switch( cmd_state ) {

    case MIOS32_MIDI_SYSEX_CMD_STATE_BEGIN:
      query_req = 0;
 801169a:	7013      	strb	r3, [r2, #0]
 801169c:	e098      	b.n	80117d0 <MIOS32_MIDI_SYSEX_Cmd+0x168>
    case MIOS32_MIDI_SYSEX_CMD_STATE_CONT:
      query_req = midi_in;
      break;

    default: // MIOS32_MIDI_SYSEX_CMD_STATE_END
      switch( query_req ) {
 801169e:	7811      	ldrb	r1, [r2, #0]
 80116a0:	2905      	cmp	r1, #5
 80116a2:	d028      	beq.n	80116f6 <MIOS32_MIDI_SYSEX_Cmd+0x8e>
 80116a4:	d810      	bhi.n	80116c8 <MIOS32_MIDI_SYSEX_Cmd+0x60>
 80116a6:	2902      	cmp	r1, #2
 80116a8:	d01f      	beq.n	80116ea <MIOS32_MIDI_SYSEX_Cmd+0x82>
 80116aa:	d803      	bhi.n	80116b4 <MIOS32_MIDI_SYSEX_Cmd+0x4c>
 80116ac:	2901      	cmp	r1, #1
 80116ae:	d138      	bne.n	8011722 <MIOS32_MIDI_SYSEX_Cmd+0xba>
	      MIOS32_MIDI_SendActiveSense(port);
	      MIOS32_USB_MIDI_Periodic_mS();
	    }
	  }
#endif
	  MIOS32_MIDI_SYSEX_SendAckStr(port, "MIOS32");
 80116b0:	494b      	ldr	r1, [pc, #300]	; (80117e0 <MIOS32_MIDI_SYSEX_Cmd+0x178>)
 80116b2:	e01b      	b.n	80116ec <MIOS32_MIDI_SYSEX_Cmd+0x84>
    case MIOS32_MIDI_SYSEX_CMD_STATE_CONT:
      query_req = midi_in;
      break;

    default: // MIOS32_MIDI_SYSEX_CMD_STATE_END
      switch( query_req ) {
 80116b4:	2903      	cmp	r1, #3
 80116b6:	d01c      	beq.n	80116f2 <MIOS32_MIDI_SYSEX_Cmd+0x8a>
 80116b8:	2904      	cmp	r1, #4
 80116ba:	d132      	bne.n	8011722 <MIOS32_MIDI_SYSEX_Cmd+0xba>
	  break;
        case 0x03: // Core Family
	  MIOS32_MIDI_SYSEX_SendAckStr(port, MIOS32_FAMILY_STR);
	  break;
        case 0x04: // Chip ID
	  sprintf(str_buffer, "%08x", MIOS32_SYS_ChipIDGet());
 80116bc:	f000 fcc6 	bl	801204c <MIOS32_SYS_ChipIDGet>
 80116c0:	4948      	ldr	r1, [pc, #288]	; (80117e4 <MIOS32_MIDI_SYSEX_Cmd+0x17c>)
 80116c2:	4602      	mov	r2, r0
 80116c4:	4668      	mov	r0, sp
 80116c6:	e023      	b.n	8011710 <MIOS32_MIDI_SYSEX_Cmd+0xa8>
    case MIOS32_MIDI_SYSEX_CMD_STATE_CONT:
      query_req = midi_in;
      break;

    default: // MIOS32_MIDI_SYSEX_CMD_STATE_END
      switch( query_req ) {
 80116c8:	2908      	cmp	r1, #8
 80116ca:	d026      	beq.n	801171a <MIOS32_MIDI_SYSEX_Cmd+0xb2>
 80116cc:	d806      	bhi.n	80116dc <MIOS32_MIDI_SYSEX_Cmd+0x74>
 80116ce:	2906      	cmp	r1, #6
 80116d0:	d019      	beq.n	8011706 <MIOS32_MIDI_SYSEX_Cmd+0x9e>
 80116d2:	2907      	cmp	r1, #7
 80116d4:	d125      	bne.n	8011722 <MIOS32_MIDI_SYSEX_Cmd+0xba>
        case 0x06: // Flash Memory Size
	  sprintf(str_buffer, "%d", MIOS32_SYS_FlashSizeGet());
	  MIOS32_MIDI_SYSEX_SendAckStr(port, str_buffer);
	  break;
        case 0x07: // RAM Memory Size
	  sprintf(str_buffer, "%d", MIOS32_SYS_RAMSizeGet());
 80116d6:	f000 fcc7 	bl	8012068 <MIOS32_SYS_RAMSizeGet>
 80116da:	e016      	b.n	801170a <MIOS32_MIDI_SYSEX_Cmd+0xa2>
    case MIOS32_MIDI_SYSEX_CMD_STATE_CONT:
      query_req = midi_in;
      break;

    default: // MIOS32_MIDI_SYSEX_CMD_STATE_END
      switch( query_req ) {
 80116dc:	2909      	cmp	r1, #9
 80116de:	d01e      	beq.n	801171e <MIOS32_MIDI_SYSEX_Cmd+0xb6>
 80116e0:	297f      	cmp	r1, #127	; 0x7f
 80116e2:	d11e      	bne.n	8011722 <MIOS32_MIDI_SYSEX_Cmd+0xba>
#if MIOS32_MIDI_BSL_ENHANCEMENTS
	  // release halt state (or sending upload request) instead of reseting the core
	  BSL_SYSEX_ReleaseHaltState();
#else
	  // reset core (this will send an upload request)
	  MIOS32_SYS_Reset();
 80116e4:	f000 fc70 	bl	8011fc8 <MIOS32_SYS_Reset>
 80116e8:	e072      	b.n	80117d0 <MIOS32_MIDI_SYSEX_Cmd+0x168>
	  }
#endif
	  MIOS32_MIDI_SYSEX_SendAckStr(port, "MIOS32");
	  break;
        case 0x02: // Board
	  MIOS32_MIDI_SYSEX_SendAckStr(port, MIOS32_BOARD_STR);
 80116ea:	493f      	ldr	r1, [pc, #252]	; (80117e8 <MIOS32_MIDI_SYSEX_Cmd+0x180>)
 80116ec:	f7ff fe30 	bl	8011350 <MIOS32_MIDI_SYSEX_SendAckStr>
 80116f0:	e06e      	b.n	80117d0 <MIOS32_MIDI_SYSEX_Cmd+0x168>
	  break;
        case 0x03: // Core Family
	  MIOS32_MIDI_SYSEX_SendAckStr(port, MIOS32_FAMILY_STR);
 80116f2:	493e      	ldr	r1, [pc, #248]	; (80117ec <MIOS32_MIDI_SYSEX_Cmd+0x184>)
 80116f4:	e7fa      	b.n	80116ec <MIOS32_MIDI_SYSEX_Cmd+0x84>
        case 0x04: // Chip ID
	  sprintf(str_buffer, "%08x", MIOS32_SYS_ChipIDGet());
	  MIOS32_MIDI_SYSEX_SendAckStr(port, (char *)str_buffer);
	  break;
        case 0x05: // Serial Number
	  if( MIOS32_SYS_SerialNumberGet((char *)str_buffer) >= 0 )
 80116f6:	4668      	mov	r0, sp
 80116f8:	f000 fcba 	bl	8012070 <MIOS32_SYS_SerialNumberGet>
 80116fc:	2800      	cmp	r0, #0
	    MIOS32_MIDI_SYSEX_SendAckStr(port, str_buffer);
 80116fe:	4620      	mov	r0, r4
        case 0x04: // Chip ID
	  sprintf(str_buffer, "%08x", MIOS32_SYS_ChipIDGet());
	  MIOS32_MIDI_SYSEX_SendAckStr(port, (char *)str_buffer);
	  break;
        case 0x05: // Serial Number
	  if( MIOS32_SYS_SerialNumberGet((char *)str_buffer) >= 0 )
 8011700:	da09      	bge.n	8011716 <MIOS32_MIDI_SYSEX_Cmd+0xae>
	    MIOS32_MIDI_SYSEX_SendAckStr(port, str_buffer);
	  else
	    MIOS32_MIDI_SYSEX_SendAckStr(port, "?");
 8011702:	493b      	ldr	r1, [pc, #236]	; (80117f0 <MIOS32_MIDI_SYSEX_Cmd+0x188>)
 8011704:	e7f2      	b.n	80116ec <MIOS32_MIDI_SYSEX_Cmd+0x84>
	  break;
        case 0x06: // Flash Memory Size
	  sprintf(str_buffer, "%d", MIOS32_SYS_FlashSizeGet());
 8011706:	f000 fca7 	bl	8012058 <MIOS32_SYS_FlashSizeGet>
	  MIOS32_MIDI_SYSEX_SendAckStr(port, str_buffer);
	  break;
        case 0x07: // RAM Memory Size
	  sprintf(str_buffer, "%d", MIOS32_SYS_RAMSizeGet());
 801170a:	493a      	ldr	r1, [pc, #232]	; (80117f4 <MIOS32_MIDI_SYSEX_Cmd+0x18c>)
 801170c:	4602      	mov	r2, r0
 801170e:	4668      	mov	r0, sp
 8011710:	f002 f946 	bl	80139a0 <sprintf>
	  MIOS32_MIDI_SYSEX_SendAckStr(port, str_buffer);
 8011714:	4620      	mov	r0, r4
 8011716:	4669      	mov	r1, sp
 8011718:	e7e8      	b.n	80116ec <MIOS32_MIDI_SYSEX_Cmd+0x84>
	  break;
        case 0x08: // Application Name Line #1
	  MIOS32_MIDI_SYSEX_SendAckStr(port, MIOS32_LCD_BOOT_MSG_LINE1);
 801171a:	4937      	ldr	r1, [pc, #220]	; (80117f8 <MIOS32_MIDI_SYSEX_Cmd+0x190>)
 801171c:	e7e6      	b.n	80116ec <MIOS32_MIDI_SYSEX_Cmd+0x84>
	  break;
        case 0x09: // Application Name Line #2
	  MIOS32_MIDI_SYSEX_SendAckStr(port, MIOS32_LCD_BOOT_MSG_LINE2);
 801171e:	4937      	ldr	r1, [pc, #220]	; (80117fc <MIOS32_MIDI_SYSEX_Cmd+0x194>)
 8011720:	e7e4      	b.n	80116ec <MIOS32_MIDI_SYSEX_Cmd+0x84>
	  // but other core families could contain an empty stumb!
#endif
	  break;
        default: 
	  // unknown query
	  MIOS32_MIDI_SYSEX_SendAck(port, MIOS32_MIDI_SYSEX_DISACK, MIOS32_MIDI_SYSEX_DISACK_UNKNOWN_QUERY);
 8011722:	4620      	mov	r0, r4
 8011724:	210e      	movs	r1, #14
 8011726:	220d      	movs	r2, #13
 8011728:	e042      	b.n	80117b0 <MIOS32_MIDI_SYSEX_Cmd+0x148>
 801172a:	4d35      	ldr	r5, [pc, #212]	; (8011800 <MIOS32_MIDI_SYSEX_Cmd+0x198>)
  if( cmd_state == MIOS32_MIDI_SYSEX_CMD_STATE_END )
    MIOS32_MIDI_SYSEX_SendAck(port, MIOS32_MIDI_SYSEX_DISACK, MIOS32_MIDI_SYSEX_DISACK_UNSUPPORTED_DEBUG);
#else
  static u8 debug_req = 0xff;

  switch( cmd_state ) {
 801172c:	b113      	cbz	r3, 8011734 <MIOS32_MIDI_SYSEX_Cmd+0xcc>
 801172e:	2b01      	cmp	r3, #1
 8011730:	d115      	bne.n	801175e <MIOS32_MIDI_SYSEX_Cmd+0xf6>
 8011732:	e002      	b.n	801173a <MIOS32_MIDI_SYSEX_Cmd+0xd2>

    case MIOS32_MIDI_SYSEX_CMD_STATE_BEGIN:
      debug_req = 0xff;
 8011734:	21ff      	movs	r1, #255	; 0xff
 8011736:	7029      	strb	r1, [r5, #0]
 8011738:	e04a      	b.n	80117d0 <MIOS32_MIDI_SYSEX_Cmd+0x168>
      break;

    case MIOS32_MIDI_SYSEX_CMD_STATE_CONT:
      if( debug_req == 0xff ) {
 801173a:	782b      	ldrb	r3, [r5, #0]
 801173c:	2bff      	cmp	r3, #255	; 0xff
 801173e:	d101      	bne.n	8011744 <MIOS32_MIDI_SYSEX_Cmd+0xdc>
	debug_req = midi_in;
 8011740:	7029      	strb	r1, [r5, #0]
 8011742:	e045      	b.n	80117d0 <MIOS32_MIDI_SYSEX_Cmd+0x168>
      } else {
	switch( debug_req ) {
 8011744:	b11b      	cbz	r3, 801174e <MIOS32_MIDI_SYSEX_Cmd+0xe6>
 8011746:	2b01      	cmp	r3, #1
 8011748:	d142      	bne.n	80117d0 <MIOS32_MIDI_SYSEX_Cmd+0x168>
	    if( debug_command_callback_func != NULL )
	      debug_command_callback_func(last_sysex_port, (char)midi_in);
	    break;

	  case 0x01: // input string to filebrowser
	    if( filebrowser_command_callback_func != NULL )
 801174a:	4a2e      	ldr	r2, [pc, #184]	; (8011804 <MIOS32_MIDI_SYSEX_Cmd+0x19c>)
 801174c:	e000      	b.n	8011750 <MIOS32_MIDI_SYSEX_Cmd+0xe8>
      if( debug_req == 0xff ) {
	debug_req = midi_in;
      } else {
	switch( debug_req ) {
	  case 0x00: // input string
	    if( debug_command_callback_func != NULL )
 801174e:	4a2e      	ldr	r2, [pc, #184]	; (8011808 <MIOS32_MIDI_SYSEX_Cmd+0x1a0>)
	      debug_command_callback_func(last_sysex_port, (char)midi_in);
	    break;

	  case 0x01: // input string to filebrowser
	    if( filebrowser_command_callback_func != NULL )
 8011750:	6813      	ldr	r3, [r2, #0]
 8011752:	2b00      	cmp	r3, #0
 8011754:	d03c      	beq.n	80117d0 <MIOS32_MIDI_SYSEX_Cmd+0x168>
	      filebrowser_command_callback_func(last_sysex_port, (char)midi_in);
 8011756:	482d      	ldr	r0, [pc, #180]	; (801180c <MIOS32_MIDI_SYSEX_Cmd+0x1a4>)
 8011758:	7800      	ldrb	r0, [r0, #0]
 801175a:	4798      	blx	r3
 801175c:	e038      	b.n	80117d0 <MIOS32_MIDI_SYSEX_Cmd+0x168>
	}
      }
      break;

    default: // MIOS32_MIDI_SYSEX_CMD_STATE_END
      if( debug_req == 0x00 ) {
 801175e:	782a      	ldrb	r2, [r5, #0]
 8011760:	b9a2      	cbnz	r2, 801178c <MIOS32_MIDI_SYSEX_Cmd+0x124>
	// send acknowledge
	MIOS32_MIDI_SYSEX_SendAck(port, MIOS32_MIDI_SYSEX_ACK, 0x00);
 8011762:	210f      	movs	r1, #15
 8011764:	f7ff fe22 	bl	80113ac <MIOS32_MIDI_SYSEX_SendAck>

	if( debug_req == 0 && debug_command_callback_func == NULL ) {
 8011768:	7829      	ldrb	r1, [r5, #0]
 801176a:	2900      	cmp	r1, #0
 801176c:	d130      	bne.n	80117d0 <MIOS32_MIDI_SYSEX_Cmd+0x168>
 801176e:	4a26      	ldr	r2, [pc, #152]	; (8011808 <MIOS32_MIDI_SYSEX_Cmd+0x1a0>)
 8011770:	6810      	ldr	r0, [r2, #0]
 8011772:	bb68      	cbnz	r0, 80117d0 <MIOS32_MIDI_SYSEX_Cmd+0x168>
//! This function returns the MIDI_DEBUG port
//! \return the debug port
/////////////////////////////////////////////////////////////////////////////
mios32_midi_port_t MIOS32_MIDI_DebugPortGet(void)
{
  return debug_port;
 8011774:	4d26      	ldr	r5, [pc, #152]	; (8011810 <MIOS32_MIDI_SYSEX_Cmd+0x1a8>)
	// send acknowledge
	MIOS32_MIDI_SYSEX_SendAck(port, MIOS32_MIDI_SYSEX_ACK, 0x00);

	if( debug_req == 0 && debug_command_callback_func == NULL ) {
	  mios32_midi_port_t prev_debug_port = MIOS32_MIDI_DebugPortGet();
	  MIOS32_MIDI_DebugPortSet(port);
 8011776:	4620      	mov	r0, r4
//! This function returns the MIDI_DEBUG port
//! \return the debug port
/////////////////////////////////////////////////////////////////////////////
mios32_midi_port_t MIOS32_MIDI_DebugPortGet(void)
{
  return debug_port;
 8011778:	782d      	ldrb	r5, [r5, #0]
	// send acknowledge
	MIOS32_MIDI_SYSEX_SendAck(port, MIOS32_MIDI_SYSEX_ACK, 0x00);

	if( debug_req == 0 && debug_command_callback_func == NULL ) {
	  mios32_midi_port_t prev_debug_port = MIOS32_MIDI_DebugPortGet();
	  MIOS32_MIDI_DebugPortSet(port);
 801177a:	f7ff ff69 	bl	8011650 <MIOS32_MIDI_DebugPortSet>
	  MIOS32_MIDI_SendDebugString("[MIOS32_MIDI_SYSEX_Cmd_Debug] command handler not implemented by application\n");
 801177e:	4825      	ldr	r0, [pc, #148]	; (8011814 <MIOS32_MIDI_SYSEX_Cmd+0x1ac>)
 8011780:	f7ff feae 	bl	80114e0 <MIOS32_MIDI_SendDebugString>
	  MIOS32_MIDI_DebugPortSet(prev_debug_port);
 8011784:	4628      	mov	r0, r5
 8011786:	f7ff ff63 	bl	8011650 <MIOS32_MIDI_DebugPortSet>
 801178a:	e021      	b.n	80117d0 <MIOS32_MIDI_SYSEX_Cmd+0x168>
	}

      } else if( debug_req == 0x01 && filebrowser_command_callback_func != NULL ) {
 801178c:	2a01      	cmp	r2, #1
 801178e:	d102      	bne.n	8011796 <MIOS32_MIDI_SYSEX_Cmd+0x12e>
 8011790:	481c      	ldr	r0, [pc, #112]	; (8011804 <MIOS32_MIDI_SYSEX_Cmd+0x19c>)
 8011792:	6803      	ldr	r3, [r0, #0]
 8011794:	b9e3      	cbnz	r3, 80117d0 <MIOS32_MIDI_SYSEX_Cmd+0x168>
	// we expect that the filebrowser handler sends back a string
      } else {
	// send disacknowledge
	MIOS32_MIDI_SYSEX_SendAck(port, MIOS32_MIDI_SYSEX_DISACK, MIOS32_MIDI_SYSEX_DISACK_UNSUPPORTED_DEBUG);
 8011796:	4620      	mov	r0, r4
 8011798:	210e      	movs	r1, #14
 801179a:	2210      	movs	r2, #16
 801179c:	e008      	b.n	80117b0 <MIOS32_MIDI_SYSEX_Cmd+0x148>
 801179e:	4a1e      	ldr	r2, [pc, #120]	; (8011818 <MIOS32_MIDI_SYSEX_Cmd+0x1b0>)
/////////////////////////////////////////////////////////////////////////////
// Command 0F: Ping (just send back acknowledge if no additional byte has been received)
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_Cmd_Ping(mios32_midi_port_t port, mios32_midi_sysex_cmd_state_t cmd_state, u8 midi_in)
{
  switch( cmd_state ) {
 80117a0:	b10b      	cbz	r3, 80117a6 <MIOS32_MIDI_SYSEX_Cmd+0x13e>
 80117a2:	2b01      	cmp	r3, #1
 80117a4:	d101      	bne.n	80117aa <MIOS32_MIDI_SYSEX_Cmd+0x142>
    case MIOS32_MIDI_SYSEX_CMD_STATE_BEGIN:
      sysex_state.ping.PING_BYTE_RECEIVED = 0;
      break;

    case MIOS32_MIDI_SYSEX_CMD_STATE_CONT:
      sysex_state.ping.PING_BYTE_RECEIVED = 1;
 80117a6:	6053      	str	r3, [r2, #4]
 80117a8:	e012      	b.n	80117d0 <MIOS32_MIDI_SYSEX_Cmd+0x168>
    default: // MIOS32_MIDI_SYSEX_CMD_STATE_END
      // TODO: send 0xf7 if merger enabled

      // send acknowledge if no additional byte has been received
      // to avoid feedback loop if two cores are directly connected
      if( !sysex_state.ping.PING_BYTE_RECEIVED )
 80117aa:	6852      	ldr	r2, [r2, #4]
 80117ac:	b982      	cbnz	r2, 80117d0 <MIOS32_MIDI_SYSEX_Cmd+0x168>
	MIOS32_MIDI_SYSEX_SendAck(port, MIOS32_MIDI_SYSEX_ACK, 0x00);
 80117ae:	4629      	mov	r1, r5
 80117b0:	f7ff fdfc 	bl	80113ac <MIOS32_MIDI_SYSEX_SendAck>
 80117b4:	e00c      	b.n	80117d0 <MIOS32_MIDI_SYSEX_Cmd+0x168>
      MIOS32_MIDI_SYSEX_Cmd_Ping(port, cmd_state, midi_in);
      break;
    default:
      // unknown command
      // TODO: send 0xf7 if merger enabled
      MIOS32_MIDI_SYSEX_SendAck(port, MIOS32_MIDI_SYSEX_DISACK, MIOS32_MIDI_SYSEX_DISACK_INVALID_COMMAND);
 80117b6:	210e      	movs	r1, #14
 80117b8:	460a      	mov	r2, r1
 80117ba:	4620      	mov	r0, r4
 80117bc:	f7ff fdf6 	bl	80113ac <MIOS32_MIDI_SYSEX_SendAck>
// an invalid message
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_CmdFinished(void)
{
  // clear all status variables
  sysex_state.ALL = 0;
 80117c0:	4815      	ldr	r0, [pc, #84]	; (8011818 <MIOS32_MIDI_SYSEX_Cmd+0x1b0>)
  sysex_cmd = 0;
 80117c2:	4905      	ldr	r1, [pc, #20]	; (80117d8 <MIOS32_MIDI_SYSEX_Cmd+0x170>)
// an invalid message
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_CmdFinished(void)
{
  // clear all status variables
  sysex_state.ALL = 0;
 80117c4:	7803      	ldrb	r3, [r0, #0]
  sysex_cmd = 0;
 80117c6:	2200      	movs	r2, #0
// an invalid message
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_CmdFinished(void)
{
  // clear all status variables
  sysex_state.ALL = 0;
 80117c8:	f36f 0307 	bfc	r3, #0, #8
 80117cc:	7003      	strb	r3, [r0, #0]
  sysex_cmd = 0;
 80117ce:	700a      	strb	r2, [r1, #0]
      MIOS32_MIDI_SYSEX_SendAck(port, MIOS32_MIDI_SYSEX_DISACK, MIOS32_MIDI_SYSEX_DISACK_INVALID_COMMAND);
      MIOS32_MIDI_SYSEX_CmdFinished();      
  }

  return 0; // no error
}
 80117d0:	2000      	movs	r0, #0
 80117d2:	b00b      	add	sp, #44	; 0x2c
 80117d4:	bd30      	pop	{r4, r5, pc}
 80117d6:	bf00      	nop
 80117d8:	20000168 	.word	0x20000168
 80117dc:	20000175 	.word	0x20000175
 80117e0:	08017f85 	.word	0x08017f85
 80117e4:	08017fa8 	.word	0x08017fa8
 80117e8:	08017f8c 	.word	0x08017f8c
 80117ec:	08017f9e 	.word	0x08017f9e
 80117f0:	08017fad 	.word	0x08017fad
 80117f4:	08017faf 	.word	0x08017faf
 80117f8:	08017fb2 	.word	0x08017fb2
 80117fc:	08017fbf 	.word	0x08017fbf
 8011800:	20000009 	.word	0x20000009
 8011804:	20000170 	.word	0x20000170
 8011808:	20000184 	.word	0x20000184
 801180c:	20000174 	.word	0x20000174
 8011810:	2000000a 	.word	0x2000000a
 8011814:	08017fcf 	.word	0x08017fcf
 8011818:	2000017c 	.word	0x2000017c

0801181c <MIOS32_MIDI_SYSEX_Parser>:
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_Parser(mios32_midi_port_t port, u8 midi_in)
{
  // ignore realtime messages (see MIDI spec - realtime messages can
  // always be injected into events/streams, and don't change the running status)
  if( midi_in >= 0xf8 )
 801181c:	29f7      	cmp	r1, #247	; 0xf7

/////////////////////////////////////////////////////////////////////////////
// This function parses an incoming sysex stream for MIOS32 commands
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_Parser(mios32_midi_port_t port, u8 midi_in)
{
 801181e:	b510      	push	{r4, lr}
 8011820:	460a      	mov	r2, r1
  // ignore realtime messages (see MIDI spec - realtime messages can
  // always be injected into events/streams, and don't change the running status)
  if( midi_in >= 0xf8 )
 8011822:	d85a      	bhi.n	80118da <MIOS32_MIDI_SYSEX_Parser+0xbe>
    return 0;

  // TODO: here we could send an error notification, that multiple devices are trying to access the device
  if( sysex_state.general.MY_SYSEX && port != last_sysex_port )
 8011824:	4b2e      	ldr	r3, [pc, #184]	; (80118e0 <MIOS32_MIDI_SYSEX_Parser+0xc4>)
 8011826:	7819      	ldrb	r1, [r3, #0]
 8011828:	f001 0308 	and.w	r3, r1, #8
 801182c:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 8011830:	b11b      	cbz	r3, 801183a <MIOS32_MIDI_SYSEX_Parser+0x1e>
 8011832:	4b2c      	ldr	r3, [pc, #176]	; (80118e4 <MIOS32_MIDI_SYSEX_Parser+0xc8>)
 8011834:	781b      	ldrb	r3, [r3, #0]
 8011836:	4283      	cmp	r3, r0
 8011838:	d14c      	bne.n	80118d4 <MIOS32_MIDI_SYSEX_Parser+0xb8>
  // USB upload is only allowed via USB0
  // this covers the scenario where other USB1..7 ports are used for MIDI Port forwarding, and a MIOS8 core
  // is connected to one of these ports
  // MIOS Studio reports "Detected MIOS8 and MIOS32 response - selection not supported yet!" in this case
  // By ignoring >= USB1 <= USB7 we have at least a workaround which works (for example) for MIDIbox LC
  if( port >= USB1 && port <= USB7 )
 801183a:	f1a0 0311 	sub.w	r3, r0, #17
 801183e:	2b06      	cmp	r3, #6
 8011840:	d948      	bls.n	80118d4 <MIOS32_MIDI_SYSEX_Parser+0xb8>
    return -1;

  last_sysex_port = port;
 8011842:	4b28      	ldr	r3, [pc, #160]	; (80118e4 <MIOS32_MIDI_SYSEX_Parser+0xc8>)
 8011844:	7018      	strb	r0, [r3, #0]

  // branch depending on state
  if( !sysex_state.general.MY_SYSEX ) {
 8011846:	bb04      	cbnz	r4, 801188a <MIOS32_MIDI_SYSEX_Parser+0x6e>
    if( (sysex_state.general.CTR < sizeof(mios32_midi_sysex_header) && midi_in != mios32_midi_sysex_header[sysex_state.general.CTR]) ||
 8011848:	4825      	ldr	r0, [pc, #148]	; (80118e0 <MIOS32_MIDI_SYSEX_Parser+0xc4>)
 801184a:	7803      	ldrb	r3, [r0, #0]
 801184c:	f003 0307 	and.w	r3, r3, #7
 8011850:	2b04      	cmp	r3, #4
 8011852:	d803      	bhi.n	801185c <MIOS32_MIDI_SYSEX_Parser+0x40>
 8011854:	4824      	ldr	r0, [pc, #144]	; (80118e8 <MIOS32_MIDI_SYSEX_Parser+0xcc>)
 8011856:	5cc0      	ldrb	r0, [r0, r3]
 8011858:	4290      	cmp	r0, r2
 801185a:	d121      	bne.n	80118a0 <MIOS32_MIDI_SYSEX_Parser+0x84>
 801185c:	f001 0107 	and.w	r1, r1, #7
 8011860:	2905      	cmp	r1, #5
 8011862:	d103      	bne.n	801186c <MIOS32_MIDI_SYSEX_Parser+0x50>
	(sysex_state.general.CTR == sizeof(mios32_midi_sysex_header) && midi_in != sysex_device_id) ) {
 8011864:	4821      	ldr	r0, [pc, #132]	; (80118ec <MIOS32_MIDI_SYSEX_Parser+0xd0>)
 8011866:	7801      	ldrb	r1, [r0, #0]
 8011868:	4291      	cmp	r1, r2
 801186a:	d119      	bne.n	80118a0 <MIOS32_MIDI_SYSEX_Parser+0x84>
      // incoming byte doesn't match
      MIOS32_MIDI_SYSEX_CmdFinished();
    } else {
      if( ++sysex_state.general.CTR > sizeof(mios32_midi_sysex_header) ) {
 801186c:	1c5a      	adds	r2, r3, #1
 801186e:	4b1c      	ldr	r3, [pc, #112]	; (80118e0 <MIOS32_MIDI_SYSEX_Parser+0xc4>)
 8011870:	7819      	ldrb	r1, [r3, #0]
 8011872:	f002 0007 	and.w	r0, r2, #7
 8011876:	f360 0102 	bfi	r1, r0, #0, #3
 801187a:	2805      	cmp	r0, #5
 801187c:	7019      	strb	r1, [r3, #0]
 801187e:	d92c      	bls.n	80118da <MIOS32_MIDI_SYSEX_Parser+0xbe>
	// complete header received, waiting for data
	sysex_state.general.MY_SYSEX = 1;
 8011880:	b2ca      	uxtb	r2, r1
 8011882:	f042 0008 	orr.w	r0, r2, #8
 8011886:	7018      	strb	r0, [r3, #0]
 8011888:	e027      	b.n	80118da <MIOS32_MIDI_SYSEX_Parser+0xbe>
      }
    }
  } else {
    // check for end of SysEx message or invalid status byte
    if( midi_in >= 0x80 ) {
 801188a:	0613      	lsls	r3, r2, #24
 801188c:	d511      	bpl.n	80118b2 <MIOS32_MIDI_SYSEX_Parser+0x96>
      if( midi_in == 0xf7 && sysex_state.general.CMD ) {
 801188e:	2af7      	cmp	r2, #247	; 0xf7
 8011890:	d106      	bne.n	80118a0 <MIOS32_MIDI_SYSEX_Parser+0x84>
 8011892:	f001 0110 	and.w	r1, r1, #16
 8011896:	b2cb      	uxtb	r3, r1
 8011898:	b113      	cbz	r3, 80118a0 <MIOS32_MIDI_SYSEX_Parser+0x84>
      	MIOS32_MIDI_SYSEX_Cmd(port, MIOS32_MIDI_SYSEX_CMD_STATE_END, midi_in);
 801189a:	2102      	movs	r1, #2
 801189c:	f7ff fee4 	bl	8011668 <MIOS32_MIDI_SYSEX_Cmd>
// an invalid message
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_CmdFinished(void)
{
  // clear all status variables
  sysex_state.ALL = 0;
 80118a0:	4b0f      	ldr	r3, [pc, #60]	; (80118e0 <MIOS32_MIDI_SYSEX_Parser+0xc4>)
  sysex_cmd = 0;
 80118a2:	4a13      	ldr	r2, [pc, #76]	; (80118f0 <MIOS32_MIDI_SYSEX_Parser+0xd4>)
// an invalid message
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_CmdFinished(void)
{
  // clear all status variables
  sysex_state.ALL = 0;
 80118a4:	7819      	ldrb	r1, [r3, #0]
  sysex_cmd = 0;
 80118a6:	2000      	movs	r0, #0
// an invalid message
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_MIDI_SYSEX_CmdFinished(void)
{
  // clear all status variables
  sysex_state.ALL = 0;
 80118a8:	f36f 0107 	bfc	r1, #0, #8
 80118ac:	7019      	strb	r1, [r3, #0]
  sysex_cmd = 0;
 80118ae:	7010      	strb	r0, [r2, #0]
 80118b0:	bd10      	pop	{r4, pc}
      	MIOS32_MIDI_SYSEX_Cmd(port, MIOS32_MIDI_SYSEX_CMD_STATE_END, midi_in);
      }
      MIOS32_MIDI_SYSEX_CmdFinished();
    } else {
      // check if command byte has been received
      if( !sysex_state.general.CMD ) {
 80118b2:	f001 0410 	and.w	r4, r1, #16
 80118b6:	b2e4      	uxtb	r4, r4
 80118b8:	b944      	cbnz	r4, 80118cc <MIOS32_MIDI_SYSEX_Parser+0xb0>
	sysex_state.general.CMD = 1;
 80118ba:	4b09      	ldr	r3, [pc, #36]	; (80118e0 <MIOS32_MIDI_SYSEX_Parser+0xc4>)
 80118bc:	7819      	ldrb	r1, [r3, #0]
 80118be:	f041 0110 	orr.w	r1, r1, #16
 80118c2:	7019      	strb	r1, [r3, #0]
	sysex_cmd = midi_in;
 80118c4:	4b0a      	ldr	r3, [pc, #40]	; (80118f0 <MIOS32_MIDI_SYSEX_Parser+0xd4>)
	MIOS32_MIDI_SYSEX_Cmd(port, MIOS32_MIDI_SYSEX_CMD_STATE_BEGIN, midi_in);
 80118c6:	4621      	mov	r1, r4
      MIOS32_MIDI_SYSEX_CmdFinished();
    } else {
      // check if command byte has been received
      if( !sysex_state.general.CMD ) {
	sysex_state.general.CMD = 1;
	sysex_cmd = midi_in;
 80118c8:	701a      	strb	r2, [r3, #0]
 80118ca:	e000      	b.n	80118ce <MIOS32_MIDI_SYSEX_Parser+0xb2>
	MIOS32_MIDI_SYSEX_Cmd(port, MIOS32_MIDI_SYSEX_CMD_STATE_BEGIN, midi_in);
      }
      else
	MIOS32_MIDI_SYSEX_Cmd(port, MIOS32_MIDI_SYSEX_CMD_STATE_CONT, midi_in);
 80118cc:	2101      	movs	r1, #1
 80118ce:	f7ff fecb 	bl	8011668 <MIOS32_MIDI_SYSEX_Cmd>
 80118d2:	e002      	b.n	80118da <MIOS32_MIDI_SYSEX_Parser+0xbe>
  if( midi_in >= 0xf8 )
    return 0;

  // TODO: here we could send an error notification, that multiple devices are trying to access the device
  if( sysex_state.general.MY_SYSEX && port != last_sysex_port )
    return -1;
 80118d4:	f04f 30ff 	mov.w	r0, #4294967295
 80118d8:	bd10      	pop	{r4, pc}
static s32 MIOS32_MIDI_SYSEX_Parser(mios32_midi_port_t port, u8 midi_in)
{
  // ignore realtime messages (see MIDI spec - realtime messages can
  // always be injected into events/streams, and don't change the running status)
  if( midi_in >= 0xf8 )
    return 0;
 80118da:	2000      	movs	r0, #0
	MIOS32_MIDI_SYSEX_Cmd(port, MIOS32_MIDI_SYSEX_CMD_STATE_CONT, midi_in);
    }
  }

  return 0; // no error
}
 80118dc:	bd10      	pop	{r4, pc}
 80118de:	bf00      	nop
 80118e0:	2000017c 	.word	0x2000017c
 80118e4:	20000174 	.word	0x20000174
 80118e8:	08018025 	.word	0x08018025
 80118ec:	20000176 	.word	0x20000176
 80118f0:	20000168 	.word	0x20000168

080118f4 <MIOS32_MIDI_ReceivePackage>:
//! \param[in] _callback_package typically APP_MIDI_NotifyPackage
//! \return -1 if port not available
//! \return 0 on success
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_ReceivePackage(mios32_midi_port_t port, mios32_midi_package_t package, void *_callback_package)
{
 80118f4:	f001 0c0f 	and.w	ip, r1, #15
 80118f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118fc:	4688      	mov	r8, r1
 80118fe:	f3c1 2507 	ubfx	r5, r1, #8, #8
 8011902:	f3c1 4b07 	ubfx	fp, r1, #16, #8
 8011906:	ea4f 6a11 	mov.w	sl, r1, lsr #24

  // remove cable number from package (MIOS32_MIDI passes it's own port number)
  package.cable = 0;

  // branch depending on package type
  if( package.type >= 0x8 && package.type < 0xf ) {
 801190a:	f10c 0108 	add.w	r1, ip, #8
//! \param[in] _callback_package typically APP_MIDI_NotifyPackage
//! \return -1 if port not available
//! \return 0 on success
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_ReceivePackage(mios32_midi_port_t port, mios32_midi_package_t package, void *_callback_package)
{
 801190e:	4617      	mov	r7, r2

  // remove cable number from package (MIOS32_MIDI passes it's own port number)
  package.cable = 0;

  // branch depending on package type
  if( package.type >= 0x8 && package.type < 0xf ) {
 8011910:	f001 020f 	and.w	r2, r1, #15
 8011914:	2a06      	cmp	r2, #6
//! \param[in] _callback_package typically APP_MIDI_NotifyPackage
//! \return -1 if port not available
//! \return 0 on success
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_ReceivePackage(mios32_midi_port_t port, mios32_midi_package_t package, void *_callback_package)
{
 8011916:	4606      	mov	r6, r0

  // remove cable number from package (MIOS32_MIDI passes it's own port number)
  package.cable = 0;

  // branch depending on package type
  if( package.type >= 0x8 && package.type < 0xf ) {
 8011918:	d803      	bhi.n	8011922 <MIOS32_MIDI_ReceivePackage+0x2e>
    if( callback_package != NULL )
 801191a:	2f00      	cmp	r7, #0
 801191c:	f040 808a 	bne.w	8011a34 <MIOS32_MIDI_ReceivePackage+0x140>
 8011920:	e0f3      	b.n	8011b0a <MIOS32_MIDI_ReceivePackage+0x216>
      callback_package(port, package);
  } else {
    // service SysEx timeout counter
    if( package.evnt0 == 0xf0 || // for package.type == 0xf
 8011922:	2df0      	cmp	r5, #240	; 0xf0
 8011924:	d005      	beq.n	8011932 <MIOS32_MIDI_ReceivePackage+0x3e>
	(package.type >= 4 && package.type <= 7) ) {
 8011926:	f10c 000c 	add.w	r0, ip, #12
  if( package.type >= 0x8 && package.type < 0xf ) {
    if( callback_package != NULL )
      callback_package(port, package);
  } else {
    // service SysEx timeout counter
    if( package.evnt0 == 0xf0 || // for package.type == 0xf
 801192a:	f000 030f 	and.w	r3, r0, #15
 801192e:	2b03      	cmp	r3, #3
 8011930:	d828      	bhi.n	8011984 <MIOS32_MIDI_ReceivePackage+0x90>
	(package.type >= 4 && package.type <= 7) ) {
      // cheap timeout mechanism - see comments above the sysex_timeout_ctr declaration
      if( !sysex_timeout_ctr_flags.ALL ) {
 8011932:	4977      	ldr	r1, [pc, #476]	; (8011b10 <MIOS32_MIDI_ReceivePackage+0x21c>)
 8011934:	e9d1 2300 	ldrd	r2, r3, [r1]
 8011938:	4313      	orrs	r3, r2
 801193a:	d123      	bne.n	8011984 <MIOS32_MIDI_ReceivePackage+0x90>
	switch( port & 0xf0 ) {
 801193c:	f006 04f0 	and.w	r4, r6, #240	; 0xf0
 8011940:	2c30      	cmp	r4, #48	; 0x30
 8011942:	f04f 0000 	mov.w	r0, #0
 8011946:	d00c      	beq.n	8011962 <MIOS32_MIDI_ReceivePackage+0x6e>
 8011948:	2c50      	cmp	r4, #80	; 0x50
 801194a:	d013      	beq.n	8011974 <MIOS32_MIDI_ReceivePackage+0x80>
 801194c:	2c10      	cmp	r4, #16
 801194e:	d119      	bne.n	8011984 <MIOS32_MIDI_ReceivePackage+0x90>
	case USB0://..15
	  sysex_timeout_ctr = 0;
 8011950:	4c70      	ldr	r4, [pc, #448]	; (8011b14 <MIOS32_MIDI_ReceivePackage+0x220>)
	  sysex_timeout_ctr_flags.usb_receives = (1 << (port & 0xf));
 8011952:	f006 030f 	and.w	r3, r6, #15
	(package.type >= 4 && package.type <= 7) ) {
      // cheap timeout mechanism - see comments above the sysex_timeout_ctr declaration
      if( !sysex_timeout_ctr_flags.ALL ) {
	switch( port & 0xf0 ) {
	case USB0://..15
	  sysex_timeout_ctr = 0;
 8011956:	8020      	strh	r0, [r4, #0]
	  sysex_timeout_ctr_flags.usb_receives = (1 << (port & 0xf));
 8011958:	2401      	movs	r4, #1
 801195a:	fa04 f203 	lsl.w	r2, r4, r3
 801195e:	800a      	strh	r2, [r1, #0]
	  break;
 8011960:	e010      	b.n	8011984 <MIOS32_MIDI_ReceivePackage+0x90>
	case UART0://..15
	  // already done in MIOS32_UART_MIDI_PackageReceive()
	  break;
	case IIC0://..15
	  sysex_timeout_ctr = 0;
 8011962:	4a6c      	ldr	r2, [pc, #432]	; (8011b14 <MIOS32_MIDI_ReceivePackage+0x220>)
	  sysex_timeout_ctr_flags.iic_receives = (1 << (port & 0xf));
 8011964:	2401      	movs	r4, #1
	  break;
	case UART0://..15
	  // already done in MIOS32_UART_MIDI_PackageReceive()
	  break;
	case IIC0://..15
	  sysex_timeout_ctr = 0;
 8011966:	8010      	strh	r0, [r2, #0]
	  sysex_timeout_ctr_flags.iic_receives = (1 << (port & 0xf));
 8011968:	f006 000f 	and.w	r0, r6, #15
 801196c:	fa04 f300 	lsl.w	r3, r4, r0
 8011970:	804b      	strh	r3, [r1, #2]
	  break;
 8011972:	e007      	b.n	8011984 <MIOS32_MIDI_ReceivePackage+0x90>
	case SPIM0://..15
	  sysex_timeout_ctr = 0;
 8011974:	4c67      	ldr	r4, [pc, #412]	; (8011b14 <MIOS32_MIDI_ReceivePackage+0x220>)
 8011976:	8020      	strh	r0, [r4, #0]
	  sysex_timeout_ctr_flags.spi_receives = (1 << (port & 0xf));
 8011978:	f006 000f 	and.w	r0, r6, #15
 801197c:	2401      	movs	r4, #1
 801197e:	fa04 f300 	lsl.w	r3, r4, r0
 8011982:	808b      	strh	r3, [r1, #4]
	}
      }
    }

    u8 filter_sysex = 0;
    switch( package.type ) {
 8011984:	f1ac 0102 	sub.w	r1, ip, #2
 8011988:	290d      	cmp	r1, #13
 801198a:	f200 80be 	bhi.w	8011b0a <MIOS32_MIDI_ReceivePackage+0x216>
 801198e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8011992:	004e      	.short	0x004e
 8011994:	000e004e 	.word	0x000e004e
 8011998:	0054004c 	.word	0x0054004c
 801199c:	00bc0054 	.word	0x00bc0054
 80119a0:	00bc00bc 	.word	0x00bc00bc
 80119a4:	00bc00bc 	.word	0x00bc00bc
 80119a8:	00bc00bc 	.word	0x00bc00bc
 80119ac:	000e      	.short	0x000e
      break;

    case 0x4: // SysEx starts or continues (3 bytes)
    case 0xf: // Single byte is interpreted as SysEx as well (I noticed that portmidi sometimes sends single bytes!)

      if( package.evnt0 >= 0xf8 ) { // relevant for package type 0xf
 80119ae:	2df7      	cmp	r5, #247	; 0xf7
 80119b0:	d83d      	bhi.n	8011a2e <MIOS32_MIDI_ReceivePackage+0x13a>
	if( callback_package != NULL )
	  callback_package(port, package); // -> realtime event is forwarded as event
	break;
      }

      MIOS32_MIDI_SYSEX_Parser(port, package.evnt0); // -> forward to MIOS32 SysEx Parser
 80119b2:	4630      	mov	r0, r6
 80119b4:	4629      	mov	r1, r5
      if( package.type != 0x0f ) {
 80119b6:	f36f 1807 	bfc	r8, #4, #4
	if( callback_package != NULL )
	  callback_package(port, package); // -> realtime event is forwarded as event
	break;
      }

      MIOS32_MIDI_SYSEX_Parser(port, package.evnt0); // -> forward to MIOS32 SysEx Parser
 80119ba:	f7ff ff2f 	bl	801181c <MIOS32_MIDI_SYSEX_Parser>
      if( package.type != 0x0f ) {
 80119be:	f008 020f 	and.w	r2, r8, #15
 80119c2:	2a0f      	cmp	r2, #15
 80119c4:	9201      	str	r2, [sp, #4]
 80119c6:	d007      	beq.n	80119d8 <MIOS32_MIDI_ReceivePackage+0xe4>
	MIOS32_MIDI_SYSEX_Parser(port, package.evnt1); // -> forward to MIOS32 SysEx Parser
 80119c8:	4659      	mov	r1, fp
 80119ca:	4630      	mov	r0, r6
 80119cc:	f7ff ff26 	bl	801181c <MIOS32_MIDI_SYSEX_Parser>
	MIOS32_MIDI_SYSEX_Parser(port, package.evnt2); // -> forward to MIOS32 SysEx Parser
 80119d0:	4630      	mov	r0, r6
 80119d2:	4651      	mov	r1, sl
 80119d4:	f7ff ff22 	bl	801181c <MIOS32_MIDI_SYSEX_Parser>
      }

#if !MIOS32_MIDI_BSL_ENHANCEMENTS // to save some memory
      if( !sysex_state.general.MY_SYSEX ) { // don't forward to application if we receive a MIOS32 command
 80119d8:	484f      	ldr	r0, [pc, #316]	; (8011b18 <MIOS32_MIDI_ReceivePackage+0x224>)
 80119da:	7803      	ldrb	r3, [r0, #0]
 80119dc:	f003 0108 	and.w	r1, r3, #8
 80119e0:	b2ca      	uxtb	r2, r1
 80119e2:	2a00      	cmp	r2, #0
 80119e4:	f040 8091 	bne.w	8011b0a <MIOS32_MIDI_ReceivePackage+0x216>
	if( sysex_callback_func != NULL ) {
 80119e8:	4c4c      	ldr	r4, [pc, #304]	; (8011b1c <MIOS32_MIDI_ReceivePackage+0x228>)
 80119ea:	6823      	ldr	r3, [r4, #0]
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	f000 808a 	beq.w	8011b06 <MIOS32_MIDI_ReceivePackage+0x212>
	  filter_sysex |= sysex_callback_func(port, package.evnt0); // -> forwarded as SysEx
 80119f2:	4630      	mov	r0, r6
 80119f4:	4629      	mov	r1, r5
 80119f6:	4798      	blx	r3
 80119f8:	4681      	mov	r9, r0
 80119fa:	b2c3      	uxtb	r3, r0
	  if( package.type != 0x0f ) {
 80119fc:	9801      	ldr	r0, [sp, #4]
 80119fe:	280f      	cmp	r0, #15
 8011a00:	d00e      	beq.n	8011a20 <MIOS32_MIDI_ReceivePackage+0x12c>
	    filter_sysex |= sysex_callback_func(port, package.evnt1); // -> forwarded as SysEx
 8011a02:	6825      	ldr	r5, [r4, #0]
 8011a04:	4659      	mov	r1, fp
 8011a06:	4630      	mov	r0, r6
 8011a08:	47a8      	blx	r5
	    filter_sysex |= sysex_callback_func(port, package.evnt2); // -> forwarded as SysEx
 8011a0a:	4651      	mov	r1, sl
#if !MIOS32_MIDI_BSL_ENHANCEMENTS // to save some memory
      if( !sysex_state.general.MY_SYSEX ) { // don't forward to application if we receive a MIOS32 command
	if( sysex_callback_func != NULL ) {
	  filter_sysex |= sysex_callback_func(port, package.evnt0); // -> forwarded as SysEx
	  if( package.type != 0x0f ) {
	    filter_sysex |= sysex_callback_func(port, package.evnt1); // -> forwarded as SysEx
 8011a0c:	4605      	mov	r5, r0
	    filter_sysex |= sysex_callback_func(port, package.evnt2); // -> forwarded as SysEx
 8011a0e:	6822      	ldr	r2, [r4, #0]
 8011a10:	4630      	mov	r0, r6
 8011a12:	4790      	blx	r2
#if !MIOS32_MIDI_BSL_ENHANCEMENTS // to save some memory
      if( !sysex_state.general.MY_SYSEX ) { // don't forward to application if we receive a MIOS32 command
	if( sysex_callback_func != NULL ) {
	  filter_sysex |= sysex_callback_func(port, package.evnt0); // -> forwarded as SysEx
	  if( package.type != 0x0f ) {
	    filter_sysex |= sysex_callback_func(port, package.evnt1); // -> forwarded as SysEx
 8011a14:	ea45 0100 	orr.w	r1, r5, r0
	    filter_sysex |= sysex_callback_func(port, package.evnt2); // -> forwarded as SysEx
 8011a18:	ea41 0909 	orr.w	r9, r1, r9
 8011a1c:	fa5f f389 	uxtb.w	r3, r9
	  }
	}

	if( callback_package != NULL && !filter_sysex )
 8011a20:	2f00      	cmp	r7, #0
 8011a22:	d072      	beq.n	8011b0a <MIOS32_MIDI_ReceivePackage+0x216>
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d170      	bne.n	8011b0a <MIOS32_MIDI_ReceivePackage+0x216>
 8011a28:	e065      	b.n	8011af6 <MIOS32_MIDI_ReceivePackage+0x202>
      }
#endif
      break;

    case 0x5:   // Single-byte System Common Message or SysEx ends with following single byte. 
      if( package.evnt0 >= 0xf8 ) {
 8011a2a:	2df7      	cmp	r5, #247	; 0xf7
 8011a2c:	d905      	bls.n	8011a3a <MIOS32_MIDI_ReceivePackage+0x146>
	if( callback_package != NULL )
 8011a2e:	2f00      	cmp	r7, #0
 8011a30:	d06b      	beq.n	8011b0a <MIOS32_MIDI_ReceivePackage+0x216>
	  callback_package(port, package); // -> forwarded as event
 8011a32:	4630      	mov	r0, r6
 8011a34:	f028 01f0 	bic.w	r1, r8, #240	; 0xf0
 8011a38:	e05f      	b.n	8011afa <MIOS32_MIDI_ReceivePackage+0x206>
      }
      // no >= 0xf8 event: continue!

    case 0x6:   // SysEx ends with following two bytes.
    case 0x7: { // SysEx ends with following three bytes.
      u8 num_bytes = package.type - 0x5 + 1;
 8011a3a:	f1ac 0404 	sub.w	r4, ip, #4
      u8 current_byte = 0;

      if( num_bytes >= 1 ) {
 8011a3e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8011a42:	d05c      	beq.n	8011afe <MIOS32_MIDI_ReceivePackage+0x20a>
	current_byte = package.evnt0;
	MIOS32_MIDI_SYSEX_Parser(port, current_byte); // -> forward to MIOS32 SysEx Parser
 8011a44:	4629      	mov	r1, r5
 8011a46:	4630      	mov	r0, r6
 8011a48:	f7ff fee8 	bl	801181c <MIOS32_MIDI_SYSEX_Parser>

#if !MIOS32_MIDI_BSL_ENHANCEMENTS // to save some memory
	if( !sysex_state.general.MY_SYSEX ) { // don't forward to application if we receive a MIOS32 command
 8011a4c:	4832      	ldr	r0, [pc, #200]	; (8011b18 <MIOS32_MIDI_ReceivePackage+0x224>)
 8011a4e:	7802      	ldrb	r2, [r0, #0]
 8011a50:	f002 0108 	and.w	r1, r2, #8
 8011a54:	b2cb      	uxtb	r3, r1
 8011a56:	b943      	cbnz	r3, 8011a6a <MIOS32_MIDI_ReceivePackage+0x176>
	  if( sysex_callback_func != NULL )
 8011a58:	4830      	ldr	r0, [pc, #192]	; (8011b1c <MIOS32_MIDI_ReceivePackage+0x228>)
 8011a5a:	6802      	ldr	r2, [r0, #0]
 8011a5c:	b142      	cbz	r2, 8011a70 <MIOS32_MIDI_ReceivePackage+0x17c>
	    filter_sysex |= sysex_callback_func(port, current_byte); // -> forwarded as SysEx
 8011a5e:	4630      	mov	r0, r6
 8011a60:	4629      	mov	r1, r5
 8011a62:	4790      	blx	r2
 8011a64:	fa5f f980 	uxtb.w	r9, r0
 8011a68:	e003      	b.n	8011a72 <MIOS32_MIDI_ReceivePackage+0x17e>
	  // no timeout protection for remaining interfaces (yet)
	}
      }
    }

    u8 filter_sysex = 0;
 8011a6a:	f04f 0900 	mov.w	r9, #0
 8011a6e:	e000      	b.n	8011a72 <MIOS32_MIDI_ReceivePackage+0x17e>
 8011a70:	4691      	mov	r9, r2
	    filter_sysex |= sysex_callback_func(port, current_byte); // -> forwarded as SysEx
	}
#endif
      }

      if( num_bytes >= 2 ) {
 8011a72:	2c01      	cmp	r4, #1
 8011a74:	d045      	beq.n	8011b02 <MIOS32_MIDI_ReceivePackage+0x20e>
	current_byte = package.evnt1;
	MIOS32_MIDI_SYSEX_Parser(port, current_byte); // -> forward to MIOS32 SysEx Parser
 8011a76:	4659      	mov	r1, fp
 8011a78:	4630      	mov	r0, r6
 8011a7a:	f7ff fecf 	bl	801181c <MIOS32_MIDI_SYSEX_Parser>

#if !MIOS32_MIDI_BSL_ENHANCEMENTS // to save some memory
	if( !sysex_state.general.MY_SYSEX ) { // don't forward to application if we receive a MIOS32 command
 8011a7e:	4926      	ldr	r1, [pc, #152]	; (8011b18 <MIOS32_MIDI_ReceivePackage+0x224>)
 8011a80:	780b      	ldrb	r3, [r1, #0]
 8011a82:	f003 0008 	and.w	r0, r3, #8
 8011a86:	b2c2      	uxtb	r2, r0
 8011a88:	b94a      	cbnz	r2, 8011a9e <MIOS32_MIDI_ReceivePackage+0x1aa>
	  if( sysex_callback_func != NULL )
 8011a8a:	4924      	ldr	r1, [pc, #144]	; (8011b1c <MIOS32_MIDI_ReceivePackage+0x228>)
 8011a8c:	680b      	ldr	r3, [r1, #0]
 8011a8e:	b133      	cbz	r3, 8011a9e <MIOS32_MIDI_ReceivePackage+0x1aa>
	    filter_sysex |= sysex_callback_func(port, current_byte); // -> forwarded as SysEx
 8011a90:	4630      	mov	r0, r6
 8011a92:	4659      	mov	r1, fp
 8011a94:	4798      	blx	r3
 8011a96:	ea40 0009 	orr.w	r0, r0, r9
 8011a9a:	fa5f f980 	uxtb.w	r9, r0
	}
#endif
      }

      if( num_bytes >= 3 ) {
 8011a9e:	2c02      	cmp	r4, #2
 8011aa0:	d014      	beq.n	8011acc <MIOS32_MIDI_ReceivePackage+0x1d8>
	current_byte = package.evnt2;
	MIOS32_MIDI_SYSEX_Parser(port, current_byte); // -> forward to MIOS32 SysEx Parser
 8011aa2:	4651      	mov	r1, sl
 8011aa4:	4630      	mov	r0, r6
 8011aa6:	f7ff feb9 	bl	801181c <MIOS32_MIDI_SYSEX_Parser>

#if !MIOS32_MIDI_BSL_ENHANCEMENTS // to save some memory
	if( !sysex_state.general.MY_SYSEX ) { // don't forward to application if we receive a MIOS32 command
 8011aaa:	4a1b      	ldr	r2, [pc, #108]	; (8011b18 <MIOS32_MIDI_ReceivePackage+0x224>)
 8011aac:	7811      	ldrb	r1, [r2, #0]
 8011aae:	f001 0308 	and.w	r3, r1, #8
 8011ab2:	b2d8      	uxtb	r0, r3
 8011ab4:	b958      	cbnz	r0, 8011ace <MIOS32_MIDI_ReceivePackage+0x1da>
	  if( sysex_callback_func != NULL )
 8011ab6:	4a19      	ldr	r2, [pc, #100]	; (8011b1c <MIOS32_MIDI_ReceivePackage+0x228>)
 8011ab8:	6813      	ldr	r3, [r2, #0]
 8011aba:	b143      	cbz	r3, 8011ace <MIOS32_MIDI_ReceivePackage+0x1da>
	    filter_sysex |= sysex_callback_func(port, current_byte); // -> forwarded as SysEx
 8011abc:	4651      	mov	r1, sl
 8011abe:	4630      	mov	r0, r6
 8011ac0:	4798      	blx	r3
 8011ac2:	ea40 0109 	orr.w	r1, r0, r9
 8011ac6:	fa5f f981 	uxtb.w	r9, r1
 8011aca:	e000      	b.n	8011ace <MIOS32_MIDI_ReceivePackage+0x1da>
	    filter_sysex |= sysex_callback_func(port, current_byte); // -> forwarded as SysEx
	}
#endif
      }

      if( num_bytes >= 3 ) {
 8011acc:	46da      	mov	sl, fp
	}
#endif
      }

      // reset timeout protection if required
      if( current_byte == 0xf7 )
 8011ace:	f1ba 0ff7 	cmp.w	sl, #247	; 0xf7
 8011ad2:	d104      	bne.n	8011ade <MIOS32_MIDI_ReceivePackage+0x1ea>
	sysex_timeout_ctr_flags.ALL = 0;
 8011ad4:	480e      	ldr	r0, [pc, #56]	; (8011b10 <MIOS32_MIDI_ReceivePackage+0x21c>)
 8011ad6:	2400      	movs	r4, #0
 8011ad8:	2500      	movs	r5, #0
 8011ada:	e9c0 4500 	strd	r4, r5, [r0]

#if !MIOS32_MIDI_BSL_ENHANCEMENTS // to save some memory
      if( !sysex_state.general.MY_SYSEX ) { // don't forward to application if we receive a MIOS32 command
 8011ade:	4a0e      	ldr	r2, [pc, #56]	; (8011b18 <MIOS32_MIDI_ReceivePackage+0x224>)
 8011ae0:	7813      	ldrb	r3, [r2, #0]
 8011ae2:	f003 0108 	and.w	r1, r3, #8
 8011ae6:	b2c8      	uxtb	r0, r1
 8011ae8:	b978      	cbnz	r0, 8011b0a <MIOS32_MIDI_ReceivePackage+0x216>
	// forward as package if not filtered
	if( callback_package != NULL && !filter_sysex )
 8011aea:	b177      	cbz	r7, 8011b0a <MIOS32_MIDI_ReceivePackage+0x216>
 8011aec:	f1b9 0f00 	cmp.w	r9, #0
 8011af0:	d10b      	bne.n	8011b0a <MIOS32_MIDI_ReceivePackage+0x216>
	  callback_package(port, package);
 8011af2:	f369 1807 	bfi	r8, r9, #4, #4
 8011af6:	4630      	mov	r0, r6
 8011af8:	4641      	mov	r1, r8
 8011afa:	47b8      	blx	r7
 8011afc:	e005      	b.n	8011b0a <MIOS32_MIDI_ReceivePackage+0x216>
	  // no timeout protection for remaining interfaces (yet)
	}
      }
    }

    u8 filter_sysex = 0;
 8011afe:	46a1      	mov	r9, r4
 8011b00:	e7ed      	b.n	8011ade <MIOS32_MIDI_ReceivePackage+0x1ea>
	    filter_sysex |= sysex_callback_func(port, current_byte); // -> forwarded as SysEx
	}
#endif
      }

      if( num_bytes >= 2 ) {
 8011b02:	46aa      	mov	sl, r5
 8011b04:	e7e3      	b.n	8011ace <MIOS32_MIDI_ReceivePackage+0x1da>
	    filter_sysex |= sysex_callback_func(port, package.evnt1); // -> forwarded as SysEx
	    filter_sysex |= sysex_callback_func(port, package.evnt2); // -> forwarded as SysEx
	  }
	}

	if( callback_package != NULL && !filter_sysex )
 8011b06:	2f00      	cmp	r7, #0
 8011b08:	d1f5      	bne.n	8011af6 <MIOS32_MIDI_ReceivePackage+0x202>
    } break;
    }	      
  }

  return 0; // no error
}
 8011b0a:	2000      	movs	r0, #0
 8011b0c:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b10:	20000188 	.word	0x20000188
 8011b14:	20000178 	.word	0x20000178
 8011b18:	2000017c 	.word	0x2000017c
 8011b1c:	20000190 	.word	0x20000190

08011b20 <MIOS32_MIDI_Receive_Handler>:
//! which can be installed via MIOS32_MIDI_SysExCallback_Init()
//!
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_MIDI_Receive_Handler(void *_callback_package)
{
 8011b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b24:	4680      	mov	r8, r0
 8011b26:	b08c      	sub	sp, #48	; 0x30
  // handle all USB MIDI packages
#if !defined(MIOS32_DONT_USE_USB) && !defined(MIOS32_DONT_USE_USB_MIDI)
  {
    s32 status;
    mios32_midi_package_t package;
    while( (status=MIOS32_USB_MIDI_PackageReceive(&package)) >= 0 ) {
 8011b28:	4668      	mov	r0, sp
 8011b2a:	f001 fab7 	bl	801309c <MIOS32_USB_MIDI_PackageReceive>
 8011b2e:	2800      	cmp	r0, #0
 8011b30:	db07      	blt.n	8011b42 <MIOS32_MIDI_Receive_Handler+0x22>
      MIOS32_MIDI_ReceivePackage(USB0 + package.cable, package, _callback_package);
 8011b32:	9900      	ldr	r1, [sp, #0]
 8011b34:	f3c1 1003 	ubfx	r0, r1, #4, #4
 8011b38:	3010      	adds	r0, #16
 8011b3a:	4642      	mov	r2, r8
 8011b3c:	f7ff feda 	bl	80118f4 <MIOS32_MIDI_ReceivePackage>
 8011b40:	e7f2      	b.n	8011b28 <MIOS32_MIDI_Receive_Handler+0x8>
    typedef struct {
      mios32_midi_port_t port;
      s32 (*receive_func)(u8 if_port, mios32_midi_package_t *package);
    } midi_intf_table_t;

    const midi_intf_table_t midi_intf_table[] = {
 8011b42:	4d3b      	ldr	r5, [pc, #236]	; (8011c30 <MIOS32_MIDI_Receive_Handler+0x110>)
 8011b44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b46:	ac02      	add	r4, sp, #8
 8011b48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011b4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011b4e:	e895 0003 	ldmia.w	r5, {r0, r1}
#endif
#endif
      { 0, NULL } // end of table
    };

    if( midi_intf_table[0].port != 0 ) {
 8011b52:	f89d 3008 	ldrb.w	r3, [sp, #8]
    typedef struct {
      mios32_midi_port_t port;
      s32 (*receive_func)(u8 if_port, mios32_midi_package_t *package);
    } midi_intf_table_t;

    const midi_intf_table_t midi_intf_table[] = {
 8011b56:	e884 0003 	stmia.w	r4, {r0, r1}
#endif
#endif
      { 0, NULL } // end of table
    };

    if( midi_intf_table[0].port != 0 ) {
 8011b5a:	b34b      	cbz	r3, 8011bb0 <MIOS32_MIDI_Receive_Handler+0x90>
 8011b5c:	2400      	movs	r4, #0
 8011b5e:	4625      	mov	r5, r4
 8011b60:	4626      	mov	r6, r4
      int intf = 0;
      do {
	mios32_midi_package_t package;

	// last table entry?
	if( !midi_intf_table[intf].port ) {
 8011b62:	a80c      	add	r0, sp, #48	; 0x30
 8011b64:	eb00 01c4 	add.w	r1, r0, r4, lsl #3
 8011b68:	f811 2c28 	ldrb.w	r2, [r1, #-40]
 8011b6c:	b912      	cbnz	r2, 8011b74 <MIOS32_MIDI_Receive_Handler+0x54>
	  if( !packages_forwarded_this_round )
 8011b6e:	b1fd      	cbz	r5, 8011bb0 <MIOS32_MIDI_Receive_Handler+0x90>
	    break; // no new package

	  intf = 0; // at least one package: restart
 8011b70:	4614      	mov	r4, r2
	  packages_forwarded_this_round = 0;
 8011b72:	4615      	mov	r5, r2
	}

	// execute receive function
	mios32_midi_port_t port = midi_intf_table[intf].port;
 8011b74:	af0c      	add	r7, sp, #48	; 0x30
 8011b76:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
	s32 status = midi_intf_table[intf].receive_func(port & 0x0f, &package);
 8011b7a:	a901      	add	r1, sp, #4
	  intf = 0; // at least one package: restart
	  packages_forwarded_this_round = 0;
	}

	// execute receive function
	mios32_midi_port_t port = midi_intf_table[intf].port;
 8011b7c:	f813 7c28 	ldrb.w	r7, [r3, #-40]
	s32 status = midi_intf_table[intf].receive_func(port & 0x0f, &package);
 8011b80:	f853 2c24 	ldr.w	r2, [r3, #-36]
 8011b84:	f007 000f 	and.w	r0, r7, #15
 8011b88:	4790      	blx	r2

	if( status == -10 ) { // receive timeout?
 8011b8a:	f110 0f0a 	cmn.w	r0, #10
 8011b8e:	d103      	bne.n	8011b98 <MIOS32_MIDI_Receive_Handler+0x78>
	  MIOS32_MIDI_TimeOut(port);
 8011b90:	4638      	mov	r0, r7
 8011b92:	f7ff fce9 	bl	8011568 <MIOS32_MIDI_TimeOut>
 8011b96:	e008      	b.n	8011baa <MIOS32_MIDI_Receive_Handler+0x8a>
	} else if( status >= 0 ) { // message received?
 8011b98:	2800      	cmp	r0, #0
 8011b9a:	db06      	blt.n	8011baa <MIOS32_MIDI_Receive_Handler+0x8a>
	  ++packages_forwarded;
	  ++packages_forwarded_this_round;
	  
	  // handle received package
	  MIOS32_MIDI_ReceivePackage(port, package, _callback_package);
 8011b9c:	4638      	mov	r0, r7
 8011b9e:	9901      	ldr	r1, [sp, #4]
 8011ba0:	4642      	mov	r2, r8
	s32 status = midi_intf_table[intf].receive_func(port & 0x0f, &package);

	if( status == -10 ) { // receive timeout?
	  MIOS32_MIDI_TimeOut(port);
	} else if( status >= 0 ) { // message received?
	  ++packages_forwarded;
 8011ba2:	3601      	adds	r6, #1
	  ++packages_forwarded_this_round;
 8011ba4:	3501      	adds	r5, #1
	  
	  // handle received package
	  MIOS32_MIDI_ReceivePackage(port, package, _callback_package);
 8011ba6:	f7ff fea5 	bl	80118f4 <MIOS32_MIDI_ReceivePackage>
	}

	++intf;
 8011baa:	3401      	adds	r4, #1
      } while( packages_forwarded < 10 );
 8011bac:	2e09      	cmp	r6, #9
 8011bae:	ddd8      	ble.n	8011b62 <MIOS32_MIDI_Receive_Handler+0x42>
  }
#endif
  

  // SysEx timeout detected by this handler?
  if( sysex_timeout_ctr_flags.ALL && sysex_timeout_ctr > 1000 ) {
 8011bb0:	4920      	ldr	r1, [pc, #128]	; (8011c34 <MIOS32_MIDI_Receive_Handler+0x114>)
 8011bb2:	e9d1 2300 	ldrd	r2, r3, [r1]
 8011bb6:	ea52 0003 	orrs.w	r0, r2, r3
 8011bba:	d035      	beq.n	8011c28 <MIOS32_MIDI_Receive_Handler+0x108>
 8011bbc:	481e      	ldr	r0, [pc, #120]	; (8011c38 <MIOS32_MIDI_Receive_Handler+0x118>)
 8011bbe:	8803      	ldrh	r3, [r0, #0]
 8011bc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011bc4:	d930      	bls.n	8011c28 <MIOS32_MIDI_Receive_Handler+0x108>
    u8 timeout_port = 0;

    // determine port
    if( sysex_timeout_ctr_flags.usb_receives ) {
 8011bc6:	880a      	ldrh	r2, [r1, #0]
 8011bc8:	b162      	cbz	r2, 8011be4 <MIOS32_MIDI_Receive_Handler+0xc4>
 8011bca:	2100      	movs	r1, #0
      int i; // i'm missing a prio instruction in C!
      for(i=0; i<16; ++i)
	if( sysex_timeout_ctr_flags.usb_receives & (1 << i) )
 8011bcc:	fa42 f301 	asr.w	r3, r2, r1
 8011bd0:	f013 0001 	ands.w	r0, r3, #1
 8011bd4:	d103      	bne.n	8011bde <MIOS32_MIDI_Receive_Handler+0xbe>
    u8 timeout_port = 0;

    // determine port
    if( sysex_timeout_ctr_flags.usb_receives ) {
      int i; // i'm missing a prio instruction in C!
      for(i=0; i<16; ++i)
 8011bd6:	3101      	adds	r1, #1
 8011bd8:	2910      	cmp	r1, #16
 8011bda:	d1f7      	bne.n	8011bcc <MIOS32_MIDI_Receive_Handler+0xac>
	if( sysex_timeout_ctr_flags.usb_receives & (1 << i) )
	  break;
      if( i >= 16 ) // failsafe
	i = 0;
 8011bdc:	4601      	mov	r1, r0
      timeout_port = USB0 + i;
 8011bde:	3110      	adds	r1, #16
 8011be0:	b2c8      	uxtb	r0, r1
 8011be2:	e01a      	b.n	8011c1a <MIOS32_MIDI_Receive_Handler+0xfa>
    } else if( sysex_timeout_ctr_flags.iic_receives ) {
 8011be4:	884b      	ldrh	r3, [r1, #2]
 8011be6:	b15b      	cbz	r3, 8011c00 <MIOS32_MIDI_Receive_Handler+0xe0>
      int i; // i'm missing a prio instruction in C!
      for(i=0; i<16; ++i)
	if( sysex_timeout_ctr_flags.iic_receives & (1 << i) )
 8011be8:	fa43 f002 	asr.w	r0, r3, r2
 8011bec:	f010 0101 	ands.w	r1, r0, #1
 8011bf0:	d103      	bne.n	8011bfa <MIOS32_MIDI_Receive_Handler+0xda>
      if( i >= 16 ) // failsafe
	i = 0;
      timeout_port = USB0 + i;
    } else if( sysex_timeout_ctr_flags.iic_receives ) {
      int i; // i'm missing a prio instruction in C!
      for(i=0; i<16; ++i)
 8011bf2:	3201      	adds	r2, #1
 8011bf4:	2a10      	cmp	r2, #16
 8011bf6:	d1f7      	bne.n	8011be8 <MIOS32_MIDI_Receive_Handler+0xc8>
	if( sysex_timeout_ctr_flags.iic_receives & (1 << i) )
	  break;
      if( i >= 16 ) // failsafe
	i = 0;
 8011bf8:	460a      	mov	r2, r1
      timeout_port = IIC0 + i;
 8011bfa:	3230      	adds	r2, #48	; 0x30
 8011bfc:	b2d0      	uxtb	r0, r2
 8011bfe:	e00c      	b.n	8011c1a <MIOS32_MIDI_Receive_Handler+0xfa>
    } else if( sysex_timeout_ctr_flags.spi_receives ) {
 8011c00:	8888      	ldrh	r0, [r1, #4]
 8011c02:	b150      	cbz	r0, 8011c1a <MIOS32_MIDI_Receive_Handler+0xfa>
      int i; // i'm missing a prio instruction in C!
      for(i=0; i<16; ++i)
	if( sysex_timeout_ctr_flags.spi_receives & (1 << i) )
 8011c04:	fa40 f103 	asr.w	r1, r0, r3
 8011c08:	f011 0201 	ands.w	r2, r1, #1
 8011c0c:	d103      	bne.n	8011c16 <MIOS32_MIDI_Receive_Handler+0xf6>
      if( i >= 16 ) // failsafe
	i = 0;
      timeout_port = IIC0 + i;
    } else if( sysex_timeout_ctr_flags.spi_receives ) {
      int i; // i'm missing a prio instruction in C!
      for(i=0; i<16; ++i)
 8011c0e:	3301      	adds	r3, #1
 8011c10:	2b10      	cmp	r3, #16
 8011c12:	d1f7      	bne.n	8011c04 <MIOS32_MIDI_Receive_Handler+0xe4>
	if( sysex_timeout_ctr_flags.spi_receives & (1 << i) )
	  break;
      if( i >= 16 ) // failsafe
	i = 0;
 8011c14:	4613      	mov	r3, r2
      timeout_port = SPIM0 + i;
 8011c16:	3350      	adds	r3, #80	; 0x50
 8011c18:	b2d8      	uxtb	r0, r3
    }

    MIOS32_MIDI_TimeOut(timeout_port);
 8011c1a:	f7ff fca5 	bl	8011568 <MIOS32_MIDI_TimeOut>
    sysex_timeout_ctr_flags.ALL = 0;
 8011c1e:	4805      	ldr	r0, [pc, #20]	; (8011c34 <MIOS32_MIDI_Receive_Handler+0x114>)
 8011c20:	2200      	movs	r2, #0
 8011c22:	2300      	movs	r3, #0
 8011c24:	e9c0 2300 	strd	r2, r3, [r0]
  }

  return 0;
}
 8011c28:	2000      	movs	r0, #0
 8011c2a:	b00c      	add	sp, #48	; 0x30
 8011c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c30:	08017ea4 	.word	0x08017ea4
 8011c34:	20000188 	.word	0x20000188
 8011c38:	20000178 	.word	0x20000178

08011c3c <MIOS32_OSC_Init>:
{
  if( mode > 0 )
    return -1; // only mode 0 supported yet

  return 0; // no error
}
 8011c3c:	2800      	cmp	r0, #0
 8011c3e:	bf14      	ite	ne
 8011c40:	f04f 30ff 	movne.w	r0, #4294967295
 8011c44:	2000      	moveq	r0, #0
 8011c46:	4770      	bx	lr

08011c48 <MIOS32_UART_MIDI_RS_Reset>:
s32 MIOS32_UART_MIDI_RS_Reset(u8 uart_port)
{
#if MIOS32_UART_NUM == 0
  return -1; // all UARTs explicitely disabled
#else
  if( uart_port >= MIOS32_UART_NUM )
 8011c48:	2801      	cmp	r0, #1
//! \return -1 if port not available
//! \return < 0 on errors
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_MIDI_RS_Reset(u8 uart_port)
{
 8011c4a:	b538      	push	{r3, r4, r5, lr}
 8011c4c:	4604      	mov	r4, r0
#if MIOS32_UART_NUM == 0
  return -1; // all UARTs explicitely disabled
#else
  if( uart_port >= MIOS32_UART_NUM )
 8011c4e:	d80c      	bhi.n	8011c6a <MIOS32_UART_MIDI_RS_Reset+0x22>
    return -1; // port not available

  MIOS32_IRQ_Disable();
 8011c50:	f000 fafe 	bl	8012250 <MIOS32_IRQ_Disable>
  rs_last[uart_port] = 0xff;
 8011c54:	4b06      	ldr	r3, [pc, #24]	; (8011c70 <MIOS32_UART_MIDI_RS_Reset+0x28>)
  rs_expire_ctr[uart_port] = 0;
 8011c56:	4807      	ldr	r0, [pc, #28]	; (8011c74 <MIOS32_UART_MIDI_RS_Reset+0x2c>)
#else
  if( uart_port >= MIOS32_UART_NUM )
    return -1; // port not available

  MIOS32_IRQ_Disable();
  rs_last[uart_port] = 0xff;
 8011c58:	22ff      	movs	r2, #255	; 0xff
  rs_expire_ctr[uart_port] = 0;
 8011c5a:	2500      	movs	r5, #0
#else
  if( uart_port >= MIOS32_UART_NUM )
    return -1; // port not available

  MIOS32_IRQ_Disable();
  rs_last[uart_port] = 0xff;
 8011c5c:	551a      	strb	r2, [r3, r4]
  rs_expire_ctr[uart_port] = 0;
 8011c5e:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
  MIOS32_IRQ_Enable();
 8011c62:	f000 fb09 	bl	8012278 <MIOS32_IRQ_Enable>

  return 0;
 8011c66:	4628      	mov	r0, r5
 8011c68:	bd38      	pop	{r3, r4, r5, pc}
{
#if MIOS32_UART_NUM == 0
  return -1; // all UARTs explicitely disabled
#else
  if( uart_port >= MIOS32_UART_NUM )
    return -1; // port not available
 8011c6a:	f04f 30ff 	mov.w	r0, #4294967295
  rs_expire_ctr[uart_port] = 0;
  MIOS32_IRQ_Enable();

  return 0;
#endif
}
 8011c6e:	bd38      	pop	{r3, r4, r5, pc}
 8011c70:	20000198 	.word	0x20000198
 8011c74:	200001b6 	.word	0x200001b6

08011c78 <MIOS32_UART_MIDI_Init>:
//! \param[in] mode currently only mode 0 supported
//! \return < 0 if initialisation failed
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_MIDI_Init(u32 mode)
{
 8011c78:	b510      	push	{r4, lr}
#else
  int i;


  // currently only mode 0 supported
  if( mode != 0 )
 8011c7a:	4604      	mov	r4, r0
 8011c7c:	b110      	cbz	r0, 8011c84 <MIOS32_UART_MIDI_Init+0xc>
    return -1; // unsupported mode
 8011c7e:	f04f 30ff 	mov.w	r0, #4294967295
 8011c82:	bd10      	pop	{r4, pc}
static s32 MIOS32_UART_MIDI_RecordReset(u8 uart_port)
{
#if MIOS32_UART_NUM > 0
  midi_rec_t *midix = &midi_rec[uart_port];// simplify addressing of midi record

  midix->package.ALL = 0;
 8011c84:	4b0d      	ldr	r3, [pc, #52]	; (8011cbc <MIOS32_UART_MIDI_Init+0x44>)
  for(i=0; i<MIOS32_UART_NUM; ++i)
    MIOS32_UART_MIDI_RecordReset(i);

  // enable running status optimisation by default for all ports
  // clear timeout counters
  rs_optimisation = ~0; // -> all-one
 8011c86:	490e      	ldr	r1, [pc, #56]	; (8011cc0 <MIOS32_UART_MIDI_Init+0x48>)
static s32 MIOS32_UART_MIDI_RecordReset(u8 uart_port)
{
#if MIOS32_UART_NUM > 0
  midi_rec_t *midix = &midi_rec[uart_port];// simplify addressing of midi record

  midix->package.ALL = 0;
 8011c88:	6018      	str	r0, [r3, #0]
  for(i=0; i<MIOS32_UART_NUM; ++i)
    MIOS32_UART_MIDI_RecordReset(i);

  // enable running status optimisation by default for all ports
  // clear timeout counters
  rs_optimisation = ~0; // -> all-one
 8011c8a:	22ff      	movs	r2, #255	; 0xff
{
#if MIOS32_UART_NUM > 0
  midi_rec_t *midix = &midi_rec[uart_port];// simplify addressing of midi record

  midix->package.ALL = 0;
  midix->running_status = 0x00;
 8011c8c:	7118      	strb	r0, [r3, #4]
  midix->expected_bytes = 0x00;
 8011c8e:	7158      	strb	r0, [r3, #5]
  midix->wait_bytes = 0x00;
 8011c90:	7198      	strb	r0, [r3, #6]
  midix->sysex_ctr = 0x00;
 8011c92:	71d8      	strb	r0, [r3, #7]
  midix->timeout_ctr = 0;
 8011c94:	8118      	strh	r0, [r3, #8]
static s32 MIOS32_UART_MIDI_RecordReset(u8 uart_port)
{
#if MIOS32_UART_NUM > 0
  midi_rec_t *midix = &midi_rec[uart_port];// simplify addressing of midi record

  midix->package.ALL = 0;
 8011c96:	60d8      	str	r0, [r3, #12]
  midix->running_status = 0x00;
 8011c98:	7418      	strb	r0, [r3, #16]
  midix->expected_bytes = 0x00;
 8011c9a:	7458      	strb	r0, [r3, #17]
  midix->wait_bytes = 0x00;
 8011c9c:	7498      	strb	r0, [r3, #18]
  midix->sysex_ctr = 0x00;
 8011c9e:	74d8      	strb	r0, [r3, #19]
  midix->timeout_ctr = 0;
 8011ca0:	8298      	strh	r0, [r3, #20]
  for(i=0; i<MIOS32_UART_NUM; ++i)
    MIOS32_UART_MIDI_RecordReset(i);

  // enable running status optimisation by default for all ports
  // clear timeout counters
  rs_optimisation = ~0; // -> all-one
 8011ca2:	700a      	strb	r2, [r1, #0]
  for(i=0; i<MIOS32_UART_NUM; ++i)
    MIOS32_UART_MIDI_RS_Reset(i);
 8011ca4:	f7ff ffd0 	bl	8011c48 <MIOS32_UART_MIDI_RS_Reset>
 8011ca8:	2001      	movs	r0, #1
 8011caa:	f7ff ffcd 	bl	8011c48 <MIOS32_UART_MIDI_RS_Reset>

  // if any MIDI assignment:
#if MIOS32_UART0_ASSIGNMENT == 1 || MIOS32_UART1_ASSIGNMENT == 1 || MIOS32_UART2_ASSIGNMENT == 1 || MIOS32_UART3_ASSIGNMENT == 1
  // initialize U(S)ART interface
  if( MIOS32_UART_Init(0) < 0 )
 8011cae:	4620      	mov	r0, r4
 8011cb0:	f001 fa6e 	bl	8013190 <MIOS32_UART_Init>
 8011cb4:	2800      	cmp	r0, #0
 8011cb6:	dbe2      	blt.n	8011c7e <MIOS32_UART_MIDI_Init+0x6>
    return -1; // initialisation of U(S)ART Interface failed
#endif

  return 0; // no error
 8011cb8:	4620      	mov	r0, r4
#endif
}
 8011cba:	bd10      	pop	{r4, pc}
 8011cbc:	2000019c 	.word	0x2000019c
 8011cc0:	200001b4 	.word	0x200001b4

08011cc4 <MIOS32_UART_MIDI_Periodic_mS>:
//! model!
//! 
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_MIDI_Periodic_mS(void)
{
 8011cc4:	b508      	push	{r3, lr}
#if MIOS32_UART_NUM
  u8 uart_port;

  MIOS32_IRQ_Disable();
 8011cc6:	f000 fac3 	bl	8012250 <MIOS32_IRQ_Disable>
    // increment the expire counters for running status optimisation.
    //
    // The running status will expire after 1000 ticks (1 second) 
    // to ensure, that the current status will be sent at least each second
    // to cover the case that the MIDI cable is (re-)connected during runtime.
    if( rs_expire_ctr[uart_port] < 65535 )
 8011cca:	4a10      	ldr	r2, [pc, #64]	; (8011d0c <MIOS32_UART_MIDI_Periodic_mS+0x48>)
 8011ccc:	8813      	ldrh	r3, [r2, #0]
 8011cce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011cd2:	428b      	cmp	r3, r1
 8011cd4:	4608      	mov	r0, r1
 8011cd6:	d001      	beq.n	8011cdc <MIOS32_UART_MIDI_Periodic_mS+0x18>
      ++rs_expire_ctr[uart_port];
 8011cd8:	3301      	adds	r3, #1
 8011cda:	8013      	strh	r3, [r2, #0]

    // increment timeout counter for incoming packages
    // an incomplete event will be timed out after 1000 ticks (1 second)
    if( midi_rec[uart_port].timeout_ctr < 65535 )
 8011cdc:	4b0c      	ldr	r3, [pc, #48]	; (8011d10 <MIOS32_UART_MIDI_Periodic_mS+0x4c>)
 8011cde:	8919      	ldrh	r1, [r3, #8]
 8011ce0:	4281      	cmp	r1, r0
 8011ce2:	d001      	beq.n	8011ce8 <MIOS32_UART_MIDI_Periodic_mS+0x24>
      ++midi_rec[uart_port].timeout_ctr;
 8011ce4:	1c48      	adds	r0, r1, #1
 8011ce6:	8118      	strh	r0, [r3, #8]
    // increment the expire counters for running status optimisation.
    //
    // The running status will expire after 1000 ticks (1 second) 
    // to ensure, that the current status will be sent at least each second
    // to cover the case that the MIDI cable is (re-)connected during runtime.
    if( rs_expire_ctr[uart_port] < 65535 )
 8011ce8:	8852      	ldrh	r2, [r2, #2]
 8011cea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011cee:	428a      	cmp	r2, r1
 8011cf0:	d002      	beq.n	8011cf8 <MIOS32_UART_MIDI_Periodic_mS+0x34>
      ++rs_expire_ctr[uart_port];
 8011cf2:	4806      	ldr	r0, [pc, #24]	; (8011d0c <MIOS32_UART_MIDI_Periodic_mS+0x48>)
 8011cf4:	3201      	adds	r2, #1
 8011cf6:	8042      	strh	r2, [r0, #2]

    // increment timeout counter for incoming packages
    // an incomplete event will be timed out after 1000 ticks (1 second)
    if( midi_rec[uart_port].timeout_ctr < 65535 )
 8011cf8:	8a9b      	ldrh	r3, [r3, #20]
 8011cfa:	428b      	cmp	r3, r1
 8011cfc:	d002      	beq.n	8011d04 <MIOS32_UART_MIDI_Periodic_mS+0x40>
      ++midi_rec[uart_port].timeout_ctr;
 8011cfe:	4a04      	ldr	r2, [pc, #16]	; (8011d10 <MIOS32_UART_MIDI_Periodic_mS+0x4c>)
 8011d00:	1c59      	adds	r1, r3, #1
 8011d02:	8291      	strh	r1, [r2, #20]
  }
  MIOS32_IRQ_Enable();
 8011d04:	f000 fab8 	bl	8012278 <MIOS32_IRQ_Enable>
  // (atomic operation not required in MIOS32_UART_MIDI_PackageSend_NonBlocking() due to single-byte accesses)
#endif

  return 0; // no error
}
 8011d08:	2000      	movs	r0, #0
 8011d0a:	bd08      	pop	{r3, pc}
 8011d0c:	200001b6 	.word	0x200001b6
 8011d10:	2000019c 	.word	0x2000019c

08011d14 <MIOS32_UART_MIDI_PackageSend_NonBlocking>:
//! \return -2: UART_MIDI buffer is full
//!             caller should retry until buffer is free again
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_MIDI_PackageSend_NonBlocking(u8 uart_port, mios32_midi_package_t package)
{
 8011d14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011d16:	2801      	cmp	r0, #1
 8011d18:	f3c1 2607 	ubfx	r6, r1, #8, #8
 8011d1c:	f001 030f 	and.w	r3, r1, #15
 8011d20:	f3c1 4207 	ubfx	r2, r1, #16, #8
 8011d24:	4605      	mov	r5, r0
 8011d26:	b2f7      	uxtb	r7, r6
 8011d28:	f3c1 6107 	ubfx	r1, r1, #24, #8
 8011d2c:	d902      	bls.n	8011d34 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0x20>
    // only realtime events won't touch it (according to MIDI spec)
    if( package.evnt0 < 0xf8 )
      rs_last[uart_port] = package.evnt0;


    switch( MIOS32_UART_TxBufferPutMore(uart_port, buffer, len) ) {
 8011d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8011d32:	e040      	b.n	8011db6 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0xa2>
#else
  // exit if UART port not available
  if( !MIOS32_UART_MIDI_CheckAvailable(uart_port) )
    return -1;

  u8 len = mios32_midi_pcktype_num_bytes[package.cin];
 8011d34:	4c20      	ldr	r4, [pc, #128]	; (8011db8 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0xa4>)
 8011d36:	5ce4      	ldrb	r4, [r4, r3]
  if( len ) {
 8011d38:	2c00      	cmp	r4, #0
 8011d3a:	d03b      	beq.n	8011db4 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0xa0>
    u8 buffer[3] = {package.evnt0, package.evnt1, package.evnt2};

    if( rs_expire_ctr[uart_port] > 1000 ) {
 8011d3c:	f8df e088 	ldr.w	lr, [pc, #136]	; 8011dc8 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0xb4>
  if( !MIOS32_UART_MIDI_CheckAvailable(uart_port) )
    return -1;

  u8 len = mios32_midi_pcktype_num_bytes[package.cin];
  if( len ) {
    u8 buffer[3] = {package.evnt0, package.evnt1, package.evnt2};
 8011d40:	f88d 6004 	strb.w	r6, [sp, #4]

    if( rs_expire_ctr[uart_port] > 1000 ) {
 8011d44:	f83e c015 	ldrh.w	ip, [lr, r5, lsl #1]
  if( !MIOS32_UART_MIDI_CheckAvailable(uart_port) )
    return -1;

  u8 len = mios32_midi_pcktype_num_bytes[package.cin];
  if( len ) {
    u8 buffer[3] = {package.evnt0, package.evnt1, package.evnt2};
 8011d48:	f88d 2005 	strb.w	r2, [sp, #5]

    if( rs_expire_ctr[uart_port] > 1000 ) {
 8011d4c:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
  if( !MIOS32_UART_MIDI_CheckAvailable(uart_port) )
    return -1;

  u8 len = mios32_midi_pcktype_num_bytes[package.cin];
  if( len ) {
    u8 buffer[3] = {package.evnt0, package.evnt1, package.evnt2};
 8011d50:	f88d 1006 	strb.w	r1, [sp, #6]

    if( rs_expire_ctr[uart_port] > 1000 ) {
 8011d54:	d902      	bls.n	8011d5c <MIOS32_UART_MIDI_PackageSend_NonBlocking+0x48>
      // the current RS is expired each second to ensure that a status byte will be sent
      // if the MIDI cable is (re)connected during runtime
      MIOS32_UART_MIDI_RS_Reset(uart_port);
 8011d56:	f7ff ff77 	bl	8011c48 <MIOS32_UART_MIDI_RS_Reset>
 8011d5a:	e01b      	b.n	8011d94 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0x80>
#if 0
      // for optional monitoring of the optimisation
      MIOS32_MIDI_SendDebugMessage("[MIOS32_UART_MIDI:%d] RS 0x%02x expired!\n", uart_port);
#endif
    } else {
      if( (rs_optimisation & (1 << uart_port)) &&
 8011d5c:	4817      	ldr	r0, [pc, #92]	; (8011dbc <MIOS32_UART_MIDI_PackageSend_NonBlocking+0xa8>)
 8011d5e:	7800      	ldrb	r0, [r0, #0]
 8011d60:	fa40 f005 	asr.w	r0, r0, r5
 8011d64:	07c0      	lsls	r0, r0, #31
 8011d66:	d515      	bpl.n	8011d94 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0x80>
 8011d68:	2b07      	cmp	r3, #7
 8011d6a:	dd13      	ble.n	8011d94 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0x80>
	  package.cin >= NoteOff && package.cin <= PitchBend &&
 8011d6c:	2b0f      	cmp	r3, #15
 8011d6e:	d011      	beq.n	8011d94 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0x80>
 8011d70:	2c01      	cmp	r4, #1
 8011d72:	d90e      	bls.n	8011d92 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0x7e>
	  len > 1 ) { // (len check is a failsafe measure)
	if( package.evnt0 == rs_last[uart_port] ) {
 8011d74:	4b12      	ldr	r3, [pc, #72]	; (8011dc0 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0xac>)
 8011d76:	5d5b      	ldrb	r3, [r3, r5]
 8011d78:	42bb      	cmp	r3, r7
 8011d7a:	d106      	bne.n	8011d8a <MIOS32_UART_MIDI_PackageSend_NonBlocking+0x76>
	  buffer[0] = package.evnt1;
 8011d7c:	f88d 2004 	strb.w	r2, [sp, #4]
	  buffer[1] = package.evnt2;
	  --len;
 8011d80:	1e62      	subs	r2, r4, #1
      if( (rs_optimisation & (1 << uart_port)) &&
	  package.cin >= NoteOff && package.cin <= PitchBend &&
	  len > 1 ) { // (len check is a failsafe measure)
	if( package.evnt0 == rs_last[uart_port] ) {
	  buffer[0] = package.evnt1;
	  buffer[1] = package.evnt2;
 8011d82:	f88d 1005 	strb.w	r1, [sp, #5]
	  --len;
 8011d86:	b2d4      	uxtb	r4, r2
 8011d88:	e004      	b.n	8011d94 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0x80>
	  // for optional monitoring of the optimisation
	  MIOS32_MIDI_SendDebugMessage("[MIOS32_UART_MIDI:%d] RS optimized (%02x) %02x %02x\n", uart_port, package.evnt0, package.evnt1, package.evnt2);
#endif
	} else {
	  // new running status
	  rs_expire_ctr[uart_port] = 0;
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	f82e 3015 	strh.w	r3, [lr, r5, lsl #1]
 8011d90:	e000      	b.n	8011d94 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0x80>
      // for optional monitoring of the optimisation
      MIOS32_MIDI_SendDebugMessage("[MIOS32_UART_MIDI:%d] RS 0x%02x expired!\n", uart_port);
#endif
    } else {
      if( (rs_optimisation & (1 << uart_port)) &&
	  package.cin >= NoteOff && package.cin <= PitchBend &&
 8011d92:	2401      	movs	r4, #1
      }
    }

    // note: packages != Note Off, On, ... Pitch Bend will disable running status - thats acceptable
    // only realtime events won't touch it (according to MIDI spec)
    if( package.evnt0 < 0xf8 )
 8011d94:	2ff7      	cmp	r7, #247	; 0xf7
      rs_last[uart_port] = package.evnt0;
 8011d96:	bf98      	it	ls
 8011d98:	4b09      	ldrls	r3, [pc, #36]	; (8011dc0 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0xac>)


    switch( MIOS32_UART_TxBufferPutMore(uart_port, buffer, len) ) {
 8011d9a:	a901      	add	r1, sp, #4
 8011d9c:	4628      	mov	r0, r5
 8011d9e:	4622      	mov	r2, r4
    }

    // note: packages != Note Off, On, ... Pitch Bend will disable running status - thats acceptable
    // only realtime events won't touch it (according to MIDI spec)
    if( package.evnt0 < 0xf8 )
      rs_last[uart_port] = package.evnt0;
 8011da0:	bf98      	it	ls
 8011da2:	555e      	strbls	r6, [r3, r5]


    switch( MIOS32_UART_TxBufferPutMore(uart_port, buffer, len) ) {
 8011da4:	f001 fb62 	bl	801346c <MIOS32_UART_TxBufferPutMore>
 8011da8:	1c81      	adds	r1, r0, #2
 8011daa:	2902      	cmp	r1, #2
 8011dac:	d8bf      	bhi.n	8011d2e <MIOS32_UART_MIDI_PackageSend_NonBlocking+0x1a>
  }

  // return 0 if new package in buffer, otherwise -1
  return package_complete ? 0 : -1;
#endif
}
 8011dae:	4805      	ldr	r0, [pc, #20]	; (8011dc4 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0xb0>)
 8011db0:	5640      	ldrsb	r0, [r0, r1]
 8011db2:	e000      	b.n	8011db6 <MIOS32_UART_MIDI_PackageSend_NonBlocking+0xa2>
      case -2: return -2; // buffer full, request retry
      default: return -1; // UART error
    }

  } else {
    return 0; // no bytes to send -> no error
 8011db4:	4620      	mov	r0, r4
  }
#endif
}
 8011db6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011db8:	08017edc 	.word	0x08017edc
 8011dbc:	200001b4 	.word	0x200001b4
 8011dc0:	20000198 	.word	0x20000198
 8011dc4:	0801802a 	.word	0x0801802a
 8011dc8:	200001b6 	.word	0x200001b6

08011dcc <MIOS32_UART_MIDI_PackageSend>:
//! \return 0: no error
//! \return -1: UART_MIDI device not available
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_MIDI_PackageSend(u8 uart_port, mios32_midi_package_t package)
{
 8011dcc:	b538      	push	{r3, r4, r5, lr}
 8011dce:	4605      	mov	r5, r0
 8011dd0:	460c      	mov	r4, r1
  s32 error;

  while( (error=MIOS32_UART_MIDI_PackageSend_NonBlocking(uart_port, package)) == -2);
 8011dd2:	4628      	mov	r0, r5
 8011dd4:	4621      	mov	r1, r4
 8011dd6:	f7ff ff9d 	bl	8011d14 <MIOS32_UART_MIDI_PackageSend_NonBlocking>
 8011dda:	1c83      	adds	r3, r0, #2
 8011ddc:	d0f9      	beq.n	8011dd2 <MIOS32_UART_MIDI_PackageSend+0x6>

  return error;
}
 8011dde:	bd38      	pop	{r3, r4, r5, pc}

08011de0 <MIOS32_UART_MIDI_PackageReceive>:
//! \return -1: no package in buffer
//! \return -10: incoming MIDI package timed out (incomplete package received)
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_MIDI_PackageReceive(u8 uart_port, mios32_midi_package_t *package)
{
 8011de0:	2801      	cmp	r0, #1
 8011de2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011de6:	4680      	mov	r8, r0
 8011de8:	460f      	mov	r7, r1
 8011dea:	d903      	bls.n	8011df4 <MIOS32_UART_MIDI_PackageReceive+0x14>
#if MIOS32_UART_NUM == 0
  return -1; // all UARTs explicitely disabled - accordingly no package in buffer
#else
  // exit if UART port not available
  if( !MIOS32_UART_MIDI_CheckAvailable(uart_port) )
    return -1;
 8011dec:	f04f 30ff 	mov.w	r0, #4294967295
 8011df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  // parses the next incoming byte(s), stop until we got a complete MIDI event
  // (-> complete package) and forward it to the caller
  midi_rec_t *midix = &midi_rec[uart_port];// simplify addressing of midi record
 8011df4:	4d63      	ldr	r5, [pc, #396]	; (8011f84 <MIOS32_UART_MIDI_PackageReceive+0x1a4>)
 8011df6:	260c      	movs	r6, #12
 8011df8:	fb06 f600 	mul.w	r6, r6, r0
 8011dfc:	19ac      	adds	r4, r5, r6
  u8 package_complete = 0;
  s32 status;
  while( !package_complete && (status=MIOS32_UART_RxBufferGet(uart_port)) >= 0 ) {
 8011dfe:	4640      	mov	r0, r8
 8011e00:	f001 fa66 	bl	80132d0 <MIOS32_UART_RxBufferGet>
 8011e04:	2800      	cmp	r0, #0
 8011e06:	f2c0 80a1 	blt.w	8011f4c <MIOS32_UART_MIDI_PackageReceive+0x16c>
    u8 byte = (u8)status;

    if( byte & 0x80 ) { // new MIDI status
 8011e0a:	0602      	lsls	r2, r0, #24
  // (-> complete package) and forward it to the caller
  midi_rec_t *midix = &midi_rec[uart_port];// simplify addressing of midi record
  u8 package_complete = 0;
  s32 status;
  while( !package_complete && (status=MIOS32_UART_RxBufferGet(uart_port)) >= 0 ) {
    u8 byte = (u8)status;
 8011e0c:	b2c3      	uxtb	r3, r0

    if( byte & 0x80 ) { // new MIDI status
 8011e0e:	d552      	bpl.n	8011eb6 <MIOS32_UART_MIDI_PackageReceive+0xd6>
      if( byte >= 0xf8 ) { // events >= 0xf8 don't change the running status and can just be forwarded
 8011e10:	2bf7      	cmp	r3, #247	; 0xf7
 8011e12:	d908      	bls.n	8011e26 <MIOS32_UART_MIDI_PackageReceive+0x46>
	// Realtime messages don't change the running status and can be sent immediately
	// They also don't touch the timeout counter!
	package->cin = 0xf; // F: single byte
 8011e14:	6839      	ldr	r1, [r7, #0]
 8011e16:	f041 020f 	orr.w	r2, r1, #15
 8011e1a:	603a      	str	r2, [r7, #0]
	package->evnt0 = byte;
 8011e1c:	707b      	strb	r3, [r7, #1]
	package->evnt1 = 0x00;
 8011e1e:	2300      	movs	r3, #0
 8011e20:	70bb      	strb	r3, [r7, #2]
	package->evnt2 = 0x00;
 8011e22:	70fb      	strb	r3, [r7, #3]
 8011e24:	e0ab      	b.n	8011f7e <MIOS32_UART_MIDI_PackageReceive+0x19e>
	package_complete = 1;
      } else {
	midix->running_status = byte;
	midix->expected_bytes = mios32_midi_expected_bytes_common[(byte >> 4) & 0x7];
 8011e26:	f3c3 1202 	ubfx	r2, r3, #4, #3
 8011e2a:	4957      	ldr	r1, [pc, #348]	; (8011f88 <MIOS32_UART_MIDI_PackageReceive+0x1a8>)
	package->evnt0 = byte;
	package->evnt1 = 0x00;
	package->evnt2 = 0x00;
	package_complete = 1;
      } else {
	midix->running_status = byte;
 8011e2c:	7123      	strb	r3, [r4, #4]
	midix->expected_bytes = mios32_midi_expected_bytes_common[(byte >> 4) & 0x7];
 8011e2e:	5c89      	ldrb	r1, [r1, r2]
 8011e30:	7161      	strb	r1, [r4, #5]

	if( !midix->expected_bytes ) { // System Message, take number of bytes from expected_bytes_system[] array
 8011e32:	b109      	cbz	r1, 8011e38 <MIOS32_UART_MIDI_PackageReceive+0x58>
//! \return -1: no package in buffer
//! \return -10: incoming MIDI package timed out (incomplete package received)
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_MIDI_PackageReceive(u8 uart_port, mios32_midi_package_t *package)
{
 8011e34:	2100      	movs	r1, #0
 8011e36:	e037      	b.n	8011ea8 <MIOS32_UART_MIDI_PackageReceive+0xc8>
      } else {
	midix->running_status = byte;
	midix->expected_bytes = mios32_midi_expected_bytes_common[(byte >> 4) & 0x7];

	if( !midix->expected_bytes ) { // System Message, take number of bytes from expected_bytes_system[] array
	  midix->expected_bytes = mios32_midi_expected_bytes_system[byte & 0xf];
 8011e38:	f000 000f 	and.w	r0, r0, #15
 8011e3c:	4a53      	ldr	r2, [pc, #332]	; (8011f8c <MIOS32_UART_MIDI_PackageReceive+0x1ac>)
 8011e3e:	5c12      	ldrb	r2, [r2, r0]

	  if( byte == 0xf0 ) {
 8011e40:	2bf0      	cmp	r3, #240	; 0xf0
      } else {
	midix->running_status = byte;
	midix->expected_bytes = mios32_midi_expected_bytes_common[(byte >> 4) & 0x7];

	if( !midix->expected_bytes ) { // System Message, take number of bytes from expected_bytes_system[] array
	  midix->expected_bytes = mios32_midi_expected_bytes_system[byte & 0xf];
 8011e42:	7162      	strb	r2, [r4, #5]

	  if( byte == 0xf0 ) {
 8011e44:	d103      	bne.n	8011e4e <MIOS32_UART_MIDI_PackageReceive+0x6e>
	    midix->package.evnt0 = 0xf0; // midix->package.evnt0 only used by SysEx handler for continuous data streams!
	    midix->sysex_ctr = 0x01;
 8011e46:	2201      	movs	r2, #1

	if( !midix->expected_bytes ) { // System Message, take number of bytes from expected_bytes_system[] array
	  midix->expected_bytes = mios32_midi_expected_bytes_system[byte & 0xf];

	  if( byte == 0xf0 ) {
	    midix->package.evnt0 = 0xf0; // midix->package.evnt0 only used by SysEx handler for continuous data streams!
 8011e48:	7063      	strb	r3, [r4, #1]
	    midix->sysex_ctr = 0x01;
 8011e4a:	71e2      	strb	r2, [r4, #7]
 8011e4c:	e7f2      	b.n	8011e34 <MIOS32_UART_MIDI_PackageReceive+0x54>
	  } else if( byte == 0xf7 ) {
 8011e4e:	2bf7      	cmp	r3, #247	; 0xf7
 8011e50:	d11d      	bne.n	8011e8e <MIOS32_UART_MIDI_PackageReceive+0xae>
	    switch( midix->sysex_ctr ) {
 8011e52:	79e2      	ldrb	r2, [r4, #7]
 8011e54:	7820      	ldrb	r0, [r4, #0]
 8011e56:	b142      	cbz	r2, 8011e6a <MIOS32_UART_MIDI_PackageReceive+0x8a>
 8011e58:	2a01      	cmp	r2, #1
 8011e5a:	d10e      	bne.n	8011e7a <MIOS32_UART_MIDI_PackageReceive+0x9a>
		midix->package.evnt0 = 0xf7;
		midix->package.evnt1 = 0x00;
		midix->package.evnt2 = 0x00;
		break;
	      case 1:
		midix->package.cin = 6; // 6: SysEx ends with two bytes
 8011e5c:	2206      	movs	r2, #6
 8011e5e:	f362 0003 	bfi	r0, r2, #0, #4
 8011e62:	7020      	strb	r0, [r4, #0]
		// midix->package.evnt0 = // already stored
		midix->package.evnt1 = 0xf7;
 8011e64:	70a3      	strb	r3, [r4, #2]
		midix->package.evnt2 = 0x00;
 8011e66:	70e1      	strb	r1, [r4, #3]
		break;
 8011e68:	e00c      	b.n	8011e84 <MIOS32_UART_MIDI_PackageReceive+0xa4>
	    midix->package.evnt0 = 0xf0; // midix->package.evnt0 only used by SysEx handler for continuous data streams!
	    midix->sysex_ctr = 0x01;
	  } else if( byte == 0xf7 ) {
	    switch( midix->sysex_ctr ) {
 	      case 0:
		midix->package.cin = 5; // 5: SysEx ends with single byte
 8011e6a:	2105      	movs	r1, #5
 8011e6c:	f361 0003 	bfi	r0, r1, #0, #4
 8011e70:	7020      	strb	r0, [r4, #0]
		midix->package.evnt0 = 0xf7;
 8011e72:	7063      	strb	r3, [r4, #1]
		midix->package.evnt1 = 0x00;
 8011e74:	70a2      	strb	r2, [r4, #2]
		midix->package.evnt2 = 0x00;
 8011e76:	70e2      	strb	r2, [r4, #3]
		break;
 8011e78:	e004      	b.n	8011e84 <MIOS32_UART_MIDI_PackageReceive+0xa4>
		// midix->package.evnt0 = // already stored
		midix->package.evnt1 = 0xf7;
		midix->package.evnt2 = 0x00;
		break;
	      default:
		midix->package.cin = 7; // 7: SysEx ends with three bytes
 8011e7a:	2107      	movs	r1, #7
 8011e7c:	f361 0003 	bfi	r0, r1, #0, #4
 8011e80:	7020      	strb	r0, [r4, #0]
		// midix->package.evnt0 = // already stored
		// midix->package.evnt1 = // already stored
		midix->package.evnt2 = 0xf7;
 8011e82:	70e3      	strb	r3, [r4, #3]
		break;
	    }
	    *package = midix->package;
 8011e84:	6823      	ldr	r3, [r4, #0]
	    package_complete = 1; // -> forward to caller
	    midix->sysex_ctr = 0x00; // ensure that next F7 will just send F7
 8011e86:	2000      	movs	r0, #0
		// midix->package.evnt0 = // already stored
		// midix->package.evnt1 = // already stored
		midix->package.evnt2 = 0xf7;
		break;
	    }
	    *package = midix->package;
 8011e88:	603b      	str	r3, [r7, #0]
	    package_complete = 1; // -> forward to caller
	    midix->sysex_ctr = 0x00; // ensure that next F7 will just send F7
 8011e8a:	71e0      	strb	r0, [r4, #7]
 8011e8c:	e00b      	b.n	8011ea6 <MIOS32_UART_MIDI_PackageReceive+0xc6>
	  } else if( !midix->expected_bytes ) {
 8011e8e:	2a00      	cmp	r2, #0
 8011e90:	d1d0      	bne.n	8011e34 <MIOS32_UART_MIDI_PackageReceive+0x54>
	    // e.g. tune request (with no additional byte)
	    midix->package.cin = 5; // 5: SysEx ends with single byte
 8011e92:	7821      	ldrb	r1, [r4, #0]
	    midix->package.evnt0 = byte;
 8011e94:	7063      	strb	r3, [r4, #1]
	    *package = midix->package;
	    package_complete = 1; // -> forward to caller
	    midix->sysex_ctr = 0x00; // ensure that next F7 will just send F7
	  } else if( !midix->expected_bytes ) {
	    // e.g. tune request (with no additional byte)
	    midix->package.cin = 5; // 5: SysEx ends with single byte
 8011e96:	2005      	movs	r0, #5
 8011e98:	f360 0103 	bfi	r1, r0, #0, #4
 8011e9c:	7021      	strb	r1, [r4, #0]
	    midix->package.evnt0 = byte;
	    midix->package.evnt1 = 0x00;
 8011e9e:	70a2      	strb	r2, [r4, #2]
	    midix->package.evnt2 = 0x00;
 8011ea0:	70e2      	strb	r2, [r4, #3]
	    *package = midix->package;
 8011ea2:	6823      	ldr	r3, [r4, #0]
 8011ea4:	603b      	str	r3, [r7, #0]
	    package_complete = 1; // -> forward to caller
 8011ea6:	2101      	movs	r1, #1
	  }
	}

	midix->wait_bytes = midix->expected_bytes;
 8011ea8:	7963      	ldrb	r3, [r4, #5]
	midix->timeout_ctr = 0; // reset timeout counter
 8011eaa:	2000      	movs	r0, #0
	    *package = midix->package;
	    package_complete = 1; // -> forward to caller
	  }
	}

	midix->wait_bytes = midix->expected_bytes;
 8011eac:	71a3      	strb	r3, [r4, #6]
	midix->timeout_ctr = 0; // reset timeout counter
 8011eae:	8120      	strh	r0, [r4, #8]
  // parses the next incoming byte(s), stop until we got a complete MIDI event
  // (-> complete package) and forward it to the caller
  midi_rec_t *midix = &midi_rec[uart_port];// simplify addressing of midi record
  u8 package_complete = 0;
  s32 status;
  while( !package_complete && (status=MIOS32_UART_RxBufferGet(uart_port)) >= 0 ) {
 8011eb0:	2900      	cmp	r1, #0
 8011eb2:	d0a4      	beq.n	8011dfe <MIOS32_UART_MIDI_PackageReceive+0x1e>
 8011eb4:	e063      	b.n	8011f7e <MIOS32_UART_MIDI_PackageReceive+0x19e>

	midix->wait_bytes = midix->expected_bytes;
	midix->timeout_ctr = 0; // reset timeout counter
      }
    } else {
      if( midix->running_status == 0xf0 ) {
 8011eb6:	7922      	ldrb	r2, [r4, #4]
 8011eb8:	2af0      	cmp	r2, #240	; 0xf0
 8011eba:	d117      	bne.n	8011eec <MIOS32_UART_MIDI_PackageReceive+0x10c>
	switch( ++midix->sysex_ctr ) {
 8011ebc:	79e2      	ldrb	r2, [r4, #7]
 8011ebe:	1c51      	adds	r1, r2, #1
 8011ec0:	b2c8      	uxtb	r0, r1
 8011ec2:	2801      	cmp	r0, #1
 8011ec4:	71e0      	strb	r0, [r4, #7]
 8011ec6:	d003      	beq.n	8011ed0 <MIOS32_UART_MIDI_PackageReceive+0xf0>
 8011ec8:	2802      	cmp	r0, #2
 8011eca:	d103      	bne.n	8011ed4 <MIOS32_UART_MIDI_PackageReceive+0xf4>
  	  case 1:
	    midix->package.evnt0 = byte; 
	    break;
	  case 2: 
	    midix->package.evnt1 = byte; 
 8011ecc:	70a3      	strb	r3, [r4, #2]
	    break;
 8011ece:	e796      	b.n	8011dfe <MIOS32_UART_MIDI_PackageReceive+0x1e>
      }
    } else {
      if( midix->running_status == 0xf0 ) {
	switch( ++midix->sysex_ctr ) {
  	  case 1:
	    midix->package.evnt0 = byte; 
 8011ed0:	7063      	strb	r3, [r4, #1]
	    break;
 8011ed2:	e794      	b.n	8011dfe <MIOS32_UART_MIDI_PackageReceive+0x1e>
	  case 2: 
	    midix->package.evnt1 = byte; 
	    break;
	  default: // 3
	    midix->package.evnt2 = byte;
 8011ed4:	70e3      	strb	r3, [r4, #3]

	    // Send three-byte event
	    midix->package.cin = 4;  // 4: SysEx starts or continues
 8011ed6:	5dab      	ldrb	r3, [r5, r6]
 8011ed8:	2204      	movs	r2, #4
 8011eda:	f362 0303 	bfi	r3, r2, #0, #4
 8011ede:	55ab      	strb	r3, [r5, r6]
	    *package = midix->package;
 8011ee0:	59a9      	ldr	r1, [r5, r6]
	    package_complete = 1; // -> forward to caller
	    midix->sysex_ctr = 0x00; // reset and prepare for next packet
 8011ee2:	2000      	movs	r0, #0
	  default: // 3
	    midix->package.evnt2 = byte;

	    // Send three-byte event
	    midix->package.cin = 4;  // 4: SysEx starts or continues
	    *package = midix->package;
 8011ee4:	6039      	str	r1, [r7, #0]
	    package_complete = 1; // -> forward to caller
	    midix->sysex_ctr = 0x00; // reset and prepare for next packet
 8011ee6:	71e0      	strb	r0, [r4, #7]
	    midix->timeout_ctr = 0; // reset timeout counter
 8011ee8:	8120      	strh	r0, [r4, #8]
 8011eea:	e048      	b.n	8011f7e <MIOS32_UART_MIDI_PackageReceive+0x19e>
	}
      } else { // Common MIDI message or 0xf1 >= status >= 0xf7
	if( !midix->wait_bytes ) {
 8011eec:	79a0      	ldrb	r0, [r4, #6]
 8011eee:	b920      	cbnz	r0, 8011efa <MIOS32_UART_MIDI_PackageReceive+0x11a>
	  // received new MIDI event with running status
	  midix->wait_bytes = midix->expected_bytes - 1;
 8011ef0:	7962      	ldrb	r2, [r4, #5]
	  midix->timeout_ctr = 0; // reset timeout counter
 8011ef2:	8120      	strh	r0, [r4, #8]
	    midix->timeout_ctr = 0; // reset timeout counter
	}
      } else { // Common MIDI message or 0xf1 >= status >= 0xf7
	if( !midix->wait_bytes ) {
	  // received new MIDI event with running status
	  midix->wait_bytes = midix->expected_bytes - 1;
 8011ef4:	1e51      	subs	r1, r2, #1
 8011ef6:	71a1      	strb	r1, [r4, #6]
 8011ef8:	e001      	b.n	8011efe <MIOS32_UART_MIDI_PackageReceive+0x11e>
	  midix->timeout_ctr = 0; // reset timeout counter
	} else {
	  --midix->wait_bytes;
 8011efa:	1e41      	subs	r1, r0, #1
 8011efc:	71a1      	strb	r1, [r4, #6]
	}

	if( midix->expected_bytes == 1 ) {
 8011efe:	7960      	ldrb	r0, [r4, #5]
 8011f00:	2801      	cmp	r0, #1
 8011f02:	d102      	bne.n	8011f0a <MIOS32_UART_MIDI_PackageReceive+0x12a>
	  midix->package.evnt1 = byte;
 8011f04:	70a3      	strb	r3, [r4, #2]
	  midix->package.evnt2 = 0x00;
 8011f06:	2300      	movs	r3, #0
 8011f08:	e003      	b.n	8011f12 <MIOS32_UART_MIDI_PackageReceive+0x132>
	} else {
	  if( midix->wait_bytes )
 8011f0a:	79a2      	ldrb	r2, [r4, #6]
 8011f0c:	b10a      	cbz	r2, 8011f12 <MIOS32_UART_MIDI_PackageReceive+0x132>
	    midix->package.evnt1 = byte;
 8011f0e:	70a3      	strb	r3, [r4, #2]
 8011f10:	e000      	b.n	8011f14 <MIOS32_UART_MIDI_PackageReceive+0x134>
	  else
	    midix->package.evnt2 = byte;
 8011f12:	70e3      	strb	r3, [r4, #3]
	}
	
	if( !midix->wait_bytes ) {
 8011f14:	79a3      	ldrb	r3, [r4, #6]
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	f47f af71 	bne.w	8011dfe <MIOS32_UART_MIDI_PackageReceive+0x1e>
	  if( (midix->running_status & 0xf0) != 0xf0 ) {
 8011f1c:	7920      	ldrb	r0, [r4, #4]
 8011f1e:	5daa      	ldrb	r2, [r5, r6]
 8011f20:	f000 01f0 	and.w	r1, r0, #240	; 0xf0
 8011f24:	29f0      	cmp	r1, #240	; 0xf0
 8011f26:	d001      	beq.n	8011f2c <MIOS32_UART_MIDI_PackageReceive+0x14c>
	    midix->package.cin = midix->running_status >> 4; // common MIDI message
 8011f28:	0901      	lsrs	r1, r0, #4
 8011f2a:	e008      	b.n	8011f3e <MIOS32_UART_MIDI_PackageReceive+0x15e>
	  } else {
	    switch( midix->expected_bytes ) { // MEMO: == 0 comparison was a bug in original MBHP_USB code
 8011f2c:	7963      	ldrb	r3, [r4, #5]
 8011f2e:	b11b      	cbz	r3, 8011f38 <MIOS32_UART_MIDI_PackageReceive+0x158>
 8011f30:	2b01      	cmp	r3, #1
 8011f32:	d103      	bne.n	8011f3c <MIOS32_UART_MIDI_PackageReceive+0x15c>
  	      case 0: 
		midix->package.cin = 5; // 5: SysEx common with one byte
		break;
  	      case 1: 
		midix->package.cin = 2; // 2: SysEx common with two bytes
 8011f34:	2102      	movs	r1, #2
 8011f36:	e002      	b.n	8011f3e <MIOS32_UART_MIDI_PackageReceive+0x15e>
	  if( (midix->running_status & 0xf0) != 0xf0 ) {
	    midix->package.cin = midix->running_status >> 4; // common MIDI message
	  } else {
	    switch( midix->expected_bytes ) { // MEMO: == 0 comparison was a bug in original MBHP_USB code
  	      case 0: 
		midix->package.cin = 5; // 5: SysEx common with one byte
 8011f38:	2105      	movs	r1, #5
 8011f3a:	e000      	b.n	8011f3e <MIOS32_UART_MIDI_PackageReceive+0x15e>
		break;
  	      case 1: 
		midix->package.cin = 2; // 2: SysEx common with two bytes
		break;
  	      default: 
		midix->package.cin = 3; // 3: SysEx common with three bytes
 8011f3c:	2103      	movs	r1, #3
 8011f3e:	f361 0203 	bfi	r2, r1, #0, #4
 8011f42:	55aa      	strb	r2, [r5, r6]
		break;
	    }
	  }

	  midix->package.evnt0 = midix->running_status;
 8011f44:	7060      	strb	r0, [r4, #1]
	  // midix->package.evnt1 = // already stored
	  // midix->package.evnt2 = // already stored
	  *package = midix->package;
 8011f46:	59a8      	ldr	r0, [r5, r6]
 8011f48:	6038      	str	r0, [r7, #0]
 8011f4a:	e018      	b.n	8011f7e <MIOS32_UART_MIDI_PackageReceive+0x19e>
  // parses the next incoming byte(s), stop until we got a complete MIDI event
  // (-> complete package) and forward it to the caller
  midi_rec_t *midix = &midi_rec[uart_port];// simplify addressing of midi record
  u8 package_complete = 0;
  s32 status;
  while( !package_complete && (status=MIOS32_UART_RxBufferGet(uart_port)) >= 0 ) {
 8011f4c:	2000      	movs	r0, #0
      }
    }
  }

  // incoming MIDI package timed out (incomplete package received)
  if( midix->wait_bytes && midix->timeout_ctr > 1000 ) { // 1000 mS = 1 second
 8011f4e:	79a1      	ldrb	r1, [r4, #6]
 8011f50:	b171      	cbz	r1, 8011f70 <MIOS32_UART_MIDI_PackageReceive+0x190>
 8011f52:	8922      	ldrh	r2, [r4, #8]
 8011f54:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8011f58:	d90a      	bls.n	8011f70 <MIOS32_UART_MIDI_PackageReceive+0x190>
static s32 MIOS32_UART_MIDI_RecordReset(u8 uart_port)
{
#if MIOS32_UART_NUM > 0
  midi_rec_t *midix = &midi_rec[uart_port];// simplify addressing of midi record

  midix->package.ALL = 0;
 8011f5a:	2300      	movs	r3, #0
 8011f5c:	51ab      	str	r3, [r5, r6]
  midix->running_status = 0x00;
 8011f5e:	7123      	strb	r3, [r4, #4]
  midix->expected_bytes = 0x00;
 8011f60:	7163      	strb	r3, [r4, #5]
  midix->wait_bytes = 0x00;
 8011f62:	71a3      	strb	r3, [r4, #6]
  midix->sysex_ctr = 0x00;
 8011f64:	71e3      	strb	r3, [r4, #7]
  midix->timeout_ctr = 0;
 8011f66:	8123      	strh	r3, [r4, #8]
  // incoming MIDI package timed out (incomplete package received)
  if( midix->wait_bytes && midix->timeout_ctr > 1000 ) { // 1000 mS = 1 second
    // stop waiting
    MIOS32_UART_MIDI_RecordReset(uart_port);
    // notify that incomplete package has been received
    return -10;
 8011f68:	f06f 0009 	mvn.w	r0, #9
 8011f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }

  // return 0 if new package in buffer, otherwise -1
  return package_complete ? 0 : -1;
 8011f70:	2800      	cmp	r0, #0
 8011f72:	bf0c      	ite	eq
 8011f74:	f04f 30ff 	moveq.w	r0, #4294967295
 8011f78:	2000      	movne	r0, #0
 8011f7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  // parses the next incoming byte(s), stop until we got a complete MIDI event
  // (-> complete package) and forward it to the caller
  midi_rec_t *midix = &midi_rec[uart_port];// simplify addressing of midi record
  u8 package_complete = 0;
  s32 status;
  while( !package_complete && (status=MIOS32_UART_RxBufferGet(uart_port)) >= 0 ) {
 8011f7e:	2001      	movs	r0, #1
 8011f80:	e7e5      	b.n	8011f4e <MIOS32_UART_MIDI_PackageReceive+0x16e>
 8011f82:	bf00      	nop
 8011f84:	2000019c 	.word	0x2000019c
 8011f88:	0801801d 	.word	0x0801801d
 8011f8c:	08017ecc 	.word	0x08017ecc

08011f90 <MIOS32_SPI_MIDI_Periodic_mS>:
  MIOS32_SPI_MIDI_MUTEX_GIVE;
#endif

  return 0; // no error
#endif
}
 8011f90:	2000      	movs	r0, #0
 8011f92:	4770      	bx	lr

08011f94 <MIOS32_IIC_MIDI_Init>:
  // TODO: send optimisation flag to IIC_MIDI device once it has been scanned!
#endif

  return 0; // no error
#endif
}
 8011f94:	f04f 30ff 	mov.w	r0, #4294967295
 8011f98:	4770      	bx	lr

08011f9a <MIOS32_IIC_MIDI_Periodic_mS>:
s32 MIOS32_IIC_MIDI_Periodic_mS(void)
{
  // currently only a dummy - RS optimisation handled by IIC_MIDI device

  return 0;
}
 8011f9a:	2000      	movs	r0, #0
 8011f9c:	4770      	bx	lr

08011f9e <MIOS32_IIC_MIDI_PackageSend>:
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_IIC_MIDI_PackageSend(u8 iic_port, mios32_midi_package_t package)
{
  return _MIOS32_IIC_MIDI_PackageSend(iic_port, package, 0); // blocking mode
}
 8011f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8011fa2:	4770      	bx	lr

08011fa4 <MIOS32_TIMESTAMP_Init>:
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_TIMESTAMP_Init(u32 mode)
{
  // currently only mode 0 supported
  if( mode != 0 )
 8011fa4:	b910      	cbnz	r0, 8011fac <MIOS32_TIMESTAMP_Init+0x8>
    return -1; // unsupported mode

  timestamp = 0;
 8011fa6:	4b03      	ldr	r3, [pc, #12]	; (8011fb4 <MIOS32_TIMESTAMP_Init+0x10>)
 8011fa8:	6018      	str	r0, [r3, #0]

  return 0;
 8011faa:	4770      	bx	lr
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_TIMESTAMP_Init(u32 mode)
{
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode
 8011fac:	f04f 30ff 	mov.w	r0, #4294967295

  timestamp = 0;

  return 0;
}
 8011fb0:	4770      	bx	lr
 8011fb2:	bf00      	nop
 8011fb4:	200001bc 	.word	0x200001bc

08011fb8 <MIOS32_TIMESTAMP_Inc>:
//!
//! \return number of SRs
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_TIMESTAMP_Inc(void)
{
  ++timestamp;
 8011fb8:	4b02      	ldr	r3, [pc, #8]	; (8011fc4 <MIOS32_TIMESTAMP_Inc+0xc>)
 8011fba:	681a      	ldr	r2, [r3, #0]
 8011fbc:	1c50      	adds	r0, r2, #1
 8011fbe:	6018      	str	r0, [r3, #0]

  return 0; // no error
}
 8011fc0:	2000      	movs	r0, #0
 8011fc2:	4770      	bx	lr
 8011fc4:	200001bc 	.word	0x200001bc

08011fc8 <MIOS32_SYS_Reset>:
//!   <LI>reset STM32
//! </UL>
//! \return < 0 if reset failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SYS_Reset(void)
{
 8011fc8:	b510      	push	{r4, lr}
  // disable all RTOS tasks
#ifndef MIOS32_DONT_USE_FREERTOS
  portENTER_CRITICAL(); // port specific FreeRTOS function to disable tasks (nested)
 8011fca:	f7fe ff2b 	bl	8010e24 <vPortEnterCritical>
  MIOS32_LCD_CursorSet(0, 0);
  MIOS32_LCD_PrintString("Bootloader Mode "); // 16 chars
#endif

  // disable all interrupts
  MIOS32_IRQ_Disable();
 8011fce:	f000 f93f 	bl	8012250 <MIOS32_IRQ_Disable>

  // turn off all board LEDs
  MIOS32_BOARD_LED_Set(0xffffffff, 0x00000000);
 8011fd2:	f04f 30ff 	mov.w	r0, #4294967295
 8011fd6:	2100      	movs	r1, #0
 8011fd8:	f000 f9fc 	bl	80123d4 <MIOS32_BOARD_LED_Set>
 8011fdc:	2432      	movs	r4, #50	; 0x32

  // wait for 50 mS to ensure that all ongoing operations (e.g. DMA driver SPI transfers) are finished
  {
    int i;
    for(i=0; i<50; ++i)
      MIOS32_DELAY_Wait_uS(1000);
 8011fde:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8011fe2:	f000 fb5f 	bl	80126a4 <MIOS32_DELAY_Wait_uS>
  MIOS32_BOARD_LED_Set(0xffffffff, 0x00000000);

  // wait for 50 mS to ensure that all ongoing operations (e.g. DMA driver SPI transfers) are finished
  {
    int i;
    for(i=0; i<50; ++i)
 8011fe6:	3c01      	subs	r4, #1
 8011fe8:	d1f9      	bne.n	8011fde <MIOS32_SYS_Reset+0x16>
      MIOS32_DELAY_Wait_uS(1000);
  }

  // reset peripherals
  RCC_AHB1PeriphResetCmd(0xfffffffe, ENABLE); // don't reset GPIOA due to USB pins
 8011fea:	f06f 0001 	mvn.w	r0, #1
 8011fee:	2101      	movs	r1, #1
 8011ff0:	f001 fe34 	bl	8013c5c <RCC_AHB1PeriphResetCmd>
  RCC_AHB2PeriphResetCmd(0xffffff7f, ENABLE); // don't reset OTG_FS, so that the connectuion can survive
 8011ff4:	f06f 0080 	mvn.w	r0, #128	; 0x80
 8011ff8:	2101      	movs	r1, #1
 8011ffa:	f001 fe3b 	bl	8013c74 <RCC_AHB2PeriphResetCmd>
  RCC_APB1PeriphResetCmd(0xffffffff, ENABLE);
 8011ffe:	f04f 30ff 	mov.w	r0, #4294967295
 8012002:	2101      	movs	r1, #1
 8012004:	f001 fe42 	bl	8013c8c <RCC_APB1PeriphResetCmd>
  RCC_APB2PeriphResetCmd(0xffffffff, ENABLE);
 8012008:	f04f 30ff 	mov.w	r0, #4294967295
 801200c:	2101      	movs	r1, #1
 801200e:	f001 fe49 	bl	8013ca4 <RCC_APB2PeriphResetCmd>
  RCC_AHB1PeriphResetCmd(0xffffffff, DISABLE);
 8012012:	f04f 30ff 	mov.w	r0, #4294967295
 8012016:	4621      	mov	r1, r4
 8012018:	f001 fe20 	bl	8013c5c <RCC_AHB1PeriphResetCmd>
  RCC_AHB2PeriphResetCmd(0xffffffff, DISABLE);
 801201c:	f04f 30ff 	mov.w	r0, #4294967295
 8012020:	4621      	mov	r1, r4
 8012022:	f001 fe27 	bl	8013c74 <RCC_AHB2PeriphResetCmd>
  RCC_APB1PeriphResetCmd(0xffffffff, DISABLE);
 8012026:	f04f 30ff 	mov.w	r0, #4294967295
 801202a:	4621      	mov	r1, r4
 801202c:	f001 fe2e 	bl	8013c8c <RCC_APB1PeriphResetCmd>
  RCC_APB2PeriphResetCmd(0xffffffff, DISABLE);
 8012030:	f04f 30ff 	mov.w	r0, #4294967295
 8012034:	4621      	mov	r1, r4
 8012036:	f001 fe35 	bl	8013ca4 <RCC_APB2PeriphResetCmd>
  // not available in v3.0.0 library anymore? - copy from v2.0.1
  SCB->AIRCR = NVIC_AIRCR_VECTKEY | (1 << NVIC_VECTRESET);
#endif
#if 1
  // and this is the code for v3.3.0
  SCB->AIRCR = (0x5fa << SCB_AIRCR_VECTKEY_Pos) | (1 << SCB_AIRCR_VECTRESET_Pos);
 801203a:	4a02      	ldr	r2, [pc, #8]	; (8012044 <MIOS32_SYS_Reset+0x7c>)
 801203c:	4b02      	ldr	r3, [pc, #8]	; (8012048 <MIOS32_SYS_Reset+0x80>)
 801203e:	60da      	str	r2, [r3, #12]
 8012040:	e7fe      	b.n	8012040 <MIOS32_SYS_Reset+0x78>
 8012042:	bf00      	nop
 8012044:	05fa0001 	.word	0x05fa0001
 8012048:	e000ed00 	.word	0xe000ed00

0801204c <MIOS32_SYS_ChipIDGet>:
//! \return the chip ID
/////////////////////////////////////////////////////////////////////////////
u32 MIOS32_SYS_ChipIDGet(void)
{
  // stored in DBGMCU_IDCODE register
  return MEM32(0xe0042000);
 801204c:	4b01      	ldr	r3, [pc, #4]	; (8012054 <MIOS32_SYS_ChipIDGet+0x8>)
 801204e:	6818      	ldr	r0, [r3, #0]
}
 8012050:	4770      	bx	lr
 8012052:	bf00      	nop
 8012054:	e0042000 	.word	0xe0042000

08012058 <MIOS32_SYS_FlashSizeGet>:
//! \return the Flash size in bytes
/////////////////////////////////////////////////////////////////////////////
u32 MIOS32_SYS_FlashSizeGet(void)
{
  // stored in the so called "electronic signature"
  return (u32)MEM16(0x1fff7a22) * 0x400;
 8012058:	4b02      	ldr	r3, [pc, #8]	; (8012064 <MIOS32_SYS_FlashSizeGet+0xc>)
 801205a:	8818      	ldrh	r0, [r3, #0]
 801205c:	b281      	uxth	r1, r0
}
 801205e:	0288      	lsls	r0, r1, #10
 8012060:	4770      	bx	lr
 8012062:	bf00      	nop
 8012064:	1fff7a22 	.word	0x1fff7a22

08012068 <MIOS32_SYS_RAMSizeGet>:
#if defined(MIOS32_PROCESSOR_STM32F407VG)
  return 192*1024; // unfortunately not stored in signature...
#else
# error "Please define RAM size here"
#endif
}
 8012068:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 801206c:	4770      	bx	lr
	...

08012070 <MIOS32_SYS_SerialNumberGet>:
s32 MIOS32_SYS_SerialNumberGet(char *str)
{
  int i;

  // stored in the so called "electronic signature"
  for(i=0; i<24; ++i) {
 8012070:	2300      	movs	r3, #0
    u8 b = MEM8(0x1fff7a10 + (i/2));
 8012072:	4a0b      	ldr	r2, [pc, #44]	; (80120a0 <MIOS32_SYS_SerialNumberGet+0x30>)
 8012074:	1059      	asrs	r1, r3, #1
 8012076:	1889      	adds	r1, r1, r2
 8012078:	780a      	ldrb	r2, [r1, #0]
    if( !(i & 1) )
 801207a:	07d9      	lsls	r1, r3, #31
      b >>= 4;
 801207c:	bf58      	it	pl
 801207e:	0912      	lsrpl	r2, r2, #4
    b &= 0x0f;
 8012080:	f002 020f 	and.w	r2, r2, #15

    str[i] = ((b > 9) ? ('A'-10) : '0') + b;
 8012084:	2a09      	cmp	r2, #9
 8012086:	bf94      	ite	ls
 8012088:	2130      	movls	r1, #48	; 0x30
 801208a:	2137      	movhi	r1, #55	; 0x37
 801208c:	188a      	adds	r2, r1, r2
 801208e:	54c2      	strb	r2, [r0, r3]
s32 MIOS32_SYS_SerialNumberGet(char *str)
{
  int i;

  // stored in the so called "electronic signature"
  for(i=0; i<24; ++i) {
 8012090:	3301      	adds	r3, #1
 8012092:	2b18      	cmp	r3, #24
 8012094:	d1ed      	bne.n	8012072 <MIOS32_SYS_SerialNumberGet+0x2>
      b >>= 4;
    b &= 0x0f;

    str[i] = ((b > 9) ? ('A'-10) : '0') + b;
  }
  str[i] = 0;
 8012096:	2100      	movs	r1, #0
 8012098:	7601      	strb	r1, [r0, #24]

  return 0; // no error
}
 801209a:	4608      	mov	r0, r1
 801209c:	4770      	bx	lr
 801209e:	bf00      	nop
 80120a0:	1fff7a10 	.word	0x1fff7a10

080120a4 <MIOS32_SYS_TimeSet>:
//! Note that this format isn't completely compatible to the NTP timestamp format,
//! as the fraction has only mS accuracy
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SYS_TimeSet(mios32_sys_time_t t)
{
 80120a4:	b510      	push	{r4, lr}
 80120a6:	b086      	sub	sp, #24
 80120a8:	4604      	mov	r4, r0
 80120aa:	e88d 0003 	stmia.w	sp, {r0, r1}
  // taken from STM32 example "RTC/Calendar"
  // adapted to clock RTC via HSE  oscillator

  // Enable PWR and BKP clocks
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR, ENABLE);
 80120ae:	2101      	movs	r1, #1
 80120b0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80120b4:	f001 fdba 	bl	8013c2c <RCC_APB1PeriphClockCmd>

  // Allow access to BKP Domain
  PWR_BackupAccessCmd(ENABLE);
 80120b8:	2001      	movs	r0, #1
 80120ba:	f001 fd35 	bl	8013b28 <PWR_BackupAccessCmd>

  // Select HSE (divided by 16) as RTC Clock Source
#if EXT_CRYSTAL_FRQ != 8000000
# error "Please configure alternative clock divider here"
#endif
  RCC_RTCCLKConfig(RCC_RTCCLKSource_HSE_Div16); // -> each 1/(8 MHz / 16) = 2 uS
 80120be:	4817      	ldr	r0, [pc, #92]	; (801211c <MIOS32_SYS_TimeSet+0x78>)
 80120c0:	f001 fd7e 	bl	8013bc0 <RCC_RTCCLKConfig>

  // Enable RTC Clock
  RCC_RTCCLKCmd(ENABLE);
 80120c4:	2001      	movs	r0, #1
 80120c6:	f001 fd93 	bl	8013bf0 <RCC_RTCCLKCmd>

  // initialize RTC
  RTC_InitTypeDef RTC_InitStruct;
  RTC_StructInit(&RTC_InitStruct);
 80120ca:	a803      	add	r0, sp, #12
 80120cc:	f001 fe02 	bl	8013cd4 <RTC_StructInit>

  // Set RTC prescaler: set RTC period from 2 uS to 1 S
  RTC_InitStruct.RTC_AsynchPrediv = 100 - 1; // 7bit maximum
 80120d0:	2063      	movs	r0, #99	; 0x63
  RTC_InitStruct.RTC_SynchPrediv = 5000 - 1; // 13 bit maximum
 80120d2:	f241 3187 	movw	r1, #4999	; 0x1387
  // initialize RTC
  RTC_InitTypeDef RTC_InitStruct;
  RTC_StructInit(&RTC_InitStruct);

  // Set RTC prescaler: set RTC period from 2 uS to 1 S
  RTC_InitStruct.RTC_AsynchPrediv = 100 - 1; // 7bit maximum
 80120d6:	9004      	str	r0, [sp, #16]
  RTC_InitStruct.RTC_SynchPrediv = 5000 - 1; // 13 bit maximum
  RTC_Init(&RTC_InitStruct);
 80120d8:	a803      	add	r0, sp, #12
  RTC_InitTypeDef RTC_InitStruct;
  RTC_StructInit(&RTC_InitStruct);

  // Set RTC prescaler: set RTC period from 2 uS to 1 S
  RTC_InitStruct.RTC_AsynchPrediv = 100 - 1; // 7bit maximum
  RTC_InitStruct.RTC_SynchPrediv = 5000 - 1; // 13 bit maximum
 80120da:	9105      	str	r1, [sp, #20]
  RTC_Init(&RTC_InitStruct);
 80120dc:	f001 fe28 	bl	8013d30 <RTC_Init>

  // Change the current time
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_TimeStructInit(&RTC_TimeStruct);
 80120e0:	a802      	add	r0, sp, #8
 80120e2:	f001 feb1 	bl	8013e48 <RTC_TimeStructInit>
  RTC_TimeStruct.RTC_Hours = t.seconds / 3600;
 80120e6:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80120ea:	fbb4 f3f2 	udiv	r3, r4, r2
  RTC_TimeStruct.RTC_Minutes = (t.seconds % 3600) / 60;
 80120ee:	213c      	movs	r1, #60	; 0x3c
 80120f0:	fb02 4013 	mls	r0, r2, r3, r4
  RTC_Init(&RTC_InitStruct);

  // Change the current time
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_TimeStructInit(&RTC_TimeStruct);
  RTC_TimeStruct.RTC_Hours = t.seconds / 3600;
 80120f4:	f88d 3008 	strb.w	r3, [sp, #8]
  RTC_TimeStruct.RTC_Minutes = (t.seconds % 3600) / 60;
  RTC_TimeStruct.RTC_Seconds = t.seconds % 60; 
 80120f8:	fbb4 f3f1 	udiv	r3, r4, r1

  // Change the current time
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_TimeStructInit(&RTC_TimeStruct);
  RTC_TimeStruct.RTC_Hours = t.seconds / 3600;
  RTC_TimeStruct.RTC_Minutes = (t.seconds % 3600) / 60;
 80120fc:	fbb0 f2f1 	udiv	r2, r0, r1
  RTC_TimeStruct.RTC_Seconds = t.seconds % 60; 
 8012100:	fb01 4413 	mls	r4, r1, r3, r4
  RTC_SetTime(RTC_Format_BIN, &RTC_TimeStruct);
 8012104:	2000      	movs	r0, #0
 8012106:	a902      	add	r1, sp, #8

  // Change the current time
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_TimeStructInit(&RTC_TimeStruct);
  RTC_TimeStruct.RTC_Hours = t.seconds / 3600;
  RTC_TimeStruct.RTC_Minutes = (t.seconds % 3600) / 60;
 8012108:	f88d 2009 	strb.w	r2, [sp, #9]
  RTC_TimeStruct.RTC_Seconds = t.seconds % 60; 
 801210c:	f88d 400a 	strb.w	r4, [sp, #10]
  RTC_SetTime(RTC_Format_BIN, &RTC_TimeStruct);
 8012110:	f001 fe54 	bl	8013dbc <RTC_SetTime>
  // (fraction not taken into account here)

  return 0; // no error
}
 8012114:	2000      	movs	r0, #0
 8012116:	b006      	add	sp, #24
 8012118:	bd10      	pop	{r4, pc}
 801211a:	bf00      	nop
 801211c:	00100300 	.word	0x00100300

08012120 <MIOS32_SYS_Init>:
//! </UL>
//! \param[in] mode currently only mode 0 supported
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SYS_Init(u32 mode)
{
 8012120:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  // currently only mode 0 supported
  if( mode != 0 )
 8012122:	4604      	mov	r4, r0
 8012124:	2800      	cmp	r0, #0
 8012126:	f040 8083 	bne.w	8012230 <MIOS32_SYS_Init+0x110>
    return -1; // unsupported mode

  // Enable GPIOA, GPIOB, GPIOC, GPIOD, GPIOE and AFIO clocks
  RCC_AHB1PeriphClockCmd(
 801212a:	201f      	movs	r0, #31
 801212c:	2101      	movs	r1, #1
 801212e:	f001 fd65 	bl	8013bfc <RCC_AHB1PeriphClockCmd>
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
#endif

  // init clock system if chip doesn't already run with PLL
  __IO uint32_t HSEStatus = 0;
  if( (RCC->CFGR & (uint32_t)RCC_CFGR_SWS) == RCC_CFGR_SWS_PLL ) {
 8012132:	4b41      	ldr	r3, [pc, #260]	; (8012238 <MIOS32_SYS_Init+0x118>)
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
#endif

  // init clock system if chip doesn't already run with PLL
  __IO uint32_t HSEStatus = 0;
 8012134:	9400      	str	r4, [sp, #0]
  if( (RCC->CFGR & (uint32_t)RCC_CFGR_SWS) == RCC_CFGR_SWS_PLL ) {
 8012136:	689a      	ldr	r2, [r3, #8]
 8012138:	f002 000c 	and.w	r0, r2, #12
 801213c:	2808      	cmp	r0, #8
 801213e:	d102      	bne.n	8012146 <MIOS32_SYS_Init+0x26>
    HSEStatus = SUCCESS;
 8012140:	2001      	movs	r0, #1
 8012142:	9000      	str	r0, [sp, #0]
 8012144:	e05d      	b.n	8012202 <MIOS32_SYS_Init+0xe2>
  } else {
    /* Reset the RCC clock configuration to the default reset state ------------*/
    /* Set HSION bit */
    RCC->CR |= (uint32_t)0x00000001;
 8012146:	6819      	ldr	r1, [r3, #0]
 8012148:	f041 0201 	orr.w	r2, r1, #1
 801214c:	601a      	str	r2, [r3, #0]

    /* Reset CFGR register */
    RCC->CFGR = 0x00000000;
 801214e:	609c      	str	r4, [r3, #8]

    /* Reset HSEON, CSSON and PLLON bits */
    RCC->CR &= (uint32_t)0xFEF6FFFF;
 8012150:	6818      	ldr	r0, [r3, #0]
 8012152:	f020 7184 	bic.w	r1, r0, #17301504	; 0x1080000

    /* Reset PLLCFGR register */
    RCC->PLLCFGR = 0x24003010;
 8012156:	4839      	ldr	r0, [pc, #228]	; (801223c <MIOS32_SYS_Init+0x11c>)

    /* Reset CFGR register */
    RCC->CFGR = 0x00000000;

    /* Reset HSEON, CSSON and PLLON bits */
    RCC->CR &= (uint32_t)0xFEF6FFFF;
 8012158:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 801215c:	601a      	str	r2, [r3, #0]

    /* Reset PLLCFGR register */
    RCC->PLLCFGR = 0x24003010;
 801215e:	6058      	str	r0, [r3, #4]

    /* Reset HSEBYP bit */
    RCC->CR &= (uint32_t)0xFFFBFFFF;
 8012160:	6819      	ldr	r1, [r3, #0]
 8012162:	f421 2280 	bic.w	r2, r1, #262144	; 0x40000
 8012166:	601a      	str	r2, [r3, #0]

    /* Disable all interrupts */
    RCC->CIR = 0x00000000;
 8012168:	60dc      	str	r4, [r3, #12]
       AHB/APBx prescalers and Flash settings ----------------------------------*/

    /******************************************************************************/
    /*            PLL (clocked by HSE) used as System clock source                */
    /******************************************************************************/
    __IO uint32_t StartUpCounter = 0;
 801216a:	9401      	str	r4, [sp, #4]
  
    /* Enable HSE */
    RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 801216c:	6818      	ldr	r0, [r3, #0]
 801216e:	f440 3180 	orr.w	r1, r0, #65536	; 0x10000
 8012172:	6019      	str	r1, [r3, #0]
 
    /* Wait till HSE is ready and if Time out is reached exit */
    do {
      HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8012174:	4b30      	ldr	r3, [pc, #192]	; (8012238 <MIOS32_SYS_Init+0x118>)
 8012176:	681a      	ldr	r2, [r3, #0]
 8012178:	f402 3000 	and.w	r0, r2, #131072	; 0x20000
 801217c:	9000      	str	r0, [sp, #0]
      StartUpCounter++;
 801217e:	9901      	ldr	r1, [sp, #4]
 8012180:	1c4a      	adds	r2, r1, #1
 8012182:	9201      	str	r2, [sp, #4]
    } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8012184:	9800      	ldr	r0, [sp, #0]
 8012186:	b918      	cbnz	r0, 8012190 <MIOS32_SYS_Init+0x70>
 8012188:	9901      	ldr	r1, [sp, #4]
 801218a:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 801218e:	d1f1      	bne.n	8012174 <MIOS32_SYS_Init+0x54>

    if ((RCC->CR & RCC_CR_HSERDY) != RESET) {
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	f413 3200 	ands.w	r2, r3, #131072	; 0x20000
      HSEStatus = (uint32_t)0x01;
 8012196:	bf18      	it	ne
 8012198:	2201      	movne	r2, #1
    } else {
      HSEStatus = (uint32_t)0x00;
 801219a:	9200      	str	r2, [sp, #0]
    }

    if (HSEStatus == (uint32_t)0x01) {
 801219c:	9800      	ldr	r0, [sp, #0]
 801219e:	2801      	cmp	r0, #1
 80121a0:	d12f      	bne.n	8012202 <MIOS32_SYS_Init+0xe2>
      /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
      RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80121a2:	4b25      	ldr	r3, [pc, #148]	; (8012238 <MIOS32_SYS_Init+0x118>)
      PWR->CR |= PWR_CR_VOS;
 80121a4:	4826      	ldr	r0, [pc, #152]	; (8012240 <MIOS32_SYS_Init+0x120>)
      HSEStatus = (uint32_t)0x00;
    }

    if (HSEStatus == (uint32_t)0x01) {
      /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
      RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80121a6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80121a8:	f041 5280 	orr.w	r2, r1, #268435456	; 0x10000000
 80121ac:	641a      	str	r2, [r3, #64]	; 0x40
      PWR->CR |= PWR_CR_VOS;
 80121ae:	6801      	ldr	r1, [r0, #0]
 80121b0:	f441 4280 	orr.w	r2, r1, #16384	; 0x4000
 80121b4:	6002      	str	r2, [r0, #0]

      /* HCLK = SYSCLK / 1*/
      RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80121b6:	6898      	ldr	r0, [r3, #8]
 80121b8:	6098      	str	r0, [r3, #8]
      
      /* PCLK2 = HCLK / 2*/
      RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80121ba:	6899      	ldr	r1, [r3, #8]
 80121bc:	f441 4200 	orr.w	r2, r1, #32768	; 0x8000
 80121c0:	609a      	str	r2, [r3, #8]
    
      /* PCLK1 = HCLK / 4*/
      RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80121c2:	6898      	ldr	r0, [r3, #8]

      /* Configure the main PLL */
      RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80121c4:	4a1f      	ldr	r2, [pc, #124]	; (8012244 <MIOS32_SYS_Init+0x124>)
      
      /* PCLK2 = HCLK / 2*/
      RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
    
      /* PCLK1 = HCLK / 4*/
      RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80121c6:	f440 51a0 	orr.w	r1, r0, #5120	; 0x1400
 80121ca:	6099      	str	r1, [r3, #8]

      /* Configure the main PLL */
      RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80121cc:	605a      	str	r2, [r3, #4]
	             (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

      /* Enable the main PLL */
      RCC->CR |= RCC_CR_PLLON;
 80121ce:	6818      	ldr	r0, [r3, #0]
 80121d0:	f040 7180 	orr.w	r1, r0, #16777216	; 0x1000000
 80121d4:	6019      	str	r1, [r3, #0]

      /* Wait till the main PLL is ready */
      while((RCC->CR & RCC_CR_PLLRDY) == 0);
 80121d6:	6818      	ldr	r0, [r3, #0]
 80121d8:	4a17      	ldr	r2, [pc, #92]	; (8012238 <MIOS32_SYS_Init+0x118>)
 80121da:	0180      	lsls	r0, r0, #6
 80121dc:	d5fb      	bpl.n	80121d6 <MIOS32_SYS_Init+0xb6>
   
      /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
      FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80121de:	4b1a      	ldr	r3, [pc, #104]	; (8012248 <MIOS32_SYS_Init+0x128>)
 80121e0:	f240 6105 	movw	r1, #1541	; 0x605
 80121e4:	6019      	str	r1, [r3, #0]

      /* Select the main PLL as system clock source */
      RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80121e6:	6890      	ldr	r0, [r2, #8]
 80121e8:	f020 0103 	bic.w	r1, r0, #3
 80121ec:	6091      	str	r1, [r2, #8]
      RCC->CFGR |= RCC_CFGR_SW_PLL;
 80121ee:	6893      	ldr	r3, [r2, #8]
 80121f0:	f043 0002 	orr.w	r0, r3, #2
 80121f4:	6090      	str	r0, [r2, #8]

      /* Wait till the main PLL is used as system clock source */
      while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 80121f6:	4a10      	ldr	r2, [pc, #64]	; (8012238 <MIOS32_SYS_Init+0x118>)
 80121f8:	6891      	ldr	r1, [r2, #8]
 80121fa:	f001 030c 	and.w	r3, r1, #12
 80121fe:	2b08      	cmp	r3, #8
 8012200:	d1f9      	bne.n	80121f6 <MIOS32_SYS_Init+0xd6>
         configuration. User can add here some code to deal with this error */
    }
  }

  // Set the Vector Table base address as specified in .ld file (-> mios32_sys_isr_vector)
  NVIC_SetVectorTable((u32)&mios32_sys_isr_vector, 0x0);
 8012202:	2100      	movs	r1, #0
 8012204:	4811      	ldr	r0, [pc, #68]	; (801224c <MIOS32_SYS_Init+0x12c>)
 8012206:	f001 fbed 	bl	80139e4 <NVIC_SetVectorTable>
  NVIC_PriorityGroupConfig(MIOS32_IRQ_PRIGROUP);
 801220a:	f44f 7040 	mov.w	r0, #768	; 0x300
 801220e:	f001 fbdf 	bl	80139d0 <NVIC_PriorityGroupConfig>

#ifndef MIOS32_SYS_DONT_INIT_RTC
  // initialize system clock
  mios32_sys_time_t t = { .seconds=0, .fraction_ms=0 };
 8012212:	2200      	movs	r2, #0
 8012214:	9202      	str	r2, [sp, #8]
 8012216:	9203      	str	r2, [sp, #12]
  MIOS32_SYS_TimeSet(t);
 8012218:	a904      	add	r1, sp, #16
 801221a:	e911 0003 	ldmdb	r1, {r0, r1}
 801221e:	f7ff ff41 	bl	80120a4 <MIOS32_SYS_TimeSet>
#endif

  // error during clock configuration?
  return HSEStatus == SUCCESS ? 0 : -1;
 8012222:	9b00      	ldr	r3, [sp, #0]
 8012224:	2b01      	cmp	r3, #1
 8012226:	bf14      	ite	ne
 8012228:	f04f 30ff 	movne.w	r0, #4294967295
 801222c:	2000      	moveq	r0, #0
 801222e:	e001      	b.n	8012234 <MIOS32_SYS_Init+0x114>
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_SYS_Init(u32 mode)
{
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode
 8012230:	f04f 30ff 	mov.w	r0, #4294967295
  MIOS32_SYS_TimeSet(t);
#endif

  // error during clock configuration?
  return HSEStatus == SUCCESS ? 0 : -1;
}
 8012234:	b004      	add	sp, #16
 8012236:	bd10      	pop	{r4, pc}
 8012238:	40023800 	.word	0x40023800
 801223c:	24003010 	.word	0x24003010
 8012240:	40007000 	.word	0x40007000
 8012244:	07405408 	.word	0x07405408
 8012248:	40023c00 	.word	0x40023c00
 801224c:	08004000 	.word	0x08004000

08012250 <MIOS32_IRQ_Disable>:
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_IRQ_Disable(void)
{
  // get current priority if nested level == 0
  if( !nested_ctr ) {
 8012250:	4b07      	ldr	r3, [pc, #28]	; (8012270 <MIOS32_IRQ_Disable+0x20>)
 8012252:	681a      	ldr	r2, [r3, #0]
 8012254:	b91a      	cbnz	r2, 801225e <MIOS32_IRQ_Disable+0xe>
    __asm volatile (			   \
 8012256:	f3ef 8110 	mrs	r1, PRIMASK
 801225a:	4806      	ldr	r0, [pc, #24]	; (8012274 <MIOS32_IRQ_Disable+0x24>)
 801225c:	6001      	str	r1, [r0, #0]
		    : "=r" (prev_primask)  \
		    );
  }

  // disable interrupts
  __asm volatile ( \
 801225e:	f04f 0001 	mov.w	r0, #1
 8012262:	f380 8810 	msr	PRIMASK, r0
		  "	mov r0, #1     \n" \
		  "	msr primask, r0\n" \
		  :::"r0"	 \
		  );

  ++nested_ctr;
 8012266:	681a      	ldr	r2, [r3, #0]
 8012268:	1c51      	adds	r1, r2, #1
 801226a:	6019      	str	r1, [r3, #0]

  return 0; // no error
}
 801226c:	2000      	movs	r0, #0
 801226e:	4770      	bx	lr
 8012270:	200001c4 	.word	0x200001c4
 8012274:	200001c0 	.word	0x200001c0

08012278 <MIOS32_IRQ_Enable>:
//! \return -1 on nesting errors (MIOS32_IRQ_Disable() hasn't been called before)
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_IRQ_Enable(void)
{
  // check for nesting error
  if( nested_ctr == 0 )
 8012278:	4a07      	ldr	r2, [pc, #28]	; (8012298 <MIOS32_IRQ_Enable+0x20>)
 801227a:	6813      	ldr	r3, [r2, #0]
 801227c:	b13b      	cbz	r3, 801228e <MIOS32_IRQ_Enable+0x16>
    return -1; // nesting error

  // decrease nesting level
  --nested_ctr;
 801227e:	1e58      	subs	r0, r3, #1
 8012280:	6010      	str	r0, [r2, #0]

  // set back previous priority once nested level reached 0 again
  if( nested_ctr == 0 ) {
 8012282:	b938      	cbnz	r0, 8012294 <MIOS32_IRQ_Enable+0x1c>
    __asm volatile ( \
 8012284:	4905      	ldr	r1, [pc, #20]	; (801229c <MIOS32_IRQ_Enable+0x24>)
 8012286:	680a      	ldr	r2, [r1, #0]
 8012288:	f382 8810 	msr	PRIMASK, r2
 801228c:	e002      	b.n	8012294 <MIOS32_IRQ_Enable+0x1c>
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_IRQ_Enable(void)
{
  // check for nesting error
  if( nested_ctr == 0 )
    return -1; // nesting error
 801228e:	f04f 30ff 	mov.w	r0, #4294967295
 8012292:	4770      	bx	lr
		    "	msr primask, %0\n" \
		    :: "r" (prev_primask)  \
		    );
  }

  return 0; // no error
 8012294:	2000      	movs	r0, #0
}
 8012296:	4770      	bx	lr
 8012298:	200001c4 	.word	0x200001c4
 801229c:	200001c0 	.word	0x200001c0

080122a0 <MIOS32_IRQ_Install>:
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_IRQ_Install(u8 IRQn, u8 priority)
{
  // no check for IRQn as it's device dependent

  if( priority >= 16 )
 80122a0:	290f      	cmp	r1, #15
 80122a2:	d81c      	bhi.n	80122de <MIOS32_IRQ_Install+0x3e>
    return -1; // invalid priority

  u32 tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700)) >> 8;
 80122a4:	4b0f      	ldr	r3, [pc, #60]	; (80122e4 <MIOS32_IRQ_Install+0x44>)
 80122a6:	68da      	ldr	r2, [r3, #12]
 80122a8:	43d3      	mvns	r3, r2
 80122aa:	f3c3 2202 	ubfx	r2, r3, #8, #3
  u32 tmppre = (4 - tmppriority);
 80122ae:	f1c2 0304 	rsb	r3, r2, #4
  tmppriority = priority << tmppre;
 80122b2:	fa01 f103 	lsl.w	r1, r1, r3
  tmppriority = tmppriority << 4;
 80122b6:	0109      	lsls	r1, r1, #4
  NVIC->IP[IRQn] = tmppriority;
 80122b8:	f100 4360 	add.w	r3, r0, #3758096384	; 0xe0000000
 80122bc:	b2ca      	uxtb	r2, r1
 80122be:	f503 4161 	add.w	r1, r3, #57600	; 0xe100
    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80122c2:	2301      	movs	r3, #1
 80122c4:	f881 2300 	strb.w	r2, [r1, #768]	; 0x300
 80122c8:	b242      	sxtb	r2, r0
 80122ca:	f000 001f 	and.w	r0, r0, #31
 80122ce:	0951      	lsrs	r1, r2, #5
 80122d0:	fa03 f200 	lsl.w	r2, r3, r0
 80122d4:	4804      	ldr	r0, [pc, #16]	; (80122e8 <MIOS32_IRQ_Install+0x48>)
 80122d6:	f840 2021 	str.w	r2, [r0, r1, lsl #2]

  NVIC_EnableIRQ(IRQn);

  return 0; // no error
 80122da:	2000      	movs	r0, #0
 80122dc:	4770      	bx	lr
s32 MIOS32_IRQ_Install(u8 IRQn, u8 priority)
{
  // no check for IRQn as it's device dependent

  if( priority >= 16 )
    return -1; // invalid priority
 80122de:	f04f 30ff 	mov.w	r0, #4294967295
  NVIC->IP[IRQn] = tmppriority;

  NVIC_EnableIRQ(IRQn);

  return 0; // no error
}
 80122e2:	4770      	bx	lr
 80122e4:	e000ed00 	.word	0xe000ed00
 80122e8:	e000e100 	.word	0xe000e100

080122ec <MIOS32_BOARD_PinInitHlp>:

/////////////////////////////////////////////////////////////////////////////
//! Internally used help function to initialize a pin
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_BOARD_PinInitHlp(GPIO_TypeDef *port, u16 pin_mask, mios32_board_pin_mode_t mode)
{
 80122ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80122ee:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);
 80122f0:	4668      	mov	r0, sp

/////////////////////////////////////////////////////////////////////////////
//! Internally used help function to initialize a pin
/////////////////////////////////////////////////////////////////////////////
static s32 MIOS32_BOARD_PinInitHlp(GPIO_TypeDef *port, u16 pin_mask, mios32_board_pin_mode_t mode)
{
 80122f2:	460e      	mov	r6, r1
 80122f4:	4614      	mov	r4, r2
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);
 80122f6:	f001 fbd2 	bl	8013a9e <GPIO_StructInit>
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80122fa:	2302      	movs	r3, #2
 80122fc:	f88d 3005 	strb.w	r3, [sp, #5]
  GPIO_InitStructure.GPIO_Pin = pin_mask;
 8012300:	9600      	str	r6, [sp, #0]

  switch( mode ) {
 8012302:	2c06      	cmp	r4, #6
 8012304:	d829      	bhi.n	801235a <MIOS32_BOARD_PinInitHlp+0x6e>
 8012306:	e8df f004 	tbb	[pc, r4]
 801230a:	0426      	.short	0x0426
 801230c:	18130f09 	.word	0x18130f09
 8012310:	1d          	.byte	0x1d
 8012311:	00          	.byte	0x00
  case MIOS32_BOARD_PIN_MODE_IGNORE:
    return 0; // don't touch
  case MIOS32_BOARD_PIN_MODE_ANALOG:
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8012312:	2003      	movs	r0, #3
 8012314:	f88d 0004 	strb.w	r0, [sp, #4]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8012318:	2300      	movs	r3, #0
 801231a:	e002      	b.n	8012322 <MIOS32_BOARD_PinInitHlp+0x36>
    break;
  case MIOS32_BOARD_PIN_MODE_INPUT:
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 801231c:	2300      	movs	r3, #0
 801231e:	f88d 3004 	strb.w	r3, [sp, #4]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8012322:	f88d 3007 	strb.w	r3, [sp, #7]
    break;
 8012326:	e012      	b.n	801234e <MIOS32_BOARD_PinInitHlp+0x62>
  case MIOS32_BOARD_PIN_MODE_INPUT_PD:
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8012328:	2200      	movs	r2, #0
 801232a:	f88d 2004 	strb.w	r2, [sp, #4]
 801232e:	e7f8      	b.n	8012322 <MIOS32_BOARD_PinInitHlp+0x36>
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
    break;
  case MIOS32_BOARD_PIN_MODE_INPUT_PU:
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8012330:	2100      	movs	r1, #0
 8012332:	f88d 1004 	strb.w	r1, [sp, #4]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8012336:	2301      	movs	r3, #1
 8012338:	e7f3      	b.n	8012322 <MIOS32_BOARD_PinInitHlp+0x36>
    break;
  case MIOS32_BOARD_PIN_MODE_OUTPUT_PP:
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 801233a:	2001      	movs	r0, #1
 801233c:	f88d 0004 	strb.w	r0, [sp, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8012340:	2300      	movs	r3, #0
 8012342:	e002      	b.n	801234a <MIOS32_BOARD_PinInitHlp+0x5e>
    break;
  case MIOS32_BOARD_PIN_MODE_OUTPUT_OD:
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8012344:	2301      	movs	r3, #1
 8012346:	f88d 3004 	strb.w	r3, [sp, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 801234a:	f88d 3006 	strb.w	r3, [sp, #6]
  default:
    return -2; // invalid pin mode
  }

  // init IO mode
  GPIO_Init(port, &GPIO_InitStructure);
 801234e:	4628      	mov	r0, r5
 8012350:	4669      	mov	r1, sp
 8012352:	f001 fb57 	bl	8013a04 <GPIO_Init>

  return 0; // no error
 8012356:	2000      	movs	r0, #0
 8012358:	e001      	b.n	801235e <MIOS32_BOARD_PinInitHlp+0x72>
  case MIOS32_BOARD_PIN_MODE_OUTPUT_OD:
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
    break;
  default:
    return -2; // invalid pin mode
 801235a:	f06f 0001 	mvn.w	r0, #1

  // init IO mode
  GPIO_Init(port, &GPIO_InitStructure);

  return 0; // no error
}
 801235e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

08012360 <MIOS32_BOARD_Init>:
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_BOARD_Init(u32 mode)
{
  // currently only mode 0 supported
  if( mode != 0 )
 8012360:	b920      	cbnz	r0, 801236c <MIOS32_BOARD_Init+0xc>
    return -1; // unsupported mode

  j5_enable_mask = 0;
 8012362:	4b04      	ldr	r3, [pc, #16]	; (8012374 <MIOS32_BOARD_Init+0x14>)
  j10_enable_mask = 0;
 8012364:	4904      	ldr	r1, [pc, #16]	; (8012378 <MIOS32_BOARD_Init+0x18>)
{
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode

  j5_enable_mask = 0;
 8012366:	8018      	strh	r0, [r3, #0]
  j10_enable_mask = 0;
 8012368:	8008      	strh	r0, [r1, #0]

  return 0; // no error
 801236a:	4770      	bx	lr
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_BOARD_Init(u32 mode)
{
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode
 801236c:	f04f 30ff 	mov.w	r0, #4294967295

  j5_enable_mask = 0;
  j10_enable_mask = 0;

  return 0; // no error
}
 8012370:	4770      	bx	lr
 8012372:	bf00      	nop
 8012374:	200001ca 	.word	0x200001ca
 8012378:	200001c8 	.word	0x200001c8

0801237c <MIOS32_BOARD_LED_Init>:
//! \return 0 if initialisation passed
//! \return -1 if no LEDs specified for board
//! \return -2 if one or more LEDs not available on board
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_BOARD_LED_Init(u32 leds)
{
 801237c:	b510      	push	{r4, lr}
 801237e:	4604      	mov	r4, r0
#if defined(MIOS32_BOARD_STM32F4DISCOVERY) || defined(MIOS32_BOARD_MBHP_CORE_STM32F4)
#if MIOS32_BOARD_J15_LED_NUM >= 1

  // 4 LEDs are available
  if( leds & 1 ) {
 8012380:	07e0      	lsls	r0, r4, #31
 8012382:	d505      	bpl.n	8012390 <MIOS32_BOARD_LED_Init+0x14>
    MIOS32_BOARD_PinInitHlp(GPIOD, GPIO_Pin_12, MIOS32_BOARD_PIN_MODE_OUTPUT_PP); // LED4 (Green)
 8012384:	4812      	ldr	r0, [pc, #72]	; (80123d0 <MIOS32_BOARD_LED_Init+0x54>)
 8012386:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801238a:	2205      	movs	r2, #5
 801238c:	f7ff ffae 	bl	80122ec <MIOS32_BOARD_PinInitHlp>
  }

#if MIOS32_BOARD_J15_LED_NUM >= 2
  if( leds & 2 ) {
 8012390:	07a1      	lsls	r1, r4, #30
 8012392:	d505      	bpl.n	80123a0 <MIOS32_BOARD_LED_Init+0x24>
    MIOS32_BOARD_PinInitHlp(GPIOD, GPIO_Pin_13, MIOS32_BOARD_PIN_MODE_OUTPUT_PP); // LED3 (Orange)
 8012394:	480e      	ldr	r0, [pc, #56]	; (80123d0 <MIOS32_BOARD_LED_Init+0x54>)
 8012396:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801239a:	2205      	movs	r2, #5
 801239c:	f7ff ffa6 	bl	80122ec <MIOS32_BOARD_PinInitHlp>
  }
#endif

#if MIOS32_BOARD_J15_LED_NUM >= 3
  if( leds & 4 ) {
 80123a0:	0762      	lsls	r2, r4, #29
 80123a2:	d505      	bpl.n	80123b0 <MIOS32_BOARD_LED_Init+0x34>
    MIOS32_BOARD_PinInitHlp(GPIOD, GPIO_Pin_14, MIOS32_BOARD_PIN_MODE_OUTPUT_PP); // LED5 (Red)
 80123a4:	480a      	ldr	r0, [pc, #40]	; (80123d0 <MIOS32_BOARD_LED_Init+0x54>)
 80123a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80123aa:	2205      	movs	r2, #5
 80123ac:	f7ff ff9e 	bl	80122ec <MIOS32_BOARD_PinInitHlp>
  }
#endif

#if MIOS32_BOARD_J15_LED_NUM >= 4
  if( leds & 8 ) {
 80123b0:	0723      	lsls	r3, r4, #28
 80123b2:	d505      	bpl.n	80123c0 <MIOS32_BOARD_LED_Init+0x44>
    MIOS32_BOARD_PinInitHlp(GPIOD, GPIO_Pin_15, MIOS32_BOARD_PIN_MODE_OUTPUT_PP); // LED6 (Blue)
 80123b4:	4806      	ldr	r0, [pc, #24]	; (80123d0 <MIOS32_BOARD_LED_Init+0x54>)
 80123b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80123ba:	2205      	movs	r2, #5
 80123bc:	f7ff ff96 	bl	80122ec <MIOS32_BOARD_PinInitHlp>
  }
#endif

  if( leds & 0xfffffff0)
    return -2; // LED doesn't exist
 80123c0:	f034 030f 	bics.w	r3, r4, #15
#endif
  return 0; // no error
#else
  return -1; // no LED specified for board
#endif
}
 80123c4:	bf14      	ite	ne
 80123c6:	f06f 0001 	mvnne.w	r0, #1
 80123ca:	2000      	moveq	r0, #0
 80123cc:	bd10      	pop	{r4, pc}
 80123ce:	bf00      	nop
 80123d0:	40020c00 	.word	0x40020c00

080123d4 <MIOS32_BOARD_LED_Set>:
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_BOARD_LED_Set(u32 leds, u32 value)
{
#if defined(MIOS32_BOARD_STM32F4DISCOVERY) || defined(MIOS32_BOARD_MBHP_CORE_STM32F4)
#if MIOS32_BOARD_J15_LED_NUM >= 1
  if( leds & 1 ) { // LED4 (Green)
 80123d4:	07c2      	lsls	r2, r0, #31
 80123d6:	d507      	bpl.n	80123e8 <MIOS32_BOARD_LED_Set+0x14>
 80123d8:	4b16      	ldr	r3, [pc, #88]	; (8012434 <MIOS32_BOARD_LED_Set+0x60>)
    MIOS32_SYS_STM_PINSET(GPIOD, GPIO_Pin_12, value & 1);
 80123da:	f011 0f01 	tst.w	r1, #1
 80123de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80123e2:	bf14      	ite	ne
 80123e4:	831a      	strhne	r2, [r3, #24]
 80123e6:	835a      	strheq	r2, [r3, #26]
  }
#endif
#if MIOS32_BOARD_J15_LED_NUM >= 2
  if( leds & 2 ) { // LED3 (Orange)
 80123e8:	0783      	lsls	r3, r0, #30
 80123ea:	d507      	bpl.n	80123fc <MIOS32_BOARD_LED_Set+0x28>
 80123ec:	4b11      	ldr	r3, [pc, #68]	; (8012434 <MIOS32_BOARD_LED_Set+0x60>)
    MIOS32_SYS_STM_PINSET(GPIOD, GPIO_Pin_13, value & 2);
 80123ee:	f011 0f02 	tst.w	r1, #2
 80123f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80123f6:	bf14      	ite	ne
 80123f8:	831a      	strhne	r2, [r3, #24]
 80123fa:	835a      	strheq	r2, [r3, #26]
  }
#endif
#if MIOS32_BOARD_J15_LED_NUM >= 3
  if( leds & 4 ) { // LED5 (Red)
 80123fc:	0742      	lsls	r2, r0, #29
 80123fe:	d507      	bpl.n	8012410 <MIOS32_BOARD_LED_Set+0x3c>
 8012400:	4b0c      	ldr	r3, [pc, #48]	; (8012434 <MIOS32_BOARD_LED_Set+0x60>)
    MIOS32_SYS_STM_PINSET(GPIOD, GPIO_Pin_14, value & 4);
 8012402:	f011 0f04 	tst.w	r1, #4
 8012406:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801240a:	bf14      	ite	ne
 801240c:	831a      	strhne	r2, [r3, #24]
 801240e:	835a      	strheq	r2, [r3, #26]
  }
#endif
#if MIOS32_BOARD_J15_LED_NUM >= 4
  if( leds & 8 ) { // LED6 (Blue)
 8012410:	0703      	lsls	r3, r0, #28
 8012412:	d507      	bpl.n	8012424 <MIOS32_BOARD_LED_Set+0x50>
    MIOS32_SYS_STM_PINSET(GPIOD, GPIO_Pin_15, value & 8);
 8012414:	f011 0f08 	tst.w	r1, #8
 8012418:	4906      	ldr	r1, [pc, #24]	; (8012434 <MIOS32_BOARD_LED_Set+0x60>)
 801241a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801241e:	bf14      	ite	ne
 8012420:	830b      	strhne	r3, [r1, #24]
 8012422:	834b      	strheq	r3, [r1, #26]
  }
#endif

  if( leds & 0xfffffff0)
    return -2; // LED doesn't exist
 8012424:	f030 030f 	bics.w	r3, r0, #15

  return 0; // no error
#else
  return -1; // no LED specified for board
#endif
}
 8012428:	bf14      	ite	ne
 801242a:	f06f 0001 	mvnne.w	r0, #1
 801242e:	2000      	moveq	r0, #0
 8012430:	4770      	bx	lr
 8012432:	bf00      	nop
 8012434:	40020c00 	.word	0x40020c00

08012438 <MIOS32_BOARD_LED_Get>:
{
  u32 values = 0;

#if defined(MIOS32_BOARD_STM32F4DISCOVERY) || defined(MIOS32_BOARD_MBHP_CORE_STM32F4)
#if MIOS32_BOARD_J15_LED_NUM >= 1
  if( GPIOD->ODR & GPIO_Pin_12 ) // LED4 (Green)
 8012438:	4b09      	ldr	r3, [pc, #36]	; (8012460 <MIOS32_BOARD_LED_Get+0x28>)
 801243a:	6958      	ldr	r0, [r3, #20]
    values |= (1 << 0);
#endif
#if MIOS32_BOARD_J15_LED_NUM >= 2
  if( GPIOD->ODR & GPIO_Pin_13 ) // LED3 (Orange)
 801243c:	695a      	ldr	r2, [r3, #20]
 801243e:	0491      	lsls	r1, r2, #18
    values |= (1 << 1);
#endif
#if MIOS32_BOARD_J15_LED_NUM >= 3
  if( GPIOD->ODR & GPIO_Pin_14 ) // LED4 (Red)
 8012440:	6959      	ldr	r1, [r3, #20]
    values |= (1 << 2);
#endif
#if MIOS32_BOARD_J15_LED_NUM >= 4
  if( GPIOD->ODR & GPIO_Pin_15 ) // LED6 (Blue)
 8012442:	695b      	ldr	r3, [r3, #20]
{
  u32 values = 0;

#if defined(MIOS32_BOARD_STM32F4DISCOVERY) || defined(MIOS32_BOARD_MBHP_CORE_STM32F4)
#if MIOS32_BOARD_J15_LED_NUM >= 1
  if( GPIOD->ODR & GPIO_Pin_12 ) // LED4 (Green)
 8012444:	f3c0 3000 	ubfx	r0, r0, #12, #1
    values |= (1 << 0);
#endif
#if MIOS32_BOARD_J15_LED_NUM >= 2
  if( GPIOD->ODR & GPIO_Pin_13 ) // LED3 (Orange)
    values |= (1 << 1);
 8012448:	bf48      	it	mi
 801244a:	f040 0002 	orrmi.w	r0, r0, #2
#endif
#if MIOS32_BOARD_J15_LED_NUM >= 3
  if( GPIOD->ODR & GPIO_Pin_14 ) // LED4 (Red)
 801244e:	044a      	lsls	r2, r1, #17
    values |= (1 << 2);
 8012450:	bf48      	it	mi
 8012452:	f040 0004 	orrmi.w	r0, r0, #4
#endif
#if MIOS32_BOARD_J15_LED_NUM >= 4
  if( GPIOD->ODR & GPIO_Pin_15 ) // LED6 (Blue)
 8012456:	0419      	lsls	r1, r3, #16
    values |= (1 << 3);
 8012458:	bf48      	it	mi
 801245a:	f040 0008 	orrmi.w	r0, r0, #8
#endif
#endif

  return values;
}
 801245e:	4770      	bx	lr
 8012460:	40020c00 	.word	0x40020c00

08012464 <MIOS32_BOARD_J5_PinInit>:
s32 MIOS32_BOARD_J5_PinInit(u8 pin, mios32_board_pin_mode_t mode)
{
#if J5_NUM_PINS == 0
  return -1; // MIOS32_BOARD_J5 not supported
#else
  if( pin >= J5_NUM_PINS )
 8012464:	2807      	cmp	r0, #7
//!     <LI>MIOS32_BOARD_PIN_MODE_OUTPUT_OD: pin is used as output in open drain mode
//!   </UL>
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_BOARD_J5_PinInit(u8 pin, mios32_board_pin_mode_t mode)
{
 8012466:	b510      	push	{r4, lr}
 8012468:	460a      	mov	r2, r1
#if J5_NUM_PINS == 0
  return -1; // MIOS32_BOARD_J5 not supported
#else
  if( pin >= J5_NUM_PINS )
 801246a:	d817      	bhi.n	801249c <MIOS32_BOARD_J5_PinInit+0x38>
 801246c:	4b0d      	ldr	r3, [pc, #52]	; (80124a4 <MIOS32_BOARD_J5_PinInit+0x40>)
 801246e:	2101      	movs	r1, #1
    return -1; // pin not supported

  if( mode == MIOS32_BOARD_PIN_MODE_IGNORE ) {
    // don't touch
    j5_enable_mask &= ~(1 << pin);
 8012470:	fa01 f100 	lsl.w	r1, r1, r0
 8012474:	881c      	ldrh	r4, [r3, #0]
  return -1; // MIOS32_BOARD_J5 not supported
#else
  if( pin >= J5_NUM_PINS )
    return -1; // pin not supported

  if( mode == MIOS32_BOARD_PIN_MODE_IGNORE ) {
 8012476:	b922      	cbnz	r2, 8012482 <MIOS32_BOARD_J5_PinInit+0x1e>
    // don't touch
    j5_enable_mask &= ~(1 << pin);
 8012478:	ea24 0001 	bic.w	r0, r4, r1
 801247c:	8018      	strh	r0, [r3, #0]

    if( status < 0 )
      return status;
  }

  return 0; // no error
 801247e:	4610      	mov	r0, r2
 8012480:	bd10      	pop	{r4, pc}
  if( mode == MIOS32_BOARD_PIN_MODE_IGNORE ) {
    // don't touch
    j5_enable_mask &= ~(1 << pin);
  } else {
    // enable pin
    j5_enable_mask |= (1 << pin);
 8012482:	4321      	orrs	r1, r4
 8012484:	8019      	strh	r1, [r3, #0]

    s32 status = MIOS32_BOARD_PinInitHlp(j5_pin[pin].port, j5_pin[pin].pin_mask, mode);
 8012486:	4b08      	ldr	r3, [pc, #32]	; (80124a8 <MIOS32_BOARD_J5_PinInit+0x44>)
 8012488:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
 801248c:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 8012490:	8889      	ldrh	r1, [r1, #4]
 8012492:	f7ff ff2b 	bl	80122ec <MIOS32_BOARD_PinInitHlp>
 8012496:	ea00 70e0 	and.w	r0, r0, r0, asr #31
 801249a:	bd10      	pop	{r4, pc}
{
#if J5_NUM_PINS == 0
  return -1; // MIOS32_BOARD_J5 not supported
#else
  if( pin >= J5_NUM_PINS )
    return -1; // pin not supported
 801249c:	f04f 30ff 	mov.w	r0, #4294967295
      return status;
  }

  return 0; // no error
#endif
}
 80124a0:	bd10      	pop	{r4, pc}
 80124a2:	bf00      	nop
 80124a4:	200001ca 	.word	0x200001ca
 80124a8:	08018030 	.word	0x08018030

080124ac <MIOS32_BOARD_J5_PinSet>:
s32 MIOS32_BOARD_J5_PinSet(u8 pin, u8 value)
{
#if J5_NUM_PINS == 0
  return -1; // MIOS32_BOARD_J5 not supported
#else
  if( pin >= J5_NUM_PINS )
 80124ac:	2807      	cmp	r0, #7
 80124ae:	d815      	bhi.n	80124dc <MIOS32_BOARD_J5_PinSet+0x30>
    return -1; // pin not supported

  if( !(j5_enable_mask & (1 << pin)) )
 80124b0:	4b0d      	ldr	r3, [pc, #52]	; (80124e8 <MIOS32_BOARD_J5_PinSet+0x3c>)
 80124b2:	881a      	ldrh	r2, [r3, #0]
 80124b4:	fa42 f200 	asr.w	r2, r2, r0
 80124b8:	07d3      	lsls	r3, r2, #31
 80124ba:	d512      	bpl.n	80124e2 <MIOS32_BOARD_J5_PinSet+0x36>
 80124bc:	4b0b      	ldr	r3, [pc, #44]	; (80124ec <MIOS32_BOARD_J5_PinSet+0x40>)
 80124be:	00c2      	lsls	r2, r0, #3
    return -2; // pin disabled

  MIOS32_SYS_STM_PINSET(j5_pin[pin].port, j5_pin[pin].pin_mask, value);
 80124c0:	b131      	cbz	r1, 80124d0 <MIOS32_BOARD_J5_PinSet+0x24>
 80124c2:	189a      	adds	r2, r3, r2
 80124c4:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 80124c8:	8891      	ldrh	r1, [r2, #4]
 80124ca:	8301      	strh	r1, [r0, #24]

  return 0; // no error
 80124cc:	2000      	movs	r0, #0
 80124ce:	4770      	bx	lr
    return -1; // pin not supported

  if( !(j5_enable_mask & (1 << pin)) )
    return -2; // pin disabled

  MIOS32_SYS_STM_PINSET(j5_pin[pin].port, j5_pin[pin].pin_mask, value);
 80124d0:	1899      	adds	r1, r3, r2
 80124d2:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 80124d6:	888b      	ldrh	r3, [r1, #4]
 80124d8:	8343      	strh	r3, [r0, #26]
 80124da:	e7f7      	b.n	80124cc <MIOS32_BOARD_J5_PinSet+0x20>
{
#if J5_NUM_PINS == 0
  return -1; // MIOS32_BOARD_J5 not supported
#else
  if( pin >= J5_NUM_PINS )
    return -1; // pin not supported
 80124dc:	f04f 30ff 	mov.w	r0, #4294967295
 80124e0:	4770      	bx	lr

  if( !(j5_enable_mask & (1 << pin)) )
    return -2; // pin disabled
 80124e2:	f06f 0001 	mvn.w	r0, #1

  MIOS32_SYS_STM_PINSET(j5_pin[pin].port, j5_pin[pin].pin_mask, value);

  return 0; // no error
#endif
}
 80124e6:	4770      	bx	lr
 80124e8:	200001ca 	.word	0x200001ca
 80124ec:	08018030 	.word	0x08018030

080124f0 <MIOS32_BOARD_J5_PinGet>:
s32 MIOS32_BOARD_J5_PinGet(u8 pin)
{
#if J5_NUM_PINS == 0
  return -1; // MIOS32_BOARD_J5 not supported
#else
  if( pin >= J5_NUM_PINS )
 80124f0:	2807      	cmp	r0, #7
 80124f2:	d811      	bhi.n	8012518 <MIOS32_BOARD_J5_PinGet+0x28>
    return -1; // pin not supported

  if( !(j5_enable_mask & (1 << pin)) )
 80124f4:	4b0b      	ldr	r3, [pc, #44]	; (8012524 <MIOS32_BOARD_J5_PinGet+0x34>)
 80124f6:	8819      	ldrh	r1, [r3, #0]
 80124f8:	fa41 f100 	asr.w	r1, r1, r0
 80124fc:	07ca      	lsls	r2, r1, #31
 80124fe:	d50e      	bpl.n	801251e <MIOS32_BOARD_J5_PinGet+0x2e>
    return -2; // pin disabled

  return MIOS32_SYS_STM_PINGET(j5_pin[pin].port, j5_pin[pin].pin_mask);
 8012500:	4b09      	ldr	r3, [pc, #36]	; (8012528 <MIOS32_BOARD_J5_PinGet+0x38>)
 8012502:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
 8012506:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 801250a:	6911      	ldr	r1, [r2, #16]
 801250c:	8883      	ldrh	r3, [r0, #4]
 801250e:	420b      	tst	r3, r1
 8012510:	bf0c      	ite	eq
 8012512:	2000      	moveq	r0, #0
 8012514:	2001      	movne	r0, #1
 8012516:	4770      	bx	lr
{
#if J5_NUM_PINS == 0
  return -1; // MIOS32_BOARD_J5 not supported
#else
  if( pin >= J5_NUM_PINS )
    return -1; // pin not supported
 8012518:	f04f 30ff 	mov.w	r0, #4294967295
 801251c:	4770      	bx	lr

  if( !(j5_enable_mask & (1 << pin)) )
    return -2; // pin disabled
 801251e:	f06f 0001 	mvn.w	r0, #1

  return MIOS32_SYS_STM_PINGET(j5_pin[pin].port, j5_pin[pin].pin_mask);
#endif
}
 8012522:	4770      	bx	lr
 8012524:	200001ca 	.word	0x200001ca
 8012528:	08018030 	.word	0x08018030

0801252c <MIOS32_BOARD_J10_PinInit>:
{
#if J10_NUM_PINS == 0
  return -1; // MIOS32_BOARD_J10 not supported
#else

  if( pin >= J10_NUM_PINS )
 801252c:	280f      	cmp	r0, #15
//!     <LI>MIOS32_BOARD_PIN_MODE_OUTPUT_OD: pin is used as output in open drain mode
//!   </UL>
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_BOARD_J10_PinInit(u8 pin, mios32_board_pin_mode_t mode)
{
 801252e:	b510      	push	{r4, lr}
 8012530:	460a      	mov	r2, r1
#if J10_NUM_PINS == 0
  return -1; // MIOS32_BOARD_J10 not supported
#else

  if( pin >= J10_NUM_PINS )
 8012532:	d817      	bhi.n	8012564 <MIOS32_BOARD_J10_PinInit+0x38>
 8012534:	4b0d      	ldr	r3, [pc, #52]	; (801256c <MIOS32_BOARD_J10_PinInit+0x40>)
 8012536:	2101      	movs	r1, #1
    return -1; // pin not supported

  if( mode == MIOS32_BOARD_PIN_MODE_IGNORE ) {
    // don't touch
    j10_enable_mask &= ~(1 << pin);
 8012538:	fa01 f100 	lsl.w	r1, r1, r0
 801253c:	881c      	ldrh	r4, [r3, #0]
#else

  if( pin >= J10_NUM_PINS )
    return -1; // pin not supported

  if( mode == MIOS32_BOARD_PIN_MODE_IGNORE ) {
 801253e:	b922      	cbnz	r2, 801254a <MIOS32_BOARD_J10_PinInit+0x1e>
    // don't touch
    j10_enable_mask &= ~(1 << pin);
 8012540:	ea24 0001 	bic.w	r0, r4, r1
 8012544:	8018      	strh	r0, [r3, #0]

    if( status < 0 )
      return status;
  }

  return 0; // no error
 8012546:	4610      	mov	r0, r2
 8012548:	bd10      	pop	{r4, pc}
  if( mode == MIOS32_BOARD_PIN_MODE_IGNORE ) {
    // don't touch
    j10_enable_mask &= ~(1 << pin);
  } else {
    // enable pin
    j10_enable_mask |= (1 << pin);
 801254a:	4321      	orrs	r1, r4
 801254c:	8019      	strh	r1, [r3, #0]

    s32 status = MIOS32_BOARD_PinInitHlp(j10_pin[pin].port, j10_pin[pin].pin_mask, mode);
 801254e:	4b08      	ldr	r3, [pc, #32]	; (8012570 <MIOS32_BOARD_J10_PinInit+0x44>)
 8012550:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
 8012554:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 8012558:	8889      	ldrh	r1, [r1, #4]
 801255a:	f7ff fec7 	bl	80122ec <MIOS32_BOARD_PinInitHlp>
 801255e:	ea00 70e0 	and.w	r0, r0, r0, asr #31
 8012562:	bd10      	pop	{r4, pc}
#if J10_NUM_PINS == 0
  return -1; // MIOS32_BOARD_J10 not supported
#else

  if( pin >= J10_NUM_PINS )
    return -1; // pin not supported
 8012564:	f04f 30ff 	mov.w	r0, #4294967295
      return status;
  }

  return 0; // no error
#endif
}
 8012568:	bd10      	pop	{r4, pc}
 801256a:	bf00      	nop
 801256c:	200001c8 	.word	0x200001c8
 8012570:	08018070 	.word	0x08018070

08012574 <MIOS32_BOARD_J10_PinSet>:
s32 MIOS32_BOARD_J10_PinSet(u8 pin, u8 value)
{
#if J10_NUM_PINS == 0
  return -1; // MIOS32_BOARD_J10 not supported
#else
  if( pin >= J10_NUM_PINS )
 8012574:	280f      	cmp	r0, #15
 8012576:	d815      	bhi.n	80125a4 <MIOS32_BOARD_J10_PinSet+0x30>
    return -1; // pin not supported

  if( !(j10_enable_mask & (1 << pin)) )
 8012578:	4b0d      	ldr	r3, [pc, #52]	; (80125b0 <MIOS32_BOARD_J10_PinSet+0x3c>)
 801257a:	881a      	ldrh	r2, [r3, #0]
 801257c:	fa42 f200 	asr.w	r2, r2, r0
 8012580:	07d3      	lsls	r3, r2, #31
 8012582:	d512      	bpl.n	80125aa <MIOS32_BOARD_J10_PinSet+0x36>
 8012584:	4b0b      	ldr	r3, [pc, #44]	; (80125b4 <MIOS32_BOARD_J10_PinSet+0x40>)
 8012586:	00c2      	lsls	r2, r0, #3
    return -2; // pin disabled

  MIOS32_SYS_STM_PINSET(j10_pin[pin].port, j10_pin[pin].pin_mask, value);
 8012588:	b131      	cbz	r1, 8012598 <MIOS32_BOARD_J10_PinSet+0x24>
 801258a:	189a      	adds	r2, r3, r2
 801258c:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 8012590:	8891      	ldrh	r1, [r2, #4]
 8012592:	8301      	strh	r1, [r0, #24]

  return 0; // no error
 8012594:	2000      	movs	r0, #0
 8012596:	4770      	bx	lr
    return -1; // pin not supported

  if( !(j10_enable_mask & (1 << pin)) )
    return -2; // pin disabled

  MIOS32_SYS_STM_PINSET(j10_pin[pin].port, j10_pin[pin].pin_mask, value);
 8012598:	1899      	adds	r1, r3, r2
 801259a:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 801259e:	888b      	ldrh	r3, [r1, #4]
 80125a0:	8343      	strh	r3, [r0, #26]
 80125a2:	e7f7      	b.n	8012594 <MIOS32_BOARD_J10_PinSet+0x20>
{
#if J10_NUM_PINS == 0
  return -1; // MIOS32_BOARD_J10 not supported
#else
  if( pin >= J10_NUM_PINS )
    return -1; // pin not supported
 80125a4:	f04f 30ff 	mov.w	r0, #4294967295
 80125a8:	4770      	bx	lr

  if( !(j10_enable_mask & (1 << pin)) )
    return -2; // pin disabled
 80125aa:	f06f 0001 	mvn.w	r0, #1

  MIOS32_SYS_STM_PINSET(j10_pin[pin].port, j10_pin[pin].pin_mask, value);

  return 0; // no error
#endif
}
 80125ae:	4770      	bx	lr
 80125b0:	200001c8 	.word	0x200001c8
 80125b4:	08018070 	.word	0x08018070

080125b8 <MIOS32_BOARD_J10_PinGet>:
s32 MIOS32_BOARD_J10_PinGet(u8 pin)
{
#if J10_NUM_PINS == 0
  return -1; // MIOS32_BOARD_J10 not supported
#else
  if( pin >= J10_NUM_PINS )
 80125b8:	280f      	cmp	r0, #15
 80125ba:	d811      	bhi.n	80125e0 <MIOS32_BOARD_J10_PinGet+0x28>
    return -1; // pin not supported

  if( !(j10_enable_mask & (1 << pin)) )
 80125bc:	4b0b      	ldr	r3, [pc, #44]	; (80125ec <MIOS32_BOARD_J10_PinGet+0x34>)
 80125be:	8819      	ldrh	r1, [r3, #0]
 80125c0:	fa41 f100 	asr.w	r1, r1, r0
 80125c4:	07ca      	lsls	r2, r1, #31
 80125c6:	d50e      	bpl.n	80125e6 <MIOS32_BOARD_J10_PinGet+0x2e>
    return -2; // pin disabled

  return MIOS32_SYS_STM_PINGET(j10_pin[pin].port, j10_pin[pin].pin_mask);
 80125c8:	4b09      	ldr	r3, [pc, #36]	; (80125f0 <MIOS32_BOARD_J10_PinGet+0x38>)
 80125ca:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
 80125ce:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80125d2:	6911      	ldr	r1, [r2, #16]
 80125d4:	8883      	ldrh	r3, [r0, #4]
 80125d6:	420b      	tst	r3, r1
 80125d8:	bf0c      	ite	eq
 80125da:	2000      	moveq	r0, #0
 80125dc:	2001      	movne	r0, #1
 80125de:	4770      	bx	lr
{
#if J10_NUM_PINS == 0
  return -1; // MIOS32_BOARD_J10 not supported
#else
  if( pin >= J10_NUM_PINS )
    return -1; // pin not supported
 80125e0:	f04f 30ff 	mov.w	r0, #4294967295
 80125e4:	4770      	bx	lr

  if( !(j10_enable_mask & (1 << pin)) )
    return -2; // pin disabled
 80125e6:	f06f 0001 	mvn.w	r0, #1

  return MIOS32_SYS_STM_PINGET(j10_pin[pin].port, j10_pin[pin].pin_mask);
#endif
}
 80125ea:	4770      	bx	lr
 80125ec:	200001c8 	.word	0x200001c8
 80125f0:	08018070 	.word	0x08018070

080125f4 <TIM2_IRQHandler>:
//! Interrupt handlers
//! \note don't call them directly from application
/////////////////////////////////////////////////////////////////////////////
#ifndef MIOS32_DONT_ALLOCATE_TIM2_IRQn
TIMER0_IRQ_HANDLER
{
 80125f4:	b508      	push	{r3, lr}
  if( TIM_GetITStatus(TIMER0_BASE, TIM_IT_Update) != RESET ) {
 80125f6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80125fa:	2101      	movs	r1, #1
 80125fc:	f001 fc74 	bl	8013ee8 <TIM_GetITStatus>
 8012600:	b138      	cbz	r0, 8012612 <TIM2_IRQHandler+0x1e>
    TIM_ClearITPendingBit(TIMER0_BASE, TIM_IT_Update);
 8012602:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8012606:	2101      	movs	r1, #1
 8012608:	f001 fc79 	bl	8013efe <TIM_ClearITPendingBit>
    timer_callback[0]();
 801260c:	4b01      	ldr	r3, [pc, #4]	; (8012614 <TIM2_IRQHandler+0x20>)
 801260e:	6818      	ldr	r0, [r3, #0]
 8012610:	4780      	blx	r0
 8012612:	bd08      	pop	{r3, pc}
 8012614:	200001cc 	.word	0x200001cc

08012618 <TIM3_IRQHandler>:
}
#endif

#ifndef MIOS32_DONT_ALLOCATE_TIM3_IRQn
TIMER1_IRQ_HANDLER
{
 8012618:	b508      	push	{r3, lr}
  if( TIM_GetITStatus(TIMER1_BASE, TIM_IT_Update) != RESET ) {
 801261a:	4806      	ldr	r0, [pc, #24]	; (8012634 <TIM3_IRQHandler+0x1c>)
 801261c:	2101      	movs	r1, #1
 801261e:	f001 fc63 	bl	8013ee8 <TIM_GetITStatus>
 8012622:	b130      	cbz	r0, 8012632 <TIM3_IRQHandler+0x1a>
    TIM_ClearITPendingBit(TIMER1_BASE, TIM_IT_Update);
 8012624:	4803      	ldr	r0, [pc, #12]	; (8012634 <TIM3_IRQHandler+0x1c>)
 8012626:	2101      	movs	r1, #1
 8012628:	f001 fc69 	bl	8013efe <TIM_ClearITPendingBit>
    timer_callback[1]();
 801262c:	4b02      	ldr	r3, [pc, #8]	; (8012638 <TIM3_IRQHandler+0x20>)
 801262e:	6858      	ldr	r0, [r3, #4]
 8012630:	4780      	blx	r0
 8012632:	bd08      	pop	{r3, pc}
 8012634:	40000400 	.word	0x40000400
 8012638:	200001cc 	.word	0x200001cc

0801263c <TIM5_IRQHandler>:
}
#endif

#ifndef MIOS32_DONT_ALLOCATE_TIM5_IRQn
TIMER2_IRQ_HANDLER
{
 801263c:	b508      	push	{r3, lr}
  if( TIM_GetITStatus(TIMER2_BASE, TIM_IT_Update) != RESET ) {
 801263e:	4806      	ldr	r0, [pc, #24]	; (8012658 <TIM5_IRQHandler+0x1c>)
 8012640:	2101      	movs	r1, #1
 8012642:	f001 fc51 	bl	8013ee8 <TIM_GetITStatus>
 8012646:	b130      	cbz	r0, 8012656 <TIM5_IRQHandler+0x1a>
    TIM_ClearITPendingBit(TIMER2_BASE, TIM_IT_Update);
 8012648:	4803      	ldr	r0, [pc, #12]	; (8012658 <TIM5_IRQHandler+0x1c>)
 801264a:	2101      	movs	r1, #1
 801264c:	f001 fc57 	bl	8013efe <TIM_ClearITPendingBit>
    timer_callback[2]();
 8012650:	4b02      	ldr	r3, [pc, #8]	; (801265c <TIM5_IRQHandler+0x20>)
 8012652:	6898      	ldr	r0, [r3, #8]
 8012654:	4780      	blx	r0
 8012656:	bd08      	pop	{r3, pc}
 8012658:	40000c00 	.word	0x40000c00
 801265c:	200001cc 	.word	0x200001cc

08012660 <MIOS32_DELAY_Init>:
//!
//! \param[in] mode currently only mode 0 supported
//! \return < 0 if initialisation failed
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_DELAY_Init(u32 mode)
{
 8012660:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  // currently only mode 0 supported
  if( mode != 0 )
 8012662:	4604      	mov	r4, r0
 8012664:	b9b8      	cbnz	r0, 8012696 <MIOS32_DELAY_Init+0x36>
    return -1; // unsupported mode

  // enable timer clock
  if( MIOS32_DELAY_TIMER == TIM1 || MIOS32_DELAY_TIMER == TIM8 )
    RCC_APB2PeriphClockCmd(MIOS32_DELAY_TIMER_RCC, ENABLE);
 8012666:	2001      	movs	r0, #1
 8012668:	4601      	mov	r1, r0
 801266a:	f001 faeb 	bl	8013c44 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(MIOS32_DELAY_TIMER_RCC, ENABLE);

  // time base configuration
  TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
  TIM_TimeBaseStructure.TIM_Period = 65535; // maximum value
  TIM_TimeBaseStructure.TIM_Prescaler = (TIM_PERIPHERAL_FRQ/1000000)-1; // for 1 uS accuracy
 801266e:	20a7      	movs	r0, #167	; 0xa7
  else
    RCC_APB1PeriphClockCmd(MIOS32_DELAY_TIMER_RCC, ENABLE);

  // time base configuration
  TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
  TIM_TimeBaseStructure.TIM_Period = 65535; // maximum value
 8012670:	f64f 73ff 	movw	r3, #65535	; 0xffff
  TIM_TimeBaseStructure.TIM_Prescaler = (TIM_PERIPHERAL_FRQ/1000000)-1; // for 1 uS accuracy
 8012674:	f8ad 0004 	strh.w	r0, [sp, #4]
  TIM_TimeBaseStructure.TIM_ClockDivision = 0;
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
  TIM_TimeBaseInit(MIOS32_DELAY_TIMER, &TIM_TimeBaseStructure);
 8012678:	a901      	add	r1, sp, #4
 801267a:	4809      	ldr	r0, [pc, #36]	; (80126a0 <MIOS32_DELAY_Init+0x40>)
  else
    RCC_APB1PeriphClockCmd(MIOS32_DELAY_TIMER_RCC, ENABLE);

  // time base configuration
  TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
  TIM_TimeBaseStructure.TIM_Period = 65535; // maximum value
 801267c:	9302      	str	r3, [sp, #8]
  TIM_TimeBaseStructure.TIM_Prescaler = (TIM_PERIPHERAL_FRQ/1000000)-1; // for 1 uS accuracy
  TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 801267e:	f8ad 400c 	strh.w	r4, [sp, #12]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8012682:	f8ad 4006 	strh.w	r4, [sp, #6]
  TIM_TimeBaseInit(MIOS32_DELAY_TIMER, &TIM_TimeBaseStructure);
 8012686:	f001 fbe5 	bl	8013e54 <TIM_TimeBaseInit>

  // enable counter
  TIM_Cmd(MIOS32_DELAY_TIMER, ENABLE);
 801268a:	4805      	ldr	r0, [pc, #20]	; (80126a0 <MIOS32_DELAY_Init+0x40>)
 801268c:	2101      	movs	r1, #1
 801268e:	f001 fc1f 	bl	8013ed0 <TIM_Cmd>

  return 0; // no error
 8012692:	4620      	mov	r0, r4
 8012694:	e001      	b.n	801269a <MIOS32_DELAY_Init+0x3a>
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_DELAY_Init(u32 mode)
{
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode
 8012696:	f04f 30ff 	mov.w	r0, #4294967295

  // enable counter
  TIM_Cmd(MIOS32_DELAY_TIMER, ENABLE);

  return 0; // no error
}
 801269a:	b004      	add	sp, #16
 801269c:	bd10      	pop	{r4, pc}
 801269e:	bf00      	nop
 80126a0:	40010000 	.word	0x40010000

080126a4 <MIOS32_DELAY_Wait_uS>:
//! \param[in] uS delay (1..65535 microseconds)
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_DELAY_Wait_uS(u16 uS)
{
  u16 start = MIOS32_DELAY_TIMER->CNT;
 80126a4:	4b04      	ldr	r3, [pc, #16]	; (80126b8 <MIOS32_DELAY_Wait_uS+0x14>)
 80126a6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80126a8:	b289      	uxth	r1, r1

  // note that this even works on 16bit counter wrap-arounds
  while( (u16)(MIOS32_DELAY_TIMER->CNT - start) <= uS );
 80126aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80126ac:	1a52      	subs	r2, r2, r1
 80126ae:	b292      	uxth	r2, r2
 80126b0:	4282      	cmp	r2, r0
 80126b2:	d9fa      	bls.n	80126aa <MIOS32_DELAY_Wait_uS+0x6>

  return 0; // no error
}
 80126b4:	2000      	movs	r0, #0
 80126b6:	4770      	bx	lr
 80126b8:	40010000 	.word	0x40010000

080126bc <USBD_USR_DeviceDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_DeviceDescriptor( uint8_t speed , uint16_t *length)
{
  *length = sizeof(MIOS32_USB_DeviceDescriptor);
 80126bc:	2312      	movs	r3, #18
 80126be:	800b      	strh	r3, [r1, #0]
  return (uint8_t *)MIOS32_USB_DeviceDescriptor;
}
 80126c0:	4800      	ldr	r0, [pc, #0]	; (80126c4 <USBD_USR_DeviceDescriptor+0x8>)
 80126c2:	4770      	bx	lr
 80126c4:	0801816c 	.word	0x0801816c

080126c8 <USBD_USR_LangIDStrDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_LangIDStrDescriptor( uint8_t speed , uint16_t *length)
{
  *length =  sizeof(USBD_LangIDDesc);  
 80126c8:	2304      	movs	r3, #4
 80126ca:	800b      	strh	r3, [r1, #0]
  return (uint8_t *)USBD_LangIDDesc;
}
 80126cc:	4800      	ldr	r0, [pc, #0]	; (80126d0 <USBD_USR_LangIDStrDescriptor+0x8>)
 80126ce:	4770      	bx	lr
 80126d0:	08018168 	.word	0x08018168

080126d4 <USBD_USR_Init>:
*         Displays the message on LCD for host lib initialization
* @param  None
* @retval None
*/
static void USBD_USR_Init(void)
{   
 80126d4:	4770      	bx	lr

080126d6 <USBD_USR_DeviceReset>:
*         Displays the message on LCD on device Reset Event
* @param  speed : device speed
* @retval None
*/
static void USBD_USR_DeviceReset(uint8_t speed )
{
 80126d6:	4770      	bx	lr

080126d8 <USBD_USR_DeviceConnected>:
*         Displays the message on LCD on device connection Event
* @param  None
* @retval Staus
*/
static void USBD_USR_DeviceConnected (void)
{
 80126d8:	4770      	bx	lr

080126da <USBD_USR_DeviceSuspended>:
*         Displays the message on LCD on device suspend Event
* @param  None
* @retval None
*/
static void USBD_USR_DeviceSuspended(void)
{
 80126da:	4770      	bx	lr

080126dc <USBD_USR_DeviceResumed>:
*         Displays the message on LCD on device resume Event
* @param  None
* @retval None
*/
static void USBD_USR_DeviceResumed(void)
{
 80126dc:	4770      	bx	lr

080126de <USBH_USR_Init>:
 *         Displays the message on LCD for host lib initialization
 * @param  None
 * @retval None
 */
static void USBH_USR_Init(void)
{
 80126de:	4770      	bx	lr

080126e0 <USBH_USR_DeviceAttached>:
 *         Displays the message on LCD on device attached
 * @param  None
 * @retval None
 */
static void USBH_USR_DeviceAttached(void)
{  
 80126e0:	4770      	bx	lr

080126e2 <USBH_USR_UnrecoveredError>:
 * @brief  USBH_USR_UnrecoveredError
 * @param  None
 * @retval None
 */
static void USBH_USR_UnrecoveredError (void)
{
 80126e2:	4770      	bx	lr

080126e4 <USBH_USR_ResetDevice>:
 *         Reset USB Device
 * @param  None
 * @retval None
 */
static void USBH_USR_ResetDevice(void)
{
 80126e4:	4770      	bx	lr

080126e6 <USBH_USR_DeviceSpeedDetected>:
 *         Displays the message on LCD for device speed
 * @param  Devicespeed : Device Speed
 * @retval None
 */
static void USBH_USR_DeviceSpeedDetected(uint8_t DeviceSpeed)
{
 80126e6:	4770      	bx	lr

080126e8 <USBH_USR_Device_DescAvailable>:
 *         Displays the message on LCD for device descriptor
 * @param  DeviceDesc : device descriptor
 * @retval None
 */
static void USBH_USR_Device_DescAvailable(void *DeviceDesc)
{
 80126e8:	4770      	bx	lr

080126ea <USBH_USR_DeviceAddressAssigned>:
 *         USB device is successfully assigned the Address
 * @param  None
 * @retval None
 */
static void USBH_USR_DeviceAddressAssigned(void)
{
 80126ea:	4770      	bx	lr

080126ec <USBH_USR_Configuration_DescAvailable>:
 * @retval None
 */
static void USBH_USR_Configuration_DescAvailable(USBH_CfgDesc_TypeDef * cfgDesc,
						 USBH_InterfaceDesc_TypeDef *itfDesc,
						 USBH_EpDesc_TypeDef *epDesc)
{
 80126ec:	4770      	bx	lr

080126ee <USBH_USR_Manufacturer_String>:
 *         Displays the message on LCD for Manufacturer String
 * @param  ManufacturerString : Manufacturer String of Device
 * @retval None
 */
static void USBH_USR_Manufacturer_String(void *ManufacturerString)
{
 80126ee:	4770      	bx	lr

080126f0 <USBH_USR_Product_String>:
 *         Displays the message on LCD for Product String
 * @param  ProductString : Product String of Device
 * @retval None
 */
static void USBH_USR_Product_String(void *ProductString)
{
 80126f0:	4770      	bx	lr

080126f2 <USBH_USR_SerialNum_String>:
 *         Displays the message on LCD for SerialNum_String
 * @param  SerialNumString : SerialNum_String of device
 * @retval None
 */
static void USBH_USR_SerialNum_String(void *SerialNumString)
{
 80126f2:	4770      	bx	lr

080126f4 <USBH_USR_EnumerationDone>:
 *         application jump to class
 * @param  None
 * @retval None
 */
static void USBH_USR_EnumerationDone(void)
{
 80126f4:	4770      	bx	lr

080126f6 <USBH_USR_DeviceNotSupported>:
 *         Device is not supported
 * @param  None
 * @retval None
 */
static void USBH_USR_DeviceNotSupported(void)
{
 80126f6:	4770      	bx	lr

080126f8 <USBH_USR_UserInput>:
 * @retval USBH_USR_Status : User response for key button
 */
static USBH_USR_Status USBH_USR_UserInput(void)
{
  return USBH_USR_RESP_OK;
}
 80126f8:	2001      	movs	r0, #1
 80126fa:	4770      	bx	lr

080126fc <USBH_USR_OverCurrentDetected>:
 *         Device Overcurrent detection event
 * @param  None
 * @retval None
 */
static void USBH_USR_OverCurrentDetected (void)
{
 80126fc:	4770      	bx	lr

080126fe <USBH_USR_Application>:
* @retval Staus
*/
static int USBH_USR_Application(void)
{
  return (0);
}
 80126fe:	2000      	movs	r0, #0
 8012700:	4770      	bx	lr

08012702 <USBH_USR_DeInit>:
 *         Deinit User state and associated variables
 * @param  None
 * @retval None
 */
static void USBH_USR_DeInit(void)
{
 8012702:	4770      	bx	lr

08012704 <MIOS32_USB_CLASS_Setup>:
					USB_SETUP_REQ *req)
{
  // not relevant for USB MIDI

  return USBD_OK;
}
 8012704:	2000      	movs	r0, #0
 8012706:	4770      	bx	lr

08012708 <MIOS32_USB_CLASS_EP0_RxReady>:
static uint8_t  MIOS32_USB_CLASS_EP0_RxReady (void  *pdev)
{ 
  // not relevant for USB MIDI
  
  return USBD_OK;
}
 8012708:	2000      	movs	r0, #0
 801270a:	4770      	bx	lr

0801270c <MIOS32_USB_CLASS_GetCfgDesc>:
  if( MIOS32_USB_ForceSingleUSB() ) {
    *length = sizeof (MIOS32_USB_ConfigDescriptor_SingleUSB);
    return (uint8_t *)MIOS32_USB_ConfigDescriptor_SingleUSB;
  }
#endif
  *length = sizeof (MIOS32_USB_ConfigDescriptor);
 801270c:	2365      	movs	r3, #101	; 0x65
 801270e:	800b      	strh	r3, [r1, #0]
  return (uint8_t *)MIOS32_USB_ConfigDescriptor;
}
 8012710:	4800      	ldr	r0, [pc, #0]	; (8012714 <MIOS32_USB_CLASS_GetCfgDesc+0x8>)
 8012712:	4770      	bx	lr
 8012714:	0801819f 	.word	0x0801819f

08012718 <USBD_USR_SerialStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_SerialStrDescriptor( uint8_t speed , uint16_t *length)
{
 8012718:	b510      	push	{r4, lr}
  const u8 serial_number_dummy_str[] = "42";
 801271a:	4b0b      	ldr	r3, [pc, #44]	; (8012748 <USBD_USR_SerialStrDescriptor+0x30>)
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_SerialStrDescriptor( uint8_t speed , uint16_t *length)
{
 801271c:	b08c      	sub	sp, #48	; 0x30
  const u8 serial_number_dummy_str[] = "42";
 801271e:	7898      	ldrb	r0, [r3, #2]
 8012720:	881a      	ldrh	r2, [r3, #0]
 8012722:	f88d 0006 	strb.w	r0, [sp, #6]

  u8 serial_number_str[40];
  if( MIOS32_SYS_SerialNumberGet((char *)serial_number_str) >= 0 ) {
 8012726:	a802      	add	r0, sp, #8
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_SerialStrDescriptor( uint8_t speed , uint16_t *length)
{
 8012728:	460c      	mov	r4, r1
  const u8 serial_number_dummy_str[] = "42";
 801272a:	f8ad 2004 	strh.w	r2, [sp, #4]

  u8 serial_number_str[40];
  if( MIOS32_SYS_SerialNumberGet((char *)serial_number_str) >= 0 ) {
 801272e:	f7ff fc9f 	bl	8012070 <MIOS32_SYS_SerialNumberGet>
 8012732:	2800      	cmp	r0, #0
    USBD_GetString ((uint8_t*)serial_number_str, USBD_StrDesc, length);
 8012734:	bfac      	ite	ge
 8012736:	a802      	addge	r0, sp, #8
  } else {
    USBD_GetString ((uint8_t*)serial_number_dummy_str, USBD_StrDesc, length);
 8012738:	a801      	addlt	r0, sp, #4
 801273a:	4904      	ldr	r1, [pc, #16]	; (801274c <USBD_USR_SerialStrDescriptor+0x34>)
 801273c:	4622      	mov	r2, r4
 801273e:	f001 ffd3 	bl	80146e8 <USBD_GetString>
  }

  return USBD_StrDesc;
}
 8012742:	4802      	ldr	r0, [pc, #8]	; (801274c <USBD_USR_SerialStrDescriptor+0x34>)
 8012744:	b00c      	add	sp, #48	; 0x30
 8012746:	bd10      	pop	{r4, pc}
 8012748:	0801819c 	.word	0x0801819c
 801274c:	200039b4 	.word	0x200039b4

08012750 <USBD_USR_ProductStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_ProductStrDescriptor( uint8_t speed , uint16_t *length)
{
 8012750:	b507      	push	{r0, r1, r2, lr}
  const u8 product_str[] = MIOS32_USB_PRODUCT_STR;
 8012752:	4b13      	ldr	r3, [pc, #76]	; (80127a0 <USBD_USR_ProductStrDescriptor+0x50>)
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_ProductStrDescriptor( uint8_t speed , uint16_t *length)
{
 8012754:	460a      	mov	r2, r1
  const u8 product_str[] = MIOS32_USB_PRODUCT_STR;
 8012756:	6818      	ldr	r0, [r3, #0]
 8012758:	8899      	ldrh	r1, [r3, #4]
 801275a:	799b      	ldrb	r3, [r3, #6]
 801275c:	9000      	str	r0, [sp, #0]
 801275e:	f88d 3006 	strb.w	r3, [sp, #6]
 8012762:	f8ad 1004 	strh.w	r1, [sp, #4]
  char *product_str_ptr = (char *)product_str;
#ifdef MIOS32_SYS_ADDR_USB_DEV_NAME
  char *product_str_user = (char *)MIOS32_SYS_ADDR_USB_DEV_NAME;
  int j;
  u8 valid_str = 1;
  for(j=0, len=0; j<MIOS32_SYS_USB_DEV_NAME_LEN && valid_str && product_str_user[j]; ++j, ++len) {
 8012766:	2300      	movs	r3, #0
*         return the product string descriptor
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_ProductStrDescriptor( uint8_t speed , uint16_t *length)
 8012768:	480e      	ldr	r0, [pc, #56]	; (80127a4 <USBD_USR_ProductStrDescriptor+0x54>)
 801276a:	1819      	adds	r1, r3, r0
  char *product_str_ptr = (char *)product_str;
#ifdef MIOS32_SYS_ADDR_USB_DEV_NAME
  char *product_str_user = (char *)MIOS32_SYS_ADDR_USB_DEV_NAME;
  int j;
  u8 valid_str = 1;
  for(j=0, len=0; j<MIOS32_SYS_USB_DEV_NAME_LEN && valid_str && product_str_user[j]; ++j, ++len) {
 801276c:	7808      	ldrb	r0, [r1, #0]
 801276e:	b158      	cbz	r0, 8012788 <USBD_USR_ProductStrDescriptor+0x38>
    if( product_str_user[j] < 0x20 || product_str_user[j] >= 0x80 )
 8012770:	3820      	subs	r0, #32
      valid_str = 0;
 8012772:	285f      	cmp	r0, #95	; 0x5f
 8012774:	bf8c      	ite	hi
 8012776:	2000      	movhi	r0, #0
 8012778:	2001      	movls	r0, #1
  char *product_str_ptr = (char *)product_str;
#ifdef MIOS32_SYS_ADDR_USB_DEV_NAME
  char *product_str_user = (char *)MIOS32_SYS_ADDR_USB_DEV_NAME;
  int j;
  u8 valid_str = 1;
  for(j=0, len=0; j<MIOS32_SYS_USB_DEV_NAME_LEN && valid_str && product_str_user[j]; ++j, ++len) {
 801277a:	3301      	adds	r3, #1
 801277c:	2b20      	cmp	r3, #32
 801277e:	d006      	beq.n	801278e <USBD_USR_ProductStrDescriptor+0x3e>
 8012780:	2800      	cmp	r0, #0
 8012782:	d1f1      	bne.n	8012768 <USBD_USR_ProductStrDescriptor+0x18>
  const u8 product_str[] = MIOS32_USB_PRODUCT_STR;
  int len;

  // buffer[0] and [1] initialized below
  // check for user defined product string
  char *product_str_ptr = (char *)product_str;
 8012784:	4668      	mov	r0, sp
 8012786:	e005      	b.n	8012794 <USBD_USR_ProductStrDescriptor+0x44>
  u8 valid_str = 1;
  for(j=0, len=0; j<MIOS32_SYS_USB_DEV_NAME_LEN && valid_str && product_str_user[j]; ++j, ++len) {
    if( product_str_user[j] < 0x20 || product_str_user[j] >= 0x80 )
      valid_str = 0;
  }
  if( valid_str && len )
 8012788:	2b00      	cmp	r3, #0
 801278a:	d0fb      	beq.n	8012784 <USBD_USR_ProductStrDescriptor+0x34>
 801278c:	e001      	b.n	8012792 <USBD_USR_ProductStrDescriptor+0x42>
 801278e:	2800      	cmp	r0, #0
 8012790:	d0f8      	beq.n	8012784 <USBD_USR_ProductStrDescriptor+0x34>
    product_str_ptr = product_str_user;
 8012792:	4804      	ldr	r0, [pc, #16]	; (80127a4 <USBD_USR_ProductStrDescriptor+0x54>)
#endif

  USBD_GetString ((uint8_t*)product_str_ptr, USBD_StrDesc, length);
 8012794:	4904      	ldr	r1, [pc, #16]	; (80127a8 <USBD_USR_ProductStrDescriptor+0x58>)
 8012796:	f001 ffa7 	bl	80146e8 <USBD_GetString>

  return USBD_StrDesc;
}
 801279a:	4803      	ldr	r0, [pc, #12]	; (80127a8 <USBD_USR_ProductStrDescriptor+0x58>)
 801279c:	bd0e      	pop	{r1, r2, r3, pc}
 801279e:	bf00      	nop
 80127a0:	08017f85 	.word	0x08017f85
 80127a4:	08003fe0 	.word	0x08003fe0
 80127a8:	200039b4 	.word	0x200039b4

080127ac <USBD_USR_InterfaceStrDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_InterfaceStrDescriptor( uint8_t speed , uint16_t *length)
{
  return USBD_USR_ProductStrDescriptor(speed, length);
 80127ac:	f7ff bfd0 	b.w	8012750 <USBD_USR_ProductStrDescriptor>

080127b0 <USBD_USR_ConfigStrDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_ConfigStrDescriptor( uint8_t speed , uint16_t *length)
{
  return USBD_USR_ProductStrDescriptor(speed, length);
 80127b0:	f7ff bfce 	b.w	8012750 <USBD_USR_ProductStrDescriptor>

080127b4 <MIOS32_USB_CLASS_GetUsrStrDesc>:
}


static uint8_t *MIOS32_USB_CLASS_GetUsrStrDesc(uint8_t speed, uint8_t index, uint16_t *length)
{
  return USBD_USR_ProductStrDescriptor(speed, length);
 80127b4:	4611      	mov	r1, r2
 80127b6:	f7ff bfcb 	b.w	8012750 <USBD_USR_ProductStrDescriptor>
	...

080127bc <USBD_USR_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_ManufacturerStrDescriptor( uint8_t speed , uint16_t *length)
{
 80127bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  const uint8_t vendor_str[] = MIOS32_USB_VENDOR_STR;
 80127be:	4c08      	ldr	r4, [pc, #32]	; (80127e0 <USBD_USR_ManufacturerStrDescriptor+0x24>)
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_ManufacturerStrDescriptor( uint8_t speed , uint16_t *length)
{
 80127c0:	460a      	mov	r2, r1
  const uint8_t vendor_str[] = MIOS32_USB_VENDOR_STR;
 80127c2:	6820      	ldr	r0, [r4, #0]
 80127c4:	6861      	ldr	r1, [r4, #4]
 80127c6:	ab01      	add	r3, sp, #4
 80127c8:	c303      	stmia	r3!, {r0, r1}
 80127ca:	68a0      	ldr	r0, [r4, #8]
  USBD_GetString ((uint8_t*)vendor_str, USBD_StrDesc, length);
 80127cc:	4c05      	ldr	r4, [pc, #20]	; (80127e4 <USBD_USR_ManufacturerStrDescriptor+0x28>)
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
static uint8_t *  USBD_USR_ManufacturerStrDescriptor( uint8_t speed , uint16_t *length)
{
  const uint8_t vendor_str[] = MIOS32_USB_VENDOR_STR;
 80127ce:	6018      	str	r0, [r3, #0]
  USBD_GetString ((uint8_t*)vendor_str, USBD_StrDesc, length);
 80127d0:	4621      	mov	r1, r4
 80127d2:	a801      	add	r0, sp, #4
 80127d4:	f001 ff88 	bl	80146e8 <USBD_GetString>
  return USBD_StrDesc;
}
 80127d8:	4620      	mov	r0, r4
 80127da:	b004      	add	sp, #16
 80127dc:	bd10      	pop	{r4, pc}
 80127de:	bf00      	nop
 80127e0:	08017fc3 	.word	0x08017fc3
 80127e4:	200039b4 	.word	0x200039b4

080127e8 <MIOS32_USB_CLASS_DataOut>:
  * @retval status
  */
static uint8_t  MIOS32_USB_CLASS_DataOut (void *pdev, uint8_t epnum)
{      
#ifndef MIOS32_DONT_USE_USB_MIDI
  if( epnum == MIOS32_USB_MIDI_DATA_OUT_EP )
 80127e8:	2902      	cmp	r1, #2
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  MIOS32_USB_CLASS_DataOut (void *pdev, uint8_t epnum)
{      
 80127ea:	b508      	push	{r3, lr}
#ifndef MIOS32_DONT_USE_USB_MIDI
  if( epnum == MIOS32_USB_MIDI_DATA_OUT_EP )
 80127ec:	d103      	bne.n	80127f6 <MIOS32_USB_CLASS_DataOut+0xe>
    MIOS32_USB_MIDI_EP2_OUT_Callback(epnum, 0); // parameters not relevant for STM32F4
 80127ee:	4608      	mov	r0, r1
 80127f0:	2100      	movs	r1, #0
 80127f2:	f000 fc99 	bl	8013128 <MIOS32_USB_MIDI_EP2_OUT_Callback>
#endif

  return USBD_OK;
}
 80127f6:	2000      	movs	r0, #0
 80127f8:	bd08      	pop	{r3, pc}

080127fa <MIOS32_USB_CLASS_DataIn>:
  * @retval status
  */
static uint8_t  MIOS32_USB_CLASS_DataIn (void *pdev, uint8_t epnum)
{
#ifndef MIOS32_DONT_USE_USB_MIDI
  if( epnum == (MIOS32_USB_MIDI_DATA_IN_EP & 0x7f) )
 80127fa:	2901      	cmp	r1, #1
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  MIOS32_USB_CLASS_DataIn (void *pdev, uint8_t epnum)
{
 80127fc:	b508      	push	{r3, lr}
#ifndef MIOS32_DONT_USE_USB_MIDI
  if( epnum == (MIOS32_USB_MIDI_DATA_IN_EP & 0x7f) )
 80127fe:	d103      	bne.n	8012808 <MIOS32_USB_CLASS_DataIn+0xe>
    MIOS32_USB_MIDI_EP1_IN_Callback(epnum, 0); // parameters not relevant for STM32F4
 8012800:	4608      	mov	r0, r1
 8012802:	2100      	movs	r1, #0
 8012804:	f000 fc88 	bl	8013118 <MIOS32_USB_MIDI_EP1_IN_Callback>
#endif
  
  return USBD_OK;
}
 8012808:	2000      	movs	r0, #0
 801280a:	bd08      	pop	{r3, pc}

0801280c <MIOS32_USB_CLASS_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  MIOS32_USB_CLASS_DeInit (void  *pdev, 
					 uint8_t cfgidx)
{
 801280c:	b510      	push	{r4, lr}
#ifndef MIOS32_DONT_USE_USB_MIDI
  // Close Endpoints
  DCD_EP_Close(pdev, MIOS32_USB_MIDI_DATA_OUT_EP);
 801280e:	2102      	movs	r1, #2
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  MIOS32_USB_CLASS_DeInit (void  *pdev, 
					 uint8_t cfgidx)
{
 8012810:	4604      	mov	r4, r0
#ifndef MIOS32_DONT_USE_USB_MIDI
  // Close Endpoints
  DCD_EP_Close(pdev, MIOS32_USB_MIDI_DATA_OUT_EP);
 8012812:	f003 fb6a 	bl	8015eea <DCD_EP_Close>
  DCD_EP_Close(pdev, MIOS32_USB_MIDI_DATA_IN_EP);
 8012816:	4620      	mov	r0, r4
 8012818:	2181      	movs	r1, #129	; 0x81
 801281a:	f003 fb66 	bl	8015eea <DCD_EP_Close>
#endif
  
  return USBD_OK;
}
 801281e:	2000      	movs	r0, #0
 8012820:	bd10      	pop	{r4, pc}

08012822 <USBH_USR_DeviceDisconnected>:
 * @param  None
 * @retval None
 */
static void USBH_USR_DeviceDisconnected (void)
{
  MIOS32_USB_MIDI_ChangeConnectionState(0);
 8012822:	2000      	movs	r0, #0
 8012824:	f000 bb26 	b.w	8012e74 <MIOS32_USB_MIDI_ChangeConnectionState>

08012828 <USBD_USR_DeviceDisconnected>:
* @retval Staus
*/
static void USBD_USR_DeviceDisconnected (void)
{
#ifndef MIOS32_DONT_USE_USB_MIDI
  MIOS32_USB_MIDI_ChangeConnectionState(0);
 8012828:	2000      	movs	r0, #0
 801282a:	f000 bb23 	b.w	8012e74 <MIOS32_USB_MIDI_ChangeConnectionState>

0801282e <USBD_USR_DeviceConfigured>:
* @retval Staus
*/
static void USBD_USR_DeviceConfigured (void)
{
#ifndef MIOS32_DONT_USE_USB_MIDI
  MIOS32_USB_MIDI_ChangeConnectionState(1);
 801282e:	2001      	movs	r0, #1
 8012830:	f000 bb20 	b.w	8012e74 <MIOS32_USB_MIDI_ChangeConnectionState>

08012834 <MIOS32_USB_CLASS_Init>:
static uint8_t  MIOS32_USB_CLASS_Init (void  *pdev, 
				       uint8_t cfgidx)
{
#ifndef MIOS32_DONT_USE_USB_MIDI
  // Open Endpoints
  DCD_EP_Open(pdev, MIOS32_USB_MIDI_DATA_OUT_EP, MIOS32_USB_MIDI_DATA_OUT_SIZE, USB_OTG_EP_BULK);
 8012834:	2102      	movs	r1, #2
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  MIOS32_USB_CLASS_Init (void  *pdev, 
				       uint8_t cfgidx)
{
 8012836:	b510      	push	{r4, lr}
#ifndef MIOS32_DONT_USE_USB_MIDI
  // Open Endpoints
  DCD_EP_Open(pdev, MIOS32_USB_MIDI_DATA_OUT_EP, MIOS32_USB_MIDI_DATA_OUT_SIZE, USB_OTG_EP_BULK);
 8012838:	2240      	movs	r2, #64	; 0x40
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  MIOS32_USB_CLASS_Init (void  *pdev, 
				       uint8_t cfgidx)
{
 801283a:	4604      	mov	r4, r0
#ifndef MIOS32_DONT_USE_USB_MIDI
  // Open Endpoints
  DCD_EP_Open(pdev, MIOS32_USB_MIDI_DATA_OUT_EP, MIOS32_USB_MIDI_DATA_OUT_SIZE, USB_OTG_EP_BULK);
 801283c:	460b      	mov	r3, r1
 801283e:	f003 fb33 	bl	8015ea8 <DCD_EP_Open>
  DCD_EP_Open(pdev, MIOS32_USB_MIDI_DATA_IN_EP, MIOS32_USB_MIDI_DATA_IN_SIZE, USB_OTG_EP_BULK);
 8012842:	2181      	movs	r1, #129	; 0x81
 8012844:	2240      	movs	r2, #64	; 0x40
 8012846:	2302      	movs	r3, #2
 8012848:	4620      	mov	r0, r4
 801284a:	f003 fb2d 	bl	8015ea8 <DCD_EP_Open>

  // configuration for next transfer
  DCD_EP_PrepareRx(&USB_OTG_dev,
 801284e:	2102      	movs	r1, #2
 8012850:	4a03      	ldr	r2, [pc, #12]	; (8012860 <MIOS32_USB_CLASS_Init+0x2c>)
 8012852:	4804      	ldr	r0, [pc, #16]	; (8012864 <MIOS32_USB_CLASS_Init+0x30>)
 8012854:	2340      	movs	r3, #64	; 0x40
 8012856:	f003 fb61 	bl	8015f1c <DCD_EP_PrepareRx>
		   (uint8_t*)(USB_rx_buffer),
		   MIOS32_USB_MIDI_DATA_OUT_SIZE);
#endif

  return USBD_OK;
}
 801285a:	2000      	movs	r0, #0
 801285c:	bd10      	pop	{r4, pc}
 801285e:	bf00      	nop
 8012860:	20002e58 	.word	0x20002e58
 8012864:	20002e98 	.word	0x20002e98

08012868 <USB_OTG_BSP_Init>:
* @param  None
* @retval None
*/

void USB_OTG_BSP_Init(USB_OTG_CORE_HANDLE *pdev)
{
 8012868:	b573      	push	{r0, r1, r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStructure;

  RCC_AHB1PeriphClockCmd( RCC_AHB1Periph_GPIOA , ENABLE);
 801286a:	2001      	movs	r0, #1

  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 801286c:	4c24      	ldr	r4, [pc, #144]	; (8012900 <USB_OTG_BSP_Init+0x98>)

void USB_OTG_BSP_Init(USB_OTG_CORE_HANDLE *pdev)
{
  GPIO_InitTypeDef GPIO_InitStructure;

  RCC_AHB1PeriphClockCmd( RCC_AHB1Periph_GPIOA , ENABLE);
 801286e:	4601      	mov	r1, r0
 8012870:	f001 f9c4 	bl	8013bfc <RCC_AHB1PeriphClockCmd>
  /* Configure SOF VBUS ID DM DP Pins */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_12;

  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8012874:	2000      	movs	r0, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  RCC_AHB1PeriphClockCmd( RCC_AHB1Periph_GPIOA , ENABLE);

  /* Configure SOF VBUS ID DM DP Pins */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_12;
 8012876:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00

  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 801287a:	2502      	movs	r5, #2
  RCC_AHB1PeriphClockCmd( RCC_AHB1Periph_GPIOA , ENABLE);

  /* Configure SOF VBUS ID DM DP Pins */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_12;

  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 801287c:	2603      	movs	r6, #3
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 801287e:	f88d 0006 	strb.w	r0, [sp, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 8012882:	f88d 0007 	strb.w	r0, [sp, #7]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8012886:	4669      	mov	r1, sp
 8012888:	4620      	mov	r0, r4
  GPIO_InitTypeDef GPIO_InitStructure;

  RCC_AHB1PeriphClockCmd( RCC_AHB1Periph_GPIOA , ENABLE);

  /* Configure SOF VBUS ID DM DP Pins */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_12;
 801288a:	9300      	str	r3, [sp, #0]

  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 801288c:	f88d 5004 	strb.w	r5, [sp, #4]
  RCC_AHB1PeriphClockCmd( RCC_AHB1Periph_GPIOA , ENABLE);

  /* Configure SOF VBUS ID DM DP Pins */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_12;

  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8012890:	f88d 6005 	strb.w	r6, [sp, #5]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8012894:	f001 f8b6 	bl	8013a04 <GPIO_Init>

  GPIO_PinAFConfig(GPIOA,GPIO_PinSource8,GPIO_AF_OTG1_FS) ;
 8012898:	4620      	mov	r0, r4
 801289a:	2108      	movs	r1, #8
 801289c:	220a      	movs	r2, #10
 801289e:	f001 f90b 	bl	8013ab8 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource9,GPIO_AF_OTG1_FS) ;
 80128a2:	4620      	mov	r0, r4
 80128a4:	2109      	movs	r1, #9
 80128a6:	220a      	movs	r2, #10
 80128a8:	f001 f906 	bl	8013ab8 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource11,GPIO_AF_OTG1_FS) ;
 80128ac:	4620      	mov	r0, r4
 80128ae:	210b      	movs	r1, #11
 80128b0:	220a      	movs	r2, #10
 80128b2:	f001 f901 	bl	8013ab8 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource12,GPIO_AF_OTG1_FS) ;
 80128b6:	220a      	movs	r2, #10
 80128b8:	4620      	mov	r0, r4
 80128ba:	210c      	movs	r1, #12
 80128bc:	f001 f8fc 	bl	8013ab8 <GPIO_PinAFConfig>

  /* ID pin has to be an input for Host/Device switching during runtime */
  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_10;
 80128c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80128c4:	9100      	str	r1, [sp, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80128c6:	f88d 5004 	strb.w	r5, [sp, #4]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 80128ca:	4620      	mov	r0, r4
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource12,GPIO_AF_OTG1_FS) ;

  /* ID pin has to be an input for Host/Device switching during runtime */
  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_10;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
 80128cc:	2501      	movs	r5, #1
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 80128ce:	4669      	mov	r1, sp
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource12,GPIO_AF_OTG1_FS) ;

  /* ID pin has to be an input for Host/Device switching during runtime */
  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_10;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
 80128d0:	f88d 5007 	strb.w	r5, [sp, #7]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 80128d4:	f88d 6005 	strb.w	r6, [sp, #5]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 80128d8:	f001 f894 	bl	8013a04 <GPIO_Init>
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource10,GPIO_AF_OTG1_FS) ;
 80128dc:	210a      	movs	r1, #10
 80128de:	460a      	mov	r2, r1
 80128e0:	4620      	mov	r0, r4
 80128e2:	f001 f8e9 	bl	8013ab8 <GPIO_PinAFConfig>

  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80128e6:	4629      	mov	r1, r5
 80128e8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80128ec:	f001 f9aa 	bl	8013c44 <RCC_APB2PeriphClockCmd>
  RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_OTG_FS, ENABLE) ;
 80128f0:	2080      	movs	r0, #128	; 0x80
 80128f2:	4629      	mov	r1, r5
 80128f4:	f001 f98e 	bl	8013c14 <RCC_AHB2PeriphClockCmd>

  EXTI_ClearITPendingBit(EXTI_Line0);
 80128f8:	4628      	mov	r0, r5
 80128fa:	f001 f87d 	bl	80139f8 <EXTI_ClearITPendingBit>
}
 80128fe:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 8012900:	40020000 	.word	0x40020000

08012904 <USB_OTG_BSP_EnableInterrupt>:
* @param  None
* @retval None
*/
void USB_OTG_BSP_EnableInterrupt(USB_OTG_CORE_HANDLE *pdev)
{
  MIOS32_IRQ_Install(OTG_FS_IRQn, MIOS32_IRQ_USB_PRIORITY);
 8012904:	2043      	movs	r0, #67	; 0x43
 8012906:	2108      	movs	r1, #8
 8012908:	f7ff bcca 	b.w	80122a0 <MIOS32_IRQ_Install>

0801290c <OTG_FS_IRQHandler>:
  * @brief  This function handles OTG_FS Handler.
  * @param  None
  * @retval None
  */
void OTG_FS_IRQHandler(void)
{
 801290c:	b508      	push	{r3, lr}
#ifndef MIOS32_DONT_USE_USB_HOST
  if( USB_OTG_IsHostMode(&USB_OTG_dev) ) {
 801290e:	4808      	ldr	r0, [pc, #32]	; (8012930 <OTG_FS_IRQHandler+0x24>)
 8012910:	f002 fe20 	bl	8015554 <USB_OTG_IsHostMode>
 8012914:	b118      	cbz	r0, 801291e <OTG_FS_IRQHandler+0x12>
    USBH_OTG_ISR_Handler(&USB_OTG_dev);
 8012916:	4806      	ldr	r0, [pc, #24]	; (8012930 <OTG_FS_IRQHandler+0x24>)
 8012918:	f005 f80e 	bl	8017938 <USBH_OTG_ISR_Handler>
 801291c:	e002      	b.n	8012924 <OTG_FS_IRQHandler+0x18>
  } else {
    USBD_OTG_ISR_Handler(&USB_OTG_dev);
 801291e:	4804      	ldr	r0, [pc, #16]	; (8012930 <OTG_FS_IRQHandler+0x24>)
 8012920:	f003 fb7a 	bl	8016018 <USBD_OTG_ISR_Handler>
  }

  STM32_USBO_OTG_ISR_Handler(&USB_OTG_dev);
 8012924:	4802      	ldr	r0, [pc, #8]	; (8012930 <OTG_FS_IRQHandler+0x24>)
#else
  USBD_OTG_ISR_Handler(&USB_OTG_dev);
#endif
}
 8012926:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    USBH_OTG_ISR_Handler(&USB_OTG_dev);
  } else {
    USBD_OTG_ISR_Handler(&USB_OTG_dev);
  }

  STM32_USBO_OTG_ISR_Handler(&USB_OTG_dev);
 801292a:	f005 b88f 	b.w	8017a4c <STM32_USBO_OTG_ISR_Handler>
 801292e:	bf00      	nop
 8012930:	20002e98 	.word	0x20002e98

08012934 <USB_OTG_BSP_uDelay>:
* @param  usec : Value of delay required in micro sec
* @retval None
*/
void USB_OTG_BSP_uDelay (const uint32_t usec)
{
  MIOS32_DELAY_Wait_uS(usec);
 8012934:	b280      	uxth	r0, r0
 8012936:	f7ff beb5 	b.w	80126a4 <MIOS32_DELAY_Wait_uS>

0801293a <USB_OTG_BSP_mDelay>:
* @param  msec : Value of delay required in milli sec
* @retval None
*/
void USB_OTG_BSP_mDelay (const uint32_t msec)
{
  USB_OTG_BSP_uDelay(msec * 1000);
 801293a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801293e:	4358      	muls	r0, r3
* @param  usec : Value of delay required in micro sec
* @retval None
*/
void USB_OTG_BSP_uDelay (const uint32_t usec)
{
  MIOS32_DELAY_Wait_uS(usec);
 8012940:	b280      	uxth	r0, r0
 8012942:	f7ff beaf 	b.w	80126a4 <MIOS32_DELAY_Wait_uS>
	...

08012948 <USB_OTG_BSP_ConfigVBUS>:
  *         Configures the IO for the Vbus and OverCurrent
  * @param  None
  * @retval None
  */
void  USB_OTG_BSP_ConfigVBUS(USB_OTG_CORE_HANDLE *pdev)
{
 8012948:	b537      	push	{r0, r1, r2, r4, r5, lr}
#ifndef MIOS32_DONT_USE_USB_HOST
  GPIO_InitTypeDef GPIO_InitStructure; 
  
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);  
 801294a:	2004      	movs	r0, #4
 801294c:	2101      	movs	r1, #1
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 801294e:	4d0e      	ldr	r5, [pc, #56]	; (8012988 <USB_OTG_BSP_ConfigVBUS+0x40>)
void  USB_OTG_BSP_ConfigVBUS(USB_OTG_CORE_HANDLE *pdev)
{
#ifndef MIOS32_DONT_USE_USB_HOST
  GPIO_InitTypeDef GPIO_InitStructure; 
  
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);  
 8012950:	f001 f954 	bl	8013bfc <RCC_AHB1PeriphClockCmd>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8012954:	2000      	movs	r0, #0
#ifndef MIOS32_DONT_USE_USB_HOST
  GPIO_InitTypeDef GPIO_InitStructure; 
  
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);  
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
 8012956:	2401      	movs	r4, #1
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8012958:	2303      	movs	r3, #3
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 801295a:	f88d 0006 	strb.w	r0, [sp, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 801295e:	f88d 0007 	strb.w	r0, [sp, #7]
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 8012962:	4669      	mov	r1, sp
 8012964:	4628      	mov	r0, r5
  GPIO_InitTypeDef GPIO_InitStructure; 
  
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);  
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8012966:	f88d 3005 	strb.w	r3, [sp, #5]
#ifndef MIOS32_DONT_USE_USB_HOST
  GPIO_InitTypeDef GPIO_InitStructure; 
  
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);  
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
 801296a:	9400      	str	r4, [sp, #0]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 801296c:	f88d 4004 	strb.w	r4, [sp, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 8012970:	f001 f848 	bl	8013a04 <GPIO_Init>

  /* By Default, DISABLE is needed on output of the Power Switch */
  GPIO_SetBits(GPIOC, GPIO_Pin_0);
 8012974:	4628      	mov	r0, r5
 8012976:	4621      	mov	r1, r4
 8012978:	f001 f89a 	bl	8013ab0 <GPIO_SetBits>
* @param  usec : Value of delay required in micro sec
* @retval None
*/
void USB_OTG_BSP_uDelay (const uint32_t usec)
{
  MIOS32_DELAY_Wait_uS(usec);
 801297c:	f44f 6054 	mov.w	r0, #3392	; 0xd40
 8012980:	f7ff fe90 	bl	80126a4 <MIOS32_DELAY_Wait_uS>
  /* By Default, DISABLE is needed on output of the Power Switch */
  GPIO_SetBits(GPIOC, GPIO_Pin_0);
  
  USB_OTG_BSP_mDelay(200);   /* Delay is need for stabilising the Vbus Low in Reset Condition, when Vbus=1 and Reset-button is pressed by user */
#endif
}
 8012984:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8012986:	bf00      	nop
 8012988:	40020800 	.word	0x40020800

0801298c <USB_OTG_BSP_DriveVBUS>:
  clears this bit on an overcurrent condition.
  */
  if (0 == state)
  { 
    /* DISABLE is needed on output of the Power Switch */
    GPIO_SetBits(GPIOC, GPIO_Pin_0);
 801298c:	4803      	ldr	r0, [pc, #12]	; (801299c <USB_OTG_BSP_DriveVBUS+0x10>)
  
  Bit 12 PPWR: Port power
  The application uses this field to control power to this port, and the core 
  clears this bit on an overcurrent condition.
  */
  if (0 == state)
 801298e:	b911      	cbnz	r1, 8012996 <USB_OTG_BSP_DriveVBUS+0xa>
  { 
    /* DISABLE is needed on output of the Power Switch */
    GPIO_SetBits(GPIOC, GPIO_Pin_0);
 8012990:	2101      	movs	r1, #1
 8012992:	f001 b88d 	b.w	8013ab0 <GPIO_SetBits>
  }
  else
  {
    /*ENABLE the Power Switch by driving the Enable LOW */
    GPIO_ResetBits(GPIOC, GPIO_Pin_0);
 8012996:	2101      	movs	r1, #1
 8012998:	f001 b88c 	b.w	8013ab4 <GPIO_ResetBits>
 801299c:	40020800 	.word	0x40020800

080129a0 <MIOS32_USB_IsInitialized>:
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_IsInitialized(void)
{
  // we assume that initialisation has been done when B-Session valid flag is set
  __IO USB_OTG_GREGS *GREGS = (USB_OTG_GREGS *)(USB_OTG_FS_BASE_ADDR + USB_OTG_CORE_GLOBAL_REGS_OFFSET);
  return (GREGS->GOTGCTL & (1 << 19)) ? 1 : 0;
 80129a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80129a4:	6818      	ldr	r0, [r3, #0]
}
 80129a6:	f3c0 40c0 	ubfx	r0, r0, #19, #1
 80129aa:	4770      	bx	lr

080129ac <MIOS32_USB_ForceSingleUSB>:
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_ForceSingleUSB(void)
{
  u8 *single_usb_confirm = (u8 *)MIOS32_SYS_ADDR_SINGLE_USB_CONFIRM;
  u8 *single_usb = (u8 *)MIOS32_SYS_ADDR_SINGLE_USB;
  if( *single_usb_confirm == 0x42 && *single_usb < 0x80 )
 80129ac:	4b06      	ldr	r3, [pc, #24]	; (80129c8 <MIOS32_USB_ForceSingleUSB+0x1c>)
 80129ae:	7818      	ldrb	r0, [r3, #0]
 80129b0:	2842      	cmp	r0, #66	; 0x42
 80129b2:	d106      	bne.n	80129c2 <MIOS32_USB_ForceSingleUSB+0x16>
 80129b4:	4905      	ldr	r1, [pc, #20]	; (80129cc <MIOS32_USB_ForceSingleUSB+0x20>)
 80129b6:	7808      	ldrb	r0, [r1, #0]
 80129b8:	f010 0f80 	tst.w	r0, #128	; 0x80
    return *single_usb;
 80129bc:	bf18      	it	ne
 80129be:	2000      	movne	r0, #0
 80129c0:	4770      	bx	lr

  return 0;
 80129c2:	2000      	movs	r0, #0
}
 80129c4:	4770      	bx	lr
 80129c6:	bf00      	nop
 80129c8:	08003fd4 	.word	0x08003fd4
 80129cc:	08003fd5 	.word	0x08003fd5

080129d0 <MIOS32_USB_ForceDeviceMode>:
#ifdef MIOS32_DONT_USE_USB_HOST
  return 1;
#else
  u8 *enforce_usb_device_confirm = (u8 *)MIOS32_SYS_ADDR_ENFORCE_USB_DEVICE_CONFIRM;
  u8 *enforce_usb_device = (u8 *)MIOS32_SYS_ADDR_ENFORCE_USB_DEVICE;
  if( *enforce_usb_device_confirm == 0x42 && *enforce_usb_device < 0x80 )
 80129d0:	4b06      	ldr	r3, [pc, #24]	; (80129ec <MIOS32_USB_ForceDeviceMode+0x1c>)
 80129d2:	7818      	ldrb	r0, [r3, #0]
 80129d4:	2842      	cmp	r0, #66	; 0x42
 80129d6:	d106      	bne.n	80129e6 <MIOS32_USB_ForceDeviceMode+0x16>
 80129d8:	4905      	ldr	r1, [pc, #20]	; (80129f0 <MIOS32_USB_ForceDeviceMode+0x20>)
 80129da:	7808      	ldrb	r0, [r1, #0]
 80129dc:	f010 0f80 	tst.w	r0, #128	; 0x80
    return *enforce_usb_device;
 80129e0:	bf18      	it	ne
 80129e2:	2000      	movne	r0, #0
 80129e4:	4770      	bx	lr

  return 0;
 80129e6:	2000      	movs	r0, #0
#endif
}
 80129e8:	4770      	bx	lr
 80129ea:	bf00      	nop
 80129ec:	08003fd6 	.word	0x08003fd6
 80129f0:	08003fd7 	.word	0x08003fd7

080129f4 <MIOS32_USB_Init>:
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_COM or \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_Init(u32 mode)
{
  // currently only mode 0..2 supported
  if( mode >= 3 )
 80129f4:	2802      	cmp	r0, #2
//!   </UL>
//! \return < 0 if initialisation failed
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_COM or \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_Init(u32 mode)
{
 80129f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80129f8:	4605      	mov	r5, r0
  // currently only mode 0..2 supported
  if( mode >= 3 )
 80129fa:	d85d      	bhi.n	8012ab8 <MIOS32_USB_Init+0xc4>
    return -1; // unsupported mode

  u8 usb_is_initialized = MIOS32_USB_IsInitialized();
 80129fc:	f7ff ffd0 	bl	80129a0 <MIOS32_USB_IsInitialized>

#ifndef MIOS32_DONT_USE_USB_HOST  
  /* Init Host Library */
  USBH_Init(&USB_OTG_dev, 
 8012a00:	4c2f      	ldr	r4, [pc, #188]	; (8012ac0 <MIOS32_USB_Init+0xcc>)
            USB_OTG_FS_CORE_ID,
            &USB_Host,
            (USBH_Class_cb_TypeDef *)&MIOS32_MIDI_USBH_Callbacks, 
            (USBH_Usr_cb_TypeDef *)&USBH_USR_Callbacks);
 8012a02:	4b30      	ldr	r3, [pc, #192]	; (8012ac4 <MIOS32_USB_Init+0xd0>)

  u8 usb_is_initialized = MIOS32_USB_IsInitialized();

#ifndef MIOS32_DONT_USE_USB_HOST  
  /* Init Host Library */
  USBH_Init(&USB_OTG_dev, 
 8012a04:	4a30      	ldr	r2, [pc, #192]	; (8012ac8 <MIOS32_USB_Init+0xd4>)
 8012a06:	9300      	str	r3, [sp, #0]
{
  // currently only mode 0..2 supported
  if( mode >= 3 )
    return -1; // unsupported mode

  u8 usb_is_initialized = MIOS32_USB_IsInitialized();
 8012a08:	4606      	mov	r6, r0

#ifndef MIOS32_DONT_USE_USB_HOST  
  /* Init Host Library */
  USBH_Init(&USB_OTG_dev, 
 8012a0a:	2101      	movs	r1, #1
 8012a0c:	4620      	mov	r0, r4
 8012a0e:	4b2f      	ldr	r3, [pc, #188]	; (8012acc <MIOS32_USB_Init+0xd8>)
 8012a10:	f001 feab 	bl	801476a <USBH_Init>
            (USBH_Class_cb_TypeDef *)&MIOS32_MIDI_USBH_Callbacks, 
            (USBH_Usr_cb_TypeDef *)&USBH_USR_Callbacks);
#endif

  // change connection state to disconnected
  USBD_USR_DeviceDisconnected();
 8012a14:	f7ff ff08 	bl	8012828 <USBD_USR_DeviceDisconnected>

  if( mode == 0 && usb_is_initialized ) {
 8012a18:	bb3d      	cbnz	r5, 8012a6a <MIOS32_USB_Init+0x76>
 8012a1a:	f016 0fff 	tst.w	r6, #255	; 0xff
 8012a1e:	d024      	beq.n	8012a6a <MIOS32_USB_Init+0x76>
#else

    // don't run complete driver init sequence to ensure that the connection doesn't get lost!

    // phys interface re-initialisation (just to ensure)
    USB_OTG_BSP_Init(&USB_OTG_dev);
 8012a20:	4620      	mov	r0, r4
 8012a22:	f7ff ff21 	bl	8012868 <USB_OTG_BSP_Init>

    // USBD_Init sets these pointer in the handle
    USB_OTG_dev.dev.class_cb = (USBD_Class_cb_TypeDef *)&MIOS32_USB_CLASS_cb;
 8012a26:	492a      	ldr	r1, [pc, #168]	; (8012ad0 <MIOS32_USB_Init+0xdc>)
    USB_OTG_dev.dev.usr_cb = (USBD_Usr_cb_TypeDef *)&USBD_USR_Callbacks;
 8012a28:	4a2a      	ldr	r2, [pc, #168]	; (8012ad4 <MIOS32_USB_Init+0xe0>)
    USB_OTG_dev.dev.usr_device = (USBD_DEVICE *)&USR_desc;
 8012a2a:	4b2b      	ldr	r3, [pc, #172]	; (8012ad8 <MIOS32_USB_Init+0xe4>)

    // phys interface re-initialisation (just to ensure)
    USB_OTG_BSP_Init(&USB_OTG_dev);

    // USBD_Init sets these pointer in the handle
    USB_OTG_dev.dev.class_cb = (USBD_Class_cb_TypeDef *)&MIOS32_USB_CLASS_cb;
 8012a2c:	f8c4 15e4 	str.w	r1, [r4, #1508]	; 0x5e4
    USB_OTG_dev.dev.usr_cb = (USBD_Usr_cb_TypeDef *)&USBD_USR_Callbacks;
    USB_OTG_dev.dev.usr_device = (USBD_DEVICE *)&USR_desc;

    // some additional handle init stuff which doesn't hurt
    USB_OTG_SelectCore(&USB_OTG_dev, USB_OTG_FS_CORE_ID);
 8012a30:	4620      	mov	r0, r4
 8012a32:	2101      	movs	r1, #1
    // phys interface re-initialisation (just to ensure)
    USB_OTG_BSP_Init(&USB_OTG_dev);

    // USBD_Init sets these pointer in the handle
    USB_OTG_dev.dev.class_cb = (USBD_Class_cb_TypeDef *)&MIOS32_USB_CLASS_cb;
    USB_OTG_dev.dev.usr_cb = (USBD_Usr_cb_TypeDef *)&USBD_USR_Callbacks;
 8012a34:	f8c4 25e8 	str.w	r2, [r4, #1512]	; 0x5e8
    USB_OTG_dev.dev.usr_device = (USBD_DEVICE *)&USR_desc;
 8012a38:	f8c4 35ec 	str.w	r3, [r4, #1516]	; 0x5ec

    // some additional handle init stuff which doesn't hurt
    USB_OTG_SelectCore(&USB_OTG_dev, USB_OTG_FS_CORE_ID);
 8012a3c:	f002 fc7a 	bl	8015334 <USB_OTG_SelectCore>

    // enable interrupts
    USB_OTG_EnableGlobalInt(&USB_OTG_dev);
 8012a40:	4620      	mov	r0, r4
 8012a42:	f002 fd24 	bl	801548e <USB_OTG_EnableGlobalInt>
    USB_OTG_EnableDevInt(&USB_OTG_dev);
 8012a46:	4620      	mov	r0, r4
 8012a48:	f002 ff7f 	bl	801594a <USB_OTG_EnableDevInt>
    USB_OTG_BSP_EnableInterrupt(&USB_OTG_dev);
 8012a4c:	4620      	mov	r0, r4
 8012a4e:	f7ff ff59 	bl	8012904 <USB_OTG_BSP_EnableInterrupt>
#endif

    // select configuration
    USB_OTG_dev.dev.device_config = 1;
    USB_OTG_dev.dev.device_status = USB_OTG_CONFIGURED;
 8012a52:	2003      	movs	r0, #3
    USB_OTG_EnableDevInt(&USB_OTG_dev);
    USB_OTG_BSP_EnableInterrupt(&USB_OTG_dev);
#endif

    // select configuration
    USB_OTG_dev.dev.device_config = 1;
 8012a54:	2101      	movs	r1, #1
    USB_OTG_dev.dev.device_status = USB_OTG_CONFIGURED;
 8012a56:	f884 0112 	strb.w	r0, [r4, #274]	; 0x112

    // init endpoints
    MIOS32_USB_CLASS_Init(&USB_OTG_dev, 1);
 8012a5a:	4620      	mov	r0, r4
    USB_OTG_EnableDevInt(&USB_OTG_dev);
    USB_OTG_BSP_EnableInterrupt(&USB_OTG_dev);
#endif

    // select configuration
    USB_OTG_dev.dev.device_config = 1;
 8012a5c:	f884 1110 	strb.w	r1, [r4, #272]	; 0x110
    USB_OTG_dev.dev.device_status = USB_OTG_CONFIGURED;

    // init endpoints
    MIOS32_USB_CLASS_Init(&USB_OTG_dev, 1);
 8012a60:	f7ff fee8 	bl	8012834 <MIOS32_USB_CLASS_Init>

    // assume that device is (still) configured
    USBD_USR_DeviceConfigured();
 8012a64:	f7ff fee3 	bl	801282e <USBD_USR_DeviceConfigured>
 8012a68:	e011      	b.n	8012a8e <MIOS32_USB_Init+0x9a>
    // init USB device and driver
    USBD_Init(&USB_OTG_dev,
	      USB_OTG_FS_CORE_ID,
	      (USBD_DEVICE *)&USR_desc,
	      (USBD_Class_cb_TypeDef *)&MIOS32_USB_CLASS_cb,
	      (USBD_Usr_cb_TypeDef *)&USBD_USR_Callbacks);
 8012a6a:	481a      	ldr	r0, [pc, #104]	; (8012ad4 <MIOS32_USB_Init+0xe0>)

    // assume that device is (still) configured
    USBD_USR_DeviceConfigured();
  } else {
    // init USB device and driver
    USBD_Init(&USB_OTG_dev,
 8012a6c:	4a1a      	ldr	r2, [pc, #104]	; (8012ad8 <MIOS32_USB_Init+0xe4>)
 8012a6e:	4b18      	ldr	r3, [pc, #96]	; (8012ad0 <MIOS32_USB_Init+0xdc>)
 8012a70:	9000      	str	r0, [sp, #0]
 8012a72:	2101      	movs	r1, #1
 8012a74:	4812      	ldr	r0, [pc, #72]	; (8012ac0 <MIOS32_USB_Init+0xcc>)
 8012a76:	f001 fbc7 	bl	8014208 <USBD_Init>
	      (USBD_DEVICE *)&USR_desc,
	      (USBD_Class_cb_TypeDef *)&MIOS32_USB_CLASS_cb,
	      (USBD_Usr_cb_TypeDef *)&USBD_USR_Callbacks);

    // disconnect device
    DCD_DevDisconnect(&USB_OTG_dev);
 8012a7a:	4811      	ldr	r0, [pc, #68]	; (8012ac0 <MIOS32_USB_Init+0xcc>)
 8012a7c:	f003 facb 	bl	8016016 <DCD_DevDisconnect>
* @param  usec : Value of delay required in micro sec
* @retval None
*/
void USB_OTG_BSP_uDelay (const uint32_t usec)
{
  MIOS32_DELAY_Wait_uS(usec);
 8012a80:	f24c 3050 	movw	r0, #50000	; 0xc350
 8012a84:	f7ff fe0e 	bl	80126a4 <MIOS32_DELAY_Wait_uS>

    // wait 50 mS
    USB_OTG_BSP_mDelay(50);

    // connect device
    DCD_DevConnect(&USB_OTG_dev);
 8012a88:	480d      	ldr	r0, [pc, #52]	; (8012ac0 <MIOS32_USB_Init+0xcc>)
 8012a8a:	f003 fac3 	bl	8016014 <DCD_DevConnect>
  }

#ifndef MIOS32_DONT_USE_USB_HOST
  // switch to host or device mode depending on the ID pin (Bootloader allows to overrule this pin)
  if( MIOS32_USB_ForceDeviceMode() || MIOS32_SYS_STM_PINGET(GPIOA, GPIO_Pin_10) ) {
 8012a8e:	f7ff ff9f 	bl	80129d0 <MIOS32_USB_ForceDeviceMode>
 8012a92:	b920      	cbnz	r0, 8012a9e <MIOS32_USB_Init+0xaa>
 8012a94:	4c11      	ldr	r4, [pc, #68]	; (8012adc <MIOS32_USB_Init+0xe8>)
 8012a96:	6921      	ldr	r1, [r4, #16]
 8012a98:	f411 6480 	ands.w	r4, r1, #1024	; 0x400
 8012a9c:	d005      	beq.n	8012aaa <MIOS32_USB_Init+0xb6>
    USB_OTG_SetCurrentMode(&USB_OTG_dev, DEVICE_MODE);
 8012a9e:	4808      	ldr	r0, [pc, #32]	; (8012ac0 <MIOS32_USB_Init+0xcc>)
 8012aa0:	2100      	movs	r1, #0
 8012aa2:	f002 fd3b 	bl	801551c <USB_OTG_SetCurrentMode>
    USB_OTG_DriveVbus(&USB_OTG_dev, 1);
    USB_OTG_SetCurrentMode(&USB_OTG_dev, HOST_MODE);
  }
#endif

  return 0; // no error
 8012aa6:	2000      	movs	r0, #0
  }

#ifndef MIOS32_DONT_USE_USB_HOST
  // switch to host or device mode depending on the ID pin (Bootloader allows to overrule this pin)
  if( MIOS32_USB_ForceDeviceMode() || MIOS32_SYS_STM_PINGET(GPIOA, GPIO_Pin_10) ) {
    USB_OTG_SetCurrentMode(&USB_OTG_dev, DEVICE_MODE);
 8012aa8:	e008      	b.n	8012abc <MIOS32_USB_Init+0xc8>
  } else {
    USB_OTG_DriveVbus(&USB_OTG_dev, 1);
 8012aaa:	4805      	ldr	r0, [pc, #20]	; (8012ac0 <MIOS32_USB_Init+0xcc>)
 8012aac:	2101      	movs	r1, #1
 8012aae:	f002 fd8c 	bl	80155ca <USB_OTG_DriveVbus>
    USB_OTG_SetCurrentMode(&USB_OTG_dev, HOST_MODE);
 8012ab2:	4803      	ldr	r0, [pc, #12]	; (8012ac0 <MIOS32_USB_Init+0xcc>)
 8012ab4:	2101      	movs	r1, #1
 8012ab6:	e7f4      	b.n	8012aa2 <MIOS32_USB_Init+0xae>
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_Init(u32 mode)
{
  // currently only mode 0..2 supported
  if( mode >= 3 )
    return -1; // unsupported mode
 8012ab8:	f04f 30ff 	mov.w	r0, #4294967295
    USB_OTG_SetCurrentMode(&USB_OTG_dev, HOST_MODE);
  }
#endif

  return 0; // no error
}
 8012abc:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 8012abe:	bf00      	nop
 8012ac0:	20002e98 	.word	0x20002e98
 8012ac4:	080180f0 	.word	0x080180f0
 8012ac8:	2000392c 	.word	0x2000392c
 8012acc:	08018220 	.word	0x08018220
 8012ad0:	08018138 	.word	0x08018138
 8012ad4:	08018204 	.word	0x08018204
 8012ad8:	08018180 	.word	0x08018180
 8012adc:	40020000 	.word	0x40020000

08012ae0 <USBH_ClassRequest>:
 */
static USBH_Status USBH_ClassRequest(USB_OTG_CORE_HANDLE *pdev, void *phost)
{
  USBH_Status status = USBH_OK;
  return status;
}
 8012ae0:	2000      	movs	r0, #0
 8012ae2:	4770      	bx	lr

08012ae4 <USBH_InterfaceDeInit>:
 * @param  pdev: Selected device
 * @param  hdev: Selected device property
 * @retval None
 */
static void USBH_InterfaceDeInit(USB_OTG_CORE_HANDLE *pdev, void *phost)
{
 8012ae4:	b538      	push	{r3, r4, r5, lr}
  if( USBH_hc_num_out ) {
 8012ae6:	4d0c      	ldr	r5, [pc, #48]	; (8012b18 <USBH_InterfaceDeInit+0x34>)
 8012ae8:	7829      	ldrb	r1, [r5, #0]
 * @param  pdev: Selected device
 * @param  hdev: Selected device property
 * @retval None
 */
static void USBH_InterfaceDeInit(USB_OTG_CORE_HANDLE *pdev, void *phost)
{
 8012aea:	4604      	mov	r4, r0
  if( USBH_hc_num_out ) {
 8012aec:	b139      	cbz	r1, 8012afe <USBH_InterfaceDeInit+0x1a>
    USB_OTG_HC_Halt(pdev, USBH_hc_num_out);
 8012aee:	f002 fef5 	bl	80158dc <USB_OTG_HC_Halt>
    USBH_Free_Channel  (pdev, USBH_hc_num_out);
 8012af2:	4620      	mov	r0, r4
 8012af4:	7829      	ldrb	r1, [r5, #0]
 8012af6:	f002 f94d 	bl	8014d94 <USBH_Free_Channel>
    USBH_hc_num_out = 0;     /* Reset the Channel as Free */
 8012afa:	2300      	movs	r3, #0
 8012afc:	702b      	strb	r3, [r5, #0]
  }

  if( USBH_hc_num_in ) {
 8012afe:	4d07      	ldr	r5, [pc, #28]	; (8012b1c <USBH_InterfaceDeInit+0x38>)
 8012b00:	7829      	ldrb	r1, [r5, #0]
 8012b02:	b141      	cbz	r1, 8012b16 <USBH_InterfaceDeInit+0x32>
    USB_OTG_HC_Halt(pdev, USBH_hc_num_in);
 8012b04:	4620      	mov	r0, r4
 8012b06:	f002 fee9 	bl	80158dc <USB_OTG_HC_Halt>
    USBH_Free_Channel  (pdev, USBH_hc_num_in);
 8012b0a:	4620      	mov	r0, r4
 8012b0c:	7829      	ldrb	r1, [r5, #0]
 8012b0e:	f002 f941 	bl	8014d94 <USBH_Free_Channel>
    USBH_hc_num_in = 0;     /* Reset the Channel as Free */
 8012b12:	2000      	movs	r0, #0
 8012b14:	7028      	strb	r0, [r5, #0]
 8012b16:	bd38      	pop	{r3, r4, r5, pc}
 8012b18:	20000437 	.word	0x20000437
 8012b1c:	20000432 	.word	0x20000432

08012b20 <MIOS32_USB_MIDI_RxBufferHandler>:
//! USB Device Mode
//!
//! This handler receives new packages if the Tx buffer is not full
/////////////////////////////////////////////////////////////////////////////
static void MIOS32_USB_MIDI_RxBufferHandler(void)
{
 8012b20:	b570      	push	{r4, r5, r6, lr}
  s16 count;

  // before using the handle: ensure that device (and class) already configured
  if( USB_OTG_dev.dev.class_cb == NULL ) {
 8012b22:	4c24      	ldr	r4, [pc, #144]	; (8012bb4 <MIOS32_USB_MIDI_RxBufferHandler+0x94>)
 8012b24:	f8d4 35e4 	ldr.w	r3, [r4, #1508]	; 0x5e4
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d042      	beq.n	8012bb2 <MIOS32_USB_MIDI_RxBufferHandler+0x92>
    return;
  }

  // atomic operation to avoid conflict with other interrupts
  MIOS32_IRQ_Disable();
 8012b2c:	f7ff fb90 	bl	8012250 <MIOS32_IRQ_Disable>

  // check if we can receive new data and get packages to be received from OUT pipe
  u32 ep_num = MIOS32_USB_MIDI_DATA_OUT_EP & 0x7f;
  USB_OTG_EP *ep = &USB_OTG_dev.dev.out_ep[ep_num];
  if( rx_buffer_new_data && (count=ep->xfer_count>>2) ) {
 8012b30:	4821      	ldr	r0, [pc, #132]	; (8012bb8 <MIOS32_USB_MIDI_RxBufferHandler+0x98>)
 8012b32:	7801      	ldrb	r1, [r0, #0]
 8012b34:	2900      	cmp	r1, #0
 8012b36:	d038      	beq.n	8012baa <MIOS32_USB_MIDI_RxBufferHandler+0x8a>
 8012b38:	f8d4 63dc 	ldr.w	r6, [r4, #988]	; 0x3dc
 8012b3c:	08b6      	lsrs	r6, r6, #2
 8012b3e:	b2b3      	uxth	r3, r6
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d032      	beq.n	8012baa <MIOS32_USB_MIDI_RxBufferHandler+0x8a>
    // check if buffer is free
    if( count < (MIOS32_USB_MIDI_RX_BUFFER_SIZE-rx_buffer_size) ) {
 8012b44:	4a1d      	ldr	r2, [pc, #116]	; (8012bbc <MIOS32_USB_MIDI_RxBufferHandler+0x9c>)
 8012b46:	8810      	ldrh	r0, [r2, #0]
 8012b48:	b281      	uxth	r1, r0
 8012b4a:	b21b      	sxth	r3, r3
 8012b4c:	f1c1 0240 	rsb	r2, r1, #64	; 0x40
 8012b50:	4293      	cmp	r3, r2
 8012b52:	da2a      	bge.n	8012baa <MIOS32_USB_MIDI_RxBufferHandler+0x8a>
 8012b54:	2400      	movs	r4, #0

      // copy received packages into receive buffer
      // this operation should be atomic
      do {
	mios32_midi_package_t package;
	package.ALL = *buf_addr++;
 8012b56:	4d1a      	ldr	r5, [pc, #104]	; (8012bc0 <MIOS32_USB_MIDI_RxBufferHandler+0xa0>)
 8012b58:	f855 5024 	ldr.w	r5, [r5, r4, lsl #2]

	if( MIOS32_MIDI_SendPackageToRxCallback(USB0 + package.cable, package) == 0 ) {
 8012b5c:	f3c5 1003 	ubfx	r0, r5, #4, #4
 8012b60:	3010      	adds	r0, #16
 8012b62:	4629      	mov	r1, r5
 8012b64:	f7fe fd4c 	bl	8011600 <MIOS32_MIDI_SendPackageToRxCallback>
 8012b68:	b988      	cbnz	r0, 8012b8e <MIOS32_USB_MIDI_RxBufferHandler+0x6e>
	  rx_buffer[rx_buffer_head] = package.ALL;
 8012b6a:	4b16      	ldr	r3, [pc, #88]	; (8012bc4 <MIOS32_USB_MIDI_RxBufferHandler+0xa4>)
 8012b6c:	4a16      	ldr	r2, [pc, #88]	; (8012bc8 <MIOS32_USB_MIDI_RxBufferHandler+0xa8>)
 8012b6e:	8819      	ldrh	r1, [r3, #0]
 8012b70:	b289      	uxth	r1, r1
 8012b72:	f842 5021 	str.w	r5, [r2, r1, lsl #2]

	  if( ++rx_buffer_head >= MIOS32_USB_MIDI_RX_BUFFER_SIZE )
 8012b76:	8819      	ldrh	r1, [r3, #0]
 8012b78:	1c4a      	adds	r2, r1, #1
 8012b7a:	b291      	uxth	r1, r2
 8012b7c:	293f      	cmp	r1, #63	; 0x3f
 8012b7e:	8019      	strh	r1, [r3, #0]
	    rx_buffer_head = 0;
 8012b80:	bf88      	it	hi
 8012b82:	8018      	strhhi	r0, [r3, #0]
	  ++rx_buffer_size;
 8012b84:	480d      	ldr	r0, [pc, #52]	; (8012bbc <MIOS32_USB_MIDI_RxBufferHandler+0x9c>)
 8012b86:	8803      	ldrh	r3, [r0, #0]
 8012b88:	1c5a      	adds	r2, r3, #1
 8012b8a:	b291      	uxth	r1, r2
 8012b8c:	8001      	strh	r1, [r0, #0]
 8012b8e:	3401      	adds	r4, #1
/////////////////////////////////////////////////////////////////////////////
//! USB Device Mode
//!
//! This handler receives new packages if the Tx buffer is not full
/////////////////////////////////////////////////////////////////////////////
static void MIOS32_USB_MIDI_RxBufferHandler(void)
 8012b90:	1b30      	subs	r0, r6, r4

	  if( ++rx_buffer_head >= MIOS32_USB_MIDI_RX_BUFFER_SIZE )
	    rx_buffer_head = 0;
	  ++rx_buffer_size;
	}
      } while( --count > 0 );
 8012b92:	b203      	sxth	r3, r0
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	dcde      	bgt.n	8012b56 <MIOS32_USB_MIDI_RxBufferHandler+0x36>

      // notify, that data has been put into buffer
      rx_buffer_new_data = 0;
 8012b98:	4907      	ldr	r1, [pc, #28]	; (8012bb8 <MIOS32_USB_MIDI_RxBufferHandler+0x98>)

      // configuration for next transfer
      DCD_EP_PrepareRx(&USB_OTG_dev,
 8012b9a:	4806      	ldr	r0, [pc, #24]	; (8012bb4 <MIOS32_USB_MIDI_RxBufferHandler+0x94>)
	  ++rx_buffer_size;
	}
      } while( --count > 0 );

      // notify, that data has been put into buffer
      rx_buffer_new_data = 0;
 8012b9c:	2200      	movs	r2, #0
 8012b9e:	700a      	strb	r2, [r1, #0]

      // configuration for next transfer
      DCD_EP_PrepareRx(&USB_OTG_dev,
 8012ba0:	2340      	movs	r3, #64	; 0x40
 8012ba2:	2102      	movs	r1, #2
 8012ba4:	4a06      	ldr	r2, [pc, #24]	; (8012bc0 <MIOS32_USB_MIDI_RxBufferHandler+0xa0>)
 8012ba6:	f003 f9b9 	bl	8015f1c <DCD_EP_PrepareRx>
		       MIOS32_USB_MIDI_DATA_OUT_SIZE);
    }
  }

  MIOS32_IRQ_Enable();
}
 8012baa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		       (uint8_t*)(USB_rx_buffer),
		       MIOS32_USB_MIDI_DATA_OUT_SIZE);
    }
  }

  MIOS32_IRQ_Enable();
 8012bae:	f7ff bb63 	b.w	8012278 <MIOS32_IRQ_Enable>
 8012bb2:	bd70      	pop	{r4, r5, r6, pc}
 8012bb4:	20002e98 	.word	0x20002e98
 8012bb8:	20000426 	.word	0x20000426
 8012bbc:	200002da 	.word	0x200002da
 8012bc0:	20002e58 	.word	0x20002e58
 8012bc4:	20000428 	.word	0x20000428
 8012bc8:	20000324 	.word	0x20000324

08012bcc <MIOS32_USB_MIDI_TxBufferHandler>:
//! is not empty
/////////////////////////////////////////////////////////////////////////////
static void MIOS32_USB_MIDI_TxBufferHandler(void)
{
  // before using the handle: ensure that device (and class) already configured
  if( USB_OTG_dev.dev.class_cb == NULL )
 8012bcc:	4b23      	ldr	r3, [pc, #140]	; (8012c5c <MIOS32_USB_MIDI_TxBufferHandler+0x90>)
 8012bce:	f8d3 05e4 	ldr.w	r0, [r3, #1508]	; 0x5e4
//!
//! This handler sends the new packages through the IN pipe if the buffer 
//! is not empty
/////////////////////////////////////////////////////////////////////////////
static void MIOS32_USB_MIDI_TxBufferHandler(void)
{
 8012bd2:	b510      	push	{r4, lr}
  // before using the handle: ensure that device (and class) already configured
  if( USB_OTG_dev.dev.class_cb == NULL )
 8012bd4:	2800      	cmp	r0, #0
 8012bd6:	d03f      	beq.n	8012c58 <MIOS32_USB_MIDI_TxBufferHandler+0x8c>
  //   - last transfer finished
  //   - new packages are in the buffer
  //   - the device is configured

  // atomic operation to avoid conflict with other interrupts
  MIOS32_IRQ_Disable();
 8012bd8:	f7ff fb3a 	bl	8012250 <MIOS32_IRQ_Disable>

  if( !tx_buffer_busy && tx_buffer_size && transfer_possible ) {
 8012bdc:	4920      	ldr	r1, [pc, #128]	; (8012c60 <MIOS32_USB_MIDI_TxBufferHandler+0x94>)
 8012bde:	780a      	ldrb	r2, [r1, #0]
 8012be0:	2a00      	cmp	r2, #0
 8012be2:	d135      	bne.n	8012c50 <MIOS32_USB_MIDI_TxBufferHandler+0x84>
 8012be4:	4b1f      	ldr	r3, [pc, #124]	; (8012c64 <MIOS32_USB_MIDI_TxBufferHandler+0x98>)
 8012be6:	8818      	ldrh	r0, [r3, #0]
 8012be8:	b281      	uxth	r1, r0
 8012bea:	2900      	cmp	r1, #0
 8012bec:	d030      	beq.n	8012c50 <MIOS32_USB_MIDI_TxBufferHandler+0x84>
 8012bee:	4a1e      	ldr	r2, [pc, #120]	; (8012c68 <MIOS32_USB_MIDI_TxBufferHandler+0x9c>)
 8012bf0:	7810      	ldrb	r0, [r2, #0]
 8012bf2:	2800      	cmp	r0, #0
 8012bf4:	d02c      	beq.n	8012c50 <MIOS32_USB_MIDI_TxBufferHandler+0x84>
    s16 count = (tx_buffer_size > (MIOS32_USB_MIDI_DATA_IN_SIZE/4)) ? (MIOS32_USB_MIDI_DATA_IN_SIZE/4) : tx_buffer_size;
 8012bf6:	8819      	ldrh	r1, [r3, #0]
 8012bf8:	b28a      	uxth	r2, r1
 8012bfa:	2a10      	cmp	r2, #16
 8012bfc:	bf98      	it	ls
 8012bfe:	8819      	ldrhls	r1, [r3, #0]

    // notify that new package is sent
    tx_buffer_busy = 1;
 8012c00:	4b17      	ldr	r3, [pc, #92]	; (8012c60 <MIOS32_USB_MIDI_TxBufferHandler+0x94>)

  // atomic operation to avoid conflict with other interrupts
  MIOS32_IRQ_Disable();

  if( !tx_buffer_busy && tx_buffer_size && transfer_possible ) {
    s16 count = (tx_buffer_size > (MIOS32_USB_MIDI_DATA_IN_SIZE/4)) ? (MIOS32_USB_MIDI_DATA_IN_SIZE/4) : tx_buffer_size;
 8012c02:	bf94      	ite	ls
 8012c04:	b289      	uxthls	r1, r1
 8012c06:	2110      	movhi	r1, #16

    // notify that new package is sent
    tx_buffer_busy = 1;
 8012c08:	2001      	movs	r0, #1
 8012c0a:	7018      	strb	r0, [r3, #0]

    // send to IN pipe
    tx_buffer_size -= count;
 8012c0c:	4815      	ldr	r0, [pc, #84]	; (8012c64 <MIOS32_USB_MIDI_TxBufferHandler+0x98>)
 8012c0e:	8802      	ldrh	r2, [r0, #0]
 8012c10:	1a53      	subs	r3, r2, r1
 8012c12:	b29a      	uxth	r2, r3
 8012c14:	8002      	strh	r2, [r0, #0]

    u32 *buf_addr = (u32 *)USB_tx_buffer;
    int i;
    for(i=0; i<count; ++i) {
 8012c16:	2200      	movs	r2, #0
 8012c18:	b20b      	sxth	r3, r1
 8012c1a:	429a      	cmp	r2, r3
 8012c1c:	da12      	bge.n	8012c44 <MIOS32_USB_MIDI_TxBufferHandler+0x78>
      *(buf_addr++) = tx_buffer[tx_buffer_tail];
 8012c1e:	4b13      	ldr	r3, [pc, #76]	; (8012c6c <MIOS32_USB_MIDI_TxBufferHandler+0xa0>)
 8012c20:	4813      	ldr	r0, [pc, #76]	; (8012c70 <MIOS32_USB_MIDI_TxBufferHandler+0xa4>)
 8012c22:	881c      	ldrh	r4, [r3, #0]
 8012c24:	b2a4      	uxth	r4, r4
 8012c26:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 8012c2a:	4812      	ldr	r0, [pc, #72]	; (8012c74 <MIOS32_USB_MIDI_TxBufferHandler+0xa8>)
 8012c2c:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
      if( ++tx_buffer_tail >= MIOS32_USB_MIDI_TX_BUFFER_SIZE )
 8012c30:	8818      	ldrh	r0, [r3, #0]
 8012c32:	3001      	adds	r0, #1
 8012c34:	b280      	uxth	r0, r0
 8012c36:	283f      	cmp	r0, #63	; 0x3f
 8012c38:	8018      	strh	r0, [r3, #0]
 8012c3a:	d901      	bls.n	8012c40 <MIOS32_USB_MIDI_TxBufferHandler+0x74>
	tx_buffer_tail = 0;
 8012c3c:	2000      	movs	r0, #0
 8012c3e:	8018      	strh	r0, [r3, #0]
    // send to IN pipe
    tx_buffer_size -= count;

    u32 *buf_addr = (u32 *)USB_tx_buffer;
    int i;
    for(i=0; i<count; ++i) {
 8012c40:	3201      	adds	r2, #1
 8012c42:	e7e9      	b.n	8012c18 <MIOS32_USB_MIDI_TxBufferHandler+0x4c>
      *(buf_addr++) = tx_buffer[tx_buffer_tail];
      if( ++tx_buffer_tail >= MIOS32_USB_MIDI_TX_BUFFER_SIZE )
	tx_buffer_tail = 0;
    }

    DCD_EP_Tx(&USB_OTG_dev, MIOS32_USB_MIDI_DATA_IN_EP, (uint8_t*)&USB_tx_buffer, count*4);
 8012c44:	4805      	ldr	r0, [pc, #20]	; (8012c5c <MIOS32_USB_MIDI_TxBufferHandler+0x90>)
 8012c46:	4a0b      	ldr	r2, [pc, #44]	; (8012c74 <MIOS32_USB_MIDI_TxBufferHandler+0xa8>)
 8012c48:	2181      	movs	r1, #129	; 0x81
 8012c4a:	009b      	lsls	r3, r3, #2
 8012c4c:	f003 f983 	bl	8015f56 <DCD_EP_Tx>
  }

  MIOS32_IRQ_Enable();
}
 8012c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }

    DCD_EP_Tx(&USB_OTG_dev, MIOS32_USB_MIDI_DATA_IN_EP, (uint8_t*)&USB_tx_buffer, count*4);
  }

  MIOS32_IRQ_Enable();
 8012c54:	f7ff bb10 	b.w	8012278 <MIOS32_IRQ_Enable>
 8012c58:	bd10      	pop	{r4, pc}
 8012c5a:	bf00      	nop
 8012c5c:	20002e98 	.word	0x20002e98
 8012c60:	20000320 	.word	0x20000320
 8012c64:	2000042e 	.word	0x2000042e
 8012c68:	20000433 	.word	0x20000433
 8012c6c:	20000430 	.word	0x20000430
 8012c70:	200001d8 	.word	0x200001d8
 8012c74:	200002e0 	.word	0x200002e0

08012c78 <USBH_Handle>:
 * @param  pdev: Selected device
 * @param  hdev: Selected device property
 * @retval USBH_Status
 */
static USBH_Status USBH_Handle(USB_OTG_CORE_HANDLE *pdev, void *phost)
{
 8012c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if( transfer_possible ) {
 8012c7a:	4b68      	ldr	r3, [pc, #416]	; (8012e1c <USBH_Handle+0x1a4>)
 * @param  pdev: Selected device
 * @param  hdev: Selected device property
 * @retval USBH_Status
 */
static USBH_Status USBH_Handle(USB_OTG_CORE_HANDLE *pdev, void *phost)
{
 8012c7c:	460f      	mov	r7, r1
  if( transfer_possible ) {
 8012c7e:	7819      	ldrb	r1, [r3, #0]
 * @param  pdev: Selected device
 * @param  hdev: Selected device property
 * @retval USBH_Status
 */
static USBH_Status USBH_Handle(USB_OTG_CORE_HANDLE *pdev, void *phost)
{
 8012c80:	4605      	mov	r5, r0
  if( transfer_possible ) {
 8012c82:	2900      	cmp	r1, #0
 8012c84:	f000 80c8 	beq.w	8012e18 <USBH_Handle+0x1a0>
    USBH_HOST *pphost = phost;

    if( HCD_IsDeviceConnected(pdev) ) {
 8012c88:	f003 fc4b 	bl	8016522 <HCD_IsDeviceConnected>
 8012c8c:	2800      	cmp	r0, #0
 8012c8e:	f000 80c3 	beq.w	8012e18 <USBH_Handle+0x1a0>

      u8 force_rx_req = 0;

      if( USBH_MIDI_transfer_state == USBH_MIDI_TX ) {
 8012c92:	4c63      	ldr	r4, [pc, #396]	; (8012e20 <USBH_Handle+0x1a8>)
 8012c94:	7820      	ldrb	r0, [r4, #0]
 8012c96:	2802      	cmp	r0, #2
 8012c98:	d11b      	bne.n	8012cd2 <USBH_Handle+0x5a>
	URB_STATE URB_State = HCD_GetURB_State(pdev, USBH_hc_num_out);
 8012c9a:	4e62      	ldr	r6, [pc, #392]	; (8012e24 <USBH_Handle+0x1ac>)
 8012c9c:	4628      	mov	r0, r5
 8012c9e:	7831      	ldrb	r1, [r6, #0]
 8012ca0:	f003 fc46 	bl	8016530 <HCD_GetURB_State>

        if( URB_State == URB_IDLE ) {
 8012ca4:	b180      	cbz	r0, 8012cc8 <USBH_Handle+0x50>
	  // wait...
	} else if( URB_State == URB_DONE ) {
 8012ca6:	2801      	cmp	r0, #1
 8012ca8:	d063      	beq.n	8012d72 <USBH_Handle+0xfa>
	  USBH_MIDI_transfer_state = USBH_MIDI_IDLE;
	} else if( URB_State == URB_STALL ) {
 8012caa:	2804      	cmp	r0, #4
 8012cac:	d103      	bne.n	8012cb6 <USBH_Handle+0x3e>
	  // Issue Clear Feature on OUT endpoint
	  if( USBH_ClrFeature(pdev, pphost, USBH_BulkOutEp, USBH_hc_num_out) == USBH_OK ) {
 8012cae:	4628      	mov	r0, r5
 8012cb0:	4639      	mov	r1, r7
 8012cb2:	4a5d      	ldr	r2, [pc, #372]	; (8012e28 <USBH_Handle+0x1b0>)
 8012cb4:	e052      	b.n	8012d5c <USBH_Handle+0xe4>
	    USBH_MIDI_transfer_state = USBH_MIDI_IDLE;
	  }
	} else if( URB_State == URB_NOTREADY ) {
 8012cb6:	2802      	cmp	r0, #2
 8012cb8:	d108      	bne.n	8012ccc <USBH_Handle+0x54>
	  // send again
	  USBH_BulkSendData(&USB_OTG_dev, (u8 *)USB_tx_buffer, USBH_tx_count, USBH_hc_num_out);
 8012cba:	4b5c      	ldr	r3, [pc, #368]	; (8012e2c <USBH_Handle+0x1b4>)
 8012cbc:	485c      	ldr	r0, [pc, #368]	; (8012e30 <USBH_Handle+0x1b8>)
 8012cbe:	781a      	ldrb	r2, [r3, #0]
 8012cc0:	495c      	ldr	r1, [pc, #368]	; (8012e34 <USBH_Handle+0x1bc>)
 8012cc2:	7833      	ldrb	r3, [r6, #0]
 8012cc4:	f002 f8f2 	bl	8014eac <USBH_BulkSendData>
  if( transfer_possible ) {
    USBH_HOST *pphost = phost;

    if( HCD_IsDeviceConnected(pdev) ) {

      u8 force_rx_req = 0;
 8012cc8:	2000      	movs	r0, #0
 8012cca:	e054      	b.n	8012d76 <USBH_Handle+0xfe>
	    USBH_MIDI_transfer_state = USBH_MIDI_IDLE;
	  }
	} else if( URB_State == URB_NOTREADY ) {
	  // send again
	  USBH_BulkSendData(&USB_OTG_dev, (u8 *)USB_tx_buffer, USBH_tx_count, USBH_hc_num_out);
	} else if( URB_State == URB_ERROR ) {
 8012ccc:	2803      	cmp	r0, #3
 8012cce:	d1fb      	bne.n	8012cc8 <USBH_Handle+0x50>
 8012cd0:	e04f      	b.n	8012d72 <USBH_Handle+0xfa>
	  USBH_MIDI_transfer_state = USBH_MIDI_IDLE;
	}
      } else if( USBH_MIDI_transfer_state == USBH_MIDI_RX ) {
 8012cd2:	2801      	cmp	r0, #1
 8012cd4:	d1f8      	bne.n	8012cc8 <USBH_Handle+0x50>
	URB_STATE URB_State = HCD_GetURB_State(pdev, USBH_hc_num_in);
 8012cd6:	4e58      	ldr	r6, [pc, #352]	; (8012e38 <USBH_Handle+0x1c0>)
 8012cd8:	4628      	mov	r0, r5
 8012cda:	7831      	ldrb	r1, [r6, #0]
 8012cdc:	f003 fc28 	bl	8016530 <HCD_GetURB_State>
        if( URB_State == URB_IDLE || URB_State == URB_DONE ) {
 8012ce0:	2801      	cmp	r0, #1
 8012ce2:	d836      	bhi.n	8012d52 <USBH_Handle+0xda>
	  // data received from receive
	  //u32 count = HCD_GetXferCnt(pdev, USBH_hc_num_in) / 4;
	  // Note: HCD_GetXferCnt returns a counter which isn't zeroed immediately on a USBH_BulkReceiveData() call
	  u32 count = USB_OTG_dev.host.hc[USBH_hc_num_in].xfer_count / 4;
 8012ce4:	7835      	ldrb	r5, [r6, #0]
 8012ce6:	4952      	ldr	r1, [pc, #328]	; (8012e30 <USBH_Handle+0x1b8>)
 8012ce8:	eb01 1045 	add.w	r0, r1, r5, lsl #5
 8012cec:	f8d0 38a4 	ldr.w	r3, [r0, #2212]	; 0x8a4

	  // push data into FIFO
	  if( !count ) {
 8012cf0:	089d      	lsrs	r5, r3, #2
 8012cf2:	d101      	bne.n	8012cf8 <USBH_Handle+0x80>
	    USBH_MIDI_transfer_state = USBH_MIDI_IDLE;
 8012cf4:	7025      	strb	r5, [r4, #0]
 8012cf6:	e7e7      	b.n	8012cc8 <USBH_Handle+0x50>
	  } else if( count < (MIOS32_USB_MIDI_RX_BUFFER_SIZE-rx_buffer_size) ) {
 8012cf8:	4a50      	ldr	r2, [pc, #320]	; (8012e3c <USBH_Handle+0x1c4>)
 8012cfa:	8811      	ldrh	r1, [r2, #0]
 8012cfc:	b288      	uxth	r0, r1
 8012cfe:	f1c0 0340 	rsb	r3, r0, #64	; 0x40
 8012d02:	429d      	cmp	r5, r3
 8012d04:	d2e0      	bcs.n	8012cc8 <USBH_Handle+0x50>
	    u32 *buf_addr = (u32 *)USB_rx_buffer;

	    // copy received packages into receive buffer
	    // this operation should be atomic
	    MIOS32_IRQ_Disable();
 8012d06:	f7ff faa3 	bl	8012250 <MIOS32_IRQ_Disable>
 8012d0a:	4e4d      	ldr	r6, [pc, #308]	; (8012e40 <USBH_Handle+0x1c8>)
	    do {
	      mios32_midi_package_t package;
	      package.ALL = *buf_addr++;
 8012d0c:	f856 4f04 	ldr.w	r4, [r6, #4]!

	      if( MIOS32_MIDI_SendPackageToRxCallback(USB0 + package.cable, package) == 0 ) {
 8012d10:	f3c4 1003 	ubfx	r0, r4, #4, #4
 8012d14:	3010      	adds	r0, #16
 8012d16:	4621      	mov	r1, r4
 8012d18:	f7fe fc72 	bl	8011600 <MIOS32_MIDI_SendPackageToRxCallback>
 8012d1c:	b988      	cbnz	r0, 8012d42 <USBH_Handle+0xca>
		rx_buffer[rx_buffer_head] = package.ALL;
 8012d1e:	4b49      	ldr	r3, [pc, #292]	; (8012e44 <USBH_Handle+0x1cc>)
 8012d20:	881a      	ldrh	r2, [r3, #0]
 8012d22:	b291      	uxth	r1, r2
 8012d24:	4a48      	ldr	r2, [pc, #288]	; (8012e48 <USBH_Handle+0x1d0>)
 8012d26:	f842 4021 	str.w	r4, [r2, r1, lsl #2]

		if( ++rx_buffer_head >= MIOS32_USB_MIDI_RX_BUFFER_SIZE )
 8012d2a:	8819      	ldrh	r1, [r3, #0]
 8012d2c:	1c4a      	adds	r2, r1, #1
 8012d2e:	b291      	uxth	r1, r2
 8012d30:	293f      	cmp	r1, #63	; 0x3f
 8012d32:	8019      	strh	r1, [r3, #0]
		  rx_buffer_head = 0;
 8012d34:	bf88      	it	hi
 8012d36:	8018      	strhhi	r0, [r3, #0]
		++rx_buffer_size;
 8012d38:	4840      	ldr	r0, [pc, #256]	; (8012e3c <USBH_Handle+0x1c4>)
 8012d3a:	8803      	ldrh	r3, [r0, #0]
 8012d3c:	1c5a      	adds	r2, r3, #1
 8012d3e:	b291      	uxth	r1, r2
 8012d40:	8001      	strh	r1, [r0, #0]
	      }
	    } while( --count > 0 );
 8012d42:	3d01      	subs	r5, #1
 8012d44:	d1e2      	bne.n	8012d0c <USBH_Handle+0x94>
	    MIOS32_IRQ_Enable();
 8012d46:	f7ff fa97 	bl	8012278 <MIOS32_IRQ_Enable>

	    USBH_MIDI_transfer_state = USBH_MIDI_IDLE;
 8012d4a:	4835      	ldr	r0, [pc, #212]	; (8012e20 <USBH_Handle+0x1a8>)
 8012d4c:	7005      	strb	r5, [r0, #0]
	    force_rx_req = 1;
 8012d4e:	2001      	movs	r0, #1
 8012d50:	e011      	b.n	8012d76 <USBH_Handle+0xfe>
	  }
	} else if( URB_State == URB_STALL ) {
 8012d52:	2804      	cmp	r0, #4
 8012d54:	d109      	bne.n	8012d6a <USBH_Handle+0xf2>
	  // Issue Clear Feature on IN endpoint
	  if( USBH_ClrFeature(pdev, pphost, USBH_BulkInEp, USBH_hc_num_in) == USBH_OK ) {
 8012d56:	4a3d      	ldr	r2, [pc, #244]	; (8012e4c <USBH_Handle+0x1d4>)
 8012d58:	4628      	mov	r0, r5
 8012d5a:	4639      	mov	r1, r7
 8012d5c:	7812      	ldrb	r2, [r2, #0]
 8012d5e:	7833      	ldrb	r3, [r6, #0]
 8012d60:	f002 fa7a 	bl	8015258 <USBH_ClrFeature>
 8012d64:	2800      	cmp	r0, #0
 8012d66:	d1af      	bne.n	8012cc8 <USBH_Handle+0x50>
 8012d68:	e004      	b.n	8012d74 <USBH_Handle+0xfc>
	    USBH_MIDI_transfer_state = USBH_MIDI_IDLE;
	  }
	} else if( URB_State == URB_ERROR || URB_State == URB_NOTREADY ) {
 8012d6a:	1e82      	subs	r2, r0, #2
 8012d6c:	b2d3      	uxtb	r3, r2
 8012d6e:	2b01      	cmp	r3, #1
 8012d70:	d8aa      	bhi.n	8012cc8 <USBH_Handle+0x50>
	  USBH_MIDI_transfer_state = USBH_MIDI_IDLE;
 8012d72:	2000      	movs	r0, #0
 8012d74:	7020      	strb	r0, [r4, #0]
	}
      }


      if( USBH_MIDI_transfer_state == USBH_MIDI_IDLE ) {
 8012d76:	4a2a      	ldr	r2, [pc, #168]	; (8012e20 <USBH_Handle+0x1a8>)
 8012d78:	7811      	ldrb	r1, [r2, #0]
 8012d7a:	2900      	cmp	r1, #0
 8012d7c:	d14c      	bne.n	8012e18 <USBH_Handle+0x1a0>
	if( !force_rx_req && tx_buffer_size && transfer_possible ) {
 8012d7e:	2800      	cmp	r0, #0
 8012d80:	d13f      	bne.n	8012e02 <USBH_Handle+0x18a>
 8012d82:	4c33      	ldr	r4, [pc, #204]	; (8012e50 <USBH_Handle+0x1d8>)
 8012d84:	8820      	ldrh	r0, [r4, #0]
 8012d86:	b283      	uxth	r3, r0
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d03a      	beq.n	8012e02 <USBH_Handle+0x18a>
 8012d8c:	4a23      	ldr	r2, [pc, #140]	; (8012e1c <USBH_Handle+0x1a4>)
 8012d8e:	7811      	ldrb	r1, [r2, #0]
 8012d90:	2900      	cmp	r1, #0
 8012d92:	d036      	beq.n	8012e02 <USBH_Handle+0x18a>
	  // atomic operation to avoid conflict with other interrupts
	  MIOS32_IRQ_Disable();
 8012d94:	f7ff fa5c 	bl	8012250 <MIOS32_IRQ_Disable>

	  s16 count = (tx_buffer_size > (USBH_BulkOutEpSize/4)) ? (USBH_BulkOutEpSize/4) : tx_buffer_size;
 8012d98:	482e      	ldr	r0, [pc, #184]	; (8012e54 <USBH_Handle+0x1dc>)
 8012d9a:	8821      	ldrh	r1, [r4, #0]
 8012d9c:	8802      	ldrh	r2, [r0, #0]
 8012d9e:	b28b      	uxth	r3, r1
 8012da0:	0891      	lsrs	r1, r2, #2
 8012da2:	428b      	cmp	r3, r1

	  // send to IN pipe
	  tx_buffer_size -= count;
 8012da4:	4b2a      	ldr	r3, [pc, #168]	; (8012e50 <USBH_Handle+0x1d8>)
      if( USBH_MIDI_transfer_state == USBH_MIDI_IDLE ) {
	if( !force_rx_req && tx_buffer_size && transfer_possible ) {
	  // atomic operation to avoid conflict with other interrupts
	  MIOS32_IRQ_Disable();

	  s16 count = (tx_buffer_size > (USBH_BulkOutEpSize/4)) ? (USBH_BulkOutEpSize/4) : tx_buffer_size;
 8012da6:	bf98      	it	ls
 8012da8:	8821      	ldrhls	r1, [r4, #0]

	  // send to IN pipe
	  tx_buffer_size -= count;
 8012daa:	8818      	ldrh	r0, [r3, #0]
      if( USBH_MIDI_transfer_state == USBH_MIDI_IDLE ) {
	if( !force_rx_req && tx_buffer_size && transfer_possible ) {
	  // atomic operation to avoid conflict with other interrupts
	  MIOS32_IRQ_Disable();

	  s16 count = (tx_buffer_size > (USBH_BulkOutEpSize/4)) ? (USBH_BulkOutEpSize/4) : tx_buffer_size;
 8012dac:	b28a      	uxth	r2, r1

	  // send to IN pipe
	  tx_buffer_size -= count;
 8012dae:	1a81      	subs	r1, r0, r2
 8012db0:	b288      	uxth	r0, r1
 8012db2:	8018      	strh	r0, [r3, #0]

	  u32 *buf_addr = (u32 *)USB_tx_buffer;
	  int i;
	  for(i=0; i<count; ++i) {
 8012db4:	2300      	movs	r3, #0
 8012db6:	b211      	sxth	r1, r2
 8012db8:	428b      	cmp	r3, r1
 8012dba:	da12      	bge.n	8012de2 <USBH_Handle+0x16a>
	    *(buf_addr++) = tx_buffer[tx_buffer_tail];
 8012dbc:	4926      	ldr	r1, [pc, #152]	; (8012e58 <USBH_Handle+0x1e0>)
 8012dbe:	4827      	ldr	r0, [pc, #156]	; (8012e5c <USBH_Handle+0x1e4>)
 8012dc0:	880c      	ldrh	r4, [r1, #0]
 8012dc2:	b2a4      	uxth	r4, r4
 8012dc4:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 8012dc8:	481a      	ldr	r0, [pc, #104]	; (8012e34 <USBH_Handle+0x1bc>)
 8012dca:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	    if( ++tx_buffer_tail >= MIOS32_USB_MIDI_TX_BUFFER_SIZE )
 8012dce:	8808      	ldrh	r0, [r1, #0]
 8012dd0:	3001      	adds	r0, #1
 8012dd2:	b280      	uxth	r0, r0
 8012dd4:	283f      	cmp	r0, #63	; 0x3f
 8012dd6:	8008      	strh	r0, [r1, #0]
 8012dd8:	d901      	bls.n	8012dde <USBH_Handle+0x166>
	      tx_buffer_tail = 0;
 8012dda:	2000      	movs	r0, #0
 8012ddc:	8008      	strh	r0, [r1, #0]
	  // send to IN pipe
	  tx_buffer_size -= count;

	  u32 *buf_addr = (u32 *)USB_tx_buffer;
	  int i;
	  for(i=0; i<count; ++i) {
 8012dde:	3301      	adds	r3, #1
 8012de0:	e7e9      	b.n	8012db6 <USBH_Handle+0x13e>
	    *(buf_addr++) = tx_buffer[tx_buffer_tail];
	    if( ++tx_buffer_tail >= MIOS32_USB_MIDI_TX_BUFFER_SIZE )
	      tx_buffer_tail = 0;
	  }
	  
	  USBH_tx_count = count * 4;
 8012de2:	0092      	lsls	r2, r2, #2
 8012de4:	4b11      	ldr	r3, [pc, #68]	; (8012e2c <USBH_Handle+0x1b4>)
	  USBH_BulkSendData(&USB_OTG_dev, (u8 *)USB_tx_buffer, USBH_tx_count, USBH_hc_num_out);
 8012de6:	4913      	ldr	r1, [pc, #76]	; (8012e34 <USBH_Handle+0x1bc>)
 8012de8:	4811      	ldr	r0, [pc, #68]	; (8012e30 <USBH_Handle+0x1b8>)
	    *(buf_addr++) = tx_buffer[tx_buffer_tail];
	    if( ++tx_buffer_tail >= MIOS32_USB_MIDI_TX_BUFFER_SIZE )
	      tx_buffer_tail = 0;
	  }
	  
	  USBH_tx_count = count * 4;
 8012dea:	b2d2      	uxtb	r2, r2
 8012dec:	701a      	strb	r2, [r3, #0]
	  USBH_BulkSendData(&USB_OTG_dev, (u8 *)USB_tx_buffer, USBH_tx_count, USBH_hc_num_out);
 8012dee:	4b0d      	ldr	r3, [pc, #52]	; (8012e24 <USBH_Handle+0x1ac>)
 8012df0:	781b      	ldrb	r3, [r3, #0]
 8012df2:	f002 f85b 	bl	8014eac <USBH_BulkSendData>

	  USBH_MIDI_transfer_state = USBH_MIDI_TX;
 8012df6:	490a      	ldr	r1, [pc, #40]	; (8012e20 <USBH_Handle+0x1a8>)
 8012df8:	2002      	movs	r0, #2
 8012dfa:	7008      	strb	r0, [r1, #0]

	  MIOS32_IRQ_Enable();
 8012dfc:	f7ff fa3c 	bl	8012278 <MIOS32_IRQ_Enable>
 8012e00:	e00a      	b.n	8012e18 <USBH_Handle+0x1a0>
	} else {
	  // request data from device
	  USBH_BulkReceiveData(&USB_OTG_dev, (u8 *)USB_rx_buffer, USBH_BulkInEpSize, USBH_hc_num_in);
 8012e02:	4b17      	ldr	r3, [pc, #92]	; (8012e60 <USBH_Handle+0x1e8>)
 8012e04:	480a      	ldr	r0, [pc, #40]	; (8012e30 <USBH_Handle+0x1b8>)
 8012e06:	781a      	ldrb	r2, [r3, #0]
 8012e08:	4b0b      	ldr	r3, [pc, #44]	; (8012e38 <USBH_Handle+0x1c0>)
 8012e0a:	4916      	ldr	r1, [pc, #88]	; (8012e64 <USBH_Handle+0x1ec>)
 8012e0c:	781b      	ldrb	r3, [r3, #0]
 8012e0e:	f002 f867 	bl	8014ee0 <USBH_BulkReceiveData>
	  USBH_MIDI_transfer_state = USBH_MIDI_RX;
 8012e12:	4a03      	ldr	r2, [pc, #12]	; (8012e20 <USBH_Handle+0x1a8>)
 8012e14:	2001      	movs	r0, #1
 8012e16:	7010      	strb	r0, [r2, #0]
      }
    }
  }

  return USBH_OK;
}
 8012e18:	2000      	movs	r0, #0
 8012e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e1c:	20000433 	.word	0x20000433
 8012e20:	20000436 	.word	0x20000436
 8012e24:	20000437 	.word	0x20000437
 8012e28:	200002dc 	.word	0x200002dc
 8012e2c:	2000042c 	.word	0x2000042c
 8012e30:	20002e98 	.word	0x20002e98
 8012e34:	200002e0 	.word	0x200002e0
 8012e38:	20000432 	.word	0x20000432
 8012e3c:	200002da 	.word	0x200002da
 8012e40:	20002e54 	.word	0x20002e54
 8012e44:	20000428 	.word	0x20000428
 8012e48:	20000324 	.word	0x20000324
 8012e4c:	200002dd 	.word	0x200002dd
 8012e50:	2000042e 	.word	0x2000042e
 8012e54:	20000434 	.word	0x20000434
 8012e58:	20000430 	.word	0x20000430
 8012e5c:	200001d8 	.word	0x200001d8
 8012e60:	2000042d 	.word	0x2000042d
 8012e64:	20002e58 	.word	0x20002e58

08012e68 <MIOS32_USB_MIDI_Init>:
  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode

  return 0; // no error
}
 8012e68:	2800      	cmp	r0, #0
 8012e6a:	bf14      	ite	ne
 8012e6c:	f04f 30ff 	movne.w	r0, #4294967295
 8012e70:	2000      	moveq	r0, #0
 8012e72:	4770      	bx	lr

08012e74 <MIOS32_USB_MIDI_ChangeConnectionState>:
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_MIDI_ChangeConnectionState(u8 connected)
{
  // in all cases: re-initialize USB MIDI driver
  // clear buffer counters and busy/wait signals again (e.g., so that no invalid data will be sent out)
  rx_buffer_tail = rx_buffer_head = rx_buffer_size = 0;
 8012e74:	490e      	ldr	r1, [pc, #56]	; (8012eb0 <MIOS32_USB_MIDI_ChangeConnectionState+0x3c>)
 8012e76:	2300      	movs	r3, #0
//! \param[in] connected status (1 if connected)
//! \return < 0 on errors
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_MIDI_ChangeConnectionState(u8 connected)
{
 8012e78:	b510      	push	{r4, lr}
  // in all cases: re-initialize USB MIDI driver
  // clear buffer counters and busy/wait signals again (e.g., so that no invalid data will be sent out)
  rx_buffer_tail = rx_buffer_head = rx_buffer_size = 0;
 8012e7a:	800b      	strh	r3, [r1, #0]
 8012e7c:	4c0d      	ldr	r4, [pc, #52]	; (8012eb4 <MIOS32_USB_MIDI_ChangeConnectionState+0x40>)
 8012e7e:	490e      	ldr	r1, [pc, #56]	; (8012eb8 <MIOS32_USB_MIDI_ChangeConnectionState+0x44>)
 8012e80:	8023      	strh	r3, [r4, #0]
 8012e82:	800b      	strh	r3, [r1, #0]
  rx_buffer_new_data = 0; // no data received yet
 8012e84:	4c0d      	ldr	r4, [pc, #52]	; (8012ebc <MIOS32_USB_MIDI_ChangeConnectionState+0x48>)
  tx_buffer_tail = tx_buffer_head = tx_buffer_size = 0;
 8012e86:	490e      	ldr	r1, [pc, #56]	; (8012ec0 <MIOS32_USB_MIDI_ChangeConnectionState+0x4c>)
s32 MIOS32_USB_MIDI_ChangeConnectionState(u8 connected)
{
  // in all cases: re-initialize USB MIDI driver
  // clear buffer counters and busy/wait signals again (e.g., so that no invalid data will be sent out)
  rx_buffer_tail = rx_buffer_head = rx_buffer_size = 0;
  rx_buffer_new_data = 0; // no data received yet
 8012e88:	7023      	strb	r3, [r4, #0]
  tx_buffer_tail = tx_buffer_head = tx_buffer_size = 0;
 8012e8a:	800b      	strh	r3, [r1, #0]
 8012e8c:	4c0d      	ldr	r4, [pc, #52]	; (8012ec4 <MIOS32_USB_MIDI_ChangeConnectionState+0x50>)
 8012e8e:	490e      	ldr	r1, [pc, #56]	; (8012ec8 <MIOS32_USB_MIDI_ChangeConnectionState+0x54>)
 8012e90:	8023      	strh	r3, [r4, #0]
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_MIDI_ChangeConnectionState(u8 connected)
{
  // in all cases: re-initialize USB MIDI driver
  // clear buffer counters and busy/wait signals again (e.g., so that no invalid data will be sent out)
  rx_buffer_tail = rx_buffer_head = rx_buffer_size = 0;
 8012e92:	461a      	mov	r2, r3
  rx_buffer_new_data = 0; // no data received yet
  tx_buffer_tail = tx_buffer_head = tx_buffer_size = 0;
 8012e94:	800b      	strh	r3, [r1, #0]
 8012e96:	4c0d      	ldr	r4, [pc, #52]	; (8012ecc <MIOS32_USB_MIDI_ChangeConnectionState+0x58>)
 8012e98:	4b0d      	ldr	r3, [pc, #52]	; (8012ed0 <MIOS32_USB_MIDI_ChangeConnectionState+0x5c>)
 8012e9a:	2101      	movs	r1, #1

  if( connected ) {
 8012e9c:	b120      	cbz	r0, 8012ea8 <MIOS32_USB_MIDI_ChangeConnectionState+0x34>
    transfer_possible = 1;
    tx_buffer_busy = 0; // buffer not busy anymore

#ifndef MIOS32_DONT_USE_USB_HOST
    USBH_MIDI_transfer_state = USBH_MIDI_IDLE;
 8012e9e:	480d      	ldr	r0, [pc, #52]	; (8012ed4 <MIOS32_USB_MIDI_ChangeConnectionState+0x60>)
  rx_buffer_tail = rx_buffer_head = rx_buffer_size = 0;
  rx_buffer_new_data = 0; // no data received yet
  tx_buffer_tail = tx_buffer_head = tx_buffer_size = 0;

  if( connected ) {
    transfer_possible = 1;
 8012ea0:	7021      	strb	r1, [r4, #0]
    tx_buffer_busy = 0; // buffer not busy anymore
 8012ea2:	701a      	strb	r2, [r3, #0]

#ifndef MIOS32_DONT_USE_USB_HOST
    USBH_MIDI_transfer_state = USBH_MIDI_IDLE;
 8012ea4:	7002      	strb	r2, [r0, #0]
 8012ea6:	e001      	b.n	8012eac <MIOS32_USB_MIDI_ChangeConnectionState+0x38>
#endif
  } else {
    // cable disconnected: disable transfers
    transfer_possible = 0;
 8012ea8:	7022      	strb	r2, [r4, #0]
    tx_buffer_busy = 1; // buffer busy
 8012eaa:	7019      	strb	r1, [r3, #0]
  }

  return 0; // no error
}
 8012eac:	2000      	movs	r0, #0
 8012eae:	bd10      	pop	{r4, pc}
 8012eb0:	200002da 	.word	0x200002da
 8012eb4:	20000428 	.word	0x20000428
 8012eb8:	200002d8 	.word	0x200002d8
 8012ebc:	20000426 	.word	0x20000426
 8012ec0:	2000042e 	.word	0x2000042e
 8012ec4:	20000424 	.word	0x20000424
 8012ec8:	20000430 	.word	0x20000430
 8012ecc:	20000433 	.word	0x20000433
 8012ed0:	20000320 	.word	0x20000320
 8012ed4:	20000436 	.word	0x20000436

08012ed8 <MIOS32_USB_MIDI_CheckAvailable>:
//! \return 1: interface available
//! \return 0: interface not available
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_MIDI_CheckAvailable(u8 cable)
{
 8012ed8:	b510      	push	{r4, lr}
 8012eda:	4604      	mov	r4, r0
#ifdef MIOS32_SYS_ADDR_BSL_INFO_BEGIN
  if( MIOS32_USB_ForceSingleUSB() && cable >= 1 )
 8012edc:	f7ff fd66 	bl	80129ac <MIOS32_USB_ForceSingleUSB>
 8012ee0:	b92c      	cbnz	r4, 8012eee <MIOS32_USB_MIDI_CheckAvailable+0x16>
#endif

  if( cable >= MIOS32_USB_MIDI_NUM_PORTS )
    return 0;

  return transfer_possible ? 1 : 0;
 8012ee2:	4b04      	ldr	r3, [pc, #16]	; (8012ef4 <MIOS32_USB_MIDI_CheckAvailable+0x1c>)
 8012ee4:	7818      	ldrb	r0, [r3, #0]
 8012ee6:	3000      	adds	r0, #0
 8012ee8:	bf18      	it	ne
 8012eea:	2001      	movne	r0, #1
 8012eec:	bd10      	pop	{r4, pc}
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_MIDI_CheckAvailable(u8 cable)
{
#ifdef MIOS32_SYS_ADDR_BSL_INFO_BEGIN
  if( MIOS32_USB_ForceSingleUSB() && cable >= 1 )
    return 0;
 8012eee:	2000      	movs	r0, #0

  if( cable >= MIOS32_USB_MIDI_NUM_PORTS )
    return 0;

  return transfer_possible ? 1 : 0;
}
 8012ef0:	bd10      	pop	{r4, pc}
 8012ef2:	bf00      	nop
 8012ef4:	20000433 	.word	0x20000433

08012ef8 <USBH_InterfaceInit>:
 * @param  pdev: Selected device
 * @param  hdev: Selected device property
 * @retval  USBH_Status :Response for USB MIDI driver intialization
 */
static USBH_Status USBH_InterfaceInit(USB_OTG_CORE_HANDLE *pdev, void *phost)
{
 8012ef8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012efa:	460c      	mov	r4, r1
 8012efc:	4605      	mov	r5, r0
  USBH_HOST *pphost = phost;

  MIOS32_USB_MIDI_ChangeConnectionState(0);
 8012efe:	2000      	movs	r0, #0
 8012f00:	f7ff ffb8 	bl	8012e74 <MIOS32_USB_MIDI_ChangeConnectionState>

  int i;
  for(i=0; i<pphost->device_prop.Cfg_Desc.bNumInterfaces && i < USBH_MAX_NUM_INTERFACES; ++i) {
 8012f04:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d060      	beq.n	8012fce <USBH_InterfaceInit+0xd6>
    //MIOS32_MIDI_DebugPortSet(UART0);
    //MIOS32_MIDI_SendDebugMessage("InterfaceInit %d %d %d", i, pphost->device_prop.Itf_Desc[i].bInterfaceClass, pphost->device_prop.Itf_Desc[i].bInterfaceSubClass);

    if( (pphost->device_prop.Itf_Desc[i].bInterfaceClass == 1) &&
 8012f0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012f10:	2a01      	cmp	r2, #1
 8012f12:	d103      	bne.n	8012f1c <USBH_InterfaceInit+0x24>
 8012f14:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8012f18:	2803      	cmp	r0, #3
 8012f1a:	d00a      	beq.n	8012f32 <USBH_InterfaceInit+0x3a>
  USBH_HOST *pphost = phost;

  MIOS32_USB_MIDI_ChangeConnectionState(0);

  int i;
  for(i=0; i<pphost->device_prop.Cfg_Desc.bNumInterfaces && i < USBH_MAX_NUM_INTERFACES; ++i) {
 8012f1c:	2b01      	cmp	r3, #1
 8012f1e:	dd56      	ble.n	8012fce <USBH_InterfaceInit+0xd6>
    //MIOS32_MIDI_DebugPortSet(UART0);
    //MIOS32_MIDI_SendDebugMessage("InterfaceInit %d %d %d", i, pphost->device_prop.Itf_Desc[i].bInterfaceClass, pphost->device_prop.Itf_Desc[i].bInterfaceSubClass);

    if( (pphost->device_prop.Itf_Desc[i].bInterfaceClass == 1) &&
 8012f20:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8012f24:	2b01      	cmp	r3, #1
 8012f26:	d152      	bne.n	8012fce <USBH_InterfaceInit+0xd6>
 8012f28:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8012f2c:	2903      	cmp	r1, #3
 8012f2e:	d14e      	bne.n	8012fce <USBH_InterfaceInit+0xd6>
 8012f30:	e000      	b.n	8012f34 <USBH_InterfaceInit+0x3c>
  USBH_HOST *pphost = phost;

  MIOS32_USB_MIDI_ChangeConnectionState(0);

  int i;
  for(i=0; i<pphost->device_prop.Cfg_Desc.bNumInterfaces && i < USBH_MAX_NUM_INTERFACES; ++i) {
 8012f32:	2300      	movs	r3, #0
    //MIOS32_MIDI_SendDebugMessage("InterfaceInit %d %d %d", i, pphost->device_prop.Itf_Desc[i].bInterfaceClass, pphost->device_prop.Itf_Desc[i].bInterfaceSubClass);

    if( (pphost->device_prop.Itf_Desc[i].bInterfaceClass == 1) &&
	(pphost->device_prop.Itf_Desc[i].bInterfaceSubClass == 3) ) {

      if( pphost->device_prop.Ep_Desc[i][0].bEndpointAddress & 0x80 ) {
 8012f34:	1d5e      	adds	r6, r3, #5
 8012f36:	eb04 1706 	add.w	r7, r4, r6, lsl #4
 8012f3a:	78ba      	ldrb	r2, [r7, #2]
 8012f3c:	88b9      	ldrh	r1, [r7, #4]
 8012f3e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8012f42:	d004      	beq.n	8012f4e <USBH_InterfaceInit+0x56>
	USBH_BulkInEp = (pphost->device_prop.Ep_Desc[i][0].bEndpointAddress);
 8012f44:	4f27      	ldr	r7, [pc, #156]	; (8012fe4 <USBH_InterfaceInit+0xec>)
 8012f46:	703a      	strb	r2, [r7, #0]
	USBH_BulkInEpSize  = pphost->device_prop.Ep_Desc[i][0].wMaxPacketSize;
 8012f48:	4a27      	ldr	r2, [pc, #156]	; (8012fe8 <USBH_InterfaceInit+0xf0>)
 8012f4a:	7011      	strb	r1, [r2, #0]
 8012f4c:	e003      	b.n	8012f56 <USBH_InterfaceInit+0x5e>
      } else {
	USBH_BulkOutEp = (pphost->device_prop.Ep_Desc[i][0].bEndpointAddress);
 8012f4e:	4827      	ldr	r0, [pc, #156]	; (8012fec <USBH_InterfaceInit+0xf4>)
	USBH_BulkOutEpSize  = pphost->device_prop.Ep_Desc[i] [0].wMaxPacketSize;
 8012f50:	4e27      	ldr	r6, [pc, #156]	; (8012ff0 <USBH_InterfaceInit+0xf8>)

      if( pphost->device_prop.Ep_Desc[i][0].bEndpointAddress & 0x80 ) {
	USBH_BulkInEp = (pphost->device_prop.Ep_Desc[i][0].bEndpointAddress);
	USBH_BulkInEpSize  = pphost->device_prop.Ep_Desc[i][0].wMaxPacketSize;
      } else {
	USBH_BulkOutEp = (pphost->device_prop.Ep_Desc[i][0].bEndpointAddress);
 8012f52:	7002      	strb	r2, [r0, #0]
	USBH_BulkOutEpSize  = pphost->device_prop.Ep_Desc[i] [0].wMaxPacketSize;
 8012f54:	8031      	strh	r1, [r6, #0]
      }

      if( pphost->device_prop.Ep_Desc[i][1].bEndpointAddress & 0x80 ) {
 8012f56:	eb04 1303 	add.w	r3, r4, r3, lsl #4
 8012f5a:	f103 0158 	add.w	r1, r3, #88	; 0x58
 8012f5e:	f893 605a 	ldrb.w	r6, [r3, #90]	; 0x5a
 8012f62:	4f22      	ldr	r7, [pc, #136]	; (8012fec <USBH_InterfaceInit+0xf4>)
 8012f64:	888a      	ldrh	r2, [r1, #4]
 8012f66:	f016 0f80 	tst.w	r6, #128	; 0x80
 8012f6a:	d004      	beq.n	8012f76 <USBH_InterfaceInit+0x7e>
	USBH_BulkInEp = (pphost->device_prop.Ep_Desc[i][1].bEndpointAddress);
 8012f6c:	4b1d      	ldr	r3, [pc, #116]	; (8012fe4 <USBH_InterfaceInit+0xec>)
	USBH_BulkInEpSize  = pphost->device_prop.Ep_Desc[i][1].wMaxPacketSize;
 8012f6e:	491e      	ldr	r1, [pc, #120]	; (8012fe8 <USBH_InterfaceInit+0xf0>)
	USBH_BulkOutEp = (pphost->device_prop.Ep_Desc[i][0].bEndpointAddress);
	USBH_BulkOutEpSize  = pphost->device_prop.Ep_Desc[i] [0].wMaxPacketSize;
      }

      if( pphost->device_prop.Ep_Desc[i][1].bEndpointAddress & 0x80 ) {
	USBH_BulkInEp = (pphost->device_prop.Ep_Desc[i][1].bEndpointAddress);
 8012f70:	701e      	strb	r6, [r3, #0]
	USBH_BulkInEpSize  = pphost->device_prop.Ep_Desc[i][1].wMaxPacketSize;
 8012f72:	700a      	strb	r2, [r1, #0]
 8012f74:	e002      	b.n	8012f7c <USBH_InterfaceInit+0x84>
      } else {
	USBH_BulkOutEp = (pphost->device_prop.Ep_Desc[i][1].bEndpointAddress);
	USBH_BulkOutEpSize  = pphost->device_prop.Ep_Desc[i][1].wMaxPacketSize;
 8012f76:	481e      	ldr	r0, [pc, #120]	; (8012ff0 <USBH_InterfaceInit+0xf8>)

      if( pphost->device_prop.Ep_Desc[i][1].bEndpointAddress & 0x80 ) {
	USBH_BulkInEp = (pphost->device_prop.Ep_Desc[i][1].bEndpointAddress);
	USBH_BulkInEpSize  = pphost->device_prop.Ep_Desc[i][1].wMaxPacketSize;
      } else {
	USBH_BulkOutEp = (pphost->device_prop.Ep_Desc[i][1].bEndpointAddress);
 8012f78:	703e      	strb	r6, [r7, #0]
	USBH_BulkOutEpSize  = pphost->device_prop.Ep_Desc[i][1].wMaxPacketSize;
 8012f7a:	8002      	strh	r2, [r0, #0]
      }

      USBH_hc_num_out = USBH_Alloc_Channel(pdev, USBH_BulkOutEp);
 8012f7c:	7839      	ldrb	r1, [r7, #0]
 8012f7e:	4e1d      	ldr	r6, [pc, #116]	; (8012ff4 <USBH_InterfaceInit+0xfc>)
      USBH_hc_num_in = USBH_Alloc_Channel(pdev, USBH_BulkInEp);
 8012f80:	4f18      	ldr	r7, [pc, #96]	; (8012fe4 <USBH_InterfaceInit+0xec>)
      } else {
	USBH_BulkOutEp = (pphost->device_prop.Ep_Desc[i][1].bEndpointAddress);
	USBH_BulkOutEpSize  = pphost->device_prop.Ep_Desc[i][1].wMaxPacketSize;
      }

      USBH_hc_num_out = USBH_Alloc_Channel(pdev, USBH_BulkOutEp);
 8012f82:	4628      	mov	r0, r5
 8012f84:	f001 feed 	bl	8014d62 <USBH_Alloc_Channel>
      USBH_hc_num_in = USBH_Alloc_Channel(pdev, USBH_BulkInEp);
 8012f88:	7839      	ldrb	r1, [r7, #0]
      } else {
	USBH_BulkOutEp = (pphost->device_prop.Ep_Desc[i][1].bEndpointAddress);
	USBH_BulkOutEpSize  = pphost->device_prop.Ep_Desc[i][1].wMaxPacketSize;
      }

      USBH_hc_num_out = USBH_Alloc_Channel(pdev, USBH_BulkOutEp);
 8012f8a:	7030      	strb	r0, [r6, #0]
      USBH_hc_num_in = USBH_Alloc_Channel(pdev, USBH_BulkInEp);
 8012f8c:	4628      	mov	r0, r5
 8012f8e:	f001 fee8 	bl	8014d62 <USBH_Alloc_Channel>
 8012f92:	4f19      	ldr	r7, [pc, #100]	; (8012ff8 <USBH_InterfaceInit+0x100>)

      /* Open the new channels */
      USBH_Open_Channel(pdev,
 8012f94:	7831      	ldrb	r1, [r6, #0]
	USBH_BulkOutEp = (pphost->device_prop.Ep_Desc[i][1].bEndpointAddress);
	USBH_BulkOutEpSize  = pphost->device_prop.Ep_Desc[i][1].wMaxPacketSize;
      }

      USBH_hc_num_out = USBH_Alloc_Channel(pdev, USBH_BulkOutEp);
      USBH_hc_num_in = USBH_Alloc_Channel(pdev, USBH_BulkInEp);
 8012f96:	7038      	strb	r0, [r7, #0]

      /* Open the new channels */
      USBH_Open_Channel(pdev,
 8012f98:	2602      	movs	r6, #2
 8012f9a:	4815      	ldr	r0, [pc, #84]	; (8012ff0 <USBH_InterfaceInit+0xf8>)
 8012f9c:	9600      	str	r6, [sp, #0]
 8012f9e:	8800      	ldrh	r0, [r0, #0]
 8012fa0:	f894 2020 	ldrb.w	r2, [r4, #32]
 8012fa4:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8012fa8:	9001      	str	r0, [sp, #4]
 8012faa:	4628      	mov	r0, r5
 8012fac:	f001 fe92 	bl	8014cd4 <USBH_Open_Channel>
			pphost->device_prop.address,
			pphost->device_prop.speed,
			EP_TYPE_BULK,
			USBH_BulkOutEpSize);

      USBH_Open_Channel(pdev,
 8012fb0:	480d      	ldr	r0, [pc, #52]	; (8012fe8 <USBH_InterfaceInit+0xf0>)
 8012fb2:	7839      	ldrb	r1, [r7, #0]
 8012fb4:	9600      	str	r6, [sp, #0]
 8012fb6:	7800      	ldrb	r0, [r0, #0]
 8012fb8:	f894 2020 	ldrb.w	r2, [r4, #32]
 8012fbc:	9001      	str	r0, [sp, #4]
 8012fbe:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8012fc2:	4628      	mov	r0, r5
 8012fc4:	f001 fe86 	bl	8014cd4 <USBH_Open_Channel>
			pphost->device_prop.address,
			pphost->device_prop.speed,
			EP_TYPE_BULK,
			USBH_BulkInEpSize);

      MIOS32_USB_MIDI_ChangeConnectionState(1);
 8012fc8:	2001      	movs	r0, #1
 8012fca:	f7ff ff53 	bl	8012e74 <MIOS32_USB_MIDI_ChangeConnectionState>
      break;
    }
  }

  if( MIOS32_USB_MIDI_CheckAvailable(0) ) {
 8012fce:	2000      	movs	r0, #0
 8012fd0:	f7ff ff82 	bl	8012ed8 <MIOS32_USB_MIDI_CheckAvailable>
 8012fd4:	b118      	cbz	r0, 8012fde <USBH_InterfaceInit+0xe6>
    pphost->usr_cb->DeviceNotSupported();
 8012fd6:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8012fda:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8012fdc:	4798      	blx	r3
  }
	
  return USBH_OK;

}
 8012fde:	2000      	movs	r0, #0
 8012fe0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012fe2:	bf00      	nop
 8012fe4:	200002dd 	.word	0x200002dd
 8012fe8:	2000042d 	.word	0x2000042d
 8012fec:	200002dc 	.word	0x200002dc
 8012ff0:	20000434 	.word	0x20000434
 8012ff4:	20000437 	.word	0x20000437
 8012ff8:	20000432 	.word	0x20000432

08012ffc <MIOS32_USB_MIDI_PackageSend_NonBlocking>:
//! \return -2: buffer is full
//!             caller should retry until buffer is free again
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_MIDI_PackageSend_NonBlocking(mios32_midi_package_t package)
{
 8012ffc:	b538      	push	{r3, r4, r5, lr}
  // device available?
  if( !transfer_possible )
 8012ffe:	4c17      	ldr	r4, [pc, #92]	; (801305c <MIOS32_USB_MIDI_PackageSend_NonBlocking+0x60>)
 8013000:	7823      	ldrb	r3, [r4, #0]
//! \return -2: buffer is full
//!             caller should retry until buffer is free again
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_MIDI_PackageSend_NonBlocking(mios32_midi_package_t package)
{
 8013002:	4605      	mov	r5, r0
  // device available?
  if( !transfer_possible )
 8013004:	b913      	cbnz	r3, 801300c <MIOS32_USB_MIDI_PackageSend_NonBlocking+0x10>
    return -1;
 8013006:	f04f 30ff 	mov.w	r0, #4294967295
 801300a:	bd38      	pop	{r3, r4, r5, pc}

  // buffer full?
  if( tx_buffer_size >= (MIOS32_USB_MIDI_TX_BUFFER_SIZE-1) ) {
 801300c:	4814      	ldr	r0, [pc, #80]	; (8013060 <MIOS32_USB_MIDI_PackageSend_NonBlocking+0x64>)
 801300e:	8801      	ldrh	r1, [r0, #0]
 8013010:	b28a      	uxth	r2, r1
 8013012:	2a3e      	cmp	r2, #62	; 0x3e
 8013014:	d907      	bls.n	8013026 <MIOS32_USB_MIDI_PackageSend_NonBlocking+0x2a>
    // call USB handler, so that we are able to get the buffer free again on next execution
    // (this call simplifies polling loops!)
    MIOS32_USB_MIDI_TxBufferHandler();
 8013016:	f7ff fdd9 	bl	8012bcc <MIOS32_USB_MIDI_TxBufferHandler>

    // device still available?
    // (ensures that polling loop terminates if cable has been disconnected)
    if( !transfer_possible )
 801301a:	7823      	ldrb	r3, [r4, #0]
 801301c:	2b00      	cmp	r3, #0
 801301e:	d0f2      	beq.n	8013006 <MIOS32_USB_MIDI_PackageSend_NonBlocking+0xa>
      return -1;

    // notify that buffer was full (request retry)
    return -2;
 8013020:	f06f 0001 	mvn.w	r0, #1
 8013024:	bd38      	pop	{r3, r4, r5, pc}
  }

  // put package into buffer - this operation should be atomic!
  MIOS32_IRQ_Disable();
 8013026:	f7ff f913 	bl	8012250 <MIOS32_IRQ_Disable>
  tx_buffer[tx_buffer_head++] = package.ALL;
 801302a:	4b0e      	ldr	r3, [pc, #56]	; (8013064 <MIOS32_USB_MIDI_PackageSend_NonBlocking+0x68>)
 801302c:	490e      	ldr	r1, [pc, #56]	; (8013068 <MIOS32_USB_MIDI_PackageSend_NonBlocking+0x6c>)
 801302e:	8818      	ldrh	r0, [r3, #0]
 8013030:	b282      	uxth	r2, r0
 8013032:	1c50      	adds	r0, r2, #1
 8013034:	f841 5022 	str.w	r5, [r1, r2, lsl #2]
 8013038:	b282      	uxth	r2, r0
 801303a:	801a      	strh	r2, [r3, #0]
  if( tx_buffer_head >= MIOS32_USB_MIDI_TX_BUFFER_SIZE )
 801303c:	8819      	ldrh	r1, [r3, #0]
 801303e:	b288      	uxth	r0, r1
 8013040:	283f      	cmp	r0, #63	; 0x3f
 8013042:	d901      	bls.n	8013048 <MIOS32_USB_MIDI_PackageSend_NonBlocking+0x4c>
    tx_buffer_head = 0;
 8013044:	2200      	movs	r2, #0
 8013046:	801a      	strh	r2, [r3, #0]
  ++tx_buffer_size;
 8013048:	4b05      	ldr	r3, [pc, #20]	; (8013060 <MIOS32_USB_MIDI_PackageSend_NonBlocking+0x64>)
 801304a:	8819      	ldrh	r1, [r3, #0]
 801304c:	1c48      	adds	r0, r1, #1
 801304e:	b282      	uxth	r2, r0
 8013050:	801a      	strh	r2, [r3, #0]
  MIOS32_IRQ_Enable();
 8013052:	f7ff f911 	bl	8012278 <MIOS32_IRQ_Enable>

  return 0;
 8013056:	2000      	movs	r0, #0
}
 8013058:	bd38      	pop	{r3, r4, r5, pc}
 801305a:	bf00      	nop
 801305c:	20000433 	.word	0x20000433
 8013060:	2000042e 	.word	0x2000042e
 8013064:	20000424 	.word	0x20000424
 8013068:	200001d8 	.word	0x200001d8

0801306c <MIOS32_USB_MIDI_PackageSend>:
//! \return 0: no error
//! \return -1: USB not connected
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_MIDI_PackageSend(mios32_midi_package_t package)
{
 801306c:	b510      	push	{r4, lr}
 801306e:	4604      	mov	r4, r0
  // was successfull (MIDI port will be used by host), timeout value is
  // reset again

  s32 error;

  while( (error=MIOS32_USB_MIDI_PackageSend_NonBlocking(package)) == -2 ) {
 8013070:	4620      	mov	r0, r4
 8013072:	f7ff ffc3 	bl	8012ffc <MIOS32_USB_MIDI_PackageSend_NonBlocking>
 8013076:	1c83      	adds	r3, r0, #2
 8013078:	d108      	bne.n	801308c <MIOS32_USB_MIDI_PackageSend+0x20>
    if( timeout_ctr >= 10000 )
 801307a:	4b07      	ldr	r3, [pc, #28]	; (8013098 <MIOS32_USB_MIDI_PackageSend+0x2c>)
 801307c:	881a      	ldrh	r2, [r3, #0]
 801307e:	f242 710f 	movw	r1, #9999	; 0x270f
 8013082:	428a      	cmp	r2, r1
 8013084:	d807      	bhi.n	8013096 <MIOS32_USB_MIDI_PackageSend+0x2a>
      break;
    ++timeout_ctr;
 8013086:	1c50      	adds	r0, r2, #1
 8013088:	8018      	strh	r0, [r3, #0]
 801308a:	e7f1      	b.n	8013070 <MIOS32_USB_MIDI_PackageSend+0x4>
  }

  if( error >= 0 ) // no error: reset timeout counter
 801308c:	2800      	cmp	r0, #0
 801308e:	db02      	blt.n	8013096 <MIOS32_USB_MIDI_PackageSend+0x2a>
    timeout_ctr = 0;
 8013090:	4b01      	ldr	r3, [pc, #4]	; (8013098 <MIOS32_USB_MIDI_PackageSend+0x2c>)
 8013092:	2200      	movs	r2, #0
 8013094:	801a      	strh	r2, [r3, #0]

  return error;
}
 8013096:	bd10      	pop	{r4, pc}
 8013098:	2000042a 	.word	0x2000042a

0801309c <MIOS32_USB_MIDI_PackageReceive>:
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_MIDI_PackageReceive(mios32_midi_package_t *package)
{
  // package received?
  if( !rx_buffer_size )
 801309c:	4b11      	ldr	r3, [pc, #68]	; (80130e4 <MIOS32_USB_MIDI_PackageReceive+0x48>)
//! \return -1 if no package in buffer
//! \return >= 0: number of packages which are still in the buffer
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_MIDI_PackageReceive(mios32_midi_package_t *package)
{
 801309e:	b510      	push	{r4, lr}
 80130a0:	4604      	mov	r4, r0
  // package received?
  if( !rx_buffer_size )
 80130a2:	8818      	ldrh	r0, [r3, #0]
 80130a4:	b281      	uxth	r1, r0
 80130a6:	b1d1      	cbz	r1, 80130de <MIOS32_USB_MIDI_PackageReceive+0x42>
    return -1;

  // get package - this operation should be atomic!
  MIOS32_IRQ_Disable();
 80130a8:	f7ff f8d2 	bl	8012250 <MIOS32_IRQ_Disable>
  package->ALL = rx_buffer[rx_buffer_tail];
 80130ac:	4b0e      	ldr	r3, [pc, #56]	; (80130e8 <MIOS32_USB_MIDI_PackageReceive+0x4c>)
 80130ae:	490f      	ldr	r1, [pc, #60]	; (80130ec <MIOS32_USB_MIDI_PackageReceive+0x50>)
 80130b0:	881a      	ldrh	r2, [r3, #0]
 80130b2:	b290      	uxth	r0, r2
 80130b4:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
 80130b8:	6022      	str	r2, [r4, #0]
  if( ++rx_buffer_tail >= MIOS32_USB_MIDI_RX_BUFFER_SIZE )
 80130ba:	881c      	ldrh	r4, [r3, #0]
 80130bc:	1c60      	adds	r0, r4, #1
 80130be:	b281      	uxth	r1, r0
 80130c0:	293f      	cmp	r1, #63	; 0x3f
 80130c2:	8019      	strh	r1, [r3, #0]
 80130c4:	d901      	bls.n	80130ca <MIOS32_USB_MIDI_PackageReceive+0x2e>
    rx_buffer_tail = 0;
 80130c6:	2200      	movs	r2, #0
 80130c8:	801a      	strh	r2, [r3, #0]
  --rx_buffer_size;
 80130ca:	4c06      	ldr	r4, [pc, #24]	; (80130e4 <MIOS32_USB_MIDI_PackageReceive+0x48>)
 80130cc:	8823      	ldrh	r3, [r4, #0]
 80130ce:	1e58      	subs	r0, r3, #1
 80130d0:	b281      	uxth	r1, r0
 80130d2:	8021      	strh	r1, [r4, #0]
  MIOS32_IRQ_Enable();
 80130d4:	f7ff f8d0 	bl	8012278 <MIOS32_IRQ_Enable>

  return rx_buffer_size;
 80130d8:	8822      	ldrh	r2, [r4, #0]
 80130da:	b290      	uxth	r0, r2
 80130dc:	bd10      	pop	{r4, pc}
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_MIDI_PackageReceive(mios32_midi_package_t *package)
{
  // package received?
  if( !rx_buffer_size )
    return -1;
 80130de:	f04f 30ff 	mov.w	r0, #4294967295
    rx_buffer_tail = 0;
  --rx_buffer_size;
  MIOS32_IRQ_Enable();

  return rx_buffer_size;
}
 80130e2:	bd10      	pop	{r4, pc}
 80130e4:	200002da 	.word	0x200002da
 80130e8:	200002d8 	.word	0x200002d8
 80130ec:	20000324 	.word	0x20000324

080130f0 <MIOS32_USB_MIDI_Periodic_mS>:
//! model!
//! 
//! \return < 0 on errors
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_USB_MIDI_Periodic_mS(void)
{
 80130f0:	b508      	push	{r3, lr}
  if( USB_OTG_IsHostMode(&USB_OTG_dev) ) {
 80130f2:	4807      	ldr	r0, [pc, #28]	; (8013110 <MIOS32_USB_MIDI_Periodic_mS+0x20>)
 80130f4:	f002 fa2e 	bl	8015554 <USB_OTG_IsHostMode>
 80130f8:	b120      	cbz	r0, 8013104 <MIOS32_USB_MIDI_Periodic_mS+0x14>
#ifndef MIOS32_DONT_USE_USB_HOST
    // process the USB host events
    USBH_Process(&USB_OTG_dev, &USB_Host);
 80130fa:	4805      	ldr	r0, [pc, #20]	; (8013110 <MIOS32_USB_MIDI_Periodic_mS+0x20>)
 80130fc:	4905      	ldr	r1, [pc, #20]	; (8013114 <MIOS32_USB_MIDI_Periodic_mS+0x24>)
 80130fe:	f001 fc47 	bl	8014990 <USBH_Process>
 8013102:	e003      	b.n	801310c <MIOS32_USB_MIDI_Periodic_mS+0x1c>
#endif
  } else {
    // check for received packages
    MIOS32_USB_MIDI_RxBufferHandler();
 8013104:	f7ff fd0c 	bl	8012b20 <MIOS32_USB_MIDI_RxBufferHandler>

    // check for packages which should be transmitted
    MIOS32_USB_MIDI_TxBufferHandler();
 8013108:	f7ff fd60 	bl	8012bcc <MIOS32_USB_MIDI_TxBufferHandler>
  }

  return 0;
}
 801310c:	2000      	movs	r0, #0
 801310e:	bd08      	pop	{r3, pc}
 8013110:	20002e98 	.word	0x20002e98
 8013114:	2000392c 	.word	0x2000392c

08013118 <MIOS32_USB_MIDI_EP1_IN_Callback>:
//! \note also: bEP, bEPStatus only relevant for LPC17xx port
/////////////////////////////////////////////////////////////////////////////
void MIOS32_USB_MIDI_EP1_IN_Callback(u8 bEP, u8 bEPStatus)
{
  // package has been sent
  tx_buffer_busy = 0;
 8013118:	4b02      	ldr	r3, [pc, #8]	; (8013124 <MIOS32_USB_MIDI_EP1_IN_Callback+0xc>)
 801311a:	2200      	movs	r2, #0
 801311c:	701a      	strb	r2, [r3, #0]

  // check for next package
  MIOS32_USB_MIDI_TxBufferHandler();
 801311e:	f7ff bd55 	b.w	8012bcc <MIOS32_USB_MIDI_TxBufferHandler>
 8013122:	bf00      	nop
 8013124:	20000320 	.word	0x20000320

08013128 <MIOS32_USB_MIDI_EP2_OUT_Callback>:
//! \note also: bEP, bEPStatus only relevant for LPC17xx port
/////////////////////////////////////////////////////////////////////////////
void MIOS32_USB_MIDI_EP2_OUT_Callback(u8 bEP, u8 bEPStatus)
{
  // put package into buffer
  rx_buffer_new_data = 1;
 8013128:	4b02      	ldr	r3, [pc, #8]	; (8013134 <MIOS32_USB_MIDI_EP2_OUT_Callback+0xc>)
 801312a:	2201      	movs	r2, #1
 801312c:	701a      	strb	r2, [r3, #0]
  MIOS32_USB_MIDI_RxBufferHandler();
 801312e:	f7ff bcf7 	b.w	8012b20 <MIOS32_USB_MIDI_RxBufferHandler>
 8013132:	bf00      	nop
 8013134:	20000426 	.word	0x20000426

08013138 <MIOS32_UART_BaudrateSet>:
//! \return 0: baudrate has been changed
//! \return -1: uart not available
//! \return -2: function not prepared for this UART
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_BaudrateSet(u8 uart, u32 baudrate)
{
 8013138:	b530      	push	{r4, r5, lr}
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
 801313a:	2801      	cmp	r0, #1
//! \return 0: baudrate has been changed
//! \return -1: uart not available
//! \return -2: function not prepared for this UART
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_BaudrateSet(u8 uart, u32 baudrate)
{
 801313c:	b085      	sub	sp, #20
 801313e:	4604      	mov	r4, r0
 8013140:	460d      	mov	r5, r1
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
 8013142:	d81b      	bhi.n	801317c <MIOS32_UART_BaudrateSet+0x44>
  USART_InitTypeDef USART_InitStructure;
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
  USART_InitStructure.USART_Parity = USART_Parity_No;
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8013144:	f04f 010c 	mov.w	r1, #12

  USART_InitStructure.USART_BaudRate = baudrate;
 8013148:	aa04      	add	r2, sp, #16
  if( uart >= NUM_SUPPORTED_UARTS )
    return -1;

  // USART configuration
  USART_InitTypeDef USART_InitStructure;
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 801314a:	f04f 0300 	mov.w	r3, #0
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;

  USART_InitStructure.USART_BaudRate = baudrate;

  switch( uart ) {
  case 0: USART_Init(MIOS32_UART0, &USART_InitStructure); break;
 801314e:	bf14      	ite	ne
 8013150:	480c      	ldrne	r0, [pc, #48]	; (8013184 <MIOS32_UART_BaudrateSet+0x4c>)
#if NUM_SUPPORTED_UARTS >= 2
  case 1: USART_Init(MIOS32_UART1, &USART_InitStructure); break;
 8013152:	480d      	ldreq	r0, [pc, #52]	; (8013188 <MIOS32_UART_BaudrateSet+0x50>)
  USART_InitTypeDef USART_InitStructure;
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
  USART_InitStructure.USART_Parity = USART_Parity_No;
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8013154:	f8ad 100a 	strh.w	r1, [sp, #10]
  USART_InitStructure.USART_BaudRate = baudrate;

  switch( uart ) {
  case 0: USART_Init(MIOS32_UART0, &USART_InitStructure); break;
#if NUM_SUPPORTED_UARTS >= 2
  case 1: USART_Init(MIOS32_UART1, &USART_InitStructure); break;
 8013158:	4669      	mov	r1, sp
  if( uart >= NUM_SUPPORTED_UARTS )
    return -1;

  // USART configuration
  USART_InitTypeDef USART_InitStructure;
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 801315a:	f8ad 3004 	strh.w	r3, [sp, #4]
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
 801315e:	f8ad 3006 	strh.w	r3, [sp, #6]
  USART_InitStructure.USART_Parity = USART_Parity_No;
 8013162:	f8ad 3008 	strh.w	r3, [sp, #8]
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8013166:	f8ad 300c 	strh.w	r3, [sp, #12]
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;

  USART_InitStructure.USART_BaudRate = baudrate;
 801316a:	f842 5d10 	str.w	r5, [r2, #-16]!

  switch( uart ) {
  case 0: USART_Init(MIOS32_UART0, &USART_InitStructure); break;
#if NUM_SUPPORTED_UARTS >= 2
  case 1: USART_Init(MIOS32_UART1, &USART_InitStructure); break;
 801316e:	f000 fecb 	bl	8013f08 <USART_Init>
  default:
    return -2; // not prepared
  }

  // store baudrate in array
  uart_baudrate[uart] = baudrate;
 8013172:	4806      	ldr	r0, [pc, #24]	; (801318c <MIOS32_UART_BaudrateSet+0x54>)
 8013174:	f840 5024 	str.w	r5, [r0, r4, lsl #2]

  return 0;
 8013178:	2000      	movs	r0, #0
 801317a:	e001      	b.n	8013180 <MIOS32_UART_BaudrateSet+0x48>
{
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
    return -1;
 801317c:	f04f 30ff 	mov.w	r0, #4294967295
  // store baudrate in array
  uart_baudrate[uart] = baudrate;

  return 0;
#endif
}
 8013180:	b005      	add	sp, #20
 8013182:	bd30      	pop	{r4, r5, pc}
 8013184:	40004400 	.word	0x40004400
 8013188:	40004800 	.word	0x40004800
 801318c:	20000544 	.word	0x20000544

08013190 <MIOS32_UART_Init>:
//! \param[in] mode currently only mode 0 supported
//! \return < 0 if initialisation failed
//! \note Applications shouldn't call this function directly, instead please use \ref MIOS32_COM or \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_Init(u32 mode)
{
 8013190:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStructure;

  // currently only mode 0 supported
  if( mode != 0 )
 8013192:	4604      	mov	r4, r0
 8013194:	2800      	cmp	r0, #0
 8013196:	f040 8084 	bne.w	80132a2 <MIOS32_UART_Init+0x112>
  return -1; // no UARTs
#else

  // map UART pins
#if MIOS32_UART0_ASSIGNMENT != 0
  MIOS32_UART0_REMAP_FUNC;
 801319a:	2102      	movs	r1, #2
 801319c:	2207      	movs	r2, #7
 801319e:	4842      	ldr	r0, [pc, #264]	; (80132a8 <MIOS32_UART_Init+0x118>)
 80131a0:	f000 fc8a 	bl	8013ab8 <GPIO_PinAFConfig>
 80131a4:	2103      	movs	r1, #3
 80131a6:	2207      	movs	r2, #7
 80131a8:	483f      	ldr	r0, [pc, #252]	; (80132a8 <MIOS32_UART_Init+0x118>)
 80131aa:	f000 fc85 	bl	8013ab8 <GPIO_PinAFConfig>
#endif
#if NUM_SUPPORTED_UARTS >= 2 && MIOS32_UART1_ASSIGNMENT != 0
  MIOS32_UART1_REMAP_FUNC;
 80131ae:	2108      	movs	r1, #8
 80131b0:	2207      	movs	r2, #7
 80131b2:	483e      	ldr	r0, [pc, #248]	; (80132ac <MIOS32_UART_Init+0x11c>)
 80131b4:	f000 fc80 	bl	8013ab8 <GPIO_PinAFConfig>
 80131b8:	2207      	movs	r2, #7
 80131ba:	2109      	movs	r1, #9
 80131bc:	483b      	ldr	r0, [pc, #236]	; (80132ac <MIOS32_UART_Init+0x11c>)
 80131be:	f000 fc7b 	bl	8013ab8 <GPIO_PinAFConfig>
#if NUM_SUPPORTED_UARTS >= 4 && MIOS32_UART2_ASSIGNMENT != 0
  MIOS32_UART3_REMAP_FUNC;
#endif

  // configure UART pins
  GPIO_StructInit(&GPIO_InitStructure);
 80131c2:	4668      	mov	r0, sp
  // outputs as open-drain
#if MIOS32_UART0_ASSIGNMENT != 0
  GPIO_InitStructure.GPIO_Pin = MIOS32_UART0_TX_PIN;
  GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
#if MIOS32_UART0_TX_OD
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 80131c4:	2501      	movs	r5, #1
#if NUM_SUPPORTED_UARTS >= 4 && MIOS32_UART2_ASSIGNMENT != 0
  MIOS32_UART3_REMAP_FUNC;
#endif

  // configure UART pins
  GPIO_StructInit(&GPIO_InitStructure);
 80131c6:	f000 fc6a 	bl	8013a9e <GPIO_StructInit>
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;

  // outputs as open-drain
#if MIOS32_UART0_ASSIGNMENT != 0
  GPIO_InitStructure.GPIO_Pin = MIOS32_UART0_TX_PIN;
 80131ca:	2604      	movs	r6, #4
  GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
 80131cc:	2702      	movs	r7, #2
#if MIOS32_UART0_TX_OD
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
#else
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
#endif
  GPIO_Init(MIOS32_UART0_TX_PORT, &GPIO_InitStructure);
 80131ce:	4836      	ldr	r0, [pc, #216]	; (80132a8 <MIOS32_UART_Init+0x118>)
  GPIO_StructInit(&GPIO_InitStructure);
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;

  // outputs as open-drain
#if MIOS32_UART0_ASSIGNMENT != 0
  GPIO_InitStructure.GPIO_Pin = MIOS32_UART0_TX_PIN;
 80131d0:	9600      	str	r6, [sp, #0]
#if MIOS32_UART0_TX_OD
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
#else
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
#endif
  GPIO_Init(MIOS32_UART0_TX_PORT, &GPIO_InitStructure);
 80131d2:	4669      	mov	r1, sp
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;

  // outputs as open-drain
#if MIOS32_UART0_ASSIGNMENT != 0
  GPIO_InitStructure.GPIO_Pin = MIOS32_UART0_TX_PIN;
  GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
 80131d4:	f88d 7004 	strb.w	r7, [sp, #4]
  MIOS32_UART3_REMAP_FUNC;
#endif

  // configure UART pins
  GPIO_StructInit(&GPIO_InitStructure);
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 80131d8:	f88d 4005 	strb.w	r4, [sp, #5]
  // outputs as open-drain
#if MIOS32_UART0_ASSIGNMENT != 0
  GPIO_InitStructure.GPIO_Pin = MIOS32_UART0_TX_PIN;
  GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
#if MIOS32_UART0_TX_OD
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 80131dc:	f88d 5006 	strb.w	r5, [sp, #6]
#else
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
#endif
  GPIO_Init(MIOS32_UART0_TX_PORT, &GPIO_InitStructure);
 80131e0:	f000 fc10 	bl	8013a04 <GPIO_Init>
#endif

#if NUM_SUPPORTED_UARTS >= 2 && MIOS32_UART1_ASSIGNMENT != 0
  GPIO_InitStructure.GPIO_Pin = MIOS32_UART1_TX_PIN;
 80131e4:	f44f 7380 	mov.w	r3, #256	; 0x100
#if MIOS32_UART1_TX_OD
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
#else
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
#endif
  GPIO_Init(MIOS32_UART1_TX_PORT, &GPIO_InitStructure);
 80131e8:	4830      	ldr	r0, [pc, #192]	; (80132ac <MIOS32_UART_Init+0x11c>)
#endif
  GPIO_Init(MIOS32_UART0_TX_PORT, &GPIO_InitStructure);
#endif

#if NUM_SUPPORTED_UARTS >= 2 && MIOS32_UART1_ASSIGNMENT != 0
  GPIO_InitStructure.GPIO_Pin = MIOS32_UART1_TX_PIN;
 80131ea:	9300      	str	r3, [sp, #0]
#if MIOS32_UART1_TX_OD
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
#else
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
#endif
  GPIO_Init(MIOS32_UART1_TX_PORT, &GPIO_InitStructure);
 80131ec:	4669      	mov	r1, sp
  GPIO_Init(MIOS32_UART0_TX_PORT, &GPIO_InitStructure);
#endif

#if NUM_SUPPORTED_UARTS >= 2 && MIOS32_UART1_ASSIGNMENT != 0
  GPIO_InitStructure.GPIO_Pin = MIOS32_UART1_TX_PIN;
  GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
 80131ee:	f88d 7004 	strb.w	r7, [sp, #4]
#if MIOS32_UART1_TX_OD
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 80131f2:	f88d 5006 	strb.w	r5, [sp, #6]
#else
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
#endif
  GPIO_Init(MIOS32_UART1_TX_PORT, &GPIO_InitStructure);
 80131f6:	f000 fc05 	bl	8013a04 <GPIO_Init>

  // inputs with internal pull-up
  GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
#if MIOS32_UART0_ASSIGNMENT != 0
  GPIO_InitStructure.GPIO_Pin = MIOS32_UART0_RX_PIN;
 80131fa:	2008      	movs	r0, #8
 80131fc:	9000      	str	r0, [sp, #0]
  GPIO_Init(MIOS32_UART0_RX_PORT, &GPIO_InitStructure);
 80131fe:	4669      	mov	r1, sp
 8013200:	4829      	ldr	r0, [pc, #164]	; (80132a8 <MIOS32_UART_Init+0x118>)
#endif
  GPIO_Init(MIOS32_UART3_TX_PORT, &GPIO_InitStructure);
#endif

  // inputs with internal pull-up
  GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
 8013202:	f88d 7004 	strb.w	r7, [sp, #4]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
 8013206:	f88d 5007 	strb.w	r5, [sp, #7]
#if MIOS32_UART0_ASSIGNMENT != 0
  GPIO_InitStructure.GPIO_Pin = MIOS32_UART0_RX_PIN;
  GPIO_Init(MIOS32_UART0_RX_PORT, &GPIO_InitStructure);
 801320a:	f000 fbfb 	bl	8013a04 <GPIO_Init>
#endif
#if NUM_SUPPORTED_UARTS >= 2 && MIOS32_UART1_ASSIGNMENT != 0
  GPIO_InitStructure.GPIO_Pin = MIOS32_UART1_RX_PIN;
 801320e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8013212:	9100      	str	r1, [sp, #0]
  GPIO_Init(MIOS32_UART1_RX_PORT, &GPIO_InitStructure);
 8013214:	4825      	ldr	r0, [pc, #148]	; (80132ac <MIOS32_UART_Init+0x11c>)
#endif

  // clear buffer counters
  int i;
  for(i=0; i<NUM_SUPPORTED_UARTS; ++i) {
    rx_buffer_tail[i] = rx_buffer_head[i] = rx_buffer_size[i] = 0;
 8013216:	4f26      	ldr	r7, [pc, #152]	; (80132b0 <MIOS32_UART_Init+0x120>)
  GPIO_InitStructure.GPIO_Pin = MIOS32_UART0_RX_PIN;
  GPIO_Init(MIOS32_UART0_RX_PORT, &GPIO_InitStructure);
#endif
#if NUM_SUPPORTED_UARTS >= 2 && MIOS32_UART1_ASSIGNMENT != 0
  GPIO_InitStructure.GPIO_Pin = MIOS32_UART1_RX_PIN;
  GPIO_Init(MIOS32_UART1_RX_PORT, &GPIO_InitStructure);
 8013218:	4669      	mov	r1, sp
 801321a:	f000 fbf3 	bl	8013a04 <GPIO_Init>
  GPIO_Init(MIOS32_UART3_RX_PORT, &GPIO_InitStructure);
#endif

  // enable all USART clocks
  // TODO: more generic approach for different UART selections
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | RCC_APB2Periph_USART6, ENABLE);
 801321e:	2030      	movs	r0, #48	; 0x30
 8013220:	4629      	mov	r1, r5
 8013222:	f000 fd0f 	bl	8013c44 <RCC_APB2PeriphClockCmd>
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2 | RCC_APB1Periph_USART3 | RCC_APB1Periph_UART4 | RCC_APB1Periph_UART5, ENABLE);
 8013226:	f44f 10f0 	mov.w	r0, #1966080	; 0x1e0000
 801322a:	4629      	mov	r1, r5
 801322c:	f000 fcfe 	bl	8013c2c <RCC_APB1PeriphClockCmd>

  // USART configuration
#if MIOS32_UART0_ASSIGNMENT != 0
  MIOS32_UART_BaudrateSet(0, MIOS32_UART0_BAUDRATE);
 8013230:	f647 2112 	movw	r1, #31250	; 0x7a12
 8013234:	4620      	mov	r0, r4
 8013236:	f7ff ff7f 	bl	8013138 <MIOS32_UART_BaudrateSet>
#endif
#if NUM_SUPPORTED_UARTS >= 2 && MIOS32_UART1_ASSIGNMENT != 0
  MIOS32_UART_BaudrateSet(1, MIOS32_UART1_BAUDRATE);
 801323a:	f647 2112 	movw	r1, #31250	; 0x7a12
 801323e:	4628      	mov	r0, r5
 8013240:	f7ff ff7a 	bl	8013138 <MIOS32_UART_BaudrateSet>
  MIOS32_UART_BaudrateSet(3, MIOS32_UART3_BAUDRATE);
#endif

  // configure and enable UART interrupts
#if MIOS32_UART0_ASSIGNMENT != 0
  MIOS32_IRQ_Install(MIOS32_UART0_IRQ_CHANNEL, MIOS32_IRQ_UART_PRIORITY);
 8013244:	4631      	mov	r1, r6
 8013246:	2026      	movs	r0, #38	; 0x26
 8013248:	f7ff f82a 	bl	80122a0 <MIOS32_IRQ_Install>
  USART_ITConfig(MIOS32_UART0, USART_IT_RXNE, ENABLE);
 801324c:	462a      	mov	r2, r5
 801324e:	4819      	ldr	r0, [pc, #100]	; (80132b4 <MIOS32_UART_Init+0x124>)
 8013250:	f240 5125 	movw	r1, #1317	; 0x525
 8013254:	f000 fec0 	bl	8013fd8 <USART_ITConfig>
#endif

#if NUM_SUPPORTED_UARTS >= 2 && MIOS32_UART1_ASSIGNMENT != 0
  MIOS32_IRQ_Install(MIOS32_UART1_IRQ_CHANNEL, MIOS32_IRQ_UART_PRIORITY);
 8013258:	4631      	mov	r1, r6
 801325a:	2027      	movs	r0, #39	; 0x27
 801325c:	f7ff f820 	bl	80122a0 <MIOS32_IRQ_Install>
  USART_ITConfig(MIOS32_UART1, USART_IT_RXNE, ENABLE);
 8013260:	4815      	ldr	r0, [pc, #84]	; (80132b8 <MIOS32_UART_Init+0x128>)
#endif

  // clear buffer counters
  int i;
  for(i=0; i<NUM_SUPPORTED_UARTS; ++i) {
    rx_buffer_tail[i] = rx_buffer_head[i] = rx_buffer_size[i] = 0;
 8013262:	4e16      	ldr	r6, [pc, #88]	; (80132bc <MIOS32_UART_Init+0x12c>)
  USART_ITConfig(MIOS32_UART0, USART_IT_RXNE, ENABLE);
#endif

#if NUM_SUPPORTED_UARTS >= 2 && MIOS32_UART1_ASSIGNMENT != 0
  MIOS32_IRQ_Install(MIOS32_UART1_IRQ_CHANNEL, MIOS32_IRQ_UART_PRIORITY);
  USART_ITConfig(MIOS32_UART1, USART_IT_RXNE, ENABLE);
 8013264:	f240 5125 	movw	r1, #1317	; 0x525
 8013268:	462a      	mov	r2, r5
 801326a:	f000 feb5 	bl	8013fd8 <USART_ITConfig>

  // clear buffer counters
  int i;
  for(i=0; i<NUM_SUPPORTED_UARTS; ++i) {
    rx_buffer_tail[i] = rx_buffer_head[i] = rx_buffer_size[i] = 0;
    tx_buffer_tail[i] = tx_buffer_head[i] = tx_buffer_size[i] = 0;
 801326e:	4a14      	ldr	r2, [pc, #80]	; (80132c0 <MIOS32_UART_Init+0x130>)
 8013270:	4b14      	ldr	r3, [pc, #80]	; (80132c4 <MIOS32_UART_Init+0x134>)
#endif

  // clear buffer counters
  int i;
  for(i=0; i<NUM_SUPPORTED_UARTS; ++i) {
    rx_buffer_tail[i] = rx_buffer_head[i] = rx_buffer_size[i] = 0;
 8013272:	4815      	ldr	r0, [pc, #84]	; (80132c8 <MIOS32_UART_Init+0x138>)
    tx_buffer_tail[i] = tx_buffer_head[i] = tx_buffer_size[i] = 0;
 8013274:	4915      	ldr	r1, [pc, #84]	; (80132cc <MIOS32_UART_Init+0x13c>)
#endif

  // clear buffer counters
  int i;
  for(i=0; i<NUM_SUPPORTED_UARTS; ++i) {
    rx_buffer_tail[i] = rx_buffer_head[i] = rx_buffer_size[i] = 0;
 8013276:	703c      	strb	r4, [r7, #0]
 8013278:	7034      	strb	r4, [r6, #0]
 801327a:	7004      	strb	r4, [r0, #0]
    tx_buffer_tail[i] = tx_buffer_head[i] = tx_buffer_size[i] = 0;
 801327c:	700c      	strb	r4, [r1, #0]
 801327e:	7014      	strb	r4, [r2, #0]
 8013280:	701c      	strb	r4, [r3, #0]
#endif

  // clear buffer counters
  int i;
  for(i=0; i<NUM_SUPPORTED_UARTS; ++i) {
    rx_buffer_tail[i] = rx_buffer_head[i] = rx_buffer_size[i] = 0;
 8013282:	707c      	strb	r4, [r7, #1]
 8013284:	7074      	strb	r4, [r6, #1]
 8013286:	7044      	strb	r4, [r0, #1]
    tx_buffer_tail[i] = tx_buffer_head[i] = tx_buffer_size[i] = 0;
 8013288:	704c      	strb	r4, [r1, #1]
  }

  // enable UARTs
#if MIOS32_UART0_ASSIGNMENT != 0
  USART_Cmd(MIOS32_UART0, ENABLE);
 801328a:	480a      	ldr	r0, [pc, #40]	; (80132b4 <MIOS32_UART_Init+0x124>)

  // clear buffer counters
  int i;
  for(i=0; i<NUM_SUPPORTED_UARTS; ++i) {
    rx_buffer_tail[i] = rx_buffer_head[i] = rx_buffer_size[i] = 0;
    tx_buffer_tail[i] = tx_buffer_head[i] = tx_buffer_size[i] = 0;
 801328c:	7054      	strb	r4, [r2, #1]
  }

  // enable UARTs
#if MIOS32_UART0_ASSIGNMENT != 0
  USART_Cmd(MIOS32_UART0, ENABLE);
 801328e:	4629      	mov	r1, r5

  // clear buffer counters
  int i;
  for(i=0; i<NUM_SUPPORTED_UARTS; ++i) {
    rx_buffer_tail[i] = rx_buffer_head[i] = rx_buffer_size[i] = 0;
    tx_buffer_tail[i] = tx_buffer_head[i] = tx_buffer_size[i] = 0;
 8013290:	705c      	strb	r4, [r3, #1]
  }

  // enable UARTs
#if MIOS32_UART0_ASSIGNMENT != 0
  USART_Cmd(MIOS32_UART0, ENABLE);
 8013292:	f000 fe95 	bl	8013fc0 <USART_Cmd>
#endif
#if NUM_SUPPORTED_UARTS >= 2 && MIOS32_UART1_ASSIGNMENT != 0
  USART_Cmd(MIOS32_UART1, ENABLE);
 8013296:	4808      	ldr	r0, [pc, #32]	; (80132b8 <MIOS32_UART_Init+0x128>)
 8013298:	4629      	mov	r1, r5
 801329a:	f000 fe91 	bl	8013fc0 <USART_Cmd>
#endif
#if NUM_SUPPORTED_UARTS >= 4 && MIOS32_UART3_ASSIGNMENT != 0
  USART_Cmd(MIOS32_UART3, ENABLE);
#endif

  return 0; // no error
 801329e:	4620      	mov	r0, r4
 80132a0:	e001      	b.n	80132a6 <MIOS32_UART_Init+0x116>
{
  GPIO_InitTypeDef GPIO_InitStructure;

  // currently only mode 0 supported
  if( mode != 0 )
    return -1; // unsupported mode
 80132a2:	f04f 30ff 	mov.w	r0, #4294967295
  USART_Cmd(MIOS32_UART3, ENABLE);
#endif

  return 0; // no error
#endif
}
 80132a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80132a8:	40020000 	.word	0x40020000
 80132ac:	40020c00 	.word	0x40020c00
 80132b0:	2000043a 	.word	0x2000043a
 80132b4:	40004400 	.word	0x40004400
 80132b8:	40004800 	.word	0x40004800
 80132bc:	2000053e 	.word	0x2000053e
 80132c0:	2000054c 	.word	0x2000054c
 80132c4:	20000438 	.word	0x20000438
 80132c8:	2000043c 	.word	0x2000043c
 80132cc:	20000540 	.word	0x20000540

080132d0 <MIOS32_UART_RxBufferGet>:
s32 MIOS32_UART_RxBufferGet(u8 uart)
{
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
 80132d0:	2801      	cmp	r0, #1
//! \return -2 if no new byte available
//! \return >= 0: number of received bytes
//! \note Applications shouldn't call these functions directly, instead please use \ref MIOS32_COM or \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_RxBufferGet(u8 uart)
{
 80132d2:	b538      	push	{r3, r4, r5, lr}
 80132d4:	4604      	mov	r4, r0
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
 80132d6:	d81b      	bhi.n	8013310 <MIOS32_UART_RxBufferGet+0x40>
    return -1; // UART not available

  if( !rx_buffer_size[uart] )
 80132d8:	4b10      	ldr	r3, [pc, #64]	; (801331c <MIOS32_UART_RxBufferGet+0x4c>)
 80132da:	5c18      	ldrb	r0, [r3, r0]
 80132dc:	b1d8      	cbz	r0, 8013316 <MIOS32_UART_RxBufferGet+0x46>
    return -2; // nothing new in buffer

  // get byte - this operation should be atomic!
  MIOS32_IRQ_Disable();
 80132de:	f7fe ffb7 	bl	8012250 <MIOS32_IRQ_Disable>
  u8 b = rx_buffer[uart][rx_buffer_tail[uart]];
 80132e2:	4b0f      	ldr	r3, [pc, #60]	; (8013320 <MIOS32_UART_RxBufferGet+0x50>)
 80132e4:	490f      	ldr	r1, [pc, #60]	; (8013324 <MIOS32_UART_RxBufferGet+0x54>)
 80132e6:	5d1a      	ldrb	r2, [r3, r4]
  if( ++rx_buffer_tail[uart] >= MIOS32_UART_RX_BUFFER_SIZE )
 80132e8:	5d18      	ldrb	r0, [r3, r4]
  if( !rx_buffer_size[uart] )
    return -2; // nothing new in buffer

  // get byte - this operation should be atomic!
  MIOS32_IRQ_Disable();
  u8 b = rx_buffer[uart][rx_buffer_tail[uart]];
 80132ea:	eb02 1584 	add.w	r5, r2, r4, lsl #6
  if( ++rx_buffer_tail[uart] >= MIOS32_UART_RX_BUFFER_SIZE )
 80132ee:	1c42      	adds	r2, r0, #1
  if( !rx_buffer_size[uart] )
    return -2; // nothing new in buffer

  // get byte - this operation should be atomic!
  MIOS32_IRQ_Disable();
  u8 b = rx_buffer[uart][rx_buffer_tail[uart]];
 80132f0:	5d4d      	ldrb	r5, [r1, r5]
  if( ++rx_buffer_tail[uart] >= MIOS32_UART_RX_BUFFER_SIZE )
 80132f2:	b2d1      	uxtb	r1, r2
 80132f4:	293f      	cmp	r1, #63	; 0x3f
 80132f6:	5519      	strb	r1, [r3, r4]
 80132f8:	d901      	bls.n	80132fe <MIOS32_UART_RxBufferGet+0x2e>
    rx_buffer_tail[uart] = 0;
 80132fa:	2000      	movs	r0, #0
 80132fc:	5518      	strb	r0, [r3, r4]
  --rx_buffer_size[uart];
 80132fe:	4b07      	ldr	r3, [pc, #28]	; (801331c <MIOS32_UART_RxBufferGet+0x4c>)
 8013300:	5d1a      	ldrb	r2, [r3, r4]
 8013302:	1e51      	subs	r1, r2, #1
 8013304:	b2c8      	uxtb	r0, r1
 8013306:	5518      	strb	r0, [r3, r4]
  MIOS32_IRQ_Enable();
 8013308:	f7fe ffb6 	bl	8012278 <MIOS32_IRQ_Enable>

  return b; // return received byte
 801330c:	4628      	mov	r0, r5
 801330e:	bd38      	pop	{r3, r4, r5, pc}
{
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
    return -1; // UART not available
 8013310:	f04f 30ff 	mov.w	r0, #4294967295
 8013314:	bd38      	pop	{r3, r4, r5, pc}

  if( !rx_buffer_size[uart] )
    return -2; // nothing new in buffer
 8013316:	f06f 0001 	mvn.w	r0, #1
  --rx_buffer_size[uart];
  MIOS32_IRQ_Enable();

  return b; // return received byte
#endif
}
 801331a:	bd38      	pop	{r3, r4, r5, pc}
 801331c:	2000043a 	.word	0x2000043a
 8013320:	2000043c 	.word	0x2000043c
 8013324:	200004be 	.word	0x200004be

08013328 <MIOS32_UART_RxBufferPut>:
s32 MIOS32_UART_RxBufferPut(u8 uart, u8 b)
{
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
 8013328:	2801      	cmp	r0, #1
//! \return -1 if UART not available
//! \return -2 if buffer full (retry)
//! \note Applications shouldn't call these functions directly, instead please use \ref MIOS32_COM or \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_RxBufferPut(u8 uart, u8 b)
{
 801332a:	b538      	push	{r3, r4, r5, lr}
 801332c:	4604      	mov	r4, r0
 801332e:	460d      	mov	r5, r1
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
 8013330:	d81c      	bhi.n	801336c <MIOS32_UART_RxBufferPut+0x44>
    return -1; // UART not available

  if( rx_buffer_size[uart] >= MIOS32_UART_RX_BUFFER_SIZE )
 8013332:	4b11      	ldr	r3, [pc, #68]	; (8013378 <MIOS32_UART_RxBufferPut+0x50>)
 8013334:	5c18      	ldrb	r0, [r3, r0]
 8013336:	283f      	cmp	r0, #63	; 0x3f
 8013338:	d81b      	bhi.n	8013372 <MIOS32_UART_RxBufferPut+0x4a>
    return -2; // buffer full (retry)

  // copy received byte into receive buffer
  // this operation should be atomic!
  MIOS32_IRQ_Disable();
 801333a:	f7fe ff89 	bl	8012250 <MIOS32_IRQ_Disable>
  rx_buffer[uart][rx_buffer_head[uart]] = b;
 801333e:	4b0f      	ldr	r3, [pc, #60]	; (801337c <MIOS32_UART_RxBufferPut+0x54>)
 8013340:	490f      	ldr	r1, [pc, #60]	; (8013380 <MIOS32_UART_RxBufferPut+0x58>)
 8013342:	5d1a      	ldrb	r2, [r3, r4]
 8013344:	eb02 1084 	add.w	r0, r2, r4, lsl #6
  if( ++rx_buffer_head[uart] >= MIOS32_UART_RX_BUFFER_SIZE )
 8013348:	5d1a      	ldrb	r2, [r3, r4]
    return -2; // buffer full (retry)

  // copy received byte into receive buffer
  // this operation should be atomic!
  MIOS32_IRQ_Disable();
  rx_buffer[uart][rx_buffer_head[uart]] = b;
 801334a:	540d      	strb	r5, [r1, r0]
  if( ++rx_buffer_head[uart] >= MIOS32_UART_RX_BUFFER_SIZE )
 801334c:	1c50      	adds	r0, r2, #1
 801334e:	b2c1      	uxtb	r1, r0
 8013350:	293f      	cmp	r1, #63	; 0x3f
 8013352:	5519      	strb	r1, [r3, r4]
 8013354:	d901      	bls.n	801335a <MIOS32_UART_RxBufferPut+0x32>
    rx_buffer_head[uart] = 0;
 8013356:	2200      	movs	r2, #0
 8013358:	551a      	strb	r2, [r3, r4]
  ++rx_buffer_size[uart];
 801335a:	4b07      	ldr	r3, [pc, #28]	; (8013378 <MIOS32_UART_RxBufferPut+0x50>)
 801335c:	5d18      	ldrb	r0, [r3, r4]
 801335e:	1c41      	adds	r1, r0, #1
 8013360:	b2ca      	uxtb	r2, r1
 8013362:	551a      	strb	r2, [r3, r4]
  MIOS32_IRQ_Enable();
 8013364:	f7fe ff88 	bl	8012278 <MIOS32_IRQ_Enable>

  return 0; // no error
 8013368:	2000      	movs	r0, #0
 801336a:	bd38      	pop	{r3, r4, r5, pc}
{
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
    return -1; // UART not available
 801336c:	f04f 30ff 	mov.w	r0, #4294967295
 8013370:	bd38      	pop	{r3, r4, r5, pc}

  if( rx_buffer_size[uart] >= MIOS32_UART_RX_BUFFER_SIZE )
    return -2; // buffer full (retry)
 8013372:	f06f 0001 	mvn.w	r0, #1
  ++rx_buffer_size[uart];
  MIOS32_IRQ_Enable();

  return 0; // no error
#endif
}
 8013376:	bd38      	pop	{r3, r4, r5, pc}
 8013378:	2000043a 	.word	0x2000043a
 801337c:	2000053e 	.word	0x2000053e
 8013380:	200004be 	.word	0x200004be

08013384 <MIOS32_UART_TxBufferGet>:
s32 MIOS32_UART_TxBufferGet(u8 uart)
{
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
 8013384:	2801      	cmp	r0, #1
//! \return -2 if no new byte available
//! \return >= 0: transmitted byte
//! \note Applications shouldn't call these functions directly, instead please use \ref MIOS32_COM or \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_TxBufferGet(u8 uart)
{
 8013386:	b538      	push	{r3, r4, r5, lr}
 8013388:	4604      	mov	r4, r0
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
 801338a:	d81b      	bhi.n	80133c4 <MIOS32_UART_TxBufferGet+0x40>
    return -1; // UART not available

  if( !tx_buffer_size[uart] )
 801338c:	4b10      	ldr	r3, [pc, #64]	; (80133d0 <MIOS32_UART_TxBufferGet+0x4c>)
 801338e:	5c18      	ldrb	r0, [r3, r0]
 8013390:	b1d8      	cbz	r0, 80133ca <MIOS32_UART_TxBufferGet+0x46>
    return -2; // nothing new in buffer

  // get byte - this operation should be atomic!
  MIOS32_IRQ_Disable();
 8013392:	f7fe ff5d 	bl	8012250 <MIOS32_IRQ_Disable>
  u8 b = tx_buffer[uart][tx_buffer_tail[uart]];
 8013396:	4b0f      	ldr	r3, [pc, #60]	; (80133d4 <MIOS32_UART_TxBufferGet+0x50>)
 8013398:	490f      	ldr	r1, [pc, #60]	; (80133d8 <MIOS32_UART_TxBufferGet+0x54>)
 801339a:	5d1a      	ldrb	r2, [r3, r4]
  if( ++tx_buffer_tail[uart] >= MIOS32_UART_TX_BUFFER_SIZE )
 801339c:	5d18      	ldrb	r0, [r3, r4]
  if( !tx_buffer_size[uart] )
    return -2; // nothing new in buffer

  // get byte - this operation should be atomic!
  MIOS32_IRQ_Disable();
  u8 b = tx_buffer[uart][tx_buffer_tail[uart]];
 801339e:	eb02 1584 	add.w	r5, r2, r4, lsl #6
  if( ++tx_buffer_tail[uart] >= MIOS32_UART_TX_BUFFER_SIZE )
 80133a2:	1c42      	adds	r2, r0, #1
  if( !tx_buffer_size[uart] )
    return -2; // nothing new in buffer

  // get byte - this operation should be atomic!
  MIOS32_IRQ_Disable();
  u8 b = tx_buffer[uart][tx_buffer_tail[uart]];
 80133a4:	5d4d      	ldrb	r5, [r1, r5]
  if( ++tx_buffer_tail[uart] >= MIOS32_UART_TX_BUFFER_SIZE )
 80133a6:	b2d1      	uxtb	r1, r2
 80133a8:	293f      	cmp	r1, #63	; 0x3f
 80133aa:	5519      	strb	r1, [r3, r4]
 80133ac:	d901      	bls.n	80133b2 <MIOS32_UART_TxBufferGet+0x2e>
    tx_buffer_tail[uart] = 0;
 80133ae:	2000      	movs	r0, #0
 80133b0:	5518      	strb	r0, [r3, r4]
  --tx_buffer_size[uart];
 80133b2:	4b07      	ldr	r3, [pc, #28]	; (80133d0 <MIOS32_UART_TxBufferGet+0x4c>)
 80133b4:	5d1a      	ldrb	r2, [r3, r4]
 80133b6:	1e51      	subs	r1, r2, #1
 80133b8:	b2c8      	uxtb	r0, r1
 80133ba:	5518      	strb	r0, [r3, r4]
  MIOS32_IRQ_Enable();
 80133bc:	f7fe ff5c 	bl	8012278 <MIOS32_IRQ_Enable>

  return b; // return transmitted byte
 80133c0:	4628      	mov	r0, r5
 80133c2:	bd38      	pop	{r3, r4, r5, pc}
{
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
    return -1; // UART not available
 80133c4:	f04f 30ff 	mov.w	r0, #4294967295
 80133c8:	bd38      	pop	{r3, r4, r5, pc}

  if( !tx_buffer_size[uart] )
    return -2; // nothing new in buffer
 80133ca:	f06f 0001 	mvn.w	r0, #1
  --tx_buffer_size[uart];
  MIOS32_IRQ_Enable();

  return b; // return transmitted byte
#endif
}
 80133ce:	bd38      	pop	{r3, r4, r5, pc}
 80133d0:	20000540 	.word	0x20000540
 80133d4:	20000438 	.word	0x20000438
 80133d8:	2000043e 	.word	0x2000043e

080133dc <MIOS32_UART_TxBufferPutMore_NonBlocking>:
s32 MIOS32_UART_TxBufferPutMore_NonBlocking(u8 uart, u8 *buffer, u16 len)
{
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
 80133dc:	2801      	cmp	r0, #1
//! \return -2 if buffer full or cannot get all requested bytes (retry)
//! \return -3 if UART not supported by MIOS32_UART_TxBufferPut Routine
//! \note Applications shouldn't call these functions directly, instead please use \ref MIOS32_COM or \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_TxBufferPutMore_NonBlocking(u8 uart, u8 *buffer, u16 len)
{
 80133de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133e0:	4604      	mov	r4, r0
 80133e2:	460d      	mov	r5, r1
 80133e4:	4616      	mov	r6, r2
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
 80133e6:	d830      	bhi.n	801344a <MIOS32_UART_TxBufferPutMore_NonBlocking+0x6e>
    return -1; // UART not available

  if( (tx_buffer_size[uart]+len) >= MIOS32_UART_TX_BUFFER_SIZE )
 80133e8:	4b1b      	ldr	r3, [pc, #108]	; (8013458 <MIOS32_UART_TxBufferPutMore_NonBlocking+0x7c>)
 80133ea:	5c18      	ldrb	r0, [r3, r0]
 80133ec:	1881      	adds	r1, r0, r2
 80133ee:	293f      	cmp	r1, #63	; 0x3f
 80133f0:	dc2e      	bgt.n	8013450 <MIOS32_UART_TxBufferPutMore_NonBlocking+0x74>
    return -2; // buffer full or cannot get all requested bytes (retry)

  // copy bytes to be transmitted into transmit buffer
  // this operation should be atomic!
  MIOS32_IRQ_Disable();
 80133f2:	f7fe ff2d 	bl	8012250 <MIOS32_IRQ_Disable>

  u16 i;
  for(i=0; i<len; ++i) {
 80133f6:	4628      	mov	r0, r5
 80133f8:	1b42      	subs	r2, r0, r5
 80133fa:	b293      	uxth	r3, r2
 80133fc:	42b3      	cmp	r3, r6
 80133fe:	d220      	bcs.n	8013442 <MIOS32_UART_TxBufferPutMore_NonBlocking+0x66>
    tx_buffer[uart][tx_buffer_head[uart]] = *buffer++;
 8013400:	4b16      	ldr	r3, [pc, #88]	; (801345c <MIOS32_UART_TxBufferPutMore_NonBlocking+0x80>)
 8013402:	4917      	ldr	r1, [pc, #92]	; (8013460 <MIOS32_UART_TxBufferPutMore_NonBlocking+0x84>)
 8013404:	5d1f      	ldrb	r7, [r3, r4]
 8013406:	eb07 1284 	add.w	r2, r7, r4, lsl #6
 801340a:	f810 7b01 	ldrb.w	r7, [r0], #1
 801340e:	548f      	strb	r7, [r1, r2]

    if( ++tx_buffer_head[uart] >= MIOS32_UART_TX_BUFFER_SIZE )
 8013410:	5d1a      	ldrb	r2, [r3, r4]
 8013412:	1c51      	adds	r1, r2, #1
 8013414:	b2ca      	uxtb	r2, r1
 8013416:	2a3f      	cmp	r2, #63	; 0x3f
 8013418:	551a      	strb	r2, [r3, r4]
 801341a:	d901      	bls.n	8013420 <MIOS32_UART_TxBufferPutMore_NonBlocking+0x44>
      tx_buffer_head[uart] = 0;
 801341c:	2100      	movs	r1, #0
 801341e:	5519      	strb	r1, [r3, r4]

    // enable Tx interrupt if buffer was empty
    if( ++tx_buffer_size[uart] == 1 ) {
 8013420:	4a0d      	ldr	r2, [pc, #52]	; (8013458 <MIOS32_UART_TxBufferPutMore_NonBlocking+0x7c>)
 8013422:	5d13      	ldrb	r3, [r2, r4]
 8013424:	1c59      	adds	r1, r3, #1
 8013426:	b2cb      	uxtb	r3, r1
 8013428:	2b01      	cmp	r3, #1
 801342a:	5513      	strb	r3, [r2, r4]
 801342c:	d1e4      	bne.n	80133f8 <MIOS32_UART_TxBufferPutMore_NonBlocking+0x1c>
      switch( uart ) {
 801342e:	2c01      	cmp	r4, #1
        case 0: MIOS32_UART0->CR1 |= (1 << 7); break; // enable TXE interrupt (TXEIE=1)
 8013430:	bf14      	ite	ne
 8013432:	4b0c      	ldrne	r3, [pc, #48]	; (8013464 <MIOS32_UART_TxBufferPutMore_NonBlocking+0x88>)
        case 1: MIOS32_UART1->CR1 |= (1 << 7); break; // enable TXE interrupt (TXEIE=1)
 8013434:	4b0c      	ldreq	r3, [pc, #48]	; (8013468 <MIOS32_UART_TxBufferPutMore_NonBlocking+0x8c>)
 8013436:	899a      	ldrh	r2, [r3, #12]
 8013438:	b291      	uxth	r1, r2
 801343a:	f041 0280 	orr.w	r2, r1, #128	; 0x80
 801343e:	819a      	strh	r2, [r3, #12]
 8013440:	e7da      	b.n	80133f8 <MIOS32_UART_TxBufferPutMore_NonBlocking+0x1c>
        default: MIOS32_IRQ_Enable(); return -3; // uart not supported by routine (yet)
      }
    }
  }

  MIOS32_IRQ_Enable();
 8013442:	f7fe ff19 	bl	8012278 <MIOS32_IRQ_Enable>

  return 0; // no error
 8013446:	2000      	movs	r0, #0
 8013448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
#if NUM_SUPPORTED_UARTS == 0
  return -1; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
    return -1; // UART not available
 801344a:	f04f 30ff 	mov.w	r0, #4294967295
 801344e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  if( (tx_buffer_size[uart]+len) >= MIOS32_UART_TX_BUFFER_SIZE )
    return -2; // buffer full or cannot get all requested bytes (retry)
 8013450:	f06f 0001 	mvn.w	r0, #1

  MIOS32_IRQ_Enable();

  return 0; // no error
#endif
}
 8013454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013456:	bf00      	nop
 8013458:	20000540 	.word	0x20000540
 801345c:	2000054c 	.word	0x2000054c
 8013460:	2000043e 	.word	0x2000043e
 8013464:	40004400 	.word	0x40004400
 8013468:	40004800 	.word	0x40004800

0801346c <MIOS32_UART_TxBufferPutMore>:
//! \return -1 if UART not available
//! \return -3 if UART not supported by MIOS32_UART_TxBufferPut Routine
//! \note Applications shouldn't call these functions directly, instead please use \ref MIOS32_COM or \ref MIOS32_MIDI layer functions
/////////////////////////////////////////////////////////////////////////////
s32 MIOS32_UART_TxBufferPutMore(u8 uart, u8 *buffer, u16 len)
{
 801346c:	b570      	push	{r4, r5, r6, lr}
 801346e:	4606      	mov	r6, r0
 8013470:	460d      	mov	r5, r1
 8013472:	4614      	mov	r4, r2
  s32 error;

  while( (error=MIOS32_UART_TxBufferPutMore_NonBlocking(uart, buffer, len)) == -2 );
 8013474:	4630      	mov	r0, r6
 8013476:	4629      	mov	r1, r5
 8013478:	4622      	mov	r2, r4
 801347a:	f7ff ffaf 	bl	80133dc <MIOS32_UART_TxBufferPutMore_NonBlocking>
 801347e:	1c83      	adds	r3, r0, #2
 8013480:	d0f8      	beq.n	8013474 <MIOS32_UART_TxBufferPutMore+0x8>

  return error;
}
 8013482:	bd70      	pop	{r4, r5, r6, pc}

08013484 <USART2_IRQHandler>:
// Interrupt handler for first UART
/////////////////////////////////////////////////////////////////////////////
#if NUM_SUPPORTED_UARTS >= 1
MIOS32_UART0_IRQHANDLER_FUNC
{
  if( MIOS32_UART0->SR & (1 << 5) ) { // check if RXNE flag is set
 8013484:	4b15      	ldr	r3, [pc, #84]	; (80134dc <USART2_IRQHandler+0x58>)
 8013486:	881a      	ldrh	r2, [r3, #0]
 8013488:	f002 0020 	and.w	r0, r2, #32
 801348c:	b281      	uxth	r1, r0
/////////////////////////////////////////////////////////////////////////////
// Interrupt handler for first UART
/////////////////////////////////////////////////////////////////////////////
#if NUM_SUPPORTED_UARTS >= 1
MIOS32_UART0_IRQHANDLER_FUNC
{
 801348e:	b510      	push	{r4, lr}
  if( MIOS32_UART0->SR & (1 << 5) ) { // check if RXNE flag is set
 8013490:	b149      	cbz	r1, 80134a6 <USART2_IRQHandler+0x22>
    u8 b = MIOS32_UART0->DR;
 8013492:	889c      	ldrh	r4, [r3, #4]
 8013494:	b2e4      	uxtb	r4, r4

#if MIOS32_UART0_ASSIGNMENT == 1
    s32 status = MIOS32_MIDI_SendByteToRxCallback(UART0, b);
 8013496:	2020      	movs	r0, #32
 8013498:	4621      	mov	r1, r4
 801349a:	f7fe f8a7 	bl	80115ec <MIOS32_MIDI_SendByteToRxCallback>
#else
    s32 status = 0;
#endif

    if( status == 0 && MIOS32_UART_RxBufferPut(0, b) < 0 ) {
 801349e:	b910      	cbnz	r0, 80134a6 <USART2_IRQHandler+0x22>
 80134a0:	4621      	mov	r1, r4
 80134a2:	f7ff ff41 	bl	8013328 <MIOS32_UART_RxBufferPut>
      // here we could add some error handling
    }
  }

  if( MIOS32_UART0->SR & (1 << 7) ) { // check if TXE flag is set
 80134a6:	4c0d      	ldr	r4, [pc, #52]	; (80134dc <USART2_IRQHandler+0x58>)
 80134a8:	8823      	ldrh	r3, [r4, #0]
 80134aa:	f003 0280 	and.w	r2, r3, #128	; 0x80
 80134ae:	b290      	uxth	r0, r2
 80134b0:	b198      	cbz	r0, 80134da <USART2_IRQHandler+0x56>
  return 0; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
    return 0;
  else
    return tx_buffer_size[uart];
 80134b2:	490b      	ldr	r1, [pc, #44]	; (80134e0 <USART2_IRQHandler+0x5c>)
 80134b4:	780b      	ldrb	r3, [r1, #0]
      // here we could add some error handling
    }
  }

  if( MIOS32_UART0->SR & (1 << 7) ) { // check if TXE flag is set
    if( MIOS32_UART_TxBufferUsed(0) > 0 ) {
 80134b6:	b153      	cbz	r3, 80134ce <USART2_IRQHandler+0x4a>
      s32 b = MIOS32_UART_TxBufferGet(0);
 80134b8:	2000      	movs	r0, #0
 80134ba:	f7ff ff63 	bl	8013384 <MIOS32_UART_TxBufferGet>
      if( b < 0 ) {
 80134be:	2800      	cmp	r0, #0
 80134c0:	da02      	bge.n	80134c8 <USART2_IRQHandler+0x44>
	// here we could add some error handling
	MIOS32_UART0->DR = 0xff;
 80134c2:	20ff      	movs	r0, #255	; 0xff
 80134c4:	80a0      	strh	r0, [r4, #4]
 80134c6:	bd10      	pop	{r4, pc}
      } else {
	MIOS32_UART0->DR = b;
 80134c8:	b282      	uxth	r2, r0
 80134ca:	80a2      	strh	r2, [r4, #4]
 80134cc:	bd10      	pop	{r4, pc}
      }
    } else {
      MIOS32_UART0->CR1 &= ~(1 << 7); // disable TXE interrupt (TXEIE=0)
 80134ce:	89a2      	ldrh	r2, [r4, #12]
 80134d0:	f022 0080 	bic.w	r0, r2, #128	; 0x80
 80134d4:	0401      	lsls	r1, r0, #16
 80134d6:	0c0b      	lsrs	r3, r1, #16
 80134d8:	81a3      	strh	r3, [r4, #12]
 80134da:	bd10      	pop	{r4, pc}
 80134dc:	40004400 	.word	0x40004400
 80134e0:	20000540 	.word	0x20000540

080134e4 <USART3_IRQHandler>:
// Interrupt handler for second UART
/////////////////////////////////////////////////////////////////////////////
#if NUM_SUPPORTED_UARTS >= 2
MIOS32_UART1_IRQHANDLER_FUNC
{
  if( MIOS32_UART1->SR & (1 << 5) ) { // check if RXNE flag is set
 80134e4:	4b16      	ldr	r3, [pc, #88]	; (8013540 <USART3_IRQHandler+0x5c>)
 80134e6:	881a      	ldrh	r2, [r3, #0]
 80134e8:	f002 0020 	and.w	r0, r2, #32
 80134ec:	b281      	uxth	r1, r0
/////////////////////////////////////////////////////////////////////////////
// Interrupt handler for second UART
/////////////////////////////////////////////////////////////////////////////
#if NUM_SUPPORTED_UARTS >= 2
MIOS32_UART1_IRQHANDLER_FUNC
{
 80134ee:	b510      	push	{r4, lr}
  if( MIOS32_UART1->SR & (1 << 5) ) { // check if RXNE flag is set
 80134f0:	b151      	cbz	r1, 8013508 <USART3_IRQHandler+0x24>
    u8 b = MIOS32_UART1->DR;
 80134f2:	889c      	ldrh	r4, [r3, #4]
 80134f4:	b2e4      	uxtb	r4, r4

#if MIOS32_UART1_ASSIGNMENT == 1
    s32 status = MIOS32_MIDI_SendByteToRxCallback(UART1, b);
 80134f6:	2021      	movs	r0, #33	; 0x21
 80134f8:	4621      	mov	r1, r4
 80134fa:	f7fe f877 	bl	80115ec <MIOS32_MIDI_SendByteToRxCallback>
#else
    s32 status = 0;
#endif

    if( status == 0 && MIOS32_UART_RxBufferPut(1, b) < 0 ) {
 80134fe:	b918      	cbnz	r0, 8013508 <USART3_IRQHandler+0x24>
 8013500:	2001      	movs	r0, #1
 8013502:	4621      	mov	r1, r4
 8013504:	f7ff ff10 	bl	8013328 <MIOS32_UART_RxBufferPut>
      // here we could add some error handling
    }
  }
  
  if( MIOS32_UART1->SR & (1 << 7) ) { // check if TXE flag is set
 8013508:	4c0d      	ldr	r4, [pc, #52]	; (8013540 <USART3_IRQHandler+0x5c>)
 801350a:	8823      	ldrh	r3, [r4, #0]
 801350c:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8013510:	b290      	uxth	r0, r2
 8013512:	b198      	cbz	r0, 801353c <USART3_IRQHandler+0x58>
  return 0; // no UART available
#else
  if( uart >= NUM_SUPPORTED_UARTS )
    return 0;
  else
    return tx_buffer_size[uart];
 8013514:	490b      	ldr	r1, [pc, #44]	; (8013544 <USART3_IRQHandler+0x60>)
 8013516:	784b      	ldrb	r3, [r1, #1]
      // here we could add some error handling
    }
  }
  
  if( MIOS32_UART1->SR & (1 << 7) ) { // check if TXE flag is set
    if( MIOS32_UART_TxBufferUsed(1) > 0 ) {
 8013518:	b153      	cbz	r3, 8013530 <USART3_IRQHandler+0x4c>
      s32 b = MIOS32_UART_TxBufferGet(1);
 801351a:	2001      	movs	r0, #1
 801351c:	f7ff ff32 	bl	8013384 <MIOS32_UART_TxBufferGet>
      if( b < 0 ) {
 8013520:	2800      	cmp	r0, #0
 8013522:	da02      	bge.n	801352a <USART3_IRQHandler+0x46>
	// here we could add some error handling
	MIOS32_UART1->DR = 0xff;
 8013524:	20ff      	movs	r0, #255	; 0xff
 8013526:	80a0      	strh	r0, [r4, #4]
 8013528:	bd10      	pop	{r4, pc}
      } else {
	MIOS32_UART1->DR = b;
 801352a:	b282      	uxth	r2, r0
 801352c:	80a2      	strh	r2, [r4, #4]
 801352e:	bd10      	pop	{r4, pc}
      }
    } else {
      MIOS32_UART1->CR1 &= ~(1 << 7); // disable TXE interrupt (TXEIE=0)
 8013530:	89a2      	ldrh	r2, [r4, #12]
 8013532:	f022 0080 	bic.w	r0, r2, #128	; 0x80
 8013536:	0401      	lsls	r1, r0, #16
 8013538:	0c0b      	lsrs	r3, r1, #16
 801353a:	81a3      	strh	r3, [r4, #12]
 801353c:	bd10      	pop	{r4, pc}
 801353e:	bf00      	nop
 8013540:	40004800 	.word	0x40004800
 8013544:	20000540 	.word	0x20000540

08013548 <EV_IRQHandler>:
/////////////////////////////////////////////////////////////////////////////
// Internal function for handling IIC event interrupts
/////////////////////////////////////////////////////////////////////////////
static void EV_IRQHandler(iic_rec_t *iicx)
{
  u32 SR1Register = iicx->base->SR1;
 8013548:	6803      	ldr	r3, [r0, #0]
 801354a:	8a9a      	ldrh	r2, [r3, #20]

  if( iicx->base->SR2 ); // SR2Register not used, but we've to read this SFR to clear the flags
 801354c:	8b19      	ldrh	r1, [r3, #24]
/////////////////////////////////////////////////////////////////////////////
// Internal function for handling IIC event interrupts
/////////////////////////////////////////////////////////////////////////////
static void EV_IRQHandler(iic_rec_t *iicx)
{
  u32 SR1Register = iicx->base->SR1;
 801354e:	b292      	uxth	r2, r2

  if( iicx->base->SR2 ); // SR2Register not used, but we've to read this SFR to clear the flags

  /* If SB = 1, I2C master sent a START on the bus: EV5) */
  if( (SR1Register & 0x0001) == 0x0001 ) {
 8013550:	07d1      	lsls	r1, r2, #31

/////////////////////////////////////////////////////////////////////////////
// Internal function for handling IIC event interrupts
/////////////////////////////////////////////////////////////////////////////
static void EV_IRQHandler(iic_rec_t *iicx)
{
 8013552:	b510      	push	{r4, lr}
  u32 SR1Register = iicx->base->SR1;

  if( iicx->base->SR2 ); // SR2Register not used, but we've to read this SFR to clear the flags

  /* If SB = 1, I2C master sent a START on the bus: EV5) */
  if( (SR1Register & 0x0001) == 0x0001 ) {
 8013554:	d50d      	bpl.n	8013572 <EV_IRQHandler+0x2a>
    // don't send address if stop was requested (WRITE_WITHOUT_STOP - mode, start condition was sent)
    // we have to wait for the application to start the next transfer
    if( iicx->transfer_state.STOP_REQUESTED ) {
 8013556:	6941      	ldr	r1, [r0, #20]
 8013558:	078a      	lsls	r2, r1, #30
 801355a:	d507      	bpl.n	801356c <EV_IRQHandler+0x24>
      // transfer finished
      iicx->transfer_state.BUSY = 0;
 801355c:	7d02      	ldrb	r2, [r0, #20]
 801355e:	f022 0101 	bic.w	r1, r2, #1
 8013562:	7501      	strb	r1, [r0, #20]
      // disable all interrupts
      iicx->base->CR2 &= (u16)~(I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8013564:	8898      	ldrh	r0, [r3, #4]
 8013566:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 801356a:	e027      	b.n	80135bc <EV_IRQHandler+0x74>
      return;
    }

    /* Send the slave address for transmssion or for reception (according to the configured value
       in the write master write routine */
    iicx->base->DR = iicx->iic_address;
 801356c:	7900      	ldrb	r0, [r0, #4]
 801356e:	8218      	strh	r0, [r3, #16]
    return;
 8013570:	bd10      	pop	{r4, pc}
  }

  /* If ADDR = 1, EV6 */
  if( (SR1Register & 0x0002) == 0x0002 ) {
 8013572:	f002 0102 	and.w	r1, r2, #2
 8013576:	b289      	uxth	r1, r1
 8013578:	2900      	cmp	r1, #0
 801357a:	d031      	beq.n	80135e0 <EV_IRQHandler+0x98>
    /* Write the first data in case the Master is Transmitter */
    if( !(iicx->iic_address & 1) ) {
 801357c:	7901      	ldrb	r1, [r0, #4]
      if( iicx->buffer_len == 0 ) { // no data transmitted (only address was sent)
 801357e:	8a02      	ldrh	r2, [r0, #16]
  }

  /* If ADDR = 1, EV6 */
  if( (SR1Register & 0x0002) == 0x0002 ) {
    /* Write the first data in case the Master is Transmitter */
    if( !(iicx->iic_address & 1) ) {
 8013580:	f011 0f01 	tst.w	r1, #1
      if( iicx->buffer_len == 0 ) { // no data transmitted (only address was sent)
 8013584:	b291      	uxth	r1, r2
  }

  /* If ADDR = 1, EV6 */
  if( (SR1Register & 0x0002) == 0x0002 ) {
    /* Write the first data in case the Master is Transmitter */
    if( !(iicx->iic_address & 1) ) {
 8013586:	d11d      	bne.n	80135c4 <EV_IRQHandler+0x7c>
      if( iicx->buffer_len == 0 ) { // no data transmitted (only address was sent)
 8013588:	2900      	cmp	r1, #0
 801358a:	d036      	beq.n	80135fa <EV_IRQHandler+0xb2>
	iicx->base->CR2 &= (u16)~(I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);

	// transfer finished
	iicx->transfer_state.BUSY = 0;	
      } else {
	if( iicx->buffer_ix < iicx->buffer_len ) {
 801358c:	8a42      	ldrh	r2, [r0, #18]
 801358e:	b291      	uxth	r1, r2
 8013590:	8a02      	ldrh	r2, [r0, #16]
 8013592:	b292      	uxth	r2, r2
 8013594:	4291      	cmp	r1, r2
 8013596:	d208      	bcs.n	80135aa <EV_IRQHandler+0x62>
	  /* Write the first data in the data register */
	  iicx->base->DR = (iicx->tx_buffer_ptr == NULL) ? 0 : iicx->tx_buffer_ptr[iicx->buffer_ix++];
 8013598:	6882      	ldr	r2, [r0, #8]
 801359a:	b12a      	cbz	r2, 80135a8 <EV_IRQHandler+0x60>
 801359c:	8a41      	ldrh	r1, [r0, #18]
 801359e:	b289      	uxth	r1, r1
 80135a0:	5c52      	ldrb	r2, [r2, r1]
 80135a2:	3101      	adds	r1, #1
 80135a4:	b289      	uxth	r1, r1
 80135a6:	8241      	strh	r1, [r0, #18]
 80135a8:	821a      	strh	r2, [r3, #16]
	}

	/* If no further data to be sent, disable the I2C BUF IT
	   in order to not have a TxE interrupt */
	if( iicx->buffer_ix >= iicx->buffer_len ) {
 80135aa:	8a42      	ldrh	r2, [r0, #18]
 80135ac:	8a00      	ldrh	r0, [r0, #16]
 80135ae:	b291      	uxth	r1, r2
 80135b0:	b282      	uxth	r2, r0
 80135b2:	4291      	cmp	r1, r2
 80135b4:	d378      	bcc.n	80136a8 <EV_IRQHandler+0x160>
	  iicx->base->CR2 &= (u16)~I2C_IT_BUF;
 80135b6:	8899      	ldrh	r1, [r3, #4]
 80135b8:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
 80135bc:	0402      	lsls	r2, r0, #16
 80135be:	0c11      	lsrs	r1, r2, #16
 80135c0:	8099      	strh	r1, [r3, #4]
 80135c2:	bd10      	pop	{r4, pc}
      /* Master Receiver */

      /* At this stage, ADDR is cleared because both SR1 and SR2 were read.*/
      /* EV6_1: used for single byte reception. The ACK disable and the STOP
	 Programming should be done just after ADDR is cleared. */
      if( iicx->buffer_len == 1 ) {
 80135c4:	2901      	cmp	r1, #1
 80135c6:	d16f      	bne.n	80136a8 <EV_IRQHandler+0x160>
	/* Clear ACK */
	iicx->base->CR1 &= 0xFBFF; // CR1_ACK_Reset
 80135c8:	881a      	ldrh	r2, [r3, #0]
 80135ca:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
 80135ce:	040a      	lsls	r2, r1, #16
 80135d0:	0c11      	lsrs	r1, r2, #16
 80135d2:	8019      	strh	r1, [r3, #0]
	/* Program the STOP */
	iicx->base->CR1 |= 0x0200; // CR1_STOP_Set
 80135d4:	881a      	ldrh	r2, [r3, #0]
 80135d6:	b291      	uxth	r1, r2
 80135d8:	f441 7200 	orr.w	r2, r1, #512	; 0x200
 80135dc:	801a      	strh	r2, [r3, #0]
 80135de:	e05f      	b.n	80136a0 <EV_IRQHandler+0x158>
    return;
  }

  /* Master transmits the remaing data: from data2 until the last one.  */
  /* If TXE is set */
  if( (SR1Register &0x0084) == 0x0080 ) {
 80135e0:	f002 0184 	and.w	r1, r2, #132	; 0x84
 80135e4:	2980      	cmp	r1, #128	; 0x80
 80135e6:	d106      	bne.n	80135f6 <EV_IRQHandler+0xae>
    /* If there is still data to write */
    if( iicx->buffer_ix < iicx->buffer_len ) {
 80135e8:	8a42      	ldrh	r2, [r0, #18]
 80135ea:	b291      	uxth	r1, r2
 80135ec:	8a02      	ldrh	r2, [r0, #16]
 80135ee:	b292      	uxth	r2, r2
 80135f0:	4291      	cmp	r1, r2
 80135f2:	d3d1      	bcc.n	8013598 <EV_IRQHandler+0x50>
 80135f4:	e058      	b.n	80136a8 <EV_IRQHandler+0x160>

    return;
  }

  /* If BTF and TXE are set (EV8_2), program the STOP */
  if( (SR1Register & 0x0084) == 0x0084 ) {
 80135f6:	2984      	cmp	r1, #132	; 0x84
 80135f8:	d112      	bne.n	8013620 <EV_IRQHandler+0xd8>
    /* Program the STOP */
    iicx->base->CR1 |= 0x0200; // CR1_STOP_Set
 80135fa:	881a      	ldrh	r2, [r3, #0]
 80135fc:	b291      	uxth	r1, r2
 80135fe:	f441 7200 	orr.w	r2, r1, #512	; 0x200
 8013602:	801a      	strh	r2, [r3, #0]
    iicx->transfer_state.STOP_REQUESTED = 1;
 8013604:	7d01      	ldrb	r1, [r0, #20]
 8013606:	f041 0202 	orr.w	r2, r1, #2
 801360a:	7502      	strb	r2, [r0, #20]

    // disable all interrupts
    iicx->base->CR2 &= (u16)~(I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801360c:	8899      	ldrh	r1, [r3, #4]
 801360e:	f421 62e0 	bic.w	r2, r1, #1792	; 0x700
 8013612:	0411      	lsls	r1, r2, #16
 8013614:	0c0a      	lsrs	r2, r1, #16
 8013616:	809a      	strh	r2, [r3, #4]

    // transfer finished
    iicx->transfer_state.BUSY = 0;
 8013618:	7d03      	ldrb	r3, [r0, #20]
 801361a:	f023 0101 	bic.w	r1, r3, #1
 801361e:	e042      	b.n	80136a6 <EV_IRQHandler+0x15e>

    return;
  }

  /* If RXNE is set */
  if( (SR1Register & 0x0040) == 0x0040 && iicx->rx_buffer_ptr != NULL ) {
 8013620:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8013624:	b291      	uxth	r1, r2
 8013626:	2900      	cmp	r1, #0
 8013628:	d03e      	beq.n	80136a8 <EV_IRQHandler+0x160>
 801362a:	68c1      	ldr	r1, [r0, #12]
 801362c:	2900      	cmp	r1, #0
 801362e:	d03b      	beq.n	80136a8 <EV_IRQHandler+0x160>
    /* Read the data register */

    u8 b = iicx->base->DR;
 8013630:	8a1c      	ldrh	r4, [r3, #16]

    // failsave: still place in buffer?
    if( iicx->buffer_ix < iicx->buffer_len )
 8013632:	8a42      	ldrh	r2, [r0, #18]

  /* If RXNE is set */
  if( (SR1Register & 0x0040) == 0x0040 && iicx->rx_buffer_ptr != NULL ) {
    /* Read the data register */

    u8 b = iicx->base->DR;
 8013634:	b2e3      	uxtb	r3, r4

    // failsave: still place in buffer?
    if( iicx->buffer_ix < iicx->buffer_len )
 8013636:	b294      	uxth	r4, r2
 8013638:	8a02      	ldrh	r2, [r0, #16]
 801363a:	b292      	uxth	r2, r2
 801363c:	4294      	cmp	r4, r2
 801363e:	d205      	bcs.n	801364c <EV_IRQHandler+0x104>
      iicx->rx_buffer_ptr[iicx->buffer_ix++] = b;
 8013640:	8a42      	ldrh	r2, [r0, #18]
 8013642:	b292      	uxth	r2, r2
 8013644:	548b      	strb	r3, [r1, r2]
 8013646:	1c51      	adds	r1, r2, #1
 8013648:	b28a      	uxth	r2, r1
 801364a:	8242      	strh	r2, [r0, #18]

    // last byte received, disable interrupts and return.
    if( iicx->transfer_state.STOP_REQUESTED ) {
 801364c:	6941      	ldr	r1, [r0, #20]
 801364e:	0789      	lsls	r1, r1, #30
 8013650:	d50b      	bpl.n	801366a <EV_IRQHandler+0x122>
      // transfer finished
      iicx->transfer_state.BUSY = 0;
 8013652:	7d02      	ldrb	r2, [r0, #20]
 8013654:	f022 0101 	bic.w	r1, r2, #1
 8013658:	7501      	strb	r1, [r0, #20]
      // disable all interrupts
      iicx->base->CR2 &= (u16)~(I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801365a:	6800      	ldr	r0, [r0, #0]
 801365c:	8883      	ldrh	r3, [r0, #4]
 801365e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8013662:	0411      	lsls	r1, r2, #16
 8013664:	0c0b      	lsrs	r3, r1, #16
 8013666:	8083      	strh	r3, [r0, #4]
      return;
 8013668:	bd10      	pop	{r4, pc}
    }
 
    // request NAK and stop condition before receiving last data
    if( (iicx->buffer_ix >= iicx->buffer_len-1) || (iicx->transfer_state.ABORT_IF_FIRST_BYTE_0 && iicx->buffer_ix == 1 && b == 0x00) ) {
 801366a:	8a42      	ldrh	r2, [r0, #18]
 801366c:	b291      	uxth	r1, r2
 801366e:	8a02      	ldrh	r2, [r0, #16]
 8013670:	b292      	uxth	r2, r2
 8013672:	3a01      	subs	r2, #1
 8013674:	4291      	cmp	r1, r2
 8013676:	da07      	bge.n	8013688 <EV_IRQHandler+0x140>
 8013678:	6941      	ldr	r1, [r0, #20]
 801367a:	074a      	lsls	r2, r1, #29
 801367c:	d514      	bpl.n	80136a8 <EV_IRQHandler+0x160>
 801367e:	8a42      	ldrh	r2, [r0, #18]
 8013680:	b291      	uxth	r1, r2
 8013682:	2901      	cmp	r1, #1
 8013684:	d110      	bne.n	80136a8 <EV_IRQHandler+0x160>
 8013686:	b97b      	cbnz	r3, 80136a8 <EV_IRQHandler+0x160>
      /* Clear ACK */
      iicx->base->CR1 &= 0xFBFF; // CR1_ACK_Reset
 8013688:	6802      	ldr	r2, [r0, #0]
 801368a:	8813      	ldrh	r3, [r2, #0]
 801368c:	f423 6180 	bic.w	r1, r3, #1024	; 0x400
 8013690:	040b      	lsls	r3, r1, #16
 8013692:	0c19      	lsrs	r1, r3, #16
 8013694:	8011      	strh	r1, [r2, #0]
      /* Program the STOP */
      iicx->base->CR1 |= 0x0200; // CR1_STOP_Set
 8013696:	8813      	ldrh	r3, [r2, #0]
 8013698:	b299      	uxth	r1, r3
 801369a:	f441 7300 	orr.w	r3, r1, #512	; 0x200
 801369e:	8013      	strh	r3, [r2, #0]
      iicx->transfer_state.STOP_REQUESTED = 1;
 80136a0:	7d03      	ldrb	r3, [r0, #20]
 80136a2:	f043 0102 	orr.w	r1, r3, #2
 80136a6:	7501      	strb	r1, [r0, #20]
 80136a8:	bd10      	pop	{r4, pc}
	...

080136ac <ER_IRQHandler>:

/////////////////////////////////////////////////////////////////////////////
// Internal function for handling IIC error interrupts
/////////////////////////////////////////////////////////////////////////////
static void ER_IRQHandler(iic_rec_t *iicx)
{
 80136ac:	b538      	push	{r3, r4, r5, lr}
 80136ae:	4604      	mov	r4, r0
  // Read SR1 and SR2 at the beginning (if not done so, flags may get lost)
  u32 event = I2C_GetLastEvent(iicx->base);
 80136b0:	6800      	ldr	r0, [r0, #0]
 80136b2:	f000 fa2d 	bl	8013b10 <I2C_GetLastEvent>
  // note that only one error number is available
  // the order of these checks defines the priority

  // bus error (start/stop condition during read
  // unlikely, should only be relevant for slave mode?)
  if( event & I2C_FLAG_BERR  ) {
 80136b6:	4b17      	ldr	r3, [pc, #92]	; (8013714 <ER_IRQHandler+0x68>)
 80136b8:	4003      	ands	r3, r0
// Internal function for handling IIC error interrupts
/////////////////////////////////////////////////////////////////////////////
static void ER_IRQHandler(iic_rec_t *iicx)
{
  // Read SR1 and SR2 at the beginning (if not done so, flags may get lost)
  u32 event = I2C_GetLastEvent(iicx->base);
 80136ba:	4605      	mov	r5, r0
  // note that only one error number is available
  // the order of these checks defines the priority

  // bus error (start/stop condition during read
  // unlikely, should only be relevant for slave mode?)
  if( event & I2C_FLAG_BERR  ) {
 80136bc:	b13b      	cbz	r3, 80136ce <ER_IRQHandler+0x22>
    I2C_ClearITPendingBit(iicx->base, I2C_IT_BERR);
 80136be:	6820      	ldr	r0, [r4, #0]
 80136c0:	f04f 2101 	mov.w	r1, #16777472	; 0x1000100
 80136c4:	f000 fa2c 	bl	8013b20 <I2C_ClearITPendingBit>
    iicx->transfer_error = MIOS32_IIC_ERROR_BUS;
 80136c8:	f06f 0005 	mvn.w	r0, #5
 80136cc:	61a0      	str	r0, [r4, #24]
  }

  // arbitration lost
  if( event & I2C_FLAG_ARLO ) {
 80136ce:	4912      	ldr	r1, [pc, #72]	; (8013718 <ER_IRQHandler+0x6c>)
 80136d0:	4029      	ands	r1, r5
 80136d2:	b131      	cbz	r1, 80136e2 <ER_IRQHandler+0x36>
    I2C_ClearITPendingBit(iicx->base, I2C_IT_ARLO);
 80136d4:	6820      	ldr	r0, [r4, #0]
 80136d6:	4911      	ldr	r1, [pc, #68]	; (801371c <ER_IRQHandler+0x70>)
 80136d8:	f000 fa22 	bl	8013b20 <I2C_ClearITPendingBit>
    iicx->transfer_error = MIOS32_IIC_ERROR_ARBITRATION_LOST;
 80136dc:	f06f 0204 	mvn.w	r2, #4
 80136e0:	61a2      	str	r2, [r4, #24]
  }

  // no acknowledge received from slave (e.g. slave not connected)
  if( event & I2C_FLAG_AF ) {
 80136e2:	4b0f      	ldr	r3, [pc, #60]	; (8013720 <ER_IRQHandler+0x74>)
 80136e4:	402b      	ands	r3, r5
 80136e6:	b153      	cbz	r3, 80136fe <ER_IRQHandler+0x52>
    I2C_ClearITPendingBit(iicx->base, I2C_IT_AF);
 80136e8:	6820      	ldr	r0, [r4, #0]
 80136ea:	490e      	ldr	r1, [pc, #56]	; (8013724 <ER_IRQHandler+0x78>)
 80136ec:	f000 fa18 	bl	8013b20 <I2C_ClearITPendingBit>
    iicx->transfer_error = MIOS32_IIC_ERROR_SLAVE_NOT_CONNECTED;
 80136f0:	f06f 0006 	mvn.w	r0, #6
 80136f4:	61a0      	str	r0, [r4, #24]
    // send stop condition to release bus
    I2C_GenerateSTOP(iicx->base, ENABLE);
 80136f6:	2101      	movs	r1, #1
 80136f8:	6820      	ldr	r0, [r4, #0]
 80136fa:	f000 f9f4 	bl	8013ae6 <I2C_GenerateSTOP>
  }

  // disable interrupts
  I2C_ITConfig(iicx->base, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR, DISABLE);
 80136fe:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8013702:	2200      	movs	r2, #0
 8013704:	6820      	ldr	r0, [r4, #0]
 8013706:	f000 f9fa 	bl	8013afe <I2C_ITConfig>

  // notify that transfer has finished (due to the error)
  iicx->transfer_state.BUSY = 0;
 801370a:	7d21      	ldrb	r1, [r4, #20]
 801370c:	f021 0201 	bic.w	r2, r1, #1
 8013710:	7522      	strb	r2, [r4, #20]
 8013712:	bd38      	pop	{r3, r4, r5, pc}
 8013714:	10000100 	.word	0x10000100
 8013718:	10000200 	.word	0x10000200
 801371c:	01000200 	.word	0x01000200
 8013720:	10000400 	.word	0x10000400
 8013724:	01000400 	.word	0x01000400

08013728 <I2C2_EV_IRQHandler>:
// interrupt vectors
/////////////////////////////////////////////////////////////////////////////

void I2C2_EV_IRQHandler(void)
{
  EV_IRQHandler((iic_rec_t *)&iic_rec[0]);
 8013728:	4801      	ldr	r0, [pc, #4]	; (8013730 <I2C2_EV_IRQHandler+0x8>)
 801372a:	f7ff bf0d 	b.w	8013548 <EV_IRQHandler>
 801372e:	bf00      	nop
 8013730:	20000550 	.word	0x20000550

08013734 <I2C2_ER_IRQHandler>:
}

void I2C2_ER_IRQHandler(void)
{
  ER_IRQHandler((iic_rec_t *)&iic_rec[0]);
 8013734:	4801      	ldr	r0, [pc, #4]	; (801373c <I2C2_ER_IRQHandler+0x8>)
 8013736:	f7ff bfb9 	b.w	80136ac <ER_IRQHandler>
 801373a:	bf00      	nop
 801373c:	20000550 	.word	0x20000550

08013740 <I2C1_EV_IRQHandler>:


#if MIOS32_IIC_NUM >= 2
void I2C1_EV_IRQHandler(void)
{
  EV_IRQHandler((iic_rec_t *)&iic_rec[1]);
 8013740:	4801      	ldr	r0, [pc, #4]	; (8013748 <I2C1_EV_IRQHandler+0x8>)
 8013742:	f7ff bf01 	b.w	8013548 <EV_IRQHandler>
 8013746:	bf00      	nop
 8013748:	20000574 	.word	0x20000574

0801374c <I2C1_ER_IRQHandler>:
}

void I2C1_ER_IRQHandler(void)
{
  ER_IRQHandler((iic_rec_t *)&iic_rec[1]);
 801374c:	4801      	ldr	r0, [pc, #4]	; (8013754 <I2C1_ER_IRQHandler+0x8>)
 801374e:	f7ff bfad 	b.w	80136ac <ER_IRQHandler>
 8013752:	bf00      	nop
 8013754:	20000574 	.word	0x20000574

08013758 <printchar>:

static void printchar(char **str, int c)
{
  //	extern int putchar(int c);
	
	if (str) {
 8013758:	b120      	cbz	r0, 8013764 <printchar+0xc>
		**str = c;
 801375a:	6803      	ldr	r3, [r0, #0]
 801375c:	7019      	strb	r1, [r3, #0]
		++(*str);
 801375e:	6801      	ldr	r1, [r0, #0]
 8013760:	1c4a      	adds	r2, r1, #1
 8013762:	6002      	str	r2, [r0, #0]
 8013764:	4770      	bx	lr

08013766 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
 8013766:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	register int pc = 0, padchar = ' ';

	if (width > 0) {
 801376a:	1e14      	subs	r4, r2, #0

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
 801376c:	4680      	mov	r8, r0
 801376e:	4689      	mov	r9, r1
	register int pc = 0, padchar = ' ';

	if (width > 0) {
 8013770:	dc01      	bgt.n	8013776 <prints+0x10>
#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
	register int pc = 0, padchar = ' ';
 8013772:	2720      	movs	r7, #32
 8013774:	e00f      	b.n	8013796 <prints+0x30>

	if (width > 0) {
 8013776:	2200      	movs	r2, #0
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 8013778:	f819 1002 	ldrb.w	r1, [r9, r2]
 801377c:	b109      	cbz	r1, 8013782 <prints+0x1c>
 801377e:	3201      	adds	r2, #1
 8013780:	e7fa      	b.n	8013778 <prints+0x12>
		if (len >= width) width = 0;
 8013782:	42a2      	cmp	r2, r4
		else width -= len;
 8013784:	bfb4      	ite	lt
 8013786:	ebc2 0404 	rsblt	r4, r2, r4

	if (width > 0) {
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
		if (len >= width) width = 0;
 801378a:	460c      	movge	r4, r1
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
 801378c:	f013 0f02 	tst.w	r3, #2
 8013790:	bf0c      	ite	eq
 8013792:	2720      	moveq	r7, #32
 8013794:	2730      	movne	r7, #48	; 0x30
	}
	if (!(pad & PAD_RIGHT)) {
 8013796:	07db      	lsls	r3, r3, #31
 8013798:	d40c      	bmi.n	80137b4 <prints+0x4e>
 801379a:	4625      	mov	r5, r4
		for ( ; width > 0; --width) {
 801379c:	2d00      	cmp	r5, #0
 801379e:	dd05      	ble.n	80137ac <prints+0x46>
			printchar (out, padchar);
 80137a0:	4640      	mov	r0, r8
 80137a2:	4639      	mov	r1, r7
 80137a4:	f7ff ffd8 	bl	8013758 <printchar>
		if (len >= width) width = 0;
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
	}
	if (!(pad & PAD_RIGHT)) {
		for ( ; width > 0; --width) {
 80137a8:	3d01      	subs	r5, #1
 80137aa:	e7f7      	b.n	801379c <prints+0x36>
}

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
 80137ac:	ea24 76e4 	bic.w	r6, r4, r4, asr #31
 80137b0:	1ba4      	subs	r4, r4, r6
 80137b2:	e000      	b.n	80137b6 <prints+0x50>
{
	register int pc = 0, padchar = ' ';
 80137b4:	2600      	movs	r6, #0
 80137b6:	4635      	mov	r5, r6
}

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
 80137b8:	ebc6 0309 	rsb	r3, r6, r9
		for ( ; width > 0; --width) {
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
 80137bc:	5d59      	ldrb	r1, [r3, r5]
 80137be:	b121      	cbz	r1, 80137ca <prints+0x64>
		printchar (out, *string);
 80137c0:	4640      	mov	r0, r8
 80137c2:	f7ff ffc9 	bl	8013758 <printchar>
		++pc;
 80137c6:	3501      	adds	r5, #1
 80137c8:	e7f6      	b.n	80137b8 <prints+0x52>
		for ( ; width > 0; --width) {
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
 80137ca:	4626      	mov	r6, r4
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
 80137cc:	2e00      	cmp	r6, #0
 80137ce:	dd05      	ble.n	80137dc <prints+0x76>
		printchar (out, padchar);
 80137d0:	4640      	mov	r0, r8
 80137d2:	4639      	mov	r1, r7
 80137d4:	f7ff ffc0 	bl	8013758 <printchar>
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
 80137d8:	3e01      	subs	r6, #1
 80137da:	e7f7      	b.n	80137cc <prints+0x66>
		printchar (out, padchar);
		++pc;
	}

	return pc;
}
 80137dc:	2c00      	cmp	r4, #0
 80137de:	bfac      	ite	ge
 80137e0:	1928      	addge	r0, r5, r4
 80137e2:	1c28      	addlt	r0, r5, #0
 80137e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080137e8 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 80137e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80137ec:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80137ee:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 80137f2:	4681      	mov	r9, r0
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;
 80137f4:	460c      	mov	r4, r1

	if (i == 0) {
 80137f6:	b951      	cbnz	r1, 801380e <printi+0x26>
		print_buf[0] = '0';
 80137f8:	2230      	movs	r2, #48	; 0x30
 80137fa:	f88d 2004 	strb.w	r2, [sp, #4]
		print_buf[1] = '\0';
 80137fe:	f88d 1005 	strb.w	r1, [sp, #5]
		return prints (out, print_buf, width, pad);
 8013802:	4632      	mov	r2, r6
 8013804:	a901      	add	r1, sp, #4
 8013806:	4643      	mov	r3, r8
 8013808:	f7ff ffad 	bl	8013766 <prints>
 801380c:	e035      	b.n	801387a <printi+0x92>
	}

	if (sg && b == 10 && i < 0) {
 801380e:	b133      	cbz	r3, 801381e <printi+0x36>
 8013810:	2a0a      	cmp	r2, #10
 8013812:	d104      	bne.n	801381e <printi+0x36>
 8013814:	2900      	cmp	r1, #0
 8013816:	da02      	bge.n	801381e <printi+0x36>
		neg = 1;
		u = -i;
 8013818:	424c      	negs	r4, r1
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
		neg = 1;
 801381a:	2701      	movs	r7, #1
 801381c:	e000      	b.n	8013820 <printi+0x38>

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 801381e:	2700      	movs	r7, #0
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
 8013820:	ad04      	add	r5, sp, #16
 8013822:	2300      	movs	r3, #0
 8013824:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8013828:	46aa      	mov	sl, r5

	while (u) {
 801382a:	b16c      	cbz	r4, 8013848 <printi+0x60>
		t = u % b;
 801382c:	fbb4 f3f2 	udiv	r3, r4, r2
 8013830:	fb02 4413 	mls	r4, r2, r3, r4
		if( t >= 10 )
 8013834:	2c09      	cmp	r4, #9
 8013836:	dd02      	ble.n	801383e <printi+0x56>
			t += letbase - '0' - 10;
 8013838:	990e      	ldr	r1, [sp, #56]	; 0x38
 801383a:	393a      	subs	r1, #58	; 0x3a
 801383c:	1864      	adds	r4, r4, r1
		*--s = t + '0';
 801383e:	3430      	adds	r4, #48	; 0x30
 8013840:	f805 4d01 	strb.w	r4, [r5, #-1]!
		u /= b;
 8013844:	461c      	mov	r4, r3
 8013846:	e7ef      	b.n	8013828 <printi+0x40>
	}

	if (neg) {
 8013848:	b187      	cbz	r7, 801386c <printi+0x84>
		if( width && (pad & PAD_ZERO) ) {
 801384a:	b14e      	cbz	r6, 8013860 <printi+0x78>
 801384c:	f018 0f02 	tst.w	r8, #2
 8013850:	d006      	beq.n	8013860 <printi+0x78>
			printchar (out, '-');
 8013852:	4648      	mov	r0, r9
 8013854:	212d      	movs	r1, #45	; 0x2d
 8013856:	f7ff ff7f 	bl	8013758 <printchar>
			++pc;
			--width;
 801385a:	3e01      	subs	r6, #1
	}

	if (neg) {
		if( width && (pad & PAD_ZERO) ) {
			printchar (out, '-');
			++pc;
 801385c:	2701      	movs	r7, #1
			--width;
 801385e:	e005      	b.n	801386c <printi+0x84>
		}
		else {
			*--s = '-';
 8013860:	202d      	movs	r0, #45	; 0x2d
 8013862:	f105 3aff 	add.w	sl, r5, #4294967295
 8013866:	f805 0c01 	strb.w	r0, [r5, #-1]

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 801386a:	2700      	movs	r7, #0
		else {
			*--s = '-';
		}
	}

	return pc + prints (out, s, width, pad);
 801386c:	4648      	mov	r0, r9
 801386e:	4651      	mov	r1, sl
 8013870:	4632      	mov	r2, r6
 8013872:	4643      	mov	r3, r8
 8013874:	f7ff ff77 	bl	8013766 <prints>
 8013878:	1838      	adds	r0, r7, r0
}
 801387a:	b004      	add	sp, #16
 801387c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08013880 <print>:

static int print( char **out, const char *format, va_list args )
{
 8013880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013882:	b089      	sub	sp, #36	; 0x24
 8013884:	4606      	mov	r6, r0
 8013886:	460d      	mov	r5, r1
 8013888:	9205      	str	r2, [sp, #20]
	register int width, pad;
	register int pc = 0;
 801388a:	2400      	movs	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
 801388c:	782b      	ldrb	r3, [r5, #0]
 801388e:	b123      	cbz	r3, 801389a <print+0x1a>
		if (*format == '%') {
 8013890:	2b25      	cmp	r3, #37	; 0x25
 8013892:	d179      	bne.n	8013988 <print+0x108>
			++format;
			width = pad = 0;
			if (*format == '\0') break;
 8013894:	7868      	ldrb	r0, [r5, #1]
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
 8013896:	1c6a      	adds	r2, r5, #1
			width = pad = 0;
			if (*format == '\0') break;
 8013898:	b928      	cbnz	r0, 80138a6 <print+0x26>
		out:
			printchar (out, *format);
			++pc;
		}
	}
	if (out) **out = '\0';
 801389a:	2e00      	cmp	r6, #0
 801389c:	d07b      	beq.n	8013996 <print+0x116>
 801389e:	6830      	ldr	r0, [r6, #0]
 80138a0:	2200      	movs	r2, #0
 80138a2:	7002      	strb	r2, [r0, #0]
 80138a4:	e077      	b.n	8013996 <print+0x116>
	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
			width = pad = 0;
			if (*format == '\0') break;
			if (*format == '%') goto out;
 80138a6:	2825      	cmp	r0, #37	; 0x25
 80138a8:	d06d      	beq.n	8013986 <print+0x106>
			if (*format == '-') {
 80138aa:	282d      	cmp	r0, #45	; 0x2d
 80138ac:	d102      	bne.n	80138b4 <print+0x34>
				++format;
 80138ae:	1caa      	adds	r2, r5, #2
				pad = PAD_RIGHT;
 80138b0:	2301      	movs	r3, #1
 80138b2:	e000      	b.n	80138b6 <print+0x36>
	char scr[2];

	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
			width = pad = 0;
 80138b4:	2300      	movs	r3, #0
 80138b6:	4617      	mov	r7, r2
 80138b8:	3201      	adds	r2, #1
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
				pad = PAD_RIGHT;
			}
			while (*format == '0') {
 80138ba:	7839      	ldrb	r1, [r7, #0]
 80138bc:	2930      	cmp	r1, #48	; 0x30
 80138be:	d102      	bne.n	80138c6 <print+0x46>
				++format;
				pad |= PAD_ZERO;
 80138c0:	f043 0302 	orr.w	r3, r3, #2
 80138c4:	e7f7      	b.n	80138b6 <print+0x36>
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
				pad = PAD_RIGHT;
			}
			while (*format == '0') {
 80138c6:	2200      	movs	r2, #0
				++format;
				pad |= PAD_ZERO;
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 80138c8:	7839      	ldrb	r1, [r7, #0]
 80138ca:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 80138ce:	fa5f fc80 	uxtb.w	ip, r0
 80138d2:	463d      	mov	r5, r7
 80138d4:	3701      	adds	r7, #1
 80138d6:	f1bc 0f09 	cmp.w	ip, #9
 80138da:	d803      	bhi.n	80138e4 <print+0x64>
				width *= 10;
				width += *format - '0';
 80138dc:	250a      	movs	r5, #10
 80138de:	fb05 0202 	mla	r2, r5, r2, r0
 80138e2:	e7f1      	b.n	80138c8 <print+0x48>
			}
			if( *format == 's' ) {
 80138e4:	2973      	cmp	r1, #115	; 0x73
 80138e6:	d109      	bne.n	80138fc <print+0x7c>
				register char *s = (char *)va_arg( args, int );
 80138e8:	9f05      	ldr	r7, [sp, #20]
 80138ea:	1d39      	adds	r1, r7, #4
 80138ec:	9105      	str	r1, [sp, #20]
 80138ee:	6839      	ldr	r1, [r7, #0]
				pc += prints (out, s?s:"(null)", width, pad);
 80138f0:	4f2a      	ldr	r7, [pc, #168]	; (801399c <print+0x11c>)
 80138f2:	4630      	mov	r0, r6
 80138f4:	2900      	cmp	r1, #0
 80138f6:	bf08      	it	eq
 80138f8:	4639      	moveq	r1, r7
 80138fa:	e041      	b.n	8013980 <print+0x100>
				continue;
			}
			if( *format == 'd' ) {
 80138fc:	2964      	cmp	r1, #100	; 0x64
 80138fe:	d10e      	bne.n	801391e <print+0x9e>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
 8013900:	e88d 000c 	stmia.w	sp, {r2, r3}
 8013904:	9905      	ldr	r1, [sp, #20]
 8013906:	2361      	movs	r3, #97	; 0x61
 8013908:	9302      	str	r3, [sp, #8]
 801390a:	1d08      	adds	r0, r1, #4
 801390c:	6809      	ldr	r1, [r1, #0]
 801390e:	9005      	str	r0, [sp, #20]
 8013910:	220a      	movs	r2, #10
 8013912:	4630      	mov	r0, r6
 8013914:	2301      	movs	r3, #1
 8013916:	f7ff ff67 	bl	80137e8 <printi>
 801391a:	1824      	adds	r4, r4, r0
				continue;
 801391c:	e039      	b.n	8013992 <print+0x112>
			}
			if( *format == 'x' ) {
 801391e:	2978      	cmp	r1, #120	; 0x78
 8013920:	d106      	bne.n	8013930 <print+0xb0>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
 8013922:	9905      	ldr	r1, [sp, #20]
 8013924:	1d08      	adds	r0, r1, #4
 8013926:	e88d 000c 	stmia.w	sp, {r2, r3}
 801392a:	9005      	str	r0, [sp, #20]
 801392c:	2261      	movs	r2, #97	; 0x61
 801392e:	e007      	b.n	8013940 <print+0xc0>
				continue;
			}
			if( *format == 'X' ) {
 8013930:	2958      	cmp	r1, #88	; 0x58
 8013932:	d10a      	bne.n	801394a <print+0xca>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
 8013934:	9905      	ldr	r1, [sp, #20]
 8013936:	1d08      	adds	r0, r1, #4
 8013938:	e88d 000c 	stmia.w	sp, {r2, r3}
 801393c:	9005      	str	r0, [sp, #20]
 801393e:	2241      	movs	r2, #65	; 0x41
 8013940:	9202      	str	r2, [sp, #8]
 8013942:	4630      	mov	r0, r6
 8013944:	6809      	ldr	r1, [r1, #0]
 8013946:	2210      	movs	r2, #16
 8013948:	e00b      	b.n	8013962 <print+0xe2>
				continue;
			}
			if( *format == 'u' ) {
 801394a:	2975      	cmp	r1, #117	; 0x75
 801394c:	d10b      	bne.n	8013966 <print+0xe6>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
 801394e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8013952:	9905      	ldr	r1, [sp, #20]
 8013954:	2361      	movs	r3, #97	; 0x61
 8013956:	9302      	str	r3, [sp, #8]
 8013958:	1d08      	adds	r0, r1, #4
 801395a:	6809      	ldr	r1, [r1, #0]
 801395c:	9005      	str	r0, [sp, #20]
 801395e:	220a      	movs	r2, #10
 8013960:	4630      	mov	r0, r6
 8013962:	2300      	movs	r3, #0
 8013964:	e7d7      	b.n	8013916 <print+0x96>
				continue;
			}
			if( *format == 'c' ) {
 8013966:	2963      	cmp	r1, #99	; 0x63
 8013968:	d113      	bne.n	8013992 <print+0x112>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 801396a:	9905      	ldr	r1, [sp, #20]
 801396c:	1d08      	adds	r0, r1, #4
 801396e:	6809      	ldr	r1, [r1, #0]
 8013970:	9005      	str	r0, [sp, #20]
				scr[1] = '\0';
 8013972:	2000      	movs	r0, #0
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'c' ) {
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 8013974:	f88d 101c 	strb.w	r1, [sp, #28]
				scr[1] = '\0';
 8013978:	f88d 001d 	strb.w	r0, [sp, #29]
				pc += prints (out, scr, width, pad);
 801397c:	a907      	add	r1, sp, #28
 801397e:	4630      	mov	r0, r6
 8013980:	f7ff fef1 	bl	8013766 <prints>
 8013984:	e7c9      	b.n	801391a <print+0x9a>
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
 8013986:	4615      	mov	r5, r2
				continue;
			}
		}
		else {
		out:
			printchar (out, *format);
 8013988:	4630      	mov	r0, r6
 801398a:	7829      	ldrb	r1, [r5, #0]
 801398c:	f7ff fee4 	bl	8013758 <printchar>
			++pc;
 8013990:	3401      	adds	r4, #1
{
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
 8013992:	3501      	adds	r5, #1
 8013994:	e77a      	b.n	801388c <print+0xc>
		}
	}
	if (out) **out = '\0';
	va_end( args );
	return pc;
}
 8013996:	4620      	mov	r0, r4
 8013998:	b009      	add	sp, #36	; 0x24
 801399a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801399c:	08018230 	.word	0x08018230

080139a0 <sprintf>:
{
  return print( 0, format, args );
}

int sprintf(char *out, const char *format, ...)
{
 80139a0:	b40e      	push	{r1, r2, r3}
 80139a2:	b50f      	push	{r0, r1, r2, r3, lr}
 80139a4:	aa05      	add	r2, sp, #20
 80139a6:	9001      	str	r0, [sp, #4]
 80139a8:	f852 1b04 	ldr.w	r1, [r2], #4
        va_list args;
        
        va_start( args, format );
        return print( &out, format, args );
 80139ac:	a801      	add	r0, sp, #4

int sprintf(char *out, const char *format, ...)
{
        va_list args;
        
        va_start( args, format );
 80139ae:	9203      	str	r2, [sp, #12]
        return print( &out, format, args );
 80139b0:	f7ff ff66 	bl	8013880 <print>
}
 80139b4:	b004      	add	sp, #16
 80139b6:	f85d eb04 	ldr.w	lr, [sp], #4
 80139ba:	b003      	add	sp, #12
 80139bc:	4770      	bx	lr

080139be <vsprintf>:

// TK: added for alternative parameter passing
int vsprintf(char *out, const char *format, va_list args)
{
 80139be:	b507      	push	{r0, r1, r2, lr}
  char *_out;
  _out = out;
 80139c0:	ab02      	add	r3, sp, #8
 80139c2:	f843 0d04 	str.w	r0, [r3, #-4]!
  return print( &_out, format, args );
 80139c6:	4618      	mov	r0, r3
 80139c8:	f7ff ff5a 	bl	8013880 <print>
}
 80139cc:	bd0e      	pop	{r1, r2, r3, pc}
	...

080139d0 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80139d0:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80139d4:	4b02      	ldr	r3, [pc, #8]	; (80139e0 <NVIC_PriorityGroupConfig+0x10>)
 80139d6:	f440 3100 	orr.w	r1, r0, #131072	; 0x20000
 80139da:	60d9      	str	r1, [r3, #12]
 80139dc:	4770      	bx	lr
 80139de:	bf00      	nop
 80139e0:	e000ed00 	.word	0xe000ed00

080139e4 <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 80139e4:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 80139e8:	f021 027f 	bic.w	r2, r1, #127	; 0x7f
 80139ec:	4b01      	ldr	r3, [pc, #4]	; (80139f4 <NVIC_SetVectorTable+0x10>)
 80139ee:	4310      	orrs	r0, r2
 80139f0:	6098      	str	r0, [r3, #8]
 80139f2:	4770      	bx	lr
 80139f4:	e000ed00 	.word	0xe000ed00

080139f8 <EXTI_ClearITPendingBit>:
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 80139f8:	4b01      	ldr	r3, [pc, #4]	; (8013a00 <EXTI_ClearITPendingBit+0x8>)
 80139fa:	6158      	str	r0, [r3, #20]
 80139fc:	4770      	bx	lr
 80139fe:	bf00      	nop
 8013a00:	40013c00 	.word	0x40013c00

08013a04 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8013a04:	b5f0      	push	{r4, r5, r6, r7, lr}
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8013a06:	680e      	ldr	r6, [r1, #0]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8013a08:	2200      	movs	r2, #0
  {
    pos = ((uint32_t)0x01) << pinpos;
 8013a0a:	2301      	movs	r3, #1
 8013a0c:	fa03 f302 	lsl.w	r3, r3, r2
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8013a10:	ea03 0506 	and.w	r5, r3, r6

    if (currentpin == pos)
 8013a14:	429d      	cmp	r5, r3
 8013a16:	d13e      	bne.n	8013a96 <GPIO_Init+0x92>
    {
      // TK: added check if MODER already initialized to target value to avoid glitches during reconfiguration of output pins!
      if( ((GPIOx->MODER >> (2*pinpos)) & 3) != GPIO_InitStruct->GPIO_Mode ) {
 8013a18:	6807      	ldr	r7, [r0, #0]
 8013a1a:	790c      	ldrb	r4, [r1, #4]
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
 8013a1c:	0053      	lsls	r3, r2, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      // TK: added check if MODER already initialized to target value to avoid glitches during reconfiguration of output pins!
      if( ((GPIOx->MODER >> (2*pinpos)) & 3) != GPIO_InitStruct->GPIO_Mode ) {
 8013a1e:	fa27 f703 	lsr.w	r7, r7, r3
 8013a22:	f007 0703 	and.w	r7, r7, #3
 8013a26:	42a7      	cmp	r7, r4
 8013a28:	d00d      	beq.n	8013a46 <GPIO_Init+0x42>
	GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8013a2a:	6807      	ldr	r7, [r0, #0]
 8013a2c:	f04f 0c03 	mov.w	ip, #3
 8013a30:	fa0c fc03 	lsl.w	ip, ip, r3
 8013a34:	ea27 070c 	bic.w	r7, r7, ip
 8013a38:	6007      	str	r7, [r0, #0]
	GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8013a3a:	6807      	ldr	r7, [r0, #0]
 8013a3c:	fa04 fc03 	lsl.w	ip, r4, r3
 8013a40:	ea4c 0707 	orr.w	r7, ip, r7
 8013a44:	6007      	str	r7, [r0, #0]
      }

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8013a46:	3c01      	subs	r4, #1
 8013a48:	2c01      	cmp	r4, #1
 8013a4a:	d817      	bhi.n	8013a7c <GPIO_Init+0x78>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8013a4c:	6887      	ldr	r7, [r0, #8]
 8013a4e:	2403      	movs	r4, #3
 8013a50:	fa04 f403 	lsl.w	r4, r4, r3
 8013a54:	ea27 0704 	bic.w	r7, r7, r4
 8013a58:	6087      	str	r7, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8013a5a:	794c      	ldrb	r4, [r1, #5]
 8013a5c:	6887      	ldr	r7, [r0, #8]
 8013a5e:	fa04 f403 	lsl.w	r4, r4, r3
 8013a62:	433c      	orrs	r4, r7
 8013a64:	6084      	str	r4, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8013a66:	6844      	ldr	r4, [r0, #4]
 8013a68:	ea24 0505 	bic.w	r5, r4, r5
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8013a6c:	798c      	ldrb	r4, [r1, #6]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8013a6e:	6045      	str	r5, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8013a70:	6845      	ldr	r5, [r0, #4]
 8013a72:	fa04 f402 	lsl.w	r4, r4, r2
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
}
 8013a76:	b2a4      	uxth	r4, r4
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8013a78:	432c      	orrs	r4, r5
 8013a7a:	6044      	str	r4, [r0, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8013a7c:	68c5      	ldr	r5, [r0, #12]
 8013a7e:	2403      	movs	r4, #3
 8013a80:	fa04 f403 	lsl.w	r4, r4, r3
 8013a84:	ea25 0504 	bic.w	r5, r5, r4
 8013a88:	60c5      	str	r5, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8013a8a:	79cd      	ldrb	r5, [r1, #7]
 8013a8c:	68c4      	ldr	r4, [r0, #12]
 8013a8e:	fa05 f303 	lsl.w	r3, r5, r3
 8013a92:	4323      	orrs	r3, r4
 8013a94:	60c3      	str	r3, [r0, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8013a96:	3201      	adds	r2, #1
 8013a98:	2a10      	cmp	r2, #16
 8013a9a:	d1b6      	bne.n	8013a0a <GPIO_Init+0x6>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8013a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013a9e <GPIO_StructInit>:
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8013a9e:	2100      	movs	r1, #0
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8013aa0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013aa4:	6003      	str	r3, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8013aa6:	7101      	strb	r1, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8013aa8:	7141      	strb	r1, [r0, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8013aaa:	7181      	strb	r1, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8013aac:	71c1      	strb	r1, [r0, #7]
 8013aae:	4770      	bx	lr

08013ab0 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8013ab0:	8301      	strh	r1, [r0, #24]
 8013ab2:	4770      	bx	lr

08013ab4 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8013ab4:	8341      	strh	r1, [r0, #26]
 8013ab6:	4770      	bx	lr

08013ab8 <GPIO_PinAFConfig>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8013ab8:	f001 0307 	and.w	r3, r1, #7
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8013abc:	08c9      	lsrs	r1, r1, #3
 8013abe:	3108      	adds	r1, #8
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8013ac0:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8013ac2:	009b      	lsls	r3, r3, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8013ac4:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 8013ac8:	240f      	movs	r4, #15
 8013aca:	fa04 f403 	lsl.w	r4, r4, r3
 8013ace:	ea25 0404 	bic.w	r4, r5, r4
 8013ad2:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8013ad6:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8013ada:	fa02 f203 	lsl.w	r2, r2, r3
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8013ade:	4314      	orrs	r4, r2
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8013ae0:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
 8013ae4:	bd30      	pop	{r4, r5, pc}

08013ae6 <I2C_GenerateSTOP>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8013ae6:	8803      	ldrh	r3, [r0, #0]
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8013ae8:	b119      	cbz	r1, 8013af2 <I2C_GenerateSTOP+0xc>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8013aea:	b299      	uxth	r1, r3
 8013aec:	f441 7300 	orr.w	r3, r1, #512	; 0x200
 8013af0:	e003      	b.n	8013afa <I2C_GenerateSTOP+0x14>
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8013af2:	f423 7100 	bic.w	r1, r3, #512	; 0x200
 8013af6:	040a      	lsls	r2, r1, #16
 8013af8:	0c13      	lsrs	r3, r2, #16
 8013afa:	8003      	strh	r3, [r0, #0]
 8013afc:	4770      	bx	lr

08013afe <I2C_ITConfig>:
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 8013afe:	8883      	ldrh	r3, [r0, #4]
 8013b00:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 8013b02:	b10a      	cbz	r2, 8013b08 <I2C_ITConfig+0xa>
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 8013b04:	4319      	orrs	r1, r3
 8013b06:	e001      	b.n	8013b0c <I2C_ITConfig+0xe>
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 8013b08:	ea23 0101 	bic.w	r1, r3, r1
 8013b0c:	8081      	strh	r1, [r0, #4]
 8013b0e:	4770      	bx	lr

08013b10 <I2C_GetLastEvent>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8013b10:	8a83      	ldrh	r3, [r0, #20]
  flag2 = I2Cx->SR2;
 8013b12:	8b00      	ldrh	r0, [r0, #24]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8013b14:	b299      	uxth	r1, r3
  flag2 = I2Cx->SR2;
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8013b16:	ea41 4200 	orr.w	r2, r1, r0, lsl #16

  /* Return status */
  return lastevent;
}
 8013b1a:	f022 407f 	bic.w	r0, r2, #4278190080	; 0xff000000
 8013b1e:	4770      	bx	lr

08013b20 <I2C_ClearITPendingBit>:

  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_MASK;

  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8013b20:	43c9      	mvns	r1, r1
 8013b22:	b28a      	uxth	r2, r1
 8013b24:	8282      	strh	r2, [r0, #20]
 8013b26:	4770      	bx	lr

08013b28 <PWR_BackupAccessCmd>:
void PWR_BackupAccessCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
 8013b28:	4b01      	ldr	r3, [pc, #4]	; (8013b30 <PWR_BackupAccessCmd+0x8>)
 8013b2a:	6018      	str	r0, [r3, #0]
 8013b2c:	4770      	bx	lr
 8013b2e:	bf00      	nop
 8013b30:	420e0020 	.word	0x420e0020

08013b34 <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8013b34:	4b1e      	ldr	r3, [pc, #120]	; (8013bb0 <RCC_GetClocksFreq+0x7c>)
 8013b36:	689a      	ldr	r2, [r3, #8]
 8013b38:	f002 010c 	and.w	r1, r2, #12

  switch (tmp)
 8013b3c:	2904      	cmp	r1, #4
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8013b3e:	b510      	push	{r4, lr}
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;

  switch (tmp)
 8013b40:	d003      	beq.n	8013b4a <RCC_GetClocksFreq+0x16>
 8013b42:	2908      	cmp	r1, #8
 8013b44:	d003      	beq.n	8013b4e <RCC_GetClocksFreq+0x1a>
 8013b46:	4b1b      	ldr	r3, [pc, #108]	; (8013bb4 <RCC_GetClocksFreq+0x80>)
 8013b48:	e018      	b.n	8013b7c <RCC_GetClocksFreq+0x48>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8013b4a:	4b1b      	ldr	r3, [pc, #108]	; (8013bb8 <RCC_GetClocksFreq+0x84>)
 8013b4c:	e016      	b.n	8013b7c <RCC_GetClocksFreq+0x48>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8013b4e:	685c      	ldr	r4, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8013b50:	685a      	ldr	r2, [r3, #4]
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8013b52:	6859      	ldr	r1, [r3, #4]
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
 8013b54:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8013b58:	bf14      	ite	ne
 8013b5a:	4b17      	ldrne	r3, [pc, #92]	; (8013bb8 <RCC_GetClocksFreq+0x84>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8013b5c:	4b15      	ldreq	r3, [pc, #84]	; (8013bb4 <RCC_GetClocksFreq+0x80>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8013b5e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8013b62:	fbb3 f3f2 	udiv	r3, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8013b66:	4a12      	ldr	r2, [pc, #72]	; (8013bb0 <RCC_GetClocksFreq+0x7c>)
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8013b68:	f3c1 1488 	ubfx	r4, r1, #6, #9
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8013b6c:	6851      	ldr	r1, [r2, #4]
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8013b6e:	4363      	muls	r3, r4
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8013b70:	f3c1 4401 	ubfx	r4, r1, #16, #2
 8013b74:	1c62      	adds	r2, r4, #1
 8013b76:	0051      	lsls	r1, r2, #1
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8013b78:	fbb3 f3f1 	udiv	r3, r3, r1
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8013b7c:	490c      	ldr	r1, [pc, #48]	; (8013bb0 <RCC_GetClocksFreq+0x7c>)
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8013b7e:	6003      	str	r3, [r0, #0]
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8013b80:	688c      	ldr	r4, [r1, #8]
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8013b82:	4a0e      	ldr	r2, [pc, #56]	; (8013bbc <RCC_GetClocksFreq+0x88>)
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
  tmp = tmp >> 4;
 8013b84:	f3c4 1303 	ubfx	r3, r4, #4, #4
  presc = APBAHBPrescTable[tmp];
 8013b88:	5cd4      	ldrb	r4, [r2, r3]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8013b8a:	6803      	ldr	r3, [r0, #0]
 8013b8c:	fa23 f304 	lsr.w	r3, r3, r4
 8013b90:	6043      	str	r3, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8013b92:	688c      	ldr	r4, [r1, #8]
  tmp = tmp >> 10;
 8013b94:	f3c4 2482 	ubfx	r4, r4, #10, #3
  presc = APBAHBPrescTable[tmp];
 8013b98:	5d14      	ldrb	r4, [r2, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8013b9a:	fa23 f404 	lsr.w	r4, r3, r4
 8013b9e:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8013ba0:	6889      	ldr	r1, [r1, #8]
  tmp = tmp >> 13;
 8013ba2:	f3c1 3142 	ubfx	r1, r1, #13, #3
  presc = APBAHBPrescTable[tmp];
 8013ba6:	5c52      	ldrb	r2, [r2, r1]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8013ba8:	fa23 f302 	lsr.w	r3, r3, r2
 8013bac:	60c3      	str	r3, [r0, #12]
 8013bae:	bd10      	pop	{r4, pc}
 8013bb0:	40023800 	.word	0x40023800
 8013bb4:	00f42400 	.word	0x00f42400
 8013bb8:	007a1200 	.word	0x007a1200
 8013bbc:	2000000b 	.word	0x2000000b

08013bc0 <RCC_RTCCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 8013bc0:	f400 7340 	and.w	r3, r0, #768	; 0x300
 8013bc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8013bc8:	4b08      	ldr	r3, [pc, #32]	; (8013bec <RCC_RTCCLKConfig+0x2c>)
 8013bca:	d108      	bne.n	8013bde <RCC_RTCCLKConfig+0x1e>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8013bcc:	6899      	ldr	r1, [r3, #8]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8013bce:	f020 4270 	bic.w	r2, r0, #4026531840	; 0xf0000000
  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 8013bd2:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8013bd6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8013bda:	430a      	orrs	r2, r1

    /* Store the new value */
    RCC->CFGR = tmpreg;
 8013bdc:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 8013bde:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8013be0:	0500      	lsls	r0, r0, #20
 8013be2:	ea41 5210 	orr.w	r2, r1, r0, lsr #20
 8013be6:	671a      	str	r2, [r3, #112]	; 0x70
 8013be8:	4770      	bx	lr
 8013bea:	bf00      	nop
 8013bec:	40023800 	.word	0x40023800

08013bf0 <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8013bf0:	4b01      	ldr	r3, [pc, #4]	; (8013bf8 <RCC_RTCCLKCmd+0x8>)
 8013bf2:	6018      	str	r0, [r3, #0]
 8013bf4:	4770      	bx	lr
 8013bf6:	bf00      	nop
 8013bf8:	42470e3c 	.word	0x42470e3c

08013bfc <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8013bfc:	4b04      	ldr	r3, [pc, #16]	; (8013c10 <RCC_AHB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8013bfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8013c00:	b109      	cbz	r1, 8013c06 <RCC_AHB1PeriphClockCmd+0xa>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8013c02:	4310      	orrs	r0, r2
 8013c04:	e001      	b.n	8013c0a <RCC_AHB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8013c06:	ea22 0000 	bic.w	r0, r2, r0
 8013c0a:	6318      	str	r0, [r3, #48]	; 0x30
 8013c0c:	4770      	bx	lr
 8013c0e:	bf00      	nop
 8013c10:	40023800 	.word	0x40023800

08013c14 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8013c14:	4b04      	ldr	r3, [pc, #16]	; (8013c28 <RCC_AHB2PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8013c16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8013c18:	b109      	cbz	r1, 8013c1e <RCC_AHB2PeriphClockCmd+0xa>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8013c1a:	4310      	orrs	r0, r2
 8013c1c:	e001      	b.n	8013c22 <RCC_AHB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 8013c1e:	ea22 0000 	bic.w	r0, r2, r0
 8013c22:	6358      	str	r0, [r3, #52]	; 0x34
 8013c24:	4770      	bx	lr
 8013c26:	bf00      	nop
 8013c28:	40023800 	.word	0x40023800

08013c2c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8013c2c:	4b04      	ldr	r3, [pc, #16]	; (8013c40 <RCC_APB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8013c2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8013c30:	b109      	cbz	r1, 8013c36 <RCC_APB1PeriphClockCmd+0xa>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8013c32:	4310      	orrs	r0, r2
 8013c34:	e001      	b.n	8013c3a <RCC_APB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8013c36:	ea22 0000 	bic.w	r0, r2, r0
 8013c3a:	6418      	str	r0, [r3, #64]	; 0x40
 8013c3c:	4770      	bx	lr
 8013c3e:	bf00      	nop
 8013c40:	40023800 	.word	0x40023800

08013c44 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8013c44:	4b04      	ldr	r3, [pc, #16]	; (8013c58 <RCC_APB2PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8013c46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8013c48:	b109      	cbz	r1, 8013c4e <RCC_APB2PeriphClockCmd+0xa>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8013c4a:	4310      	orrs	r0, r2
 8013c4c:	e001      	b.n	8013c52 <RCC_APB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8013c4e:	ea22 0000 	bic.w	r0, r2, r0
 8013c52:	6458      	str	r0, [r3, #68]	; 0x44
 8013c54:	4770      	bx	lr
 8013c56:	bf00      	nop
 8013c58:	40023800 	.word	0x40023800

08013c5c <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8013c5c:	4b04      	ldr	r3, [pc, #16]	; (8013c70 <RCC_AHB1PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8013c5e:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8013c60:	b109      	cbz	r1, 8013c66 <RCC_AHB1PeriphResetCmd+0xa>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8013c62:	4310      	orrs	r0, r2
 8013c64:	e001      	b.n	8013c6a <RCC_AHB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 8013c66:	ea22 0000 	bic.w	r0, r2, r0
 8013c6a:	6118      	str	r0, [r3, #16]
 8013c6c:	4770      	bx	lr
 8013c6e:	bf00      	nop
 8013c70:	40023800 	.word	0x40023800

08013c74 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8013c74:	4b04      	ldr	r3, [pc, #16]	; (8013c88 <RCC_AHB2PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8013c76:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8013c78:	b109      	cbz	r1, 8013c7e <RCC_AHB2PeriphResetCmd+0xa>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8013c7a:	4310      	orrs	r0, r2
 8013c7c:	e001      	b.n	8013c82 <RCC_AHB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 8013c7e:	ea22 0000 	bic.w	r0, r2, r0
 8013c82:	6158      	str	r0, [r3, #20]
 8013c84:	4770      	bx	lr
 8013c86:	bf00      	nop
 8013c88:	40023800 	.word	0x40023800

08013c8c <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8013c8c:	4b04      	ldr	r3, [pc, #16]	; (8013ca0 <RCC_APB1PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8013c8e:	6a1a      	ldr	r2, [r3, #32]
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8013c90:	b109      	cbz	r1, 8013c96 <RCC_APB1PeriphResetCmd+0xa>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8013c92:	4310      	orrs	r0, r2
 8013c94:	e001      	b.n	8013c9a <RCC_APB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8013c96:	ea22 0000 	bic.w	r0, r2, r0
 8013c9a:	6218      	str	r0, [r3, #32]
 8013c9c:	4770      	bx	lr
 8013c9e:	bf00      	nop
 8013ca0:	40023800 	.word	0x40023800

08013ca4 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8013ca4:	4b04      	ldr	r3, [pc, #16]	; (8013cb8 <RCC_APB2PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8013ca6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8013ca8:	b109      	cbz	r1, 8013cae <RCC_APB2PeriphResetCmd+0xa>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8013caa:	4310      	orrs	r0, r2
 8013cac:	e001      	b.n	8013cb2 <RCC_APB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8013cae:	ea22 0000 	bic.w	r0, r2, r0
 8013cb2:	6258      	str	r0, [r3, #36]	; 0x24
 8013cb4:	4770      	bx	lr
 8013cb6:	bf00      	nop
 8013cb8:	40023800 	.word	0x40023800

08013cbc <RTC_ByteToBcd2>:
  * @param  Value: Byte to be converted.
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
 8013cbc:	2100      	movs	r1, #0
  
  while (Value >= 10)
 8013cbe:	2809      	cmp	r0, #9
 8013cc0:	d904      	bls.n	8013ccc <RTC_ByteToBcd2+0x10>
  {
    bcdhigh++;
 8013cc2:	1c4b      	adds	r3, r1, #1
    Value -= 10;
 8013cc4:	380a      	subs	r0, #10
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
  {
    bcdhigh++;
 8013cc6:	b2d9      	uxtb	r1, r3
    Value -= 10;
 8013cc8:	b2c0      	uxtb	r0, r0
 8013cca:	e7f8      	b.n	8013cbe <RTC_ByteToBcd2+0x2>
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 8013ccc:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
}
 8013cd0:	b2c0      	uxtb	r0, r0
 8013cd2:	4770      	bx	lr

08013cd4 <RTC_StructInit>:
    
  /* Initialize the RTC_AsynchPrediv member */
  RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;

  /* Initialize the RTC_SynchPrediv member */
  RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 8013cd4:	2100      	movs	r1, #0
 8013cd6:	227f      	movs	r2, #127	; 0x7f
 8013cd8:	23ff      	movs	r3, #255	; 0xff
 8013cda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8013cde:	4770      	bx	lr

08013ce0 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode  
  */
ErrorStatus RTC_EnterInitMode(void)
{
 8013ce0:	b082      	sub	sp, #8
  __IO uint32_t initcounter = 0x00;
 8013ce2:	2300      	movs	r3, #0
  ErrorStatus status = ERROR;
  uint32_t initstatus = 0x00;
     
  /* Check if the Initialization mode is set */
  if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8013ce4:	490d      	ldr	r1, [pc, #52]	; (8013d1c <RTC_EnterInitMode+0x3c>)
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode  
  */
ErrorStatus RTC_EnterInitMode(void)
{
  __IO uint32_t initcounter = 0x00;
 8013ce6:	9301      	str	r3, [sp, #4]
  ErrorStatus status = ERROR;
  uint32_t initstatus = 0x00;
     
  /* Check if the Initialization mode is set */
  if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8013ce8:	68ca      	ldr	r2, [r1, #12]
 8013cea:	0650      	lsls	r0, r2, #25
 8013cec:	d413      	bmi.n	8013d16 <RTC_EnterInitMode+0x36>
  {
    /* Set the Initialization mode */
    RTC->ISR = (uint32_t)RTC_INIT_MASK;
 8013cee:	f04f 30ff 	mov.w	r0, #4294967295
 8013cf2:	60c8      	str	r0, [r1, #12]
    
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    do
    {
      initstatus = RTC->ISR & RTC_ISR_INITF;
 8013cf4:	4b09      	ldr	r3, [pc, #36]	; (8013d1c <RTC_EnterInitMode+0x3c>)
 8013cf6:	68d9      	ldr	r1, [r3, #12]
      initcounter++;  
 8013cf8:	9801      	ldr	r0, [sp, #4]
    RTC->ISR = (uint32_t)RTC_INIT_MASK;
    
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    do
    {
      initstatus = RTC->ISR & RTC_ISR_INITF;
 8013cfa:	f001 0240 	and.w	r2, r1, #64	; 0x40
      initcounter++;  
 8013cfe:	1c41      	adds	r1, r0, #1
 8013d00:	9101      	str	r1, [sp, #4]
    } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 8013d02:	9801      	ldr	r0, [sp, #4]
 8013d04:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8013d08:	d001      	beq.n	8013d0e <RTC_EnterInitMode+0x2e>
 8013d0a:	2a00      	cmp	r2, #0
 8013d0c:	d0f2      	beq.n	8013cf4 <RTC_EnterInitMode+0x14>
    
    if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 8013d0e:	68db      	ldr	r3, [r3, #12]
    {
      status = SUCCESS;
 8013d10:	f3c3 1080 	ubfx	r0, r3, #6, #1
 8013d14:	e000      	b.n	8013d18 <RTC_EnterInitMode+0x38>
      status = ERROR;
    }        
  }
  else
  {
    status = SUCCESS;  
 8013d16:	2001      	movs	r0, #1
  } 
    
  return (status);  
}
 8013d18:	b002      	add	sp, #8
 8013d1a:	4770      	bx	lr
 8013d1c:	40002800 	.word	0x40002800

08013d20 <RTC_ExitInitMode>:
  * @retval None
  */
void RTC_ExitInitMode(void)
{ 
  /* Exit Initialization mode */
  RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8013d20:	4b02      	ldr	r3, [pc, #8]	; (8013d2c <RTC_ExitInitMode+0xc>)
 8013d22:	68da      	ldr	r2, [r3, #12]
 8013d24:	f022 0080 	bic.w	r0, r2, #128	; 0x80
 8013d28:	60d8      	str	r0, [r3, #12]
 8013d2a:	4770      	bx	lr
 8013d2c:	40002800 	.word	0x40002800

08013d30 <RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized  
  */
ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
{
 8013d30:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
  assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
  assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8013d32:	4c10      	ldr	r4, [pc, #64]	; (8013d74 <RTC_Init+0x44>)
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized  
  */
ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
{
 8013d34:	4605      	mov	r5, r0
  assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
  assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
  assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8013d36:	23ca      	movs	r3, #202	; 0xca
  RTC->WPR = 0x53;
 8013d38:	2053      	movs	r0, #83	; 0x53
  assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
  assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
  assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8013d3a:	6263      	str	r3, [r4, #36]	; 0x24
  RTC->WPR = 0x53;
 8013d3c:	6260      	str	r0, [r4, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8013d3e:	f7ff ffcf 	bl	8013ce0 <RTC_EnterInitMode>
 8013d42:	b190      	cbz	r0, 8013d6a <RTC_Init+0x3a>
    status = ERROR;
  } 
  else
  {
    /* Clear RTC CR FMT Bit */
    RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 8013d44:	68a1      	ldr	r1, [r4, #8]
 8013d46:	f021 0240 	bic.w	r2, r1, #64	; 0x40
 8013d4a:	60a2      	str	r2, [r4, #8]
    /* Set RTC_CR register */
    RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 8013d4c:	68a0      	ldr	r0, [r4, #8]
 8013d4e:	682b      	ldr	r3, [r5, #0]
 8013d50:	ea40 0103 	orr.w	r1, r0, r3
 8013d54:	60a1      	str	r1, [r4, #8]
  
    /* Configure the RTC PRER */
    RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 8013d56:	68aa      	ldr	r2, [r5, #8]
 8013d58:	6122      	str	r2, [r4, #16]
    RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 8013d5a:	6920      	ldr	r0, [r4, #16]
 8013d5c:	686b      	ldr	r3, [r5, #4]
 8013d5e:	ea40 4103 	orr.w	r1, r0, r3, lsl #16
 8013d62:	6121      	str	r1, [r4, #16]

    /* Exit Initialization mode */
    RTC_ExitInitMode();
 8013d64:	f7ff ffdc 	bl	8013d20 <RTC_ExitInitMode>

    status = SUCCESS;    
 8013d68:	2001      	movs	r0, #1
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8013d6a:	4b02      	ldr	r3, [pc, #8]	; (8013d74 <RTC_Init+0x44>)
 8013d6c:	22ff      	movs	r2, #255	; 0xff
 8013d6e:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
}
 8013d70:	bd38      	pop	{r3, r4, r5, pc}
 8013d72:	bf00      	nop
 8013d74:	40002800 	.word	0x40002800

08013d78 <RTC_WaitForSynchro>:
  __IO uint32_t synchrocounter = 0;
  ErrorStatus status = ERROR;
  uint32_t synchrostatus = 0x00;

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8013d78:	480f      	ldr	r0, [pc, #60]	; (8013db8 <RTC_WaitForSynchro+0x40>)
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus RTC_WaitForSynchro(void)
{
 8013d7a:	b082      	sub	sp, #8
  __IO uint32_t synchrocounter = 0;
 8013d7c:	2300      	movs	r3, #0
  ErrorStatus status = ERROR;
  uint32_t synchrostatus = 0x00;

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8013d7e:	22ca      	movs	r2, #202	; 0xca
  RTC->WPR = 0x53;
 8013d80:	2153      	movs	r1, #83	; 0x53
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus RTC_WaitForSynchro(void)
{
  __IO uint32_t synchrocounter = 0;
 8013d82:	9301      	str	r3, [sp, #4]
  ErrorStatus status = ERROR;
  uint32_t synchrostatus = 0x00;

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8013d84:	6242      	str	r2, [r0, #36]	; 0x24
  RTC->WPR = 0x53;
 8013d86:	6241      	str	r1, [r0, #36]	; 0x24
    
  /* Clear RSF flag */
  RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 8013d88:	68c3      	ldr	r3, [r0, #12]
 8013d8a:	f023 02a0 	bic.w	r2, r3, #160	; 0xa0
 8013d8e:	60c2      	str	r2, [r0, #12]
    
  /* Wait the registers to be synchronised */
  do
  {
    synchrostatus = RTC->ISR & RTC_ISR_RSF;
 8013d90:	4b09      	ldr	r3, [pc, #36]	; (8013db8 <RTC_WaitForSynchro+0x40>)
 8013d92:	68d8      	ldr	r0, [r3, #12]
    synchrocounter++;  
 8013d94:	9901      	ldr	r1, [sp, #4]
  RTC->ISR &= (uint32_t)RTC_RSF_MASK;
    
  /* Wait the registers to be synchronised */
  do
  {
    synchrostatus = RTC->ISR & RTC_ISR_RSF;
 8013d96:	f000 0220 	and.w	r2, r0, #32
    synchrocounter++;  
 8013d9a:	1c48      	adds	r0, r1, #1
 8013d9c:	9001      	str	r0, [sp, #4]
  } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 8013d9e:	9901      	ldr	r1, [sp, #4]
 8013da0:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8013da4:	d001      	beq.n	8013daa <RTC_WaitForSynchro+0x32>
 8013da6:	2a00      	cmp	r2, #0
 8013da8:	d0f2      	beq.n	8013d90 <RTC_WaitForSynchro+0x18>
    
  if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 8013daa:	68d8      	ldr	r0, [r3, #12]
  {
    status = ERROR;
  }        

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8013dac:	22ff      	movs	r2, #255	; 0xff
 8013dae:	625a      	str	r2, [r3, #36]	; 0x24
    
  return (status); 
}
 8013db0:	f3c0 1040 	ubfx	r0, r0, #5, #1
 8013db4:	b002      	add	sp, #8
 8013db6:	4770      	bx	lr
 8013db8:	40002800 	.word	0x40002800

08013dbc <RTC_SetTime>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Time register is configured
  *          - ERROR: RTC Time register is not configured
  */
ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 8013dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013dbe:	4b21      	ldr	r3, [pc, #132]	; (8013e44 <RTC_SetTime+0x88>)
 8013dc0:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  if (RTC_Format == RTC_Format_BIN)
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8013dc2:	6899      	ldr	r1, [r3, #8]
  ErrorStatus status = ERROR;
    
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  if (RTC_Format == RTC_Format_BIN)
 8013dc4:	b920      	cbnz	r0, 8013dd0 <RTC_SetTime+0x14>
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8013dc6:	f011 0640 	ands.w	r6, r1, #64	; 0x40
 8013dca:	d127      	bne.n	8013e1c <RTC_SetTime+0x60>
      assert_param(IS_RTC_HOUR12(RTC_TimeStruct->RTC_Hours));
      assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12));
    } 
    else
    {
      RTC_TimeStruct->RTC_H12 = 0x00;
 8013dcc:	70e6      	strb	r6, [r4, #3]
 8013dce:	e025      	b.n	8013e1c <RTC_SetTime+0x60>
    assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
    assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
  }
  else
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8013dd0:	f011 0040 	ands.w	r0, r1, #64	; 0x40
 8013dd4:	d100      	bne.n	8013dd8 <RTC_SetTime+0x1c>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
    } 
    else
    {
      RTC_TimeStruct->RTC_H12 = 0x00;
 8013dd6:	70e0      	strb	r0, [r4, #3]
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8013dd8:	7865      	ldrb	r5, [r4, #1]
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 8013dda:	7822      	ldrb	r2, [r4, #0]
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 8013ddc:	78a0      	ldrb	r0, [r4, #2]
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 8013dde:	78e4      	ldrb	r4, [r4, #3]
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8013de0:	022b      	lsls	r3, r5, #8
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 8013de2:	ea43 4102 	orr.w	r1, r3, r2, lsl #16
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8013de6:	4301      	orrs	r1, r0
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 8013de8:	ea41 4504 	orr.w	r5, r1, r4, lsl #16
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
                   (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
  }  

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8013dec:	4c15      	ldr	r4, [pc, #84]	; (8013e44 <RTC_SetTime+0x88>)
 8013dee:	21ca      	movs	r1, #202	; 0xca
  RTC->WPR = 0x53;
 8013df0:	2053      	movs	r0, #83	; 0x53
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
                   (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
  }  

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8013df2:	6261      	str	r1, [r4, #36]	; 0x24
  RTC->WPR = 0x53;
 8013df4:	6260      	str	r0, [r4, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8013df6:	f7ff ff73 	bl	8013ce0 <RTC_EnterInitMode>
 8013dfa:	b158      	cbz	r0, 8013e14 <RTC_SetTime+0x58>
    status = ERROR;
  } 
  else
  {
    /* Set the RTC_TR register */
    RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8013dfc:	f005 327f 	and.w	r2, r5, #2139062143	; 0x7f7f7f7f
 8013e00:	f022 45fe 	bic.w	r5, r2, #2130706432	; 0x7f000000
 8013e04:	6025      	str	r5, [r4, #0]

    /* Exit Initialization mode */
    RTC_ExitInitMode(); 
 8013e06:	f7ff ff8b 	bl	8013d20 <RTC_ExitInitMode>

    if(RTC_WaitForSynchro() == ERROR)
 8013e0a:	f7ff ffb5 	bl	8013d78 <RTC_WaitForSynchro>
  RTC->WPR = 0x53;

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
  {
    status = ERROR;
 8013e0e:	3000      	adds	r0, #0
 8013e10:	bf18      	it	ne
 8013e12:	2001      	movne	r0, #1
      status = SUCCESS;
    }
  
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8013e14:	4b0b      	ldr	r3, [pc, #44]	; (8013e44 <RTC_SetTime+0x88>)
 8013e16:	21ff      	movs	r1, #255	; 0xff
 8013e18:	6259      	str	r1, [r3, #36]	; 0x24
 8013e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 8013e1c:	7820      	ldrb	r0, [r4, #0]
 8013e1e:	f7ff ff4d 	bl	8013cbc <RTC_ByteToBcd2>
 8013e22:	4607      	mov	r7, r0
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8013e24:	7860      	ldrb	r0, [r4, #1]
 8013e26:	f7ff ff49 	bl	8013cbc <RTC_ByteToBcd2>
 8013e2a:	4606      	mov	r6, r0
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 8013e2c:	78a0      	ldrb	r0, [r4, #2]
 8013e2e:	f7ff ff45 	bl	8013cbc <RTC_ByteToBcd2>
                   (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 8013e32:	78e2      	ldrb	r2, [r4, #3]
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 8013e34:	ea40 4502 	orr.w	r5, r0, r2, lsl #16
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8013e38:	ea45 4307 	orr.w	r3, r5, r7, lsl #16
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 8013e3c:	ea43 2506 	orr.w	r5, r3, r6, lsl #8
 8013e40:	e7d4      	b.n	8013dec <RTC_SetTime+0x30>
 8013e42:	bf00      	nop
 8013e44:	40002800 	.word	0x40002800

08013e48 <RTC_TimeStructInit>:
  * @retval None
  */
void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct)
{
  /* Time = 00h:00min:00sec */
  RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 8013e48:	2300      	movs	r3, #0
 8013e4a:	70c3      	strb	r3, [r0, #3]
  RTC_TimeStruct->RTC_Hours = 0;
 8013e4c:	7003      	strb	r3, [r0, #0]
  RTC_TimeStruct->RTC_Minutes = 0;
 8013e4e:	7043      	strb	r3, [r0, #1]
  RTC_TimeStruct->RTC_Seconds = 0; 
 8013e50:	7083      	strb	r3, [r0, #2]
 8013e52:	4770      	bx	lr

08013e54 <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8013e54:	4a1c      	ldr	r2, [pc, #112]	; (8013ec8 <TIM_TimeBaseInit+0x74>)
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8013e56:	8803      	ldrh	r3, [r0, #0]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8013e58:	4290      	cmp	r0, r2
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8013e5a:	b29b      	uxth	r3, r3

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8013e5c:	d012      	beq.n	8013e84 <TIM_TimeBaseInit+0x30>
 8013e5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8013e62:	4290      	cmp	r0, r2
 8013e64:	d00e      	beq.n	8013e84 <TIM_TimeBaseInit+0x30>
 8013e66:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8013e6a:	d00b      	beq.n	8013e84 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8013e6c:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 8013e70:	4290      	cmp	r0, r2
 8013e72:	d007      	beq.n	8013e84 <TIM_TimeBaseInit+0x30>
 8013e74:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8013e78:	4290      	cmp	r0, r2
 8013e7a:	d003      	beq.n	8013e84 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8013e7c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8013e80:	4290      	cmp	r0, r2
 8013e82:	d103      	bne.n	8013e8c <TIM_TimeBaseInit+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8013e84:	884a      	ldrh	r2, [r1, #2]
  if((TIMx == TIM1) || (TIMx == TIM8)||
     (TIMx == TIM2) || (TIMx == TIM3)||
     (TIMx == TIM4) || (TIMx == TIM5)) 
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8013e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8013e8a:	4313      	orrs	r3, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8013e8c:	4a0f      	ldr	r2, [pc, #60]	; (8013ecc <TIM_TimeBaseInit+0x78>)
 8013e8e:	4290      	cmp	r0, r2
 8013e90:	d008      	beq.n	8013ea4 <TIM_TimeBaseInit+0x50>
 8013e92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8013e96:	4290      	cmp	r0, r2
 8013e98:	d004      	beq.n	8013ea4 <TIM_TimeBaseInit+0x50>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8013e9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8013e9e:	890a      	ldrh	r2, [r1, #8]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8013ea0:	b29b      	uxth	r3, r3
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8013ea2:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8013ea4:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8013ea6:	684b      	ldr	r3, [r1, #4]
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8013ea8:	880a      	ldrh	r2, [r1, #0]
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8013eaa:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8013eac:	4b06      	ldr	r3, [pc, #24]	; (8013ec8 <TIM_TimeBaseInit+0x74>)

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8013eae:	8502      	strh	r2, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8013eb0:	4298      	cmp	r0, r3
 8013eb2:	d003      	beq.n	8013ebc <TIM_TimeBaseInit+0x68>
 8013eb4:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 8013eb8:	4290      	cmp	r0, r2
 8013eba:	d101      	bne.n	8013ec0 <TIM_TimeBaseInit+0x6c>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8013ebc:	7a89      	ldrb	r1, [r1, #10]
 8013ebe:	8601      	strh	r1, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8013ec0:	2301      	movs	r3, #1
 8013ec2:	8283      	strh	r3, [r0, #20]
 8013ec4:	4770      	bx	lr
 8013ec6:	bf00      	nop
 8013ec8:	40010000 	.word	0x40010000
 8013ecc:	40001000 	.word	0x40001000

08013ed0 <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8013ed0:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8013ed2:	b119      	cbz	r1, 8013edc <TIM_Cmd+0xc>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8013ed4:	b299      	uxth	r1, r3
 8013ed6:	f041 0301 	orr.w	r3, r1, #1
 8013eda:	e003      	b.n	8013ee4 <TIM_Cmd+0x14>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8013edc:	f023 0101 	bic.w	r1, r3, #1
 8013ee0:	040a      	lsls	r2, r1, #16
 8013ee2:	0c13      	lsrs	r3, r2, #16
 8013ee4:	8003      	strh	r3, [r0, #0]
 8013ee6:	4770      	bx	lr

08013ee8 <TIM_GetITStatus>:
  uint16_t itstatus = 0x0, itenable = 0x0;
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8013ee8:	8a03      	ldrh	r3, [r0, #16]
  
  itenable = TIMx->DIER & TIM_IT;
 8013eea:	8982      	ldrh	r2, [r0, #12]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8013eec:	ea11 0003 	ands.w	r0, r1, r3
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
  
  itenable = TIMx->DIER & TIM_IT;
 8013ef0:	b292      	uxth	r2, r2
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8013ef2:	d003      	beq.n	8013efc <TIM_GetITStatus+0x14>
 8013ef4:	4211      	tst	r1, r2
  {
    bitstatus = SET;
 8013ef6:	bf0c      	ite	eq
 8013ef8:	2000      	moveq	r0, #0
 8013efa:	2001      	movne	r0, #1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8013efc:	4770      	bx	lr

08013efe <TIM_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8013efe:	43c9      	mvns	r1, r1
 8013f00:	b28a      	uxth	r2, r1
 8013f02:	8202      	strh	r2, [r0, #16]
 8013f04:	4770      	bx	lr
	...

08013f08 <USART_Init>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8013f08:	8a03      	ldrh	r3, [r0, #16]
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8013f0a:	b530      	push	{r4, r5, lr}
 8013f0c:	460d      	mov	r5, r1
 8013f0e:	4604      	mov	r4, r0
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8013f10:	88ea      	ldrh	r2, [r5, #6]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8013f12:	b298      	uxth	r0, r3

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8013f14:	f420 5140 	bic.w	r1, r0, #12288	; 0x3000
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8013f18:	4311      	orrs	r1, r2
 8013f1a:	8221      	strh	r1, [r4, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8013f1c:	89a3      	ldrh	r3, [r4, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8013f1e:	f423 50b0 	bic.w	r0, r3, #5632	; 0x1600
 8013f22:	f020 010c 	bic.w	r1, r0, #12
 8013f26:	040a      	lsls	r2, r1, #16

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8013f28:	8928      	ldrh	r0, [r5, #8]
 8013f2a:	88a9      	ldrh	r1, [r5, #4]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8013f2c:	0c13      	lsrs	r3, r2, #16

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8013f2e:	ea40 0201 	orr.w	r2, r0, r1
 8013f32:	8968      	ldrh	r0, [r5, #10]
 8013f34:	4302      	orrs	r2, r0
 8013f36:	b291      	uxth	r1, r2
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8013f38:	430b      	orrs	r3, r1
 8013f3a:	81a3      	strh	r3, [r4, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8013f3c:	8aa2      	ldrh	r2, [r4, #20]
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8013f3e:	89ab      	ldrh	r3, [r5, #12]

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8013f40:	b290      	uxth	r0, r2

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8013f42:	f420 7140 	bic.w	r1, r0, #768	; 0x300
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8013f46:	b085      	sub	sp, #20
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8013f48:	4319      	orrs	r1, r3
 8013f4a:	82a1      	strh	r1, [r4, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8013f4c:	4668      	mov	r0, sp
 8013f4e:	f7ff fdf1 	bl	8013b34 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8013f52:	4a1a      	ldr	r2, [pc, #104]	; (8013fbc <USART_Init+0xb4>)
 8013f54:	4294      	cmp	r4, r2
 8013f56:	d003      	beq.n	8013f60 <USART_Init+0x58>
 8013f58:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 8013f5c:	4284      	cmp	r4, r0
 8013f5e:	d101      	bne.n	8013f64 <USART_Init+0x5c>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8013f60:	9b03      	ldr	r3, [sp, #12]
 8013f62:	e000      	b.n	8013f66 <USART_Init+0x5e>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8013f64:	9b02      	ldr	r3, [sp, #8]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8013f66:	89a1      	ldrh	r1, [r4, #12]
 8013f68:	b20a      	sxth	r2, r1
 8013f6a:	2a00      	cmp	r2, #0
 8013f6c:	f04f 0019 	mov.w	r0, #25
 8013f70:	682a      	ldr	r2, [r5, #0]
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8013f72:	fb00 f303 	mul.w	r3, r0, r3
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8013f76:	da01      	bge.n	8013f7c <USART_Init+0x74>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8013f78:	0051      	lsls	r1, r2, #1
 8013f7a:	e000      	b.n	8013f7e <USART_Init+0x76>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8013f7c:	0091      	lsls	r1, r2, #2
 8013f7e:	fbb3 f1f1 	udiv	r1, r3, r1
  }
  tmpreg = (integerdivider / 100) << 4;
 8013f82:	2364      	movs	r3, #100	; 0x64
 8013f84:	fbb1 f0f3 	udiv	r0, r1, r3
 8013f88:	0102      	lsls	r2, r0, #4

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8013f8a:	0910      	lsrs	r0, r2, #4
 8013f8c:	fb03 1110 	mls	r1, r3, r0, r1

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8013f90:	89a0      	ldrh	r0, [r4, #12]
 8013f92:	b200      	sxth	r0, r0
 8013f94:	2800      	cmp	r0, #0
 8013f96:	da06      	bge.n	8013fa6 <USART_Init+0x9e>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8013f98:	00c9      	lsls	r1, r1, #3
 8013f9a:	3132      	adds	r1, #50	; 0x32
 8013f9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8013fa0:	f003 0007 	and.w	r0, r3, #7
 8013fa4:	e005      	b.n	8013fb2 <USART_Init+0xaa>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8013fa6:	0109      	lsls	r1, r1, #4
 8013fa8:	3132      	adds	r1, #50	; 0x32
 8013faa:	fbb1 f3f3 	udiv	r3, r1, r3
 8013fae:	f003 000f 	and.w	r0, r3, #15
 8013fb2:	4302      	orrs	r2, r0
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8013fb4:	b290      	uxth	r0, r2
 8013fb6:	8120      	strh	r0, [r4, #8]
}
 8013fb8:	b005      	add	sp, #20
 8013fba:	bd30      	pop	{r4, r5, pc}
 8013fbc:	40011000 	.word	0x40011000

08013fc0 <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8013fc0:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8013fc2:	b119      	cbz	r1, 8013fcc <USART_Cmd+0xc>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8013fc4:	b299      	uxth	r1, r3
 8013fc6:	f441 5300 	orr.w	r3, r1, #8192	; 0x2000
 8013fca:	e003      	b.n	8013fd4 <USART_Cmd+0x14>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8013fcc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8013fd0:	040a      	lsls	r2, r1, #16
 8013fd2:	0c13      	lsrs	r3, r2, #16
 8013fd4:	8183      	strh	r3, [r0, #12]
 8013fd6:	4770      	bx	lr

08013fd8 <USART_ITConfig>:
  } 
    
  usartxbase = (uint32_t)USARTx;

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8013fd8:	f3c1 1342 	ubfx	r3, r1, #5, #3
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8013fdc:	b510      	push	{r4, lr}
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 8013fde:	2401      	movs	r4, #1
 8013fe0:	f001 011f 	and.w	r1, r1, #31
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8013fe4:	42a3      	cmp	r3, r4
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 8013fe6:	fa04 f101 	lsl.w	r1, r4, r1
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8013fea:	d101      	bne.n	8013ff0 <USART_ITConfig+0x18>
  {
    usartxbase += 0x0C;
 8013fec:	300c      	adds	r0, #12
 8013fee:	e004      	b.n	8013ffa <USART_ITConfig+0x22>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8013ff0:	2b02      	cmp	r3, #2
 8013ff2:	d101      	bne.n	8013ff8 <USART_ITConfig+0x20>
  {
    usartxbase += 0x10;
 8013ff4:	3010      	adds	r0, #16
 8013ff6:	e000      	b.n	8013ffa <USART_ITConfig+0x22>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8013ff8:	3014      	adds	r0, #20
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8013ffa:	6803      	ldr	r3, [r0, #0]
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
 8013ffc:	b112      	cbz	r2, 8014004 <USART_ITConfig+0x2c>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8013ffe:	ea43 0201 	orr.w	r2, r3, r1
 8014002:	e001      	b.n	8014008 <USART_ITConfig+0x30>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8014004:	ea23 0201 	bic.w	r2, r3, r1
 8014008:	6002      	str	r2, [r0, #0]
 801400a:	bd10      	pop	{r4, pc}

0801400c <USBD_Resume>:
*/

static uint8_t USBD_Resume(USB_OTG_CORE_HANDLE  *pdev)
{
  /* Upon Resume call usr call back */
  pdev->dev.usr_cb->DeviceResumed(); 
 801400c:	f8d0 35e8 	ldr.w	r3, [r0, #1512]	; 0x5e8
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_Resume(USB_OTG_CORE_HANDLE  *pdev)
{
 8014010:	b510      	push	{r4, lr}
 8014012:	4604      	mov	r4, r0
  /* Upon Resume call usr call back */
  pdev->dev.usr_cb->DeviceResumed(); 
 8014014:	6918      	ldr	r0, [r3, #16]
 8014016:	4780      	blx	r0
  pdev->dev.device_status = pdev->dev.device_old_status;  
  pdev->dev.device_status = USB_OTG_CONFIGURED;  
 8014018:	2103      	movs	r1, #3
 801401a:	f884 1112 	strb.w	r1, [r4, #274]	; 0x112
  return USBD_OK;
}
 801401e:	2000      	movs	r0, #0
 8014020:	bd10      	pop	{r4, pc}

08014022 <USBD_Suspend>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_Suspend(USB_OTG_CORE_HANDLE  *pdev)
{
 8014022:	b508      	push	{r3, lr}
  pdev->dev.device_old_status = pdev->dev.device_status;
 8014024:	f890 3112 	ldrb.w	r3, [r0, #274]	; 0x112
  pdev->dev.device_status  = USB_OTG_SUSPENDED;
 8014028:	2104      	movs	r1, #4
* @retval status
*/

static uint8_t USBD_Suspend(USB_OTG_CORE_HANDLE  *pdev)
{
  pdev->dev.device_old_status = pdev->dev.device_status;
 801402a:	f880 3113 	strb.w	r3, [r0, #275]	; 0x113
  pdev->dev.device_status  = USB_OTG_SUSPENDED;
 801402e:	f880 1112 	strb.w	r1, [r0, #274]	; 0x112
  /* Upon Resume call usr call back */
  pdev->dev.usr_cb->DeviceSuspended(); 
 8014032:	f8d0 05e8 	ldr.w	r0, [r0, #1512]	; 0x5e8
 8014036:	68c2      	ldr	r2, [r0, #12]
 8014038:	4790      	blx	r2
  return USBD_OK;
}
 801403a:	2000      	movs	r0, #0
 801403c:	bd08      	pop	{r3, pc}

0801403e <USBD_SOF>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_SOF(USB_OTG_CORE_HANDLE  *pdev)
{
 801403e:	b508      	push	{r3, lr}
  if(pdev->dev.class_cb->SOF)
 8014040:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 8014044:	69d9      	ldr	r1, [r3, #28]
 8014046:	b101      	cbz	r1, 801404a <USBD_SOF+0xc>
  {
    pdev->dev.class_cb->SOF(pdev); 
 8014048:	4788      	blx	r1
  }
  return USBD_OK;
}
 801404a:	2000      	movs	r0, #0
 801404c:	bd08      	pop	{r3, pc}

0801404e <USBD_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_IsoINIncomplete(USB_OTG_CORE_HANDLE  *pdev)
{
 801404e:	b508      	push	{r3, lr}
  pdev->dev.class_cb->IsoINIncomplete(pdev);   
 8014050:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 8014054:	6a19      	ldr	r1, [r3, #32]
 8014056:	4788      	blx	r1
  return USBD_OK;
}
 8014058:	2000      	movs	r0, #0
 801405a:	bd08      	pop	{r3, pc}

0801405c <USBD_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_IsoOUTIncomplete(USB_OTG_CORE_HANDLE  *pdev)
{
 801405c:	b508      	push	{r3, lr}
  pdev->dev.class_cb->IsoOUTIncomplete(pdev);   
 801405e:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 8014062:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8014064:	4788      	blx	r1
  return USBD_OK;
}
 8014066:	2000      	movs	r0, #0
 8014068:	bd08      	pop	{r3, pc}

0801406a <USBD_Reset>:
*/

static uint8_t USBD_Reset(USB_OTG_CORE_HANDLE  *pdev)
{
  /* Open EP0 OUT */
  DCD_EP_Open(pdev,
 801406a:	2100      	movs	r1, #0
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_Reset(USB_OTG_CORE_HANDLE  *pdev)
{
 801406c:	b510      	push	{r4, lr}
  /* Open EP0 OUT */
  DCD_EP_Open(pdev,
 801406e:	2240      	movs	r2, #64	; 0x40
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_Reset(USB_OTG_CORE_HANDLE  *pdev)
{
 8014070:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  DCD_EP_Open(pdev,
 8014072:	460b      	mov	r3, r1
 8014074:	f001 ff18 	bl	8015ea8 <DCD_EP_Open>
              0x00,
              USB_OTG_MAX_EP0_SIZE,
              EP_TYPE_CTRL);
  
  /* Open EP0 IN */
  DCD_EP_Open(pdev,
 8014078:	2180      	movs	r1, #128	; 0x80
 801407a:	2240      	movs	r2, #64	; 0x40
 801407c:	2300      	movs	r3, #0
 801407e:	4620      	mov	r0, r4
 8014080:	f001 ff12 	bl	8015ea8 <DCD_EP_Open>
              USB_OTG_MAX_EP0_SIZE,
              EP_TYPE_CTRL);
  
  /* Upon Reset call usr call back */
  pdev->dev.device_status = USB_OTG_DEFAULT;
  pdev->dev.usr_cb->DeviceReset(pdev->cfg.speed);
 8014084:	f8d4 05e8 	ldr.w	r0, [r4, #1512]	; 0x5e8
              0x80,
              USB_OTG_MAX_EP0_SIZE,
              EP_TYPE_CTRL);
  
  /* Upon Reset call usr call back */
  pdev->dev.device_status = USB_OTG_DEFAULT;
 8014088:	2301      	movs	r3, #1
 801408a:	f884 3112 	strb.w	r3, [r4, #274]	; 0x112
  pdev->dev.usr_cb->DeviceReset(pdev->cfg.speed);
 801408e:	6841      	ldr	r1, [r0, #4]
 8014090:	78a0      	ldrb	r0, [r4, #2]
 8014092:	4788      	blx	r1
  
  return USBD_OK;
}
 8014094:	2000      	movs	r0, #0
 8014096:	bd10      	pop	{r4, pc}

08014098 <USBD_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_SetupStage(USB_OTG_CORE_HANDLE *pdev)
{
 8014098:	b513      	push	{r0, r1, r4, lr}
  USB_SETUP_REQ req;
  
  USBD_ParseSetupRequest(pdev , &req);
 801409a:	4669      	mov	r1, sp
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_SetupStage(USB_OTG_CORE_HANDLE *pdev)
{
 801409c:	4604      	mov	r4, r0
  USB_SETUP_REQ req;
  
  USBD_ParseSetupRequest(pdev , &req);
 801409e:	f000 f923 	bl	80142e8 <USBD_ParseSetupRequest>
  
  switch (req.bmRequest & 0x1F) 
 80140a2:	f89d 1000 	ldrb.w	r1, [sp]
 80140a6:	f001 031f 	and.w	r3, r1, #31
 80140aa:	2b01      	cmp	r3, #1
 80140ac:	d00c      	beq.n	80140c8 <USBD_SetupStage+0x30>
 80140ae:	d306      	bcc.n	80140be <USBD_SetupStage+0x26>
 80140b0:	2b02      	cmp	r3, #2
 80140b2:	d10e      	bne.n	80140d2 <USBD_SetupStage+0x3a>
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &req);
    break;
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &req);   
 80140b4:	4620      	mov	r0, r4
 80140b6:	4669      	mov	r1, sp
 80140b8:	f000 f946 	bl	8014348 <USBD_StdEPReq>
    break;
 80140bc:	e00e      	b.n	80140dc <USBD_SetupStage+0x44>
  USBD_ParseSetupRequest(pdev , &req);
  
  switch (req.bmRequest & 0x1F) 
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &req);
 80140be:	4620      	mov	r0, r4
 80140c0:	4669      	mov	r1, sp
 80140c2:	f000 f9bb 	bl	801443c <USBD_StdDevReq>
    break;
 80140c6:	e009      	b.n	80140dc <USBD_SetupStage+0x44>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &req);
 80140c8:	4620      	mov	r0, r4
 80140ca:	4669      	mov	r1, sp
 80140cc:	f000 f99e 	bl	801440c <USBD_StdItfReq>
    break;
 80140d0:	e004      	b.n	80140dc <USBD_SetupStage+0x44>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &req);   
    break;
    
  default:           
    DCD_EP_Stall(pdev , req.bmRequest & 0x80);
 80140d2:	4620      	mov	r0, r4
 80140d4:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80140d8:	f001 ff58 	bl	8015f8c <DCD_EP_Stall>
    break;
  }  
  return USBD_OK;
}
 80140dc:	2000      	movs	r0, #0
 80140de:	bd1c      	pop	{r2, r3, r4, pc}

080140e0 <USBD_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
static uint8_t USBD_DataInStage(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{
 80140e0:	b570      	push	{r4, r5, r6, lr}
 80140e2:	4604      	mov	r4, r0
  USB_OTG_EP *ep;
  
  if(epnum == 0) 
 80140e4:	2900      	cmp	r1, #0
 80140e6:	d147      	bne.n	8014178 <USBD_DataInStage+0x98>
  {
    ep = &pdev->dev.in_ep[0];
    if ( pdev->dev.device_state == USB_OTG_EP0_DATA_IN)
 80140e8:	f890 3111 	ldrb.w	r3, [r0, #273]	; 0x111
 80140ec:	2b02      	cmp	r3, #2
 80140ee:	d137      	bne.n	8014160 <USBD_DataInStage+0x80>
    {
      if(ep->rem_data_len > ep->maxpacket)
 80140f0:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
 80140f4:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
 80140f8:	429a      	cmp	r2, r3
 80140fa:	d911      	bls.n	8014120 <USBD_DataInStage+0x40>
      {
        ep->rem_data_len -=  ep->maxpacket;
 80140fc:	1ad2      	subs	r2, r2, r3
 80140fe:	f8c0 2138 	str.w	r2, [r0, #312]	; 0x138
        if(pdev->cfg.dma_enable == 1)
 8014102:	78c0      	ldrb	r0, [r0, #3]
 8014104:	2801      	cmp	r0, #1
 8014106:	d104      	bne.n	8014112 <USBD_DataInStage+0x32>
        {
          /* in slave mode this, is handled by the TxFifoEmpty ISR */
          ep->xfer_buff += ep->maxpacket;
 8014108:	f8d4 1128 	ldr.w	r1, [r4, #296]	; 0x128
 801410c:	18cb      	adds	r3, r1, r3
 801410e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
        }
        USBD_CtlContinueSendData (pdev, 
 8014112:	4620      	mov	r0, r4
 8014114:	f8d4 1128 	ldr.w	r1, [r4, #296]	; 0x128
 8014118:	b292      	uxth	r2, r2
 801411a:	f000 f8b5 	bl	8014288 <USBD_CtlContinueSendData>
 801411e:	e01f      	b.n	8014160 <USBD_DataInStage+0x80>
                                  ep->xfer_buff, 
                                  ep->rem_data_len);
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((ep->total_data_len % ep->maxpacket == 0) &&
 8014120:	f8d0 513c 	ldr.w	r5, [r0, #316]	; 0x13c
 8014124:	fbb5 f6f3 	udiv	r6, r5, r3
 8014128:	fb03 5616 	mls	r6, r3, r6, r5
 801412c:	b95e      	cbnz	r6, 8014146 <USBD_DataInStage+0x66>
 801412e:	429d      	cmp	r5, r3
 8014130:	d309      	bcc.n	8014146 <USBD_DataInStage+0x66>
           (ep->total_data_len >= ep->maxpacket) &&
 8014132:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
 8014136:	4295      	cmp	r5, r2
 8014138:	d205      	bcs.n	8014146 <USBD_DataInStage+0x66>
             (ep->total_data_len < ep->ctl_data_len ))
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 801413a:	4632      	mov	r2, r6
 801413c:	f000 f8a4 	bl	8014288 <USBD_CtlContinueSendData>
          ep->ctl_data_len = 0;
 8014140:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
 8014144:	e00c      	b.n	8014160 <USBD_DataInStage+0x80>
        }
        else
        {
          if((pdev->dev.class_cb->EP0_TxSent != NULL)&&
 8014146:	f8d4 05e4 	ldr.w	r0, [r4, #1508]	; 0x5e4
 801414a:	68c1      	ldr	r1, [r0, #12]
 801414c:	b129      	cbz	r1, 801415a <USBD_DataInStage+0x7a>
 801414e:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
 8014152:	2b03      	cmp	r3, #3
 8014154:	d101      	bne.n	801415a <USBD_DataInStage+0x7a>
             (pdev->dev.device_status == USB_OTG_CONFIGURED))
          {
            pdev->dev.class_cb->EP0_TxSent(pdev); 
 8014156:	4620      	mov	r0, r4
 8014158:	4788      	blx	r1
          }          
          USBD_CtlReceiveStatus(pdev);
 801415a:	4620      	mov	r0, r4
 801415c:	f000 f8b5 	bl	80142ca <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev.test_mode == 1)
 8014160:	f894 2116 	ldrb.w	r2, [r4, #278]	; 0x116
 8014164:	2a01      	cmp	r2, #1
 8014166:	d110      	bne.n	801418a <USBD_DataInStage+0xaa>
* @param  pdev: device instance
* @retval status
*/
static uint8_t  USBD_RunTestMode (USB_OTG_CORE_HANDLE  *pdev) 
{
  USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DCTL, SET_TEST_MODE.d32);
 8014168:	4909      	ldr	r1, [pc, #36]	; (8014190 <USBD_DataInStage+0xb0>)
 801416a:	6920      	ldr	r0, [r4, #16]
 801416c:	680b      	ldr	r3, [r1, #0]
      }
    }
    if (pdev->dev.test_mode == 1)
    {
      USBD_RunTestMode(pdev); 
      pdev->dev.test_mode = 0;
 801416e:	2200      	movs	r2, #0
* @param  pdev: device instance
* @retval status
*/
static uint8_t  USBD_RunTestMode (USB_OTG_CORE_HANDLE  *pdev) 
{
  USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DCTL, SET_TEST_MODE.d32);
 8014170:	6043      	str	r3, [r0, #4]
      }
    }
    if (pdev->dev.test_mode == 1)
    {
      USBD_RunTestMode(pdev); 
      pdev->dev.test_mode = 0;
 8014172:	f884 2116 	strb.w	r2, [r4, #278]	; 0x116
 8014176:	e008      	b.n	801418a <USBD_DataInStage+0xaa>
    }
  }
  else if((pdev->dev.class_cb->DataIn != NULL)&& 
 8014178:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 801417c:	695b      	ldr	r3, [r3, #20]
 801417e:	b123      	cbz	r3, 801418a <USBD_DataInStage+0xaa>
 8014180:	f890 2112 	ldrb.w	r2, [r0, #274]	; 0x112
 8014184:	2a03      	cmp	r2, #3
 8014186:	d100      	bne.n	801418a <USBD_DataInStage+0xaa>
          (pdev->dev.device_status == USB_OTG_CONFIGURED))
  {
    pdev->dev.class_cb->DataIn(pdev, epnum); 
 8014188:	4798      	blx	r3
  }  
  return USBD_OK;
}
 801418a:	2000      	movs	r0, #0
 801418c:	bd70      	pop	{r4, r5, r6, pc}
 801418e:	bf00      	nop
 8014190:	200039b0 	.word	0x200039b0

08014194 <USBD_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
static uint8_t USBD_DataOutStage(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{
 8014194:	b510      	push	{r4, lr}
 8014196:	4604      	mov	r4, r0
  USB_OTG_EP *ep;
  
  if(epnum == 0) 
 8014198:	bb59      	cbnz	r1, 80141f2 <USBD_DataOutStage+0x5e>
  {
    ep = &pdev->dev.out_ep[0];
    if ( pdev->dev.device_state == USB_OTG_EP0_DATA_OUT)
 801419a:	f890 1111 	ldrb.w	r1, [r0, #273]	; 0x111
 801419e:	2903      	cmp	r1, #3
 80141a0:	d130      	bne.n	8014204 <USBD_DataOutStage+0x70>
    {
      if(ep->rem_data_len > ep->maxpacket)
 80141a2:	f8d0 2390 	ldr.w	r2, [r0, #912]	; 0x390
 80141a6:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 80141aa:	429a      	cmp	r2, r3
 80141ac:	d914      	bls.n	80141d8 <USBD_DataOutStage+0x44>
      {
        ep->rem_data_len -=  ep->maxpacket;
 80141ae:	1ad2      	subs	r2, r2, r3
 80141b0:	f8c0 2390 	str.w	r2, [r0, #912]	; 0x390
        
        if(pdev->cfg.dma_enable == 1)
 80141b4:	78c0      	ldrb	r0, [r0, #3]
 80141b6:	2801      	cmp	r0, #1
 80141b8:	d104      	bne.n	80141c4 <USBD_DataOutStage+0x30>
        {
          /* in slave mode this, is handled by the RxSTSQLvl ISR */
          ep->xfer_buff += ep->maxpacket; 
 80141ba:	f8d4 1380 	ldr.w	r1, [r4, #896]	; 0x380
 80141be:	18c8      	adds	r0, r1, r3
 80141c0:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
        }        
        USBD_CtlContinueRx (pdev, 
                            ep->xfer_buff,
                            MIN(ep->rem_data_len ,ep->maxpacket));
 80141c4:	429a      	cmp	r2, r3
 80141c6:	bf28      	it	cs
 80141c8:	461a      	movcs	r2, r3
        if(pdev->cfg.dma_enable == 1)
        {
          /* in slave mode this, is handled by the RxSTSQLvl ISR */
          ep->xfer_buff += ep->maxpacket; 
        }        
        USBD_CtlContinueRx (pdev, 
 80141ca:	4620      	mov	r0, r4
 80141cc:	f8d4 1380 	ldr.w	r1, [r4, #896]	; 0x380
 80141d0:	b292      	uxth	r2, r2
 80141d2:	f000 f862 	bl	801429a <USBD_CtlContinueRx>
 80141d6:	e015      	b.n	8014204 <USBD_DataOutStage+0x70>
                            ep->xfer_buff,
                            MIN(ep->rem_data_len ,ep->maxpacket));
      }
      else
      {
        if((pdev->dev.class_cb->EP0_RxReady != NULL)&&
 80141d8:	f8d0 15e4 	ldr.w	r1, [r0, #1508]	; 0x5e4
 80141dc:	690b      	ldr	r3, [r1, #16]
 80141de:	b123      	cbz	r3, 80141ea <USBD_DataOutStage+0x56>
 80141e0:	f890 2112 	ldrb.w	r2, [r0, #274]	; 0x112
 80141e4:	2a03      	cmp	r2, #3
 80141e6:	d100      	bne.n	80141ea <USBD_DataOutStage+0x56>
           (pdev->dev.device_status == USB_OTG_CONFIGURED))
        {
          pdev->dev.class_cb->EP0_RxReady(pdev); 
 80141e8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80141ea:	4620      	mov	r0, r4
 80141ec:	f000 f85e 	bl	80142ac <USBD_CtlSendStatus>
 80141f0:	e008      	b.n	8014204 <USBD_DataOutStage+0x70>
      }
    }
  }
  else if((pdev->dev.class_cb->DataOut != NULL)&&
 80141f2:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 80141f6:	699b      	ldr	r3, [r3, #24]
 80141f8:	b123      	cbz	r3, 8014204 <USBD_DataOutStage+0x70>
 80141fa:	f890 2112 	ldrb.w	r2, [r0, #274]	; 0x112
 80141fe:	2a03      	cmp	r2, #3
 8014200:	d100      	bne.n	8014204 <USBD_DataOutStage+0x70>
          (pdev->dev.device_status == USB_OTG_CONFIGURED))
  {
    pdev->dev.class_cb->DataOut(pdev, epnum); 
 8014202:	4798      	blx	r3
  }  
  return USBD_OK;
}
 8014204:	2000      	movs	r0, #0
 8014206:	bd10      	pop	{r4, pc}

08014208 <USBD_Init>:
void USBD_Init(USB_OTG_CORE_HANDLE *pdev,
               USB_OTG_CORE_ID_TypeDef coreID,
               USBD_DEVICE *pDevice,                  
               USBD_Class_cb_TypeDef *class_cb, 
               USBD_Usr_cb_TypeDef *usr_cb)
{
 8014208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801420c:	9f06      	ldr	r7, [sp, #24]
 801420e:	4604      	mov	r4, r0
 8014210:	4616      	mov	r6, r2
 8014212:	4698      	mov	r8, r3
 8014214:	460d      	mov	r5, r1
  /* Hardware Init */
  USB_OTG_BSP_Init(pdev);  
 8014216:	f7fe fb27 	bl	8012868 <USB_OTG_BSP_Init>
  pdev->dev.class_cb = class_cb;
  pdev->dev.usr_cb = usr_cb;  
  pdev->dev.usr_device = pDevice;    
  
  /* set USB OTG core params */
  DCD_Init(pdev , coreID);
 801421a:	4620      	mov	r0, r4
 801421c:	4629      	mov	r1, r5
  USB_OTG_BSP_Init(pdev);  
  
  USBD_DeInit(pdev);
  
  /*Register class and user callbacks */
  pdev->dev.class_cb = class_cb;
 801421e:	f8c4 85e4 	str.w	r8, [r4, #1508]	; 0x5e4
  pdev->dev.usr_cb = usr_cb;  
 8014222:	f8c4 75e8 	str.w	r7, [r4, #1512]	; 0x5e8
  pdev->dev.usr_device = pDevice;    
 8014226:	f8c4 65ec 	str.w	r6, [r4, #1516]	; 0x5ec
  
  /* set USB OTG core params */
  DCD_Init(pdev , coreID);
 801422a:	f001 fdf2 	bl	8015e12 <DCD_Init>
  
  /* Upon Init call usr callback */
  pdev->dev.usr_cb->Init();
 801422e:	f8d4 35e8 	ldr.w	r3, [r4, #1512]	; 0x5e8
 8014232:	6818      	ldr	r0, [r3, #0]
 8014234:	4780      	blx	r0
  
  /* Enable Interrupts */
  USB_OTG_BSP_EnableInterrupt(pdev);
 8014236:	4620      	mov	r0, r4
}
 8014238:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  
  /* Upon Init call usr callback */
  pdev->dev.usr_cb->Init();
  
  /* Enable Interrupts */
  USB_OTG_BSP_EnableInterrupt(pdev);
 801423c:	f7fe bb62 	b.w	8012904 <USB_OTG_BSP_EnableInterrupt>

08014240 <USBD_SetCfg>:
* @retval status
*/

USBD_Status USBD_SetCfg(USB_OTG_CORE_HANDLE  *pdev, uint8_t cfgidx)
{
  pdev->dev.class_cb->Init(pdev, cfgidx); 
 8014240:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
* @param  cfgidx: configuration index
* @retval status
*/

USBD_Status USBD_SetCfg(USB_OTG_CORE_HANDLE  *pdev, uint8_t cfgidx)
{
 8014244:	b510      	push	{r4, lr}
 8014246:	4604      	mov	r4, r0
  pdev->dev.class_cb->Init(pdev, cfgidx); 
 8014248:	681a      	ldr	r2, [r3, #0]
 801424a:	4790      	blx	r2
  
  /* Upon set config call usr call back */
  pdev->dev.usr_cb->DeviceConfigured();
 801424c:	f8d4 05e8 	ldr.w	r0, [r4, #1512]	; 0x5e8
 8014250:	6881      	ldr	r1, [r0, #8]
 8014252:	4788      	blx	r1
  return USBD_OK; 
}
 8014254:	2000      	movs	r0, #0
 8014256:	bd10      	pop	{r4, pc}

08014258 <USBD_ClrCfg>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_Status
*/
USBD_Status USBD_ClrCfg(USB_OTG_CORE_HANDLE  *pdev, uint8_t cfgidx)
{
 8014258:	b508      	push	{r3, lr}
  pdev->dev.class_cb->DeInit(pdev, cfgidx);   
 801425a:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 801425e:	685a      	ldr	r2, [r3, #4]
 8014260:	4790      	blx	r2
  return USBD_OK;
}
 8014262:	2000      	movs	r0, #0
 8014264:	bd08      	pop	{r3, pc}

08014266 <USBD_CtlSendData>:
* @retval status
*/
USBD_Status  USBD_CtlSendData (USB_OTG_CORE_HANDLE  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8014266:	b538      	push	{r3, r4, r5, lr}
 8014268:	4604      	mov	r4, r0
 801426a:	460d      	mov	r5, r1
  USBD_Status ret = USBD_OK;
  
  pdev->dev.in_ep[0].total_data_len = len;
 801426c:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
  pdev->dev.in_ep[0].rem_data_len   = len;
 8014270:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
* @retval status
*/
USBD_Status  USBD_CtlSendData (USB_OTG_CORE_HANDLE  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8014274:	4613      	mov	r3, r2
  USBD_Status ret = USBD_OK;
  
  pdev->dev.in_ep[0].total_data_len = len;
  pdev->dev.in_ep[0].rem_data_len   = len;
  pdev->dev.device_state = USB_OTG_EP0_DATA_IN;
 8014276:	2202      	movs	r2, #2
 8014278:	f880 2111 	strb.w	r2, [r0, #273]	; 0x111

  DCD_EP_Tx (pdev, 0, pbuf, len);
 801427c:	2100      	movs	r1, #0
 801427e:	462a      	mov	r2, r5
 8014280:	f001 fe69 	bl	8015f56 <DCD_EP_Tx>
 
  return ret;
}
 8014284:	2000      	movs	r0, #0
 8014286:	bd38      	pop	{r3, r4, r5, pc}

08014288 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_Status  USBD_CtlContinueSendData (USB_OTG_CORE_HANDLE  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8014288:	b510      	push	{r4, lr}
 801428a:	460c      	mov	r4, r1
 801428c:	4613      	mov	r3, r2
  USBD_Status ret = USBD_OK;
  
  DCD_EP_Tx (pdev, 0, pbuf, len);
 801428e:	2100      	movs	r1, #0
 8014290:	4622      	mov	r2, r4
 8014292:	f001 fe60 	bl	8015f56 <DCD_EP_Tx>
  
  
  return ret;
}
 8014296:	2000      	movs	r0, #0
 8014298:	bd10      	pop	{r4, pc}

0801429a <USBD_CtlContinueRx>:
* @retval status
*/
USBD_Status  USBD_CtlContinueRx (USB_OTG_CORE_HANDLE  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 801429a:	b510      	push	{r4, lr}
 801429c:	460c      	mov	r4, r1
 801429e:	4613      	mov	r3, r2
  USBD_Status ret = USBD_OK;
  
  DCD_EP_PrepareRx (pdev,
 80142a0:	2100      	movs	r1, #0
 80142a2:	4622      	mov	r2, r4
 80142a4:	f001 fe3a 	bl	8015f1c <DCD_EP_PrepareRx>
                    0,                     
                    pbuf,                         
                    len);
  return ret;
}
 80142a8:	2000      	movs	r0, #0
 80142aa:	bd10      	pop	{r4, pc}

080142ac <USBD_CtlSendStatus>:
*/
USBD_Status  USBD_CtlSendStatus (USB_OTG_CORE_HANDLE  *pdev)
{
  USBD_Status ret = USBD_OK;
  pdev->dev.device_state = USB_OTG_EP0_STATUS_IN;
  DCD_EP_Tx (pdev,
 80142ac:	2100      	movs	r1, #0
* @retval status
*/
USBD_Status  USBD_CtlSendStatus (USB_OTG_CORE_HANDLE  *pdev)
{
  USBD_Status ret = USBD_OK;
  pdev->dev.device_state = USB_OTG_EP0_STATUS_IN;
 80142ae:	2304      	movs	r3, #4
*         send zero lzngth packet on the ctl pipe
* @param  pdev: USB OTG device instance
* @retval status
*/
USBD_Status  USBD_CtlSendStatus (USB_OTG_CORE_HANDLE  *pdev)
{
 80142b0:	b510      	push	{r4, lr}
  USBD_Status ret = USBD_OK;
  pdev->dev.device_state = USB_OTG_EP0_STATUS_IN;
  DCD_EP_Tx (pdev,
 80142b2:	460a      	mov	r2, r1
*         send zero lzngth packet on the ctl pipe
* @param  pdev: USB OTG device instance
* @retval status
*/
USBD_Status  USBD_CtlSendStatus (USB_OTG_CORE_HANDLE  *pdev)
{
 80142b4:	4604      	mov	r4, r0
  USBD_Status ret = USBD_OK;
  pdev->dev.device_state = USB_OTG_EP0_STATUS_IN;
 80142b6:	f880 3111 	strb.w	r3, [r0, #273]	; 0x111
  DCD_EP_Tx (pdev,
 80142ba:	460b      	mov	r3, r1
 80142bc:	f001 fe4b 	bl	8015f56 <DCD_EP_Tx>
             0,
             NULL, 
             0); 
  
  USB_OTG_EP0_OutStart(pdev);  
 80142c0:	4620      	mov	r0, r4
 80142c2:	f001 fd88 	bl	8015dd6 <USB_OTG_EP0_OutStart>
  
  return ret;
}
 80142c6:	2000      	movs	r0, #0
 80142c8:	bd10      	pop	{r4, pc}

080142ca <USBD_CtlReceiveStatus>:
*/
USBD_Status  USBD_CtlReceiveStatus (USB_OTG_CORE_HANDLE  *pdev)
{
  USBD_Status ret = USBD_OK;
  pdev->dev.device_state = USB_OTG_EP0_STATUS_OUT;  
  DCD_EP_PrepareRx ( pdev,
 80142ca:	2100      	movs	r1, #0
* @retval status
*/
USBD_Status  USBD_CtlReceiveStatus (USB_OTG_CORE_HANDLE  *pdev)
{
  USBD_Status ret = USBD_OK;
  pdev->dev.device_state = USB_OTG_EP0_STATUS_OUT;  
 80142cc:	2305      	movs	r3, #5
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: USB OTG device instance
* @retval status
*/
USBD_Status  USBD_CtlReceiveStatus (USB_OTG_CORE_HANDLE  *pdev)
{
 80142ce:	b510      	push	{r4, lr}
  USBD_Status ret = USBD_OK;
  pdev->dev.device_state = USB_OTG_EP0_STATUS_OUT;  
  DCD_EP_PrepareRx ( pdev,
 80142d0:	460a      	mov	r2, r1
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: USB OTG device instance
* @retval status
*/
USBD_Status  USBD_CtlReceiveStatus (USB_OTG_CORE_HANDLE  *pdev)
{
 80142d2:	4604      	mov	r4, r0
  USBD_Status ret = USBD_OK;
  pdev->dev.device_state = USB_OTG_EP0_STATUS_OUT;  
 80142d4:	f880 3111 	strb.w	r3, [r0, #273]	; 0x111
  DCD_EP_PrepareRx ( pdev,
 80142d8:	460b      	mov	r3, r1
 80142da:	f001 fe1f 	bl	8015f1c <DCD_EP_PrepareRx>
                    0,
                    NULL,
                    0);  

  USB_OTG_EP0_OutStart(pdev);
 80142de:	4620      	mov	r0, r4
 80142e0:	f001 fd79 	bl	8015dd6 <USB_OTG_EP0_OutStart>
  
  return ret;
}
 80142e4:	2000      	movs	r0, #0
 80142e6:	bd10      	pop	{r4, pc}

080142e8 <USBD_ParseSetupRequest>:
*/

void USBD_ParseSetupRequest( USB_OTG_CORE_HANDLE  *pdev,
                            USB_SETUP_REQ *req)
{
  req->bmRequest     = *(uint8_t *)  (pdev->dev.setup_packet);
 80142e8:	f890 35cc 	ldrb.w	r3, [r0, #1484]	; 0x5cc
 80142ec:	700b      	strb	r3, [r1, #0]
  req->bRequest      = *(uint8_t *)  (pdev->dev.setup_packet +  1);
 80142ee:	f890 25cd 	ldrb.w	r2, [r0, #1485]	; 0x5cd
 80142f2:	704a      	strb	r2, [r1, #1]
  req->wValue        = SWAPBYTE      (pdev->dev.setup_packet +  2);
 80142f4:	f890 35ce 	ldrb.w	r3, [r0, #1486]	; 0x5ce
 80142f8:	f890 25cf 	ldrb.w	r2, [r0, #1487]	; 0x5cf
 80142fc:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 8014300:	804a      	strh	r2, [r1, #2]
  req->wIndex        = SWAPBYTE      (pdev->dev.setup_packet +  4);
 8014302:	f890 35d0 	ldrb.w	r3, [r0, #1488]	; 0x5d0
 8014306:	f890 25d1 	ldrb.w	r2, [r0, #1489]	; 0x5d1
 801430a:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 801430e:	808a      	strh	r2, [r1, #4]
  req->wLength       = SWAPBYTE      (pdev->dev.setup_packet +  6);
 8014310:	f890 35d2 	ldrb.w	r3, [r0, #1490]	; 0x5d2
 8014314:	f890 25d3 	ldrb.w	r2, [r0, #1491]	; 0x5d3
 8014318:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 801431c:	b293      	uxth	r3, r2
 801431e:	80cb      	strh	r3, [r1, #6]
  
  pdev->dev.in_ep[0].ctl_data_len = req->wLength  ;
  pdev->dev.device_state = USB_OTG_EP0_SETUP;
 8014320:	2101      	movs	r1, #1
  req->bRequest      = *(uint8_t *)  (pdev->dev.setup_packet +  1);
  req->wValue        = SWAPBYTE      (pdev->dev.setup_packet +  2);
  req->wIndex        = SWAPBYTE      (pdev->dev.setup_packet +  4);
  req->wLength       = SWAPBYTE      (pdev->dev.setup_packet +  6);
  
  pdev->dev.in_ep[0].ctl_data_len = req->wLength  ;
 8014322:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
  pdev->dev.device_state = USB_OTG_EP0_SETUP;
 8014326:	f880 1111 	strb.w	r1, [r0, #273]	; 0x111
 801432a:	4770      	bx	lr

0801432c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USB_OTG_CORE_HANDLE  *pdev,
                            USB_SETUP_REQ *req)
{
 801432c:	b510      	push	{r4, lr}
  
  DCD_EP_Stall(pdev , 0x80);
 801432e:	2180      	movs	r1, #128	; 0x80
* @retval None
*/

void USBD_CtlError( USB_OTG_CORE_HANDLE  *pdev,
                            USB_SETUP_REQ *req)
{
 8014330:	4604      	mov	r4, r0
  
  DCD_EP_Stall(pdev , 0x80);
 8014332:	f001 fe2b 	bl	8015f8c <DCD_EP_Stall>
  DCD_EP_Stall(pdev , 0);
 8014336:	4620      	mov	r0, r4
 8014338:	2100      	movs	r1, #0
 801433a:	f001 fe27 	bl	8015f8c <DCD_EP_Stall>
  USB_OTG_EP0_OutStart(pdev);  
 801433e:	4620      	mov	r0, r4
}
 8014340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                            USB_SETUP_REQ *req)
{
  
  DCD_EP_Stall(pdev , 0x80);
  DCD_EP_Stall(pdev , 0);
  USB_OTG_EP0_OutStart(pdev);  
 8014344:	f001 bd47 	b.w	8015dd6 <USB_OTG_EP0_OutStart>

08014348 <USBD_StdEPReq>:
* @param  pdev: USB OTG device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdEPReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 8014348:	b570      	push	{r4, r5, r6, lr}
  uint8_t   ep_addr;
  USBD_Status ret = USBD_OK; 
  
  ep_addr  = LOBYTE(req->wIndex);   
  
  switch (req->bRequest) 
 801434a:	784e      	ldrb	r6, [r1, #1]
{
  
  uint8_t   ep_addr;
  USBD_Status ret = USBD_OK; 
  
  ep_addr  = LOBYTE(req->wIndex);   
 801434c:	888a      	ldrh	r2, [r1, #4]
  
  switch (req->bRequest) 
 801434e:	2e01      	cmp	r6, #1
* @param  pdev: USB OTG device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdEPReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 8014350:	4604      	mov	r4, r0
 8014352:	460d      	mov	r5, r1
  
  uint8_t   ep_addr;
  USBD_Status ret = USBD_OK; 
  
  ep_addr  = LOBYTE(req->wIndex);   
 8014354:	b2d3      	uxtb	r3, r2
  
  switch (req->bRequest) 
 8014356:	d011      	beq.n	801437c <USBD_StdEPReq+0x34>
 8014358:	d329      	bcc.n	80143ae <USBD_StdEPReq+0x66>
 801435a:	2e03      	cmp	r6, #3
 801435c:	d151      	bne.n	8014402 <USBD_StdEPReq+0xba>
  {
    
  case USB_REQ_SET_FEATURE :
    
    switch (pdev->dev.device_status) 
 801435e:	f890 2112 	ldrb.w	r2, [r0, #274]	; 0x112
 8014362:	2a02      	cmp	r2, #2
 8014364:	d02a      	beq.n	80143bc <USBD_StdEPReq+0x74>
 8014366:	2a03      	cmp	r2, #3
 8014368:	d149      	bne.n	80143fe <USBD_StdEPReq+0xb6>
        DCD_EP_Stall(pdev , ep_addr);
      }
      break;	
      
    case USB_OTG_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 801436a:	8849      	ldrh	r1, [r1, #2]
 801436c:	b9a9      	cbnz	r1, 801439a <USBD_StdEPReq+0x52>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 801436e:	b1a3      	cbz	r3, 801439a <USBD_StdEPReq+0x52>
 8014370:	2b80      	cmp	r3, #128	; 0x80
 8014372:	d012      	beq.n	801439a <USBD_StdEPReq+0x52>
        { 
          DCD_EP_Stall(pdev , ep_addr);
 8014374:	4619      	mov	r1, r3
 8014376:	f001 fe09 	bl	8015f8c <DCD_EP_Stall>
 801437a:	e00e      	b.n	801439a <USBD_StdEPReq+0x52>
    }
    break;
    
  case USB_REQ_CLEAR_FEATURE :
    
    switch (pdev->dev.device_status) 
 801437c:	f890 2112 	ldrb.w	r2, [r0, #274]	; 0x112
 8014380:	2a02      	cmp	r2, #2
 8014382:	d01b      	beq.n	80143bc <USBD_StdEPReq+0x74>
 8014384:	2a03      	cmp	r2, #3
 8014386:	d13a      	bne.n	80143fe <USBD_StdEPReq+0xb6>
        DCD_EP_Stall(pdev , ep_addr);
      }
      break;	
      
    case USB_OTG_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 8014388:	8849      	ldrh	r1, [r1, #2]
 801438a:	2900      	cmp	r1, #0
 801438c:	d139      	bne.n	8014402 <USBD_StdEPReq+0xba>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 801438e:	b153      	cbz	r3, 80143a6 <USBD_StdEPReq+0x5e>
 8014390:	2b80      	cmp	r3, #128	; 0x80
 8014392:	d008      	beq.n	80143a6 <USBD_StdEPReq+0x5e>
        {        
          DCD_EP_ClrStall(pdev , ep_addr);
 8014394:	4619      	mov	r1, r3
 8014396:	f001 fe17 	bl	8015fc8 <DCD_EP_ClrStall>
          pdev->dev.class_cb->Setup (pdev, req);
 801439a:	f8d4 05e4 	ldr.w	r0, [r4, #1508]	; 0x5e4
 801439e:	4629      	mov	r1, r5
 80143a0:	6883      	ldr	r3, [r0, #8]
 80143a2:	4620      	mov	r0, r4
 80143a4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80143a6:	4620      	mov	r0, r4
 80143a8:	f7ff ff80 	bl	80142ac <USBD_CtlSendStatus>
 80143ac:	e029      	b.n	8014402 <USBD_StdEPReq+0xba>
      break;    
    }
    break;
    
  case USB_REQ_GET_STATUS:                  
    switch (pdev->dev.device_status) 
 80143ae:	f890 5112 	ldrb.w	r5, [r0, #274]	; 0x112
 80143b2:	2d02      	cmp	r5, #2
 80143b4:	d002      	beq.n	80143bc <USBD_StdEPReq+0x74>
 80143b6:	2d03      	cmp	r5, #3
 80143b8:	d121      	bne.n	80143fe <USBD_StdEPReq+0xb6>
 80143ba:	e006      	b.n	80143ca <USBD_StdEPReq+0x82>
    {
    case USB_OTG_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80143bc:	b30b      	cbz	r3, 8014402 <USBD_StdEPReq+0xba>
 80143be:	2b80      	cmp	r3, #128	; 0x80
 80143c0:	d01f      	beq.n	8014402 <USBD_StdEPReq+0xba>
      {
        DCD_EP_Stall(pdev , ep_addr);
 80143c2:	4619      	mov	r1, r3
 80143c4:	f001 fde2 	bl	8015f8c <DCD_EP_Stall>
 80143c8:	e01b      	b.n	8014402 <USBD_StdEPReq+0xba>
      break;	
      
    case USB_OTG_CONFIGURED:         
      
      
      if ((ep_addr & 0x80)== 0x80)
 80143ca:	f012 0f80 	tst.w	r2, #128	; 0x80
 80143ce:	f04f 0028 	mov.w	r0, #40	; 0x28
 80143d2:	d006      	beq.n	80143e2 <USBD_StdEPReq+0x9a>
      {
        if(pdev->dev.in_ep[ep_addr & 0x7F].is_stall)
 80143d4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80143d8:	fb00 4102 	mla	r1, r0, r2, r4
 80143dc:	f891 311e 	ldrb.w	r3, [r1, #286]	; 0x11e
 80143e0:	e003      	b.n	80143ea <USBD_StdEPReq+0xa2>
          USBD_ep_status = 0x0000;  
        }
      }
      else if ((ep_addr & 0x80)== 0x00)
      {
        if(pdev->dev.out_ep[ep_addr].is_stall)
 80143e2:	fb00 4303 	mla	r3, r0, r3, r4
 80143e6:	f893 3376 	ldrb.w	r3, [r3, #886]	; 0x376
 80143ea:	4807      	ldr	r0, [pc, #28]	; (8014408 <USBD_StdEPReq+0xc0>)
 80143ec:	b103      	cbz	r3, 80143f0 <USBD_StdEPReq+0xa8>
        {
          USBD_ep_status = 0x0001;     
 80143ee:	2301      	movs	r3, #1
        }
        
        else 
        {
          USBD_ep_status = 0x0000;     
 80143f0:	6003      	str	r3, [r0, #0]
        }      
      }
      USBD_CtlSendData (pdev,
 80143f2:	4905      	ldr	r1, [pc, #20]	; (8014408 <USBD_StdEPReq+0xc0>)
 80143f4:	4620      	mov	r0, r4
 80143f6:	2202      	movs	r2, #2
 80143f8:	f7ff ff35 	bl	8014266 <USBD_CtlSendData>
                        (uint8_t *)&USBD_ep_status,
                        2);
      break;
 80143fc:	e001      	b.n	8014402 <USBD_StdEPReq+0xba>
      
    default:                         
       USBD_CtlError(pdev , req);
 80143fe:	f7ff ff95 	bl	801432c <USBD_CtlError>
    
  default:
    break;
  }
  return ret;
}
 8014402:	2000      	movs	r0, #0
 8014404:	bd70      	pop	{r4, r5, r6, pc}
 8014406:	bf00      	nop
 8014408:	200005a0 	.word	0x200005a0

0801440c <USBD_StdItfReq>:
* @param  pdev: USB OTG device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdItfReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 801440c:	b538      	push	{r3, r4, r5, lr}
  USBD_Status ret = USBD_OK; 
  
  switch (pdev->dev.device_status) 
 801440e:	f890 3112 	ldrb.w	r3, [r0, #274]	; 0x112
 8014412:	2b03      	cmp	r3, #3
* @param  pdev: USB OTG device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdItfReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 8014414:	4604      	mov	r4, r0
 8014416:	460d      	mov	r5, r1
  USBD_Status ret = USBD_OK; 
  
  switch (pdev->dev.device_status) 
 8014418:	d10c      	bne.n	8014434 <USBD_StdItfReq+0x28>
  {
  case USB_OTG_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_ITF_MAX_NUM) 
 801441a:	790a      	ldrb	r2, [r1, #4]
 801441c:	2a01      	cmp	r2, #1
 801441e:	d809      	bhi.n	8014434 <USBD_StdItfReq+0x28>
    {
      pdev->dev.class_cb->Setup (pdev, req); 
 8014420:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 8014424:	689a      	ldr	r2, [r3, #8]
 8014426:	4790      	blx	r2
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 8014428:	88e8      	ldrh	r0, [r5, #6]
 801442a:	b928      	cbnz	r0, 8014438 <USBD_StdItfReq+0x2c>
      {
         USBD_CtlSendStatus(pdev);
 801442c:	4620      	mov	r0, r4
 801442e:	f7ff ff3d 	bl	80142ac <USBD_CtlSendStatus>
 8014432:	e001      	b.n	8014438 <USBD_StdItfReq+0x2c>
       USBD_CtlError(pdev , req);
    }
    break;
    
  default:
     USBD_CtlError(pdev , req);
 8014434:	f7ff ff7a 	bl	801432c <USBD_CtlError>
    break;
  }
  return ret;
}
 8014438:	2000      	movs	r0, #0
 801443a:	bd38      	pop	{r3, r4, r5, pc}

0801443c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdDevReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 801443c:	b570      	push	{r4, r5, r6, lr}
  USBD_Status ret = USBD_OK;  

  switch (req->bRequest) 
 801443e:	784b      	ldrb	r3, [r1, #1]
 8014440:	2b05      	cmp	r3, #5
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdDevReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 8014442:	b0a2      	sub	sp, #136	; 0x88
 8014444:	4604      	mov	r4, r0
 8014446:	460d      	mov	r5, r1
  USBD_Status ret = USBD_OK;  

  switch (req->bRequest) 
 8014448:	f000 8083 	beq.w	8014552 <USBD_StdDevReq+0x116>
 801444c:	d808      	bhi.n	8014460 <USBD_StdDevReq+0x24>
 801444e:	2b01      	cmp	r3, #1
 8014450:	f000 8115 	beq.w	801467e <USBD_StdDevReq+0x242>
 8014454:	f0c0 80da 	bcc.w	801460c <USBD_StdDevReq+0x1d0>
 8014458:	2b03      	cmp	r3, #3
 801445a:	f040 8133 	bne.w	80146c4 <USBD_StdDevReq+0x288>
 801445e:	e0e6      	b.n	801462e <USBD_StdDevReq+0x1f2>
 8014460:	2b08      	cmp	r3, #8
 8014462:	f000 80c5 	beq.w	80145f0 <USBD_StdDevReq+0x1b4>
 8014466:	d803      	bhi.n	8014470 <USBD_StdDevReq+0x34>
 8014468:	2b06      	cmp	r3, #6
 801446a:	f040 812b 	bne.w	80146c4 <USBD_StdDevReq+0x288>
 801446e:	e006      	b.n	801447e <USBD_StdDevReq+0x42>
 8014470:	2b09      	cmp	r3, #9
 8014472:	f000 808e 	beq.w	8014592 <USBD_StdDevReq+0x156>
 8014476:	2b55      	cmp	r3, #85	; 0x55
 8014478:	f040 8124 	bne.w	80146c4 <USBD_StdDevReq+0x288>
 801447c:	e10f      	b.n	801469e <USBD_StdDevReq+0x262>
                               USB_SETUP_REQ *req)
{
  uint16_t len;
  uint8_t *pbuf;
  
  switch (req->wValue >> 8)
 801447e:	8848      	ldrh	r0, [r1, #2]
 8014480:	0a01      	lsrs	r1, r0, #8
 8014482:	1e4b      	subs	r3, r1, #1
 8014484:	2b06      	cmp	r3, #6
 8014486:	f200 811d 	bhi.w	80146c4 <USBD_StdDevReq+0x288>
 801448a:	e8df f013 	tbh	[pc, r3, lsl #1]
 801448e:	0007      	.short	0x0007
 8014490:	0027001a 	.word	0x0027001a
 8014494:	011b011b 	.word	0x011b011b
 8014498:	011b011b 	.word	0x011b011b
  {
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->dev.usr_device->GetDeviceDescriptor(pdev->cfg.speed, &len);
 801449c:	f8d4 15ec 	ldr.w	r1, [r4, #1516]	; 0x5ec
 80144a0:	78a0      	ldrb	r0, [r4, #2]
 80144a2:	680a      	ldr	r2, [r1, #0]
 80144a4:	f10d 0106 	add.w	r1, sp, #6
 80144a8:	4790      	blx	r2
 80144aa:	4601      	mov	r1, r0
    if ((req->wLength == 64) ||( pdev->dev.device_status == USB_OTG_DEFAULT))  
 80144ac:	88e8      	ldrh	r0, [r5, #6]
 80144ae:	2840      	cmp	r0, #64	; 0x40
 80144b0:	d003      	beq.n	80144ba <USBD_StdDevReq+0x7e>
 80144b2:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
 80144b6:	2b01      	cmp	r3, #1
 80144b8:	d13b      	bne.n	8014532 <USBD_StdDevReq+0xf6>
    {                  
      len = 8;
 80144ba:	2208      	movs	r2, #8
 80144bc:	f8ad 2006 	strh.w	r2, [sp, #6]
 80144c0:	e037      	b.n	8014532 <USBD_StdDevReq+0xf6>
    }
    break;
    
  case USB_DESC_TYPE_CONFIGURATION:
      pbuf   = (uint8_t *)pdev->dev.class_cb->GetConfigDescriptor(pdev->cfg.speed, &len);
 80144c2:	f8d4 05e4 	ldr.w	r0, [r4, #1508]	; 0x5e4
 80144c6:	f10d 0106 	add.w	r1, sp, #6
 80144ca:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80144cc:	78a0      	ldrb	r0, [r4, #2]
 80144ce:	4790      	blx	r2
       (pdev->cfg.phy_itface  == USB_OTG_ULPI_PHY))
    {
      pbuf   = (uint8_t *)pdev->dev.class_cb->GetOtherConfigDescriptor(pdev->cfg.speed, &len);
    }
#endif  
    pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80144d0:	2302      	movs	r3, #2
 80144d2:	7043      	strb	r3, [r0, #1]
      len = 8;
    }
    break;
    
  case USB_DESC_TYPE_CONFIGURATION:
      pbuf   = (uint8_t *)pdev->dev.class_cb->GetConfigDescriptor(pdev->cfg.speed, &len);
 80144d4:	4601      	mov	r1, r0
    {
      pbuf   = (uint8_t *)pdev->dev.class_cb->GetOtherConfigDescriptor(pdev->cfg.speed, &len);
    }
#endif  
    pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    pdev->dev.pConfig_descriptor = pbuf;    
 80144d6:	f8c4 05f0 	str.w	r0, [r4, #1520]	; 0x5f0
 80144da:	e02a      	b.n	8014532 <USBD_StdDevReq+0xf6>
    break;
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80144dc:	b2c1      	uxtb	r1, r0
 80144de:	78a0      	ldrb	r0, [r4, #2]
 80144e0:	2905      	cmp	r1, #5
 80144e2:	d81f      	bhi.n	8014524 <USBD_StdDevReq+0xe8>
 80144e4:	e8df f001 	tbb	[pc, r1]
 80144e8:	0f0b0703 	.word	0x0f0b0703
 80144ec:	1713      	.short	0x1713
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->dev.usr_device->GetLangIDStrDescriptor(pdev->cfg.speed, &len);        
 80144ee:	f8d4 25ec 	ldr.w	r2, [r4, #1516]	; 0x5ec
 80144f2:	6853      	ldr	r3, [r2, #4]
 80144f4:	e012      	b.n	801451c <USBD_StdDevReq+0xe0>
      break;
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->dev.usr_device->GetManufacturerStrDescriptor(pdev->cfg.speed, &len);
 80144f6:	f8d4 15ec 	ldr.w	r1, [r4, #1516]	; 0x5ec
 80144fa:	688b      	ldr	r3, [r1, #8]
 80144fc:	e00e      	b.n	801451c <USBD_StdDevReq+0xe0>
      break;
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->dev.usr_device->GetProductStrDescriptor(pdev->cfg.speed, &len);
 80144fe:	f8d4 35ec 	ldr.w	r3, [r4, #1516]	; 0x5ec
 8014502:	68db      	ldr	r3, [r3, #12]
 8014504:	e00a      	b.n	801451c <USBD_StdDevReq+0xe0>
      break;
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->dev.usr_device->GetSerialStrDescriptor(pdev->cfg.speed, &len);
 8014506:	f8d4 25ec 	ldr.w	r2, [r4, #1516]	; 0x5ec
 801450a:	6913      	ldr	r3, [r2, #16]
 801450c:	e006      	b.n	801451c <USBD_StdDevReq+0xe0>
      break;
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->dev.usr_device->GetConfigurationStrDescriptor(pdev->cfg.speed, &len);
 801450e:	f8d4 15ec 	ldr.w	r1, [r4, #1516]	; 0x5ec
 8014512:	694b      	ldr	r3, [r1, #20]
 8014514:	e002      	b.n	801451c <USBD_StdDevReq+0xe0>
      break;
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->dev.usr_device->GetInterfaceStrDescriptor(pdev->cfg.speed, &len);
 8014516:	f8d4 25ec 	ldr.w	r2, [r4, #1516]	; 0x5ec
 801451a:	6993      	ldr	r3, [r2, #24]
 801451c:	f10d 0106 	add.w	r1, sp, #6
 8014520:	4798      	blx	r3
 8014522:	e005      	b.n	8014530 <USBD_StdDevReq+0xf4>
      break;
      
    default:
#ifdef USB_SUPPORT_USER_STRING_DESC
      pbuf = pdev->dev.class_cb->GetUsrStrDescriptor(pdev->cfg.speed, (req->wValue) , &len);
 8014524:	f8d4 35e4 	ldr.w	r3, [r4, #1508]	; 0x5e4
 8014528:	f10d 0206 	add.w	r2, sp, #6
 801452c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801452e:	4798      	blx	r3
 8014530:	4601      	mov	r1, r0
  default: 
     USBD_CtlError(pdev , req);
    return;
  }
  
  if((len != 0)&& (req->wLength != 0))
 8014532:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8014536:	2800      	cmp	r0, #0
 8014538:	f000 80c8 	beq.w	80146cc <USBD_StdDevReq+0x290>
 801453c:	88ea      	ldrh	r2, [r5, #6]
 801453e:	2a00      	cmp	r2, #0
 8014540:	f000 80c4 	beq.w	80146cc <USBD_StdDevReq+0x290>
  {
    
    len = MIN(len , req->wLength);
 8014544:	4282      	cmp	r2, r0
 8014546:	bf28      	it	cs
 8014548:	4602      	movcs	r2, r0
 801454a:	f8ad 2006 	strh.w	r2, [sp, #6]
    
    USBD_CtlSendData (pdev, 
 801454e:	4620      	mov	r0, r4
 8014550:	e0b5      	b.n	80146be <USBD_StdDevReq+0x282>
static void USBD_SetAddress(USB_OTG_CORE_HANDLE  *pdev, 
                            USB_SETUP_REQ *req)
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8014552:	888a      	ldrh	r2, [r1, #4]
 8014554:	2a00      	cmp	r2, #0
 8014556:	f040 80b5 	bne.w	80146c4 <USBD_StdDevReq+0x288>
 801455a:	88c9      	ldrh	r1, [r1, #6]
 801455c:	2900      	cmp	r1, #0
 801455e:	f040 80b1 	bne.w	80146c4 <USBD_StdDevReq+0x288>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8014562:	886e      	ldrh	r6, [r5, #2]
    
    if (pdev->dev.device_status == USB_OTG_CONFIGURED) 
 8014564:	f890 2112 	ldrb.w	r2, [r0, #274]	; 0x112
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8014568:	f006 037f 	and.w	r3, r6, #127	; 0x7f
    
    if (pdev->dev.device_status == USB_OTG_CONFIGURED) 
 801456c:	2a03      	cmp	r2, #3
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 801456e:	461e      	mov	r6, r3
    
    if (pdev->dev.device_status == USB_OTG_CONFIGURED) 
 8014570:	f000 80a8 	beq.w	80146c4 <USBD_StdDevReq+0x288>
    {
      USBD_CtlError(pdev , req);
    } 
    else 
    {
      pdev->dev.device_address = dev_addr;
 8014574:	f880 3114 	strb.w	r3, [r0, #276]	; 0x114
      DCD_EP_SetAddress(pdev, dev_addr);               
 8014578:	4619      	mov	r1, r3
 801457a:	f001 fd43 	bl	8016004 <DCD_EP_SetAddress>
      USBD_CtlSendStatus(pdev);                         
 801457e:	4620      	mov	r0, r4
 8014580:	f7ff fe94 	bl	80142ac <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 8014584:	b10e      	cbz	r6, 801458a <USBD_StdDevReq+0x14e>
      {
        pdev->dev.device_status  = USB_OTG_ADDRESSED;
 8014586:	2002      	movs	r0, #2
 8014588:	e000      	b.n	801458c <USBD_StdDevReq+0x150>
      } 
      else 
      {
        pdev->dev.device_status  = USB_OTG_DEFAULT; 
 801458a:	2001      	movs	r0, #1
 801458c:	f884 0112 	strb.w	r0, [r4, #274]	; 0x112
 8014590:	e09c      	b.n	80146cc <USBD_StdDevReq+0x290>
                           USB_SETUP_REQ *req)
{
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8014592:	788b      	ldrb	r3, [r1, #2]
 8014594:	4a4f      	ldr	r2, [pc, #316]	; (80146d4 <USBD_StdDevReq+0x298>)
  
  if (cfgidx > USBD_CFG_MAX_NUM ) 
 8014596:	2b01      	cmp	r3, #1
                           USB_SETUP_REQ *req)
{
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8014598:	7013      	strb	r3, [r2, #0]
  
  if (cfgidx > USBD_CFG_MAX_NUM ) 
 801459a:	f200 8093 	bhi.w	80146c4 <USBD_StdDevReq+0x288>
  {            
     USBD_CtlError(pdev , req);                              
  } 
  else 
  {
    switch (pdev->dev.device_status) 
 801459e:	f890 2112 	ldrb.w	r2, [r0, #274]	; 0x112
 80145a2:	2a02      	cmp	r2, #2
 80145a4:	d003      	beq.n	80145ae <USBD_StdDevReq+0x172>
 80145a6:	2a03      	cmp	r2, #3
 80145a8:	f040 808e 	bne.w	80146c8 <USBD_StdDevReq+0x28c>
 80145ac:	e008      	b.n	80145c0 <USBD_StdDevReq+0x184>
    {
    case USB_OTG_ADDRESSED:
      if (cfgidx) 
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d061      	beq.n	8014676 <USBD_StdDevReq+0x23a>
      {                                			   							   							   				
        pdev->dev.device_config = cfgidx;
 80145b2:	2101      	movs	r1, #1
        pdev->dev.device_status = USB_OTG_CONFIGURED;
 80145b4:	2303      	movs	r3, #3
    switch (pdev->dev.device_status) 
    {
    case USB_OTG_ADDRESSED:
      if (cfgidx) 
      {                                			   							   							   				
        pdev->dev.device_config = cfgidx;
 80145b6:	f880 1110 	strb.w	r1, [r0, #272]	; 0x110
        pdev->dev.device_status = USB_OTG_CONFIGURED;
 80145ba:	f880 3112 	strb.w	r3, [r0, #274]	; 0x112
 80145be:	e014      	b.n	80145ea <USBD_StdDevReq+0x1ae>
         USBD_CtlSendStatus(pdev);
      }
      break;
      
    case USB_OTG_CONFIGURED:
      if (cfgidx == 0) 
 80145c0:	b943      	cbnz	r3, 80145d4 <USBD_StdDevReq+0x198>
      {                           
        pdev->dev.device_status = USB_OTG_ADDRESSED;
 80145c2:	2102      	movs	r1, #2
 80145c4:	f880 1112 	strb.w	r1, [r0, #274]	; 0x112
        pdev->dev.device_config = cfgidx;          
 80145c8:	f880 3110 	strb.w	r3, [r0, #272]	; 0x110
        USBD_ClrCfg(pdev , cfgidx);
 80145cc:	4619      	mov	r1, r3
 80145ce:	f7ff fe43 	bl	8014258 <USBD_ClrCfg>
 80145d2:	e050      	b.n	8014676 <USBD_StdDevReq+0x23a>
        USBD_CtlSendStatus(pdev);
        
      } 
      else  if (cfgidx != pdev->dev.device_config) 
 80145d4:	f890 1110 	ldrb.w	r1, [r0, #272]	; 0x110
 80145d8:	2901      	cmp	r1, #1
 80145da:	d04c      	beq.n	8014676 <USBD_StdDevReq+0x23a>
      {
        /* Clear old configuration */
        USBD_ClrCfg(pdev , pdev->dev.device_config);
 80145dc:	f7ff fe3c 	bl	8014258 <USBD_ClrCfg>
        
        /* set new configuration */
        pdev->dev.device_config = cfgidx;
 80145e0:	483c      	ldr	r0, [pc, #240]	; (80146d4 <USBD_StdDevReq+0x298>)
 80145e2:	7801      	ldrb	r1, [r0, #0]
        USBD_SetCfg(pdev , cfgidx);
 80145e4:	4620      	mov	r0, r4
      {
        /* Clear old configuration */
        USBD_ClrCfg(pdev , pdev->dev.device_config);
        
        /* set new configuration */
        pdev->dev.device_config = cfgidx;
 80145e6:	f884 1110 	strb.w	r1, [r4, #272]	; 0x110
        USBD_SetCfg(pdev , cfgidx);
 80145ea:	f7ff fe29 	bl	8014240 <USBD_SetCfg>
 80145ee:	e042      	b.n	8014676 <USBD_StdDevReq+0x23a>
*/
static void USBD_GetConfig(USB_OTG_CORE_HANDLE  *pdev, 
                           USB_SETUP_REQ *req)
{
 
  if (req->wLength != 1) 
 80145f0:	88ca      	ldrh	r2, [r1, #6]
 80145f2:	2a01      	cmp	r2, #1
 80145f4:	d166      	bne.n	80146c4 <USBD_StdDevReq+0x288>
  {                   
     USBD_CtlError(pdev , req);
  }
  else 
  {
    switch (pdev->dev.device_status )  
 80145f6:	f890 3112 	ldrb.w	r3, [r0, #274]	; 0x112
 80145fa:	2b02      	cmp	r3, #2
 80145fc:	d004      	beq.n	8014608 <USBD_StdDevReq+0x1cc>
 80145fe:	2b03      	cmp	r3, #3
 8014600:	d162      	bne.n	80146c8 <USBD_StdDevReq+0x28c>
                        1);
      break;
      
    case USB_OTG_CONFIGURED:                   
      
      USBD_CtlSendData (pdev, 
 8014602:	f500 7188 	add.w	r1, r0, #272	; 0x110
 8014606:	e05a      	b.n	80146be <USBD_StdDevReq+0x282>
  {
    switch (pdev->dev.device_status )  
    {
    case USB_OTG_ADDRESSED:                     
      
      USBD_CtlSendData (pdev, 
 8014608:	4933      	ldr	r1, [pc, #204]	; (80146d8 <USBD_StdDevReq+0x29c>)
 801460a:	e058      	b.n	80146be <USBD_StdDevReq+0x282>
static void USBD_GetStatus(USB_OTG_CORE_HANDLE  *pdev, 
                           USB_SETUP_REQ *req)
{
  
    
  switch (pdev->dev.device_status) 
 801460c:	f890 2112 	ldrb.w	r2, [r0, #274]	; 0x112
 8014610:	1e93      	subs	r3, r2, #2
 8014612:	2b01      	cmp	r3, #1
 8014614:	d858      	bhi.n	80146c8 <USBD_StdDevReq+0x28c>
  case USB_OTG_CONFIGURED:
    
#ifdef USBD_SELF_POWERED
    USBD_cfg_status = USB_CONFIG_SELF_POWERED;                                    
#else
    USBD_cfg_status = 0x00;                                    
 8014616:	4831      	ldr	r0, [pc, #196]	; (80146dc <USBD_StdDevReq+0x2a0>)
#endif
                      
    if (pdev->dev.DevRemoteWakeup) 
 8014618:	f8d4 2118 	ldr.w	r2, [r4, #280]	; 0x118
  case USB_OTG_CONFIGURED:
    
#ifdef USBD_SELF_POWERED
    USBD_cfg_status = USB_CONFIG_SELF_POWERED;                                    
#else
    USBD_cfg_status = 0x00;                                    
 801461c:	2100      	movs	r1, #0
 801461e:	6001      	str	r1, [r0, #0]
#endif
                      
    if (pdev->dev.DevRemoteWakeup) 
 8014620:	b10a      	cbz	r2, 8014626 <USBD_StdDevReq+0x1ea>
    {
      USBD_cfg_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8014622:	2302      	movs	r3, #2
 8014624:	6003      	str	r3, [r0, #0]
    }
    
    USBD_CtlSendData (pdev, 
 8014626:	4620      	mov	r0, r4
 8014628:	492c      	ldr	r1, [pc, #176]	; (80146dc <USBD_StdDevReq+0x2a0>)
 801462a:	2202      	movs	r2, #2
 801462c:	e047      	b.n	80146be <USBD_StdDevReq+0x282>
{

  USB_OTG_DCTL_TypeDef     dctl;
  uint8_t test_mode = 0;
 
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801462e:	884b      	ldrh	r3, [r1, #2]
 8014630:	2b01      	cmp	r3, #1
 8014632:	d02d      	beq.n	8014690 <USBD_StdDevReq+0x254>
    pdev->dev.DevRemoteWakeup = 1;  
    pdev->dev.class_cb->Setup (pdev, req);   
    USBD_CtlSendStatus(pdev);
  }

  else if ((req->wValue == USB_FEATURE_TEST_MODE) && 
 8014634:	2b02      	cmp	r3, #2
 8014636:	d149      	bne.n	80146cc <USBD_StdDevReq+0x290>
           ((req->wIndex & 0xFF) == 0))
 8014638:	888a      	ldrh	r2, [r1, #4]
    pdev->dev.DevRemoteWakeup = 1;  
    pdev->dev.class_cb->Setup (pdev, req);   
    USBD_CtlSendStatus(pdev);
  }

  else if ((req->wValue == USB_FEATURE_TEST_MODE) && 
 801463a:	f012 0fff 	tst.w	r2, #255	; 0xff
 801463e:	d145      	bne.n	80146cc <USBD_StdDevReq+0x290>
           ((req->wIndex & 0xFF) == 0))
  {
    dctl.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DCTL);
 8014640:	6900      	ldr	r0, [r0, #16]
    
    test_mode = req->wIndex >> 8;
    switch (test_mode) 
 8014642:	0a11      	lsrs	r1, r2, #8
 8014644:	1e4a      	subs	r2, r1, #1
  }

  else if ((req->wValue == USB_FEATURE_TEST_MODE) && 
           ((req->wIndex & 0xFF) == 0))
  {
    dctl.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DCTL);
 8014646:	6843      	ldr	r3, [r0, #4]
    
    test_mode = req->wIndex >> 8;
    switch (test_mode) 
 8014648:	2a04      	cmp	r2, #4
 801464a:	d80f      	bhi.n	801466c <USBD_StdDevReq+0x230>
 801464c:	e8df f002 	tbb	[pc, r2]
 8014650:	09070503 	.word	0x09070503
 8014654:	0b          	.byte	0x0b
 8014655:	00          	.byte	0x00
    {
    case 1: // TEST_J
      dctl.b.tstctl = 1;
 8014656:	2001      	movs	r0, #1
 8014658:	e006      	b.n	8014668 <USBD_StdDevReq+0x22c>
      break;
      
    case 2: // TEST_K	
      dctl.b.tstctl = 2;
 801465a:	2002      	movs	r0, #2
 801465c:	e004      	b.n	8014668 <USBD_StdDevReq+0x22c>
      break;
      
    case 3: // TEST_SE0_NAK
      dctl.b.tstctl = 3;
 801465e:	2003      	movs	r0, #3
 8014660:	e002      	b.n	8014668 <USBD_StdDevReq+0x22c>
      break;
      
    case 4: // TEST_PACKET
      dctl.b.tstctl = 4;
 8014662:	2004      	movs	r0, #4
 8014664:	e000      	b.n	8014668 <USBD_StdDevReq+0x22c>
      break;
      
    case 5: // TEST_FORCE_ENABLE
      dctl.b.tstctl = 5;
 8014666:	2005      	movs	r0, #5
 8014668:	f360 1306 	bfi	r3, r0, #4, #3
      break;
    }
    SET_TEST_MODE = dctl;
 801466c:	491c      	ldr	r1, [pc, #112]	; (80146e0 <USBD_StdDevReq+0x2a4>)
 801466e:	600b      	str	r3, [r1, #0]
    pdev->dev.test_mode = 1;
 8014670:	2301      	movs	r3, #1
 8014672:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
    USBD_CtlSendStatus(pdev);
 8014676:	4620      	mov	r0, r4
 8014678:	f7ff fe18 	bl	80142ac <USBD_CtlSendStatus>
 801467c:	e026      	b.n	80146cc <USBD_StdDevReq+0x290>
* @retval status
*/
static void USBD_ClrFeature(USB_OTG_CORE_HANDLE  *pdev, 
                            USB_SETUP_REQ *req)
{
  switch (pdev->dev.device_status)
 801467e:	f890 2112 	ldrb.w	r2, [r0, #274]	; 0x112
 8014682:	1e93      	subs	r3, r2, #2
 8014684:	2b01      	cmp	r3, #1
 8014686:	d81f      	bhi.n	80146c8 <USBD_StdDevReq+0x28c>
  {
  case USB_OTG_ADDRESSED:
  case USB_OTG_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8014688:	884a      	ldrh	r2, [r1, #2]
 801468a:	2a01      	cmp	r2, #1
 801468c:	d11e      	bne.n	80146cc <USBD_StdDevReq+0x290>
    {
      pdev->dev.DevRemoteWakeup = 0; 
 801468e:	2300      	movs	r3, #0
      pdev->dev.class_cb->Setup (pdev, req);   
 8014690:	f8d4 25e4 	ldr.w	r2, [r4, #1508]	; 0x5e4
  {
  case USB_OTG_ADDRESSED:
  case USB_OTG_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
    {
      pdev->dev.DevRemoteWakeup = 0; 
 8014694:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
      pdev->dev.class_cb->Setup (pdev, req);   
 8014698:	6893      	ldr	r3, [r2, #8]
 801469a:	4798      	blx	r3
 801469c:	e7eb      	b.n	8014676 <USBD_StdDevReq+0x23a>
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
    break;
    
  case 0x55:
    if( (req->bmRequest == 0xc0) && (req->wValue == 0) && (req->wLength == 0x0080) ) {
 801469e:	7809      	ldrb	r1, [r1, #0]
 80146a0:	29c0      	cmp	r1, #192	; 0xc0
 80146a2:	d10f      	bne.n	80146c4 <USBD_StdDevReq+0x288>
 80146a4:	886b      	ldrh	r3, [r5, #2]
 80146a6:	b96b      	cbnz	r3, 80146c4 <USBD_StdDevReq+0x288>
 80146a8:	88ee      	ldrh	r6, [r5, #6]
 80146aa:	2e80      	cmp	r6, #128	; 0x80
 80146ac:	d10a      	bne.n	80146c4 <USBD_StdDevReq+0x288>
      const uint8_t midi_indicator[128] = {
 80146ae:	490d      	ldr	r1, [pc, #52]	; (80146e4 <USBD_StdDevReq+0x2a8>)
 80146b0:	4632      	mov	r2, r6
 80146b2:	a802      	add	r0, sp, #8
 80146b4:	f003 fa80 	bl	8017bb8 <memcpy>
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x2F,0x55,0x46,0x1F,
	0x00,0xD8,0x48,0x40,0x37,0x6A,0xF7,0x6A,0x00,0x30,0x00,0x00,0xC7,0x06,0x2E,0x73,
	0x4A,0x2C,0x13,0x7B,0xE9,0x7F,0x32,0x00,0x2A,0x28,0x0D,0x9B,0xFE,0x0B,0x21,0xEF,
	0x42,0x2A,0x2F,0x73,0xB5,0xB8,0xDA,0x76,0xE6,0x79,0xBF,0x0F,0xEB,0x79,0x3E,0x0B};

      USBD_CtlSendData(pdev, (uint8_t *)midi_indicator, 0x80);
 80146b8:	4620      	mov	r0, r4
 80146ba:	a902      	add	r1, sp, #8
 80146bc:	4632      	mov	r2, r6
 80146be:	f7ff fdd2 	bl	8014266 <USBD_CtlSendData>
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
    break;
    
  case 0x55:
    if( (req->bmRequest == 0xc0) && (req->wValue == 0) && (req->wLength == 0x0080) ) {
 80146c2:	e003      	b.n	80146cc <USBD_StdDevReq+0x290>
      USBD_CtlError(pdev , req);
    }
    break;
    
  default:  
    USBD_CtlError(pdev , req);
 80146c4:	4620      	mov	r0, r4
 80146c6:	4629      	mov	r1, r5
 80146c8:	f7ff fe30 	bl	801432c <USBD_CtlError>
    break;
  }
  
  return ret;
}
 80146cc:	2000      	movs	r0, #0
 80146ce:	b022      	add	sp, #136	; 0x88
 80146d0:	bd70      	pop	{r4, r5, r6, pc}
 80146d2:	bf00      	nop
 80146d4:	2000059c 	.word	0x2000059c
 80146d8:	200005a4 	.word	0x200005a4
 80146dc:	20000598 	.word	0x20000598
 80146e0:	200039b0 	.word	0x200039b0
 80146e4:	08018237 	.word	0x08018237

080146e8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80146e8:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 80146ea:	b1c0      	cbz	r0, 801471e <USBD_GetString+0x36>
 80146ec:	2300      	movs	r3, #0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != NULL) 
 80146ee:	5cc5      	ldrb	r5, [r0, r3]
 80146f0:	b2dc      	uxtb	r4, r3
 80146f2:	3301      	adds	r3, #1
 80146f4:	2d00      	cmp	r5, #0
 80146f6:	d1fa      	bne.n	80146ee <USBD_GetString+0x6>
{
  uint8_t idx = 0;
  
  if (desc != NULL) 
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 80146f8:	1c63      	adds	r3, r4, #1
 80146fa:	005b      	lsls	r3, r3, #1
 80146fc:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80146fe:	2203      	movs	r2, #3
  uint8_t idx = 0;
  
  if (desc != NULL) 
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
    unicode[idx++] = *len;
 8014700:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8014702:	704a      	strb	r2, [r1, #1]
  * @param  desc : descriptor buffer
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
 8014704:	3801      	subs	r0, #1
  
  if (desc != NULL) 
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
    unicode[idx++] = *len;
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8014706:	2302      	movs	r3, #2
    
    while (*desc != NULL) 
 8014708:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 801470c:	b13a      	cbz	r2, 801471e <USBD_GetString+0x36>
    {
      unicode[idx++] = *desc++;
 801470e:	1c5c      	adds	r4, r3, #1
 8014710:	54ca      	strb	r2, [r1, r3]
      unicode[idx++] =  0x00;
 8014712:	b2e2      	uxtb	r2, r4
 8014714:	3302      	adds	r3, #2
 8014716:	2400      	movs	r4, #0
 8014718:	548c      	strb	r4, [r1, r2]
 801471a:	b2db      	uxtb	r3, r3
 801471c:	e7f4      	b.n	8014708 <USBD_GetString+0x20>
 801471e:	bd30      	pop	{r4, r5, pc}

08014720 <USBH_Connected>:
  * @param  selected device
  * @retval Status
*/
uint8_t USBH_Connected (USB_OTG_CORE_HANDLE *pdev)
{
  pdev->host.ConnSts = 1;
 8014720:	2301      	movs	r3, #1
 8014722:	f8c0 37f4 	str.w	r3, [r0, #2036]	; 0x7f4
  return 0;
}
 8014726:	2000      	movs	r0, #0
 8014728:	4770      	bx	lr

0801472a <USBH_Disconnected>:
* @retval Status
*/

uint8_t USBH_Disconnected (USB_OTG_CORE_HANDLE *pdev)
{
  pdev->host.ConnSts = 0;
 801472a:	2300      	movs	r3, #0
 801472c:	f8c0 37f4 	str.w	r3, [r0, #2036]	; 0x7f4
  return 0;  
}
 8014730:	4618      	mov	r0, r3
 8014732:	4770      	bx	lr

08014734 <USBH_SOF>:

uint8_t USBH_SOF (USB_OTG_CORE_HANDLE *pdev)
{
  /* This callback could be used to implement a scheduler process */
  return 0;  
}
 8014734:	2000      	movs	r0, #0
 8014736:	4770      	bx	lr

08014738 <USBH_DeInit>:
  *         Re-Initialize Host
  * @param  None 
  * @retval status: USBH_Status
  */
USBH_Status USBH_DeInit(USB_OTG_CORE_HANDLE *pdev, USBH_HOST *phost)
{
 8014738:	b570      	push	{r4, r5, r6, lr}
  /* Software Init */
  
  phost->gState = HOST_IDLE;
  phost->gStateBkp = HOST_IDLE; 
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;  
 801473a:	2301      	movs	r3, #1
  */
USBH_Status USBH_DeInit(USB_OTG_CORE_HANDLE *pdev, USBH_HOST *phost)
{
  /* Software Init */
  
  phost->gState = HOST_IDLE;
 801473c:	2500      	movs	r5, #0
  phost->gStateBkp = HOST_IDLE; 
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;  
  
  phost->Control.state = CTRL_SETUP;
  phost->Control.ep0size = USB_OTG_MAX_EP0_SIZE;  
 801473e:	2240      	movs	r2, #64	; 0x40
  *         Re-Initialize Host
  * @param  None 
  * @retval status: USBH_Status
  */
USBH_Status USBH_DeInit(USB_OTG_CORE_HANDLE *pdev, USBH_HOST *phost)
{
 8014740:	460c      	mov	r4, r1
  /* Software Init */
  
  phost->gState = HOST_IDLE;
  phost->gStateBkp = HOST_IDLE; 
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;  
 8014742:	70cb      	strb	r3, [r1, #3]
  
  phost->Control.state = CTRL_SETUP;
 8014744:	770b      	strb	r3, [r1, #28]
  phost->Control.ep0size = USB_OTG_MAX_EP0_SIZE;  
 8014746:	718a      	strb	r2, [r1, #6]
  
  phost->device_prop.address = USBH_DEVICE_ADDRESS_DEFAULT;
  phost->device_prop.speed = HPRT0_PRTSPD_FULL_SPEED;
 8014748:	f881 3021 	strb.w	r3, [r1, #33]	; 0x21
  *         Re-Initialize Host
  * @param  None 
  * @retval status: USBH_Status
  */
USBH_Status USBH_DeInit(USB_OTG_CORE_HANDLE *pdev, USBH_HOST *phost)
{
 801474c:	4606      	mov	r6, r0
  /* Software Init */
  
  phost->gState = HOST_IDLE;
 801474e:	700d      	strb	r5, [r1, #0]
  phost->gStateBkp = HOST_IDLE; 
 8014750:	704d      	strb	r5, [r1, #1]
  phost->EnumState = ENUM_IDLE;
 8014752:	708d      	strb	r5, [r1, #2]
  phost->RequestState = CMD_SEND;  
  
  phost->Control.state = CTRL_SETUP;
  phost->Control.ep0size = USB_OTG_MAX_EP0_SIZE;  
  
  phost->device_prop.address = USBH_DEVICE_ADDRESS_DEFAULT;
 8014754:	f881 5020 	strb.w	r5, [r1, #32]
  phost->device_prop.speed = HPRT0_PRTSPD_FULL_SPEED;
  
  USBH_Free_Channel  (pdev, phost->Control.hc_num_in);
 8014758:	7909      	ldrb	r1, [r1, #4]
 801475a:	f000 fb1b 	bl	8014d94 <USBH_Free_Channel>
  USBH_Free_Channel  (pdev, phost->Control.hc_num_out);  
 801475e:	4630      	mov	r0, r6
 8014760:	7961      	ldrb	r1, [r4, #5]
 8014762:	f000 fb17 	bl	8014d94 <USBH_Free_Channel>
  return USBH_OK;
}
 8014766:	4628      	mov	r0, r5
 8014768:	bd70      	pop	{r4, r5, r6, pc}

0801476a <USBH_Init>:
void USBH_Init(USB_OTG_CORE_HANDLE *pdev,
               USB_OTG_CORE_ID_TypeDef coreID,
               USBH_HOST *phost,               
               USBH_Class_cb_TypeDef *class_cb, 
               USBH_Usr_cb_TypeDef *usr_cb)
{
 801476a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801476e:	9f06      	ldr	r7, [sp, #24]
 8014770:	4614      	mov	r4, r2
 8014772:	4698      	mov	r8, r3
 8014774:	4605      	mov	r5, r0
 8014776:	460e      	mov	r6, r1
     
  /* Hardware Init */
  USB_OTG_BSP_Init(pdev);  
 8014778:	f7fe f876 	bl	8012868 <USB_OTG_BSP_Init>
  
  /* configure GPIO pin used for switching VBUS power */
  USB_OTG_BSP_ConfigVBUS(0);  
 801477c:	2000      	movs	r0, #0
 801477e:	f7fe f8e3 	bl	8012948 <USB_OTG_BSP_ConfigVBUS>
  
  
  /* Host de-initializations */
  USBH_DeInit(pdev, phost);
 8014782:	4621      	mov	r1, r4
 8014784:	4628      	mov	r0, r5
 8014786:	f7ff ffd7 	bl	8014738 <USBH_DeInit>
  /*Register class and user callbacks */
  phost->class_cb = class_cb;
  phost->usr_cb = usr_cb;  
    
  /* Start the USB OTG core */     
   HCD_Init(pdev , coreID);
 801478a:	4631      	mov	r1, r6
  
  /* Host de-initializations */
  USBH_DeInit(pdev, phost);
  
  /*Register class and user callbacks */
  phost->class_cb = class_cb;
 801478c:	f8c4 807c 	str.w	r8, [r4, #124]	; 0x7c
  phost->usr_cb = usr_cb;  
 8014790:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
    
  /* Start the USB OTG core */     
   HCD_Init(pdev , coreID);
 8014794:	4628      	mov	r0, r5
 8014796:	f001 fe8b 	bl	80164b0 <HCD_Init>
   
  /* Upon Init call usr call back */
  phost->usr_cb->Init();
 801479a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 801479e:	6818      	ldr	r0, [r3, #0]
 80147a0:	4780      	blx	r0
  
  /* Enable Interrupts */
  USB_OTG_BSP_EnableInterrupt(pdev);
 80147a2:	4628      	mov	r0, r5
}
 80147a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   
  /* Upon Init call usr call back */
  phost->usr_cb->Init();
  
  /* Enable Interrupts */
  USB_OTG_BSP_EnableInterrupt(pdev);
 80147a8:	f7fe b8ac 	b.w	8012904 <USB_OTG_BSP_EnableInterrupt>

080147ac <USBH_ErrorHandle>:
  * @retval None
  */
void USBH_ErrorHandle(USBH_HOST *phost, USBH_Status errType)
{
  /* Error unrecovered or not supported device speed */
  if ( (errType == USBH_ERROR_SPEED_UNKNOWN) ||
 80147ac:	1f0b      	subs	r3, r1, #4
 80147ae:	2b01      	cmp	r3, #1
  *         This function handles the Error on Host side.
  * @param  errType : Type of Error or Busy/OK state
  * @retval None
  */
void USBH_ErrorHandle(USBH_HOST *phost, USBH_Status errType)
{
 80147b0:	b510      	push	{r4, lr}
 80147b2:	4604      	mov	r4, r0
  /* Error unrecovered or not supported device speed */
  if ( (errType == USBH_ERROR_SPEED_UNKNOWN) ||
 80147b4:	d806      	bhi.n	80147c4 <USBH_ErrorHandle+0x18>
       (errType == USBH_UNRECOVERED_ERROR) )
  {
    phost->usr_cb->UnrecoveredError(); 
 80147b6:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80147ba:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80147bc:	4780      	blx	r0
    phost->gState = HOST_ERROR_STATE;   
 80147be:	210a      	movs	r1, #10
 80147c0:	7021      	strb	r1, [r4, #0]
 80147c2:	bd10      	pop	{r4, pc}
  }  
  /* USB host restart requested from application layer */
  else if(errType == USBH_APPLY_DEINIT)
 80147c4:	2906      	cmp	r1, #6
 80147c6:	d105      	bne.n	80147d4 <USBH_ErrorHandle+0x28>
  {
    phost->gState = HOST_ERROR_STATE;  
    /* user callback for initalization */
    phost->usr_cb->Init();
 80147c8:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
    phost->gState = HOST_ERROR_STATE;   
  }  
  /* USB host restart requested from application layer */
  else if(errType == USBH_APPLY_DEINIT)
  {
    phost->gState = HOST_ERROR_STATE;  
 80147cc:	200a      	movs	r0, #10
 80147ce:	7020      	strb	r0, [r4, #0]
    /* user callback for initalization */
    phost->usr_cb->Init();
 80147d0:	680a      	ldr	r2, [r1, #0]
 80147d2:	4790      	blx	r2
 80147d4:	bd10      	pop	{r4, pc}
	...

080147d8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  pdev: Selected device
  * @retval Status
  */
USBH_Status USBH_HandleControl (USB_OTG_CORE_HANDLE *pdev, USBH_HOST *phost)
{
 80147d8:	b570      	push	{r4, r5, r6, lr}
 80147da:	4605      	mov	r5, r0
  URB_STATE URB_Status = URB_IDLE;
  
  phost->Control.status = CTRL_START;

  
  switch (phost->Control.state)
 80147dc:	7f08      	ldrb	r0, [r1, #28]
  uint8_t direction;  
  static uint16_t timeout = 0;
  USBH_Status status = USBH_OK;
  URB_STATE URB_Status = URB_IDLE;
  
  phost->Control.status = CTRL_START;
 80147de:	2300      	movs	r3, #0
  *         Handles the USB control transfer state machine
  * @param  pdev: Selected device
  * @retval Status
  */
USBH_Status USBH_HandleControl (USB_OTG_CORE_HANDLE *pdev, USBH_HOST *phost)
{
 80147e0:	460c      	mov	r4, r1
  uint8_t direction;  
  static uint16_t timeout = 0;
  USBH_Status status = USBH_OK;
  URB_STATE URB_Status = URB_IDLE;
  
  phost->Control.status = CTRL_START;
 80147e2:	748b      	strb	r3, [r1, #18]

  
  switch (phost->Control.state)
 80147e4:	1e41      	subs	r1, r0, #1
 80147e6:	290a      	cmp	r1, #10
 80147e8:	f200 80cd 	bhi.w	8014986 <USBH_HandleControl+0x1ae>
 80147ec:	e8df f001 	tbb	[pc, r1]
 80147f0:	3f370e06 	.word	0x3f370e06
 80147f4:	81796759 	.word	0x81796759
 80147f8:	aa9a      	.short	0xaa9a
 80147fa:	bc          	.byte	0xbc
 80147fb:	00          	.byte	0x00
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup     (pdev, 
 80147fc:	4628      	mov	r0, r5
 80147fe:	f104 0114 	add.w	r1, r4, #20
 8014802:	7962      	ldrb	r2, [r4, #5]
 8014804:	f000 fb05 	bl	8014e12 <USBH_CtlSendSetup>
	                   phost->Control.setup.d8 , 
	                   phost->Control.hc_num_out);  
    phost->Control.state = CTRL_SETUP_WAIT;  
 8014808:	2302      	movs	r3, #2
 801480a:	e0b4      	b.n	8014976 <USBH_HandleControl+0x19e>
    break; 
    
  case CTRL_SETUP_WAIT:
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_out); 
 801480c:	4628      	mov	r0, r5
 801480e:	7961      	ldrb	r1, [r4, #5]
 8014810:	f001 fe8e 	bl	8016530 <HCD_GetURB_State>
    /* case SETUP packet sent successfully */
    if(URB_Status == URB_DONE)
 8014814:	2801      	cmp	r0, #1
 8014816:	d11a      	bne.n	801484e <USBH_HandleControl+0x76>
    { 
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8014818:	7d22      	ldrb	r2, [r4, #20]
      
      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0 )
 801481a:	8b61      	ldrh	r1, [r4, #26]
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_out); 
    /* case SETUP packet sent successfully */
    if(URB_Status == URB_DONE)
    { 
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 801481c:	f022 037f 	bic.w	r3, r2, #127	; 0x7f
 8014820:	b2d8      	uxtb	r0, r3
 8014822:	4a5a      	ldr	r2, [pc, #360]	; (801498c <USBH_HandleControl+0x1b4>)
      
      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0 )
 8014824:	b139      	cbz	r1, 8014836 <USBH_HandleControl+0x5e>
      {        
        timeout = DATA_STAGE_TIMEOUT;
 8014826:	f241 3188 	movw	r1, #5000	; 0x1388
 801482a:	8011      	strh	r1, [r2, #0]
        if (direction == USB_D2H)
 801482c:	b108      	cbz	r0, 8014832 <USBH_HandleControl+0x5a>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 801482e:	2003      	movs	r0, #3
 8014830:	e007      	b.n	8014842 <USBH_HandleControl+0x6a>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_DATA_OUT;
 8014832:	2005      	movs	r0, #5
 8014834:	e005      	b.n	8014842 <USBH_HandleControl+0x6a>
        } 
      }
      /* No DATA stage */
      else
      {
        timeout = NODATA_STAGE_TIMEOUT;
 8014836:	2332      	movs	r3, #50	; 0x32
 8014838:	8013      	strh	r3, [r2, #0]
        
        /* If there is No Data Transfer Stage */
        if (direction == USB_D2H)
 801483a:	b108      	cbz	r0, 8014840 <USBH_HandleControl+0x68>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_STATUS_OUT;
 801483c:	2009      	movs	r0, #9
 801483e:	e000      	b.n	8014842 <USBH_HandleControl+0x6a>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_STATUS_IN;
 8014840:	2007      	movs	r0, #7
 8014842:	7720      	strb	r0, [r4, #28]
        } 
      }          
      /* Set the delay timer to enable timeout for data stage completion */
      phost->Control.timer = HCD_GetCurrentFrame(pdev);
 8014844:	4628      	mov	r0, r5
 8014846:	f001 fe6f 	bl	8016528 <HCD_GetCurrentFrame>
 801484a:	8220      	strh	r0, [r4, #16]
 801484c:	e09b      	b.n	8014986 <USBH_HandleControl+0x1ae>
    }
    else if(URB_Status == URB_ERROR)
 801484e:	2803      	cmp	r0, #3
 8014850:	f040 8099 	bne.w	8014986 <USBH_HandleControl+0x1ae>
    {
      phost->Control.state = CTRL_ERROR;     
 8014854:	210b      	movs	r1, #11
      phost->Control.status = CTRL_XACTERR;
 8014856:	2005      	movs	r0, #5
      /* Set the delay timer to enable timeout for data stage completion */
      phost->Control.timer = HCD_GetCurrentFrame(pdev);
    }
    else if(URB_Status == URB_ERROR)
    {
      phost->Control.state = CTRL_ERROR;     
 8014858:	7721      	strb	r1, [r4, #28]
      phost->Control.status = CTRL_XACTERR;
 801485a:	74a0      	strb	r0, [r4, #18]
 801485c:	e093      	b.n	8014986 <USBH_HandleControl+0x1ae>
    }    
    break;
    
  case CTRL_DATA_IN:  
    /* Issue an IN token */ 
    USBH_CtlReceiveData(pdev,
 801485e:	7923      	ldrb	r3, [r4, #4]
 8014860:	68a1      	ldr	r1, [r4, #8]
 8014862:	89a2      	ldrh	r2, [r4, #12]
 8014864:	4628      	mov	r0, r5
 8014866:	f000 fb0b 	bl	8014e80 <USBH_CtlReceiveData>
                        phost->Control.buff, 
                        phost->Control.length,
                        phost->Control.hc_num_in);
 
    phost->Control.state = CTRL_DATA_IN_WAIT;
 801486a:	2304      	movs	r3, #4
 801486c:	e083      	b.n	8014976 <USBH_HandleControl+0x19e>
    break;    
    
  case CTRL_DATA_IN_WAIT:
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_in); 
 801486e:	4628      	mov	r0, r5
 8014870:	7921      	ldrb	r1, [r4, #4]
 8014872:	f001 fe5d 	bl	8016530 <HCD_GetURB_State>
    
    /* check is DATA packet transfered successfully */
    if  (URB_Status == URB_DONE)
 8014876:	2801      	cmp	r0, #1
 8014878:	d102      	bne.n	8014880 <USBH_HandleControl+0xa8>
    { 
      phost->Control.state = CTRL_STATUS_OUT;
 801487a:	2309      	movs	r3, #9
 801487c:	7723      	strb	r3, [r4, #28]
 801487e:	e006      	b.n	801488e <USBH_HandleControl+0xb6>
    }
   
    /* manage error cases*/
    if  (URB_Status == URB_STALL) 
 8014880:	2804      	cmp	r0, #4
 8014882:	d102      	bne.n	801488a <USBH_HandleControl+0xb2>
    { 
      /* In stall case, return to previous machine state*/
      phost->gState =   phost->gStateBkp;
 8014884:	7862      	ldrb	r2, [r4, #1]
 8014886:	7022      	strb	r2, [r4, #0]
 8014888:	e07d      	b.n	8014986 <USBH_HandleControl+0x1ae>
    }   
    else if (URB_Status == URB_ERROR)
 801488a:	2803      	cmp	r0, #3
 801488c:	d06a      	beq.n	8014964 <USBH_HandleControl+0x18c>
    {
      /* Device error */
      phost->Control.state = CTRL_ERROR;    
    }
    else if ((HCD_GetCurrentFrame(pdev)- phost->Control.timer) > timeout)
 801488e:	4628      	mov	r0, r5
 8014890:	f001 fe4a 	bl	8016528 <HCD_GetCurrentFrame>
 8014894:	4a3d      	ldr	r2, [pc, #244]	; (801498c <USBH_HandleControl+0x1b4>)
 8014896:	8a21      	ldrh	r1, [r4, #16]
 8014898:	8813      	ldrh	r3, [r2, #0]
 801489a:	1a40      	subs	r0, r0, r1
 801489c:	4298      	cmp	r0, r3
 801489e:	d972      	bls.n	8014986 <USBH_HandleControl+0x1ae>
 80148a0:	e060      	b.n	8014964 <USBH_HandleControl+0x18c>
    }   
    break;
    
  case CTRL_DATA_OUT:
    /* Start DATA out transfer (only one DATA packet)*/
    pdev->host.hc[phost->Control.hc_num_out].toggle_out = 1; 
 80148a2:	7963      	ldrb	r3, [r4, #5]
 80148a4:	eb05 1143 	add.w	r1, r5, r3, lsl #5
 80148a8:	2001      	movs	r0, #1
 80148aa:	f881 08a9 	strb.w	r0, [r1, #2217]	; 0x8a9
        
    USBH_CtlSendData (pdev,
 80148ae:	7963      	ldrb	r3, [r4, #5]
 80148b0:	68a1      	ldr	r1, [r4, #8]
 80148b2:	89a2      	ldrh	r2, [r4, #12]
 80148b4:	4628      	mov	r0, r5
 80148b6:	f000 fac3 	bl	8014e40 <USBH_CtlSendData>
    



    
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 80148ba:	2306      	movs	r3, #6
 80148bc:	e05b      	b.n	8014976 <USBH_HandleControl+0x19e>
    break;
    
  case CTRL_DATA_OUT_WAIT:
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_out);     
 80148be:	4628      	mov	r0, r5
 80148c0:	7961      	ldrb	r1, [r4, #5]
 80148c2:	f001 fe35 	bl	8016530 <HCD_GetURB_State>
    if  (URB_Status == URB_DONE)
 80148c6:	2801      	cmp	r0, #1
 80148c8:	d101      	bne.n	80148ce <USBH_HandleControl+0xf6>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 80148ca:	2307      	movs	r3, #7
 80148cc:	e053      	b.n	8014976 <USBH_HandleControl+0x19e>
    }
    
    /* handle error cases */
    else if  (URB_Status == URB_STALL) 
 80148ce:	2804      	cmp	r0, #4
 80148d0:	d103      	bne.n	80148da <USBH_HandleControl+0x102>
    { 
      /* In stall case, return to previous machine state*/
      phost->gState =   phost->gStateBkp;
 80148d2:	7862      	ldrb	r2, [r4, #1]
      phost->Control.state = CTRL_STALLED;  
 80148d4:	230c      	movs	r3, #12
    
    /* handle error cases */
    else if  (URB_Status == URB_STALL) 
    { 
      /* In stall case, return to previous machine state*/
      phost->gState =   phost->gStateBkp;
 80148d6:	7022      	strb	r2, [r4, #0]
 80148d8:	e04d      	b.n	8014976 <USBH_HandleControl+0x19e>
      phost->Control.state = CTRL_STALLED;  
    } 
    else if  (URB_Status == URB_NOTREADY)
 80148da:	2802      	cmp	r0, #2
 80148dc:	d140      	bne.n	8014960 <USBH_HandleControl+0x188>
    { 
      /* Nack received from device */
      phost->Control.state = CTRL_DATA_OUT;
 80148de:	2305      	movs	r3, #5
 80148e0:	e049      	b.n	8014976 <USBH_HandleControl+0x19e>
    break;
    
    
  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (pdev,
 80148e2:	2100      	movs	r1, #0
 80148e4:	7923      	ldrb	r3, [r4, #4]
 80148e6:	4628      	mov	r0, r5
 80148e8:	460a      	mov	r2, r1
 80148ea:	f000 fac9 	bl	8014e80 <USBH_CtlReceiveData>
                         0,
                         0,
                         phost->Control.hc_num_in);
    
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 80148ee:	2308      	movs	r3, #8
 80148f0:	e041      	b.n	8014976 <USBH_HandleControl+0x19e>
    
    break;
    
  case CTRL_STATUS_IN_WAIT:
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_in); 
 80148f2:	4628      	mov	r0, r5
 80148f4:	7921      	ldrb	r1, [r4, #4]
 80148f6:	f001 fe1b 	bl	8016530 <HCD_GetURB_State>
    
    if  ( URB_Status == URB_DONE)
 80148fa:	2801      	cmp	r0, #1
    
    break;
    
  case CTRL_STATUS_IN_WAIT:
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_in); 
 80148fc:	4606      	mov	r6, r0
    
    if  ( URB_Status == URB_DONE)
 80148fe:	d027      	beq.n	8014950 <USBH_HandleControl+0x178>
    { /* Control transfers completed, Exit the State Machine */
      phost->gState =   phost->gStateBkp;
      phost->Control.state = CTRL_COMPLETE;
    }
    
    else if (URB_Status == URB_ERROR)
 8014900:	2803      	cmp	r0, #3
 8014902:	d02f      	beq.n	8014964 <USBH_HandleControl+0x18c>
    {
      phost->Control.state = CTRL_ERROR;  
    }
    
    else if((HCD_GetCurrentFrame(pdev)\
 8014904:	4628      	mov	r0, r5
 8014906:	f001 fe0f 	bl	8016528 <HCD_GetCurrentFrame>
      - phost->Control.timer) > timeout)
 801490a:	4a20      	ldr	r2, [pc, #128]	; (801498c <USBH_HandleControl+0x1b4>)
 801490c:	8a21      	ldrh	r1, [r4, #16]
 801490e:	8813      	ldrh	r3, [r2, #0]
 8014910:	1a40      	subs	r0, r0, r1
    else if (URB_Status == URB_ERROR)
    {
      phost->Control.state = CTRL_ERROR;  
    }
    
    else if((HCD_GetCurrentFrame(pdev)\
 8014912:	4298      	cmp	r0, r3
 8014914:	d826      	bhi.n	8014964 <USBH_HandleControl+0x18c>
      - phost->Control.timer) > timeout)
    {
      phost->Control.state = CTRL_ERROR; 
    }
     else if(URB_Status == URB_STALL)
 8014916:	2e04      	cmp	r6, #4
 8014918:	d135      	bne.n	8014986 <USBH_HandleControl+0x1ae>
    {
      /* Control transfers completed, Exit the State Machine */
      phost->gState =   phost->gStateBkp;
 801491a:	7861      	ldrb	r1, [r4, #1]
      phost->Control.status = CTRL_STALL;
 801491c:	74a6      	strb	r6, [r4, #18]
      phost->Control.state = CTRL_ERROR; 
    }
     else if(URB_Status == URB_STALL)
    {
      /* Control transfers completed, Exit the State Machine */
      phost->gState =   phost->gStateBkp;
 801491e:	7021      	strb	r1, [r4, #0]
      phost->Control.status = CTRL_STALL;
      status = USBH_NOT_SUPPORTED;
 8014920:	2003      	movs	r0, #3
 8014922:	bd70      	pop	{r4, r5, r6, pc}
    }
    break;
    
  case CTRL_STATUS_OUT:
    pdev->host.hc[phost->Control.hc_num_out].toggle_out ^= 1; 
 8014924:	7960      	ldrb	r0, [r4, #5]
 8014926:	3045      	adds	r0, #69	; 0x45
 8014928:	eb05 1140 	add.w	r1, r5, r0, lsl #5
    USBH_CtlSendData (pdev,
 801492c:	4628      	mov	r0, r5
      status = USBH_NOT_SUPPORTED;
    }
    break;
    
  case CTRL_STATUS_OUT:
    pdev->host.hc[phost->Control.hc_num_out].toggle_out ^= 1; 
 801492e:	7a4a      	ldrb	r2, [r1, #9]
 8014930:	f082 0301 	eor.w	r3, r2, #1
 8014934:	724b      	strb	r3, [r1, #9]
    USBH_CtlSendData (pdev,
 8014936:	2100      	movs	r1, #0
 8014938:	7963      	ldrb	r3, [r4, #5]
 801493a:	460a      	mov	r2, r1
 801493c:	f000 fa80 	bl	8014e40 <USBH_CtlSendData>
                      0,
                      0,
                      phost->Control.hc_num_out);
    
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8014940:	230a      	movs	r3, #10
 8014942:	e018      	b.n	8014976 <USBH_HandleControl+0x19e>
    break;
    
  case CTRL_STATUS_OUT_WAIT: 
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_out);  
 8014944:	4628      	mov	r0, r5
 8014946:	7961      	ldrb	r1, [r4, #5]
 8014948:	f001 fdf2 	bl	8016530 <HCD_GetURB_State>
    if  (URB_Status == URB_DONE)
 801494c:	2801      	cmp	r0, #1
 801494e:	d103      	bne.n	8014958 <USBH_HandleControl+0x180>
    { 
      phost->gState =   phost->gStateBkp; 
 8014950:	7860      	ldrb	r0, [r4, #1]
      phost->Control.state = CTRL_COMPLETE; 
 8014952:	230d      	movs	r3, #13
  case CTRL_STATUS_OUT_WAIT: 
    
    URB_Status = HCD_GetURB_State(pdev , phost->Control.hc_num_out);  
    if  (URB_Status == URB_DONE)
    { 
      phost->gState =   phost->gStateBkp; 
 8014954:	7020      	strb	r0, [r4, #0]
 8014956:	e00e      	b.n	8014976 <USBH_HandleControl+0x19e>
      phost->Control.state = CTRL_COMPLETE; 
    }
    else if  (URB_Status == URB_NOTREADY)
 8014958:	2802      	cmp	r0, #2
 801495a:	d101      	bne.n	8014960 <USBH_HandleControl+0x188>
    { 
      phost->Control.state = CTRL_STATUS_OUT;
 801495c:	2309      	movs	r3, #9
 801495e:	e00a      	b.n	8014976 <USBH_HandleControl+0x19e>
    }      
    else if (URB_Status == URB_ERROR)
 8014960:	2803      	cmp	r0, #3
 8014962:	d110      	bne.n	8014986 <USBH_HandleControl+0x1ae>
    {
      phost->Control.state = CTRL_ERROR;      
 8014964:	230b      	movs	r3, #11
 8014966:	e006      	b.n	8014976 <USBH_HandleControl+0x19e>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be 
    required to clear the halt or error condition if the next Setup PID is not 
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8014968:	7ba2      	ldrb	r2, [r4, #14]
 801496a:	1c53      	adds	r3, r2, #1
 801496c:	b2d8      	uxtb	r0, r3
 801496e:	2802      	cmp	r0, #2
 8014970:	73a0      	strb	r0, [r4, #14]
 8014972:	d802      	bhi.n	801497a <USBH_HandleControl+0x1a2>
    {
      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP; 
 8014974:	2301      	movs	r3, #1
 8014976:	7723      	strb	r3, [r4, #28]
 8014978:	e005      	b.n	8014986 <USBH_HandleControl+0x1ae>
    }
    else
    {
      phost->Control.status = CTRL_FAIL;
      phost->gState =   phost->gStateBkp;
 801497a:	7862      	ldrb	r2, [r4, #1]
      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP; 
    }
    else
    {
      phost->Control.status = CTRL_FAIL;
 801497c:	2108      	movs	r1, #8
 801497e:	74a1      	strb	r1, [r4, #18]
      phost->gState =   phost->gStateBkp;
 8014980:	7022      	strb	r2, [r4, #0]
      
      status = USBH_FAIL;
 8014982:	2002      	movs	r0, #2
 8014984:	bd70      	pop	{r4, r5, r6, pc}
  */
USBH_Status USBH_HandleControl (USB_OTG_CORE_HANDLE *pdev, USBH_HOST *phost)
{
  uint8_t direction;  
  static uint16_t timeout = 0;
  USBH_Status status = USBH_OK;
 8014986:	2000      	movs	r0, #0
    
  default:
    break;
  }
  return status;
}
 8014988:	bd70      	pop	{r4, r5, r6, pc}
 801498a:	bf00      	nop
 801498c:	200005a8 	.word	0x200005a8

08014990 <USBH_Process>:
*         USB Host core main state machine process
* @param  None 
* @retval None
*/
void USBH_Process(USB_OTG_CORE_HANDLE *pdev , USBH_HOST *phost)
{
 8014990:	b570      	push	{r4, r5, r6, lr}
 8014992:	b094      	sub	sp, #80	; 0x50
  volatile USBH_Status status = USBH_FAIL;
 8014994:	2602      	movs	r6, #2
*         USB Host core main state machine process
* @param  None 
* @retval None
*/
void USBH_Process(USB_OTG_CORE_HANDLE *pdev , USBH_HOST *phost)
{
 8014996:	4605      	mov	r5, r0
 8014998:	460c      	mov	r4, r1
  volatile USBH_Status status = USBH_FAIL;
 801499a:	f88d 600f 	strb.w	r6, [sp, #15]
  
  
  /* check for Host port events */
  if ((HCD_IsDeviceConnected(pdev) == 0)&& (phost->gState != HOST_IDLE)) 
 801499e:	f001 fdc0 	bl	8016522 <HCD_IsDeviceConnected>
 80149a2:	b920      	cbnz	r0, 80149ae <USBH_Process+0x1e>
 80149a4:	7823      	ldrb	r3, [r4, #0]
 80149a6:	b113      	cbz	r3, 80149ae <USBH_Process+0x1e>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED) 
 80149a8:	42b3      	cmp	r3, r6
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 80149aa:	bf18      	it	ne
 80149ac:	7026      	strbne	r6, [r4, #0]
    }
  }
    
  switch (phost->gState)
 80149ae:	7820      	ldrb	r0, [r4, #0]
 80149b0:	280a      	cmp	r0, #10
 80149b2:	f200 818b 	bhi.w	8014ccc <USBH_Process+0x33c>
 80149b6:	e8df f010 	tbh	[pc, r0, lsl #1]
 80149ba:	000b      	.short	0x000b
 80149bc:	01720017 	.word	0x01720017
 80149c0:	00530189 	.word	0x00530189
 80149c4:	01510145 	.word	0x01510145
 80149c8:	0136015e 	.word	0x0136015e
 80149cc:	01630189 	.word	0x01630189
  {
  
  case HOST_IDLE :
    
    if (HCD_IsDeviceConnected(pdev))  
 80149d0:	4628      	mov	r0, r5
 80149d2:	f001 fda6 	bl	8016522 <HCD_IsDeviceConnected>
 80149d6:	2800      	cmp	r0, #0
 80149d8:	f000 8178 	beq.w	8014ccc <USBH_Process+0x33c>
    {
      phost->gState = HOST_DEV_ATTACHED;
 80149dc:	2201      	movs	r2, #1
 80149de:	7022      	strb	r2, [r4, #0]
      USB_OTG_BSP_mDelay(100);
 80149e0:	2064      	movs	r0, #100	; 0x64
 80149e2:	f7fd ffaa 	bl	801293a <USB_OTG_BSP_mDelay>
 80149e6:	e171      	b.n	8014ccc <USBH_Process+0x33c>
    }
    break;
   
  case HOST_DEV_ATTACHED :
    
    phost->usr_cb->DeviceAttached();
 80149e8:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 80149ec:	68b0      	ldr	r0, [r6, #8]
 80149ee:	4780      	blx	r0
    phost->Control.hc_num_out = USBH_Alloc_Channel(pdev, 0x00);
 80149f0:	2100      	movs	r1, #0
 80149f2:	4628      	mov	r0, r5
 80149f4:	f000 f9b5 	bl	8014d62 <USBH_Alloc_Channel>
    phost->Control.hc_num_in = USBH_Alloc_Channel(pdev, 0x80);  
 80149f8:	2180      	movs	r1, #128	; 0x80
    break;
   
  case HOST_DEV_ATTACHED :
    
    phost->usr_cb->DeviceAttached();
    phost->Control.hc_num_out = USBH_Alloc_Channel(pdev, 0x00);
 80149fa:	7160      	strb	r0, [r4, #5]
    phost->Control.hc_num_in = USBH_Alloc_Channel(pdev, 0x80);  
 80149fc:	4628      	mov	r0, r5
 80149fe:	f000 f9b0 	bl	8014d62 <USBH_Alloc_Channel>
 8014a02:	7120      	strb	r0, [r4, #4]
  
    /* Reset USB Device */
    if ( HCD_ResetPort(pdev) == 0)
 8014a04:	4628      	mov	r0, r5
 8014a06:	f001 fd87 	bl	8016518 <HCD_ResetPort>
 8014a0a:	4606      	mov	r6, r0
 8014a0c:	2800      	cmp	r0, #0
 8014a0e:	f040 815d 	bne.w	8014ccc <USBH_Process+0x33c>
    {
      phost->usr_cb->ResetDevice();
 8014a12:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8014a16:	68cb      	ldr	r3, [r1, #12]
 8014a18:	4798      	blx	r3
      /*  Wait for USB USBH_ISR_PrtEnDisableChange()  
      Host is Now ready to start the Enumeration 
      */
      
      phost->device_prop.speed = HCD_GetCurrentSpeed(pdev);
 8014a1a:	4628      	mov	r0, r5
 8014a1c:	f001 fd76 	bl	801650c <HCD_GetCurrentSpeed>
      
      phost->gState = HOST_ENUMERATION;
      phost->usr_cb->DeviceSpeedDetected(phost->device_prop.speed);
 8014a20:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
      phost->usr_cb->ResetDevice();
      /*  Wait for USB USBH_ISR_PrtEnDisableChange()  
      Host is Now ready to start the Enumeration 
      */
      
      phost->device_prop.speed = HCD_GetCurrentSpeed(pdev);
 8014a24:	b2c0      	uxtb	r0, r0
 8014a26:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
      
      phost->gState = HOST_ENUMERATION;
 8014a2a:	2204      	movs	r2, #4
 8014a2c:	7022      	strb	r2, [r4, #0]
      phost->usr_cb->DeviceSpeedDetected(phost->device_prop.speed);
 8014a2e:	698b      	ldr	r3, [r1, #24]
 8014a30:	4798      	blx	r3
        
      /* Open Control pipes */
      USBH_Open_Channel (pdev,
 8014a32:	79a0      	ldrb	r0, [r4, #6]
 8014a34:	7921      	ldrb	r1, [r4, #4]
 8014a36:	f894 2020 	ldrb.w	r2, [r4, #32]
 8014a3a:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8014a3e:	9001      	str	r0, [sp, #4]
 8014a40:	9600      	str	r6, [sp, #0]
 8014a42:	4628      	mov	r0, r5
 8014a44:	f000 f946 	bl	8014cd4 <USBH_Open_Channel>
                           phost->device_prop.speed,
                           EP_TYPE_CTRL,
                           phost->Control.ep0size); 
      
      /* Open Control pipes */
      USBH_Open_Channel (pdev,
 8014a48:	79a0      	ldrb	r0, [r4, #6]
 8014a4a:	7961      	ldrb	r1, [r4, #5]
 8014a4c:	9001      	str	r0, [sp, #4]
 8014a4e:	f894 2020 	ldrb.w	r2, [r4, #32]
 8014a52:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8014a56:	9600      	str	r6, [sp, #0]
 8014a58:	4628      	mov	r0, r5
 8014a5a:	f000 f93b 	bl	8014cd4 <USBH_Open_Channel>
 8014a5e:	e135      	b.n	8014ccc <USBH_Process+0x33c>
static USBH_Status USBH_HandleEnum(USB_OTG_CORE_HANDLE *pdev, USBH_HOST *phost)
{
  USBH_Status Status = USBH_BUSY;  
  uint8_t Local_Buffer[64];
  
  switch (phost->EnumState)
 8014a60:	78a3      	ldrb	r3, [r4, #2]
 8014a62:	2b09      	cmp	r3, #9
 8014a64:	f200 8132 	bhi.w	8014ccc <USBH_Process+0x33c>
 8014a68:	e8df f013 	tbh	[pc, r3, lsl #1]
 8014a6c:	002c000a 	.word	0x002c000a
 8014a70:	0064003c 	.word	0x0064003c
 8014a74:	0082006e 	.word	0x0082006e
 8014a78:	00b4009b 	.word	0x00b4009b
 8014a7c:	00d700cc 	.word	0x00d700cc
  {
  case ENUM_IDLE:  
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(pdev , phost, 8) == USBH_OK)
 8014a80:	4628      	mov	r0, r5
 8014a82:	4621      	mov	r1, r4
 8014a84:	2208      	movs	r2, #8
 8014a86:	f000 fa87 	bl	8014f98 <USBH_Get_DevDesc>
 8014a8a:	4606      	mov	r6, r0
 8014a8c:	2800      	cmp	r0, #0
 8014a8e:	f040 811d 	bne.w	8014ccc <USBH_Process+0x33c>
    {
      phost->Control.ep0size = phost->device_prop.Dev_Desc.bMaxPacketSize;
 8014a92:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
 8014a96:	71a0      	strb	r0, [r4, #6]
      
      /* Issue Reset  */
      HCD_ResetPort(pdev);
 8014a98:	4628      	mov	r0, r5
 8014a9a:	f001 fd3d 	bl	8016518 <HCD_ResetPort>
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
      
      /* modify control channels configuration for MaxPacket size */
      USBH_Modify_Channel (pdev,
 8014a9e:	79a2      	ldrb	r2, [r4, #6]
 8014aa0:	7961      	ldrb	r1, [r4, #5]
 8014aa2:	9201      	str	r2, [sp, #4]
    {
      phost->Control.ep0size = phost->device_prop.Dev_Desc.bMaxPacketSize;
      
      /* Issue Reset  */
      HCD_ResetPort(pdev);
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8014aa4:	2301      	movs	r3, #1
 8014aa6:	70a3      	strb	r3, [r4, #2]
      
      /* modify control channels configuration for MaxPacket size */
      USBH_Modify_Channel (pdev,
 8014aa8:	4632      	mov	r2, r6
 8014aaa:	4633      	mov	r3, r6
 8014aac:	9600      	str	r6, [sp, #0]
 8014aae:	4628      	mov	r0, r5
 8014ab0:	f000 f93a 	bl	8014d28 <USBH_Modify_Channel>
                           0,
                           0,
                           0,
                           phost->Control.ep0size);
      
      USBH_Modify_Channel (pdev,
 8014ab4:	79a0      	ldrb	r0, [r4, #6]
 8014ab6:	7921      	ldrb	r1, [r4, #4]
 8014ab8:	9001      	str	r0, [sp, #4]
 8014aba:	9600      	str	r6, [sp, #0]
 8014abc:	4628      	mov	r0, r5
 8014abe:	4632      	mov	r2, r6
 8014ac0:	4633      	mov	r3, r6
 8014ac2:	e034      	b.n	8014b2e <USBH_Process+0x19e>
    }
    break;
    
  case ENUM_GET_FULL_DEV_DESC:  
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(pdev, phost, USB_DEVICE_DESC_SIZE)\
 8014ac4:	4628      	mov	r0, r5
 8014ac6:	4621      	mov	r1, r4
 8014ac8:	2212      	movs	r2, #18
 8014aca:	f000 fa65 	bl	8014f98 <USBH_Get_DevDesc>
 8014ace:	2800      	cmp	r0, #0
 8014ad0:	f040 80fc 	bne.w	8014ccc <USBH_Process+0x33c>
      == USBH_OK)
    {
      /* user callback for device descriptor available */
      phost->usr_cb->DeviceDescAvailable(&phost->device_prop.Dev_Desc);      
 8014ad4:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8014ad8:	f104 0022 	add.w	r0, r4, #34	; 0x22
 8014adc:	69ca      	ldr	r2, [r1, #28]
 8014ade:	4790      	blx	r2
      phost->EnumState = ENUM_SET_ADDR;
 8014ae0:	2002      	movs	r0, #2
 8014ae2:	e098      	b.n	8014c16 <USBH_Process+0x286>
    }
    break;
   
  case ENUM_SET_ADDR: 
    /* set address */
    if ( USBH_SetAddress(pdev, phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8014ae4:	4628      	mov	r0, r5
 8014ae6:	4621      	mov	r1, r4
 8014ae8:	2201      	movs	r2, #1
 8014aea:	f000 fb99 	bl	8015220 <USBH_SetAddress>
 8014aee:	4606      	mov	r6, r0
 8014af0:	2800      	cmp	r0, #0
 8014af2:	f040 80eb 	bne.w	8014ccc <USBH_Process+0x33c>
    {
      USB_OTG_BSP_mDelay(2);
 8014af6:	2002      	movs	r0, #2
 8014af8:	f7fd ff1f 	bl	801293a <USB_OTG_BSP_mDelay>
      phost->device_prop.address = USBH_DEVICE_ADDRESS;
 8014afc:	2101      	movs	r1, #1
      
      /* user callback for device address assigned */
      phost->usr_cb->DeviceAddressAssigned();
 8014afe:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
  case ENUM_SET_ADDR: 
    /* set address */
    if ( USBH_SetAddress(pdev, phost, USBH_DEVICE_ADDRESS) == USBH_OK)
    {
      USB_OTG_BSP_mDelay(2);
      phost->device_prop.address = USBH_DEVICE_ADDRESS;
 8014b02:	f884 1020 	strb.w	r1, [r4, #32]
      
      /* user callback for device address assigned */
      phost->usr_cb->DeviceAddressAssigned();
 8014b06:	6a02      	ldr	r2, [r0, #32]
 8014b08:	4790      	blx	r2
      phost->EnumState = ENUM_GET_CFG_DESC;
 8014b0a:	2303      	movs	r3, #3
 8014b0c:	70a3      	strb	r3, [r4, #2]
      
      /* modify control channels to update device address */
      USBH_Modify_Channel (pdev,
 8014b0e:	7921      	ldrb	r1, [r4, #4]
 8014b10:	f894 2020 	ldrb.w	r2, [r4, #32]
 8014b14:	9600      	str	r6, [sp, #0]
 8014b16:	4633      	mov	r3, r6
 8014b18:	9601      	str	r6, [sp, #4]
 8014b1a:	4628      	mov	r0, r5
 8014b1c:	f000 f904 	bl	8014d28 <USBH_Modify_Channel>
                           phost->device_prop.address,
                           0,
                           0,
                           0);
      
      USBH_Modify_Channel (pdev,
 8014b20:	7961      	ldrb	r1, [r4, #5]
 8014b22:	f894 2020 	ldrb.w	r2, [r4, #32]
 8014b26:	9600      	str	r6, [sp, #0]
 8014b28:	9601      	str	r6, [sp, #4]
 8014b2a:	4628      	mov	r0, r5
 8014b2c:	4633      	mov	r3, r6
 8014b2e:	f000 f8fb 	bl	8014d28 <USBH_Modify_Channel>
 8014b32:	e0cb      	b.n	8014ccc <USBH_Process+0x33c>
    }
    break;
    
  case ENUM_GET_CFG_DESC:  
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(pdev, 
 8014b34:	4628      	mov	r0, r5
 8014b36:	4621      	mov	r1, r4
 8014b38:	2209      	movs	r2, #9
 8014b3a:	f000 fa83 	bl	8015044 <USBH_Get_CfgDesc>
 8014b3e:	2800      	cmp	r0, #0
 8014b40:	f040 80c4 	bne.w	8014ccc <USBH_Process+0x33c>
                          phost,
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8014b44:	2004      	movs	r0, #4
 8014b46:	e066      	b.n	8014c16 <USBH_Process+0x286>
    }
    break;
    
  case ENUM_GET_FULL_CFG_DESC:  
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(pdev, 
 8014b48:	4628      	mov	r0, r5
 8014b4a:	4621      	mov	r1, r4
 8014b4c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8014b4e:	f000 fa79 	bl	8015044 <USBH_Get_CfgDesc>
 8014b52:	2800      	cmp	r0, #0
 8014b54:	f040 80ba 	bne.w	8014ccc <USBH_Process+0x33c>
                         phost,
                         phost->device_prop.Cfg_Desc.wTotalLength) == USBH_OK)
    {
      /* User callback for configuration descriptors available */
      phost->usr_cb->ConfigurationDescAvailable(&phost->device_prop.Cfg_Desc,
 8014b58:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8014b5c:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8014b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b62:	f104 013e 	add.w	r1, r4, #62	; 0x3e
 8014b66:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014b6a:	4798      	blx	r3
                                                      phost->device_prop.Itf_Desc,
                                                      phost->device_prop.Ep_Desc[0]);
      
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8014b6c:	2005      	movs	r0, #5
 8014b6e:	e052      	b.n	8014c16 <USBH_Process+0x286>
    }
    break;
    
  case ENUM_GET_MFC_STRING_DESC:  
    if (phost->device_prop.Dev_Desc.iManufacturer != 0)
 8014b70:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8014b74:	b172      	cbz	r2, 8014b94 <USBH_Process+0x204>
    { /* Check that Manufacturer String is available */
      
      if ( USBH_Get_StringDesc(pdev,
 8014b76:	20ff      	movs	r0, #255	; 0xff
 8014b78:	9000      	str	r0, [sp, #0]
 8014b7a:	4621      	mov	r1, r4
 8014b7c:	4628      	mov	r0, r5
 8014b7e:	ab04      	add	r3, sp, #16
 8014b80:	f000 f9e2 	bl	8014f48 <USBH_Get_StringDesc>
 8014b84:	2800      	cmp	r0, #0
 8014b86:	f040 80a1 	bne.w	8014ccc <USBH_Process+0x33c>
                               phost->device_prop.Dev_Desc.iManufacturer, 
                               Local_Buffer , 
                               0xff) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        phost->usr_cb->ManufacturerString(Local_Buffer);
 8014b8a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8014b8e:	a804      	add	r0, sp, #16
 8014b90:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8014b92:	e003      	b.n	8014b9c <USBH_Process+0x20c>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
      }
    }
    else
    {
      phost->usr_cb->ManufacturerString("N/A");      
 8014b94:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8014b98:	484d      	ldr	r0, [pc, #308]	; (8014cd0 <USBH_Process+0x340>)
 8014b9a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8014b9c:	4788      	blx	r1
      phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8014b9e:	2006      	movs	r0, #6
 8014ba0:	e039      	b.n	8014c16 <USBH_Process+0x286>
    }
    break;
    
  case ENUM_GET_PRODUCT_STRING_DESC:   
    if (phost->device_prop.Dev_Desc.iProduct != 0)
 8014ba2:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8014ba6:	b172      	cbz	r2, 8014bc6 <USBH_Process+0x236>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(pdev,
 8014ba8:	20ff      	movs	r0, #255	; 0xff
 8014baa:	9000      	str	r0, [sp, #0]
 8014bac:	4621      	mov	r1, r4
 8014bae:	4628      	mov	r0, r5
 8014bb0:	ab04      	add	r3, sp, #16
 8014bb2:	f000 f9c9 	bl	8014f48 <USBH_Get_StringDesc>
 8014bb6:	2800      	cmp	r0, #0
 8014bb8:	f040 8088 	bne.w	8014ccc <USBH_Process+0x33c>
                               phost->device_prop.Dev_Desc.iProduct, 
                               Local_Buffer, 
                               0xff) == USBH_OK)
      {
        /* User callback for Product string */
        phost->usr_cb->ProductString(Local_Buffer);
 8014bbc:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8014bc0:	a804      	add	r0, sp, #16
 8014bc2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8014bc4:	e003      	b.n	8014bce <USBH_Process+0x23e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
      }
    }
    else
    {
      phost->usr_cb->ProductString("N/A");
 8014bc6:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8014bca:	4841      	ldr	r0, [pc, #260]	; (8014cd0 <USBH_Process+0x340>)
 8014bcc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8014bce:	4788      	blx	r1
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8014bd0:	2007      	movs	r0, #7
 8014bd2:	e020      	b.n	8014c16 <USBH_Process+0x286>
    } 
    break;
    
  case ENUM_GET_SERIALNUM_STRING_DESC:   
    if (phost->device_prop.Dev_Desc.iSerialNumber != 0)
 8014bd4:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
 8014bd8:	b16a      	cbz	r2, 8014bf6 <USBH_Process+0x266>
    { /* Check that Serial number string is available */    
      if ( USBH_Get_StringDesc(pdev, 
 8014bda:	20ff      	movs	r0, #255	; 0xff
 8014bdc:	9000      	str	r0, [sp, #0]
 8014bde:	4621      	mov	r1, r4
 8014be0:	4628      	mov	r0, r5
 8014be2:	ab04      	add	r3, sp, #16
 8014be4:	f000 f9b0 	bl	8014f48 <USBH_Get_StringDesc>
 8014be8:	2800      	cmp	r0, #0
 8014bea:	d16f      	bne.n	8014ccc <USBH_Process+0x33c>
                               phost->device_prop.Dev_Desc.iSerialNumber, 
                               Local_Buffer, 
                               0xff) == USBH_OK)
      {
        /* User callback for Serial number string */
        phost->usr_cb->SerialNumString(Local_Buffer);
 8014bec:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8014bf0:	a804      	add	r0, sp, #16
 8014bf2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8014bf4:	e003      	b.n	8014bfe <USBH_Process+0x26e>
        phost->EnumState = ENUM_SET_CONFIGURATION;
      }
    }
    else
    {
      phost->usr_cb->SerialNumString("N/A");      
 8014bf6:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8014bfa:	4835      	ldr	r0, [pc, #212]	; (8014cd0 <USBH_Process+0x340>)
 8014bfc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8014bfe:	4788      	blx	r1
      phost->EnumState = ENUM_SET_CONFIGURATION;
 8014c00:	2008      	movs	r0, #8
 8014c02:	e008      	b.n	8014c16 <USBH_Process+0x286>
    }  
    break;
      
  case ENUM_SET_CONFIGURATION:
    /* set configuration  (default config) */
    if (USBH_SetCfg(pdev, 
 8014c04:	4628      	mov	r0, r5
 8014c06:	4621      	mov	r1, r4
 8014c08:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8014c0c:	f000 fb16 	bl	801523c <USBH_SetCfg>
 8014c10:	2800      	cmp	r0, #0
 8014c12:	d15b      	bne.n	8014ccc <USBH_Process+0x33c>
                    phost,
                    phost->device_prop.Cfg_Desc.bConfigurationValue) == USBH_OK)
    {
      phost->EnumState = ENUM_DEV_CONFIGURED;
 8014c14:	2009      	movs	r0, #9
 8014c16:	70a0      	strb	r0, [r4, #2]
 8014c18:	e058      	b.n	8014ccc <USBH_Process+0x33c>
    if ( USBH_HandleEnum(pdev , phost) == USBH_OK)
    { 
      /* The function shall return USBH_OK when full enumeration is complete */
      
      /* user callback for end of device basic enumeration */
      phost->usr_cb->EnumerationDone();
 8014c1a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8014c1e:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8014c20:	4790      	blx	r2
      
      phost->gState  = HOST_USR_INPUT;    
 8014c22:	2208      	movs	r2, #8
 8014c24:	e051      	b.n	8014cca <USBH_Process+0x33a>
    }
    break;
    
  case HOST_USR_INPUT:    
    /*The function should return user response true to move to class state */
    if ( phost->usr_cb->UserInput() == USBH_USR_RESP_OK)
 8014c26:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8014c2a:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 8014c2c:	4790      	blx	r2
 8014c2e:	2801      	cmp	r0, #1
 8014c30:	d14c      	bne.n	8014ccc <USBH_Process+0x33c>
    {
      if((phost->class_cb->Init(pdev, phost))\
 8014c32:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8014c34:	4628      	mov	r0, r5
 8014c36:	681a      	ldr	r2, [r3, #0]
 8014c38:	4621      	mov	r1, r4
 8014c3a:	4790      	blx	r2
 8014c3c:	2800      	cmp	r0, #0
 8014c3e:	d145      	bne.n	8014ccc <USBH_Process+0x33c>
        == USBH_OK)
      {
        phost->gState  = HOST_CLASS_REQUEST;     
 8014c40:	2205      	movs	r2, #5
 8014c42:	e042      	b.n	8014cca <USBH_Process+0x33a>
    }   
    break;
    
  case HOST_CLASS_REQUEST:  
    /* process class standard contol requests state machine */ 
    status = phost->class_cb->Requests(pdev, phost);
 8014c44:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8014c46:	4628      	mov	r0, r5
 8014c48:	688a      	ldr	r2, [r1, #8]
 8014c4a:	4621      	mov	r1, r4
 8014c4c:	4790      	blx	r2
 8014c4e:	f88d 000f 	strb.w	r0, [sp, #15]
    
     if(status == USBH_OK)
 8014c52:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8014c56:	b940      	cbnz	r0, 8014c6a <USBH_Process+0x2da>
     {
       phost->gState  = HOST_CLASS;
 8014c58:	2206      	movs	r2, #6
 8014c5a:	e036      	b.n	8014cca <USBH_Process+0x33a>
 
    
    break;    
  case HOST_CLASS:   
    /* process class state machine */
    status = phost->class_cb->Machine(pdev, phost);
 8014c5c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8014c5e:	4621      	mov	r1, r4
 8014c60:	68c3      	ldr	r3, [r0, #12]
 8014c62:	4628      	mov	r0, r5
 8014c64:	4798      	blx	r3
 8014c66:	f88d 000f 	strb.w	r0, [sp, #15]
    USBH_ErrorHandle(phost, status);
 8014c6a:	f89d 100f 	ldrb.w	r1, [sp, #15]
 8014c6e:	4620      	mov	r0, r4
 8014c70:	f7ff fd9c 	bl	80147ac <USBH_ErrorHandle>
    break;       
 8014c74:	e02a      	b.n	8014ccc <USBH_Process+0x33c>
    
  case HOST_CTRL_XFER:
    /* process control transfer state machine */
    USBH_HandleControl(pdev, phost);    
 8014c76:	4628      	mov	r0, r5
 8014c78:	4621      	mov	r1, r4
 8014c7a:	f7ff fdad 	bl	80147d8 <USBH_HandleControl>
    break;
 8014c7e:	e025      	b.n	8014ccc <USBH_Process+0x33c>
  case HOST_SUSPENDED:
    break;
  
  case HOST_ERROR_STATE:
    /* Re-Initilaize Host for new Enumeration */
    USBH_DeInit(pdev, phost);
 8014c80:	4621      	mov	r1, r4
 8014c82:	4628      	mov	r0, r5
 8014c84:	f7ff fd58 	bl	8014738 <USBH_DeInit>
    phost->usr_cb->DeInit();
 8014c88:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8014c8c:	684b      	ldr	r3, [r1, #4]
 8014c8e:	4798      	blx	r3
    phost->class_cb->DeInit(pdev, &phost->device_prop);
 8014c90:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8014c92:	f104 0120 	add.w	r1, r4, #32
 8014c96:	6842      	ldr	r2, [r0, #4]
 8014c98:	4628      	mov	r0, r5
 8014c9a:	4790      	blx	r2
    break;
 8014c9c:	e016      	b.n	8014ccc <USBH_Process+0x33c>
    
  case HOST_DEV_DISCONNECTED :
    
    /* Manage User disconnect operations*/
    phost->usr_cb->DeviceDisconnected();
 8014c9e:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8014ca2:	690b      	ldr	r3, [r1, #16]
 8014ca4:	4798      	blx	r3
    
    /* Re-Initilaize Host for new Enumeration */
    USBH_DeInit(pdev, phost);
 8014ca6:	4621      	mov	r1, r4
 8014ca8:	4628      	mov	r0, r5
 8014caa:	f7ff fd45 	bl	8014738 <USBH_DeInit>
    phost->usr_cb->DeInit();
 8014cae:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8014cb2:	6850      	ldr	r0, [r2, #4]
 8014cb4:	4780      	blx	r0
    phost->class_cb->DeInit(pdev, &phost->device_prop); 
 8014cb6:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8014cb8:	4628      	mov	r0, r5
 8014cba:	684b      	ldr	r3, [r1, #4]
 8014cbc:	f104 0120 	add.w	r1, r4, #32
 8014cc0:	4798      	blx	r3
    USBH_DeAllocate_AllChannel(pdev);  
 8014cc2:	4628      	mov	r0, r5
 8014cc4:	f000 f872 	bl	8014dac <USBH_DeAllocate_AllChannel>
    phost->gState = HOST_IDLE;
 8014cc8:	2200      	movs	r2, #0
 8014cca:	7022      	strb	r2, [r4, #0]
    
  default :
    break;
  }

}
 8014ccc:	b014      	add	sp, #80	; 0x50
 8014cce:	bd70      	pop	{r4, r5, r6, pc}
 8014cd0:	080182b7 	.word	0x080182b7

08014cd4 <USBH_Open_Channel>:
                            uint8_t hc_num,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8014cd4:	b570      	push	{r4, r5, r6, lr}

  pdev->host.hc[hc_num].ep_num = pdev->host.channel[hc_num]& 0x7F;
 8014cd6:	eb00 0441 	add.w	r4, r0, r1, lsl #1
 8014cda:	f8b4 5a70 	ldrh.w	r5, [r4, #2672]	; 0xa70
 8014cde:	eb00 1441 	add.w	r4, r0, r1, lsl #5
 8014ce2:	f005 067f 	and.w	r6, r5, #127	; 0x7f
  pdev->host.hc[hc_num].ep_is_in = (pdev->host.channel[hc_num] & 0x80 ) == 0x80;  
  pdev->host.hc[hc_num].dev_addr = dev_address;  
 8014ce6:	f884 2890 	strb.w	r2, [r4, #2192]	; 0x890
  pdev->host.hc[hc_num].ep_type = ep_type;  
 8014cea:	f89d 2010 	ldrb.w	r2, [sp, #16]
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{

  pdev->host.hc[hc_num].ep_num = pdev->host.channel[hc_num]& 0x7F;
 8014cee:	f884 6891 	strb.w	r6, [r4, #2193]	; 0x891
  pdev->host.hc[hc_num].ep_is_in = (pdev->host.channel[hc_num] & 0x80 ) == 0x80;  
 8014cf2:	f3c5 15c0 	ubfx	r5, r5, #7, #1
 8014cf6:	f884 5892 	strb.w	r5, [r4, #2194]	; 0x892
  pdev->host.hc[hc_num].dev_addr = dev_address;  
  pdev->host.hc[hc_num].ep_type = ep_type;  
 8014cfa:	f884 2895 	strb.w	r2, [r4, #2197]	; 0x895
  pdev->host.hc[hc_num].max_packet = mps; 
 8014cfe:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  pdev->host.hc[hc_num].speed = speed; 
 8014d02:	f884 3893 	strb.w	r3, [r4, #2195]	; 0x893
  pdev->host.hc[hc_num].toggle_in = 0; 
 8014d06:	f101 0245 	add.w	r2, r1, #69	; 0x45
 8014d0a:	eb00 1242 	add.w	r2, r0, r2, lsl #5

  pdev->host.hc[hc_num].ep_num = pdev->host.channel[hc_num]& 0x7F;
  pdev->host.hc[hc_num].ep_is_in = (pdev->host.channel[hc_num] & 0x80 ) == 0x80;  
  pdev->host.hc[hc_num].dev_addr = dev_address;  
  pdev->host.hc[hc_num].ep_type = ep_type;  
  pdev->host.hc[hc_num].max_packet = mps; 
 8014d0e:	f8a4 5896 	strh.w	r5, [r4, #2198]	; 0x896
  pdev->host.hc[hc_num].speed = speed; 
  pdev->host.hc[hc_num].toggle_in = 0; 
 8014d12:	2500      	movs	r5, #0
 8014d14:	7215      	strb	r5, [r2, #8]
  pdev->host.hc[hc_num].toggle_out = 0;   
 8014d16:	7255      	strb	r5, [r2, #9]
  if(speed == HPRT0_PRTSPD_HIGH_SPEED)
 8014d18:	b913      	cbnz	r3, 8014d20 <USBH_Open_Channel+0x4c>
  {
    pdev->host.hc[hc_num].do_ping = 1;
 8014d1a:	2301      	movs	r3, #1
 8014d1c:	f884 3894 	strb.w	r3, [r4, #2196]	; 0x894
  }
  
  USB_OTG_HC_Init(pdev, hc_num) ;
 8014d20:	f000 fcde 	bl	80156e0 <USB_OTG_HC_Init>
  
  return HC_OK; 

}
 8014d24:	2000      	movs	r0, #0
 8014d26:	bd70      	pop	{r4, r5, r6, pc}

08014d28 <USBH_Modify_Channel>:
                            uint8_t hc_num,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8014d28:	b570      	push	{r4, r5, r6, lr}
 8014d2a:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  
  if(dev_address != 0)
 8014d2e:	b11a      	cbz	r2, 8014d38 <USBH_Modify_Channel+0x10>
  {
    pdev->host.hc[hc_num].dev_addr = dev_address;  
 8014d30:	eb00 1541 	add.w	r5, r0, r1, lsl #5
 8014d34:	f885 2890 	strb.w	r2, [r5, #2192]	; 0x890
  }
  
  if((pdev->host.hc[hc_num].max_packet != mps) && (mps != 0))
 8014d38:	014a      	lsls	r2, r1, #5
 8014d3a:	1885      	adds	r5, r0, r2
 8014d3c:	f8b5 6896 	ldrh.w	r6, [r5, #2198]	; 0x896
 8014d40:	42a6      	cmp	r6, r4
 8014d42:	d002      	beq.n	8014d4a <USBH_Modify_Channel+0x22>
 8014d44:	b10c      	cbz	r4, 8014d4a <USBH_Modify_Channel+0x22>
  {
    pdev->host.hc[hc_num].max_packet = mps; 
 8014d46:	f8a5 4896 	strh.w	r4, [r5, #2198]	; 0x896
  }
  
  if((pdev->host.hc[hc_num].speed != speed ) && (speed != 0 )) 
 8014d4a:	1882      	adds	r2, r0, r2
 8014d4c:	f892 4893 	ldrb.w	r4, [r2, #2195]	; 0x893
 8014d50:	429c      	cmp	r4, r3
 8014d52:	d002      	beq.n	8014d5a <USBH_Modify_Channel+0x32>
 8014d54:	b10b      	cbz	r3, 8014d5a <USBH_Modify_Channel+0x32>
  {
    pdev->host.hc[hc_num].speed = speed; 
 8014d56:	f882 3893 	strb.w	r3, [r2, #2195]	; 0x893
  }
  
  USB_OTG_HC_Init(pdev, hc_num);
 8014d5a:	f000 fcc1 	bl	80156e0 <USB_OTG_HC_Init>
  return HC_OK; 

}
 8014d5e:	2000      	movs	r0, #0
 8014d60:	bd70      	pop	{r4, r5, r6, pc}

08014d62 <USBH_Alloc_Channel>:
  *         Allocate a new channel for the pipe
  * @param  ep_addr: End point for which the channel to be allocated
  * @retval hc_num: Host channel number
  */
uint8_t USBH_Alloc_Channel  (USB_OTG_CORE_HANDLE *pdev, uint8_t ep_addr)
{
 8014d62:	b510      	push	{r4, lr}
 8014d64:	2300      	movs	r3, #0
  * @brief  USBH_Alloc_Channel
  *         Allocate a new channel for the pipe
  * @param  ep_addr: End point for which the channel to be allocated
  * @retval hc_num: Host channel number
  */
uint8_t USBH_Alloc_Channel  (USB_OTG_CORE_HANDLE *pdev, uint8_t ep_addr)
 8014d66:	eb00 0443 	add.w	r4, r0, r3, lsl #1
 8014d6a:	b2da      	uxtb	r2, r3
{
  uint8_t idx = 0;
  
  for (idx = 0 ; idx < HC_MAX ; idx++)
  {
	if ((pdev->host.channel[idx] & HC_USED) == 0)
 8014d6c:	f9b4 4a70 	ldrsh.w	r4, [r4, #2672]	; 0xa70
 8014d70:	2c00      	cmp	r4, #0
 8014d72:	db08      	blt.n	8014d86 <USBH_Alloc_Channel+0x24>
  
  hc_num =  USBH_GetFreeChannel(pdev);

  if (hc_num != HC_ERROR)
  {
	pdev->host.channel[hc_num] = HC_USED | ep_addr;
 8014d74:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8014d78:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8014d7c:	ea6f 4351 	mvn.w	r3, r1, lsr #17
 8014d80:	f8a0 3a70 	strh.w	r3, [r0, #2672]	; 0xa70
 8014d84:	e004      	b.n	8014d90 <USBH_Alloc_Channel+0x2e>
 8014d86:	3301      	adds	r3, #1
  */
static uint16_t USBH_GetFreeChannel (USB_OTG_CORE_HANDLE *pdev)
{
  uint8_t idx = 0;
  
  for (idx = 0 ; idx < HC_MAX ; idx++)
 8014d88:	2b08      	cmp	r3, #8
 8014d8a:	d1ec      	bne.n	8014d66 <USBH_Alloc_Channel+0x4>
	if ((pdev->host.channel[idx] & HC_USED) == 0)
	{
	   return idx;
	} 
  }
  return HC_ERROR;
 8014d8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
  if (hc_num != HC_ERROR)
  {
	pdev->host.channel[hc_num] = HC_USED | ep_addr;
  }
  return hc_num;
}
 8014d90:	b2d0      	uxtb	r0, r2
 8014d92:	bd10      	pop	{r4, pc}

08014d94 <USBH_Free_Channel>:
  * @param  idx: Channel number to be freed 
  * @retval Status
  */
uint8_t USBH_Free_Channel  (USB_OTG_CORE_HANDLE *pdev, uint8_t idx)
{
   if(idx < HC_MAX)
 8014d94:	2907      	cmp	r1, #7
 8014d96:	d807      	bhi.n	8014da8 <USBH_Free_Channel+0x14>
   {
	 pdev->host.channel[idx] &= HC_USED_MASK;
 8014d98:	f201 5134 	addw	r1, r1, #1332	; 0x534
 8014d9c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8014da0:	8903      	ldrh	r3, [r0, #8]
 8014da2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8014da6:	8102      	strh	r2, [r0, #8]
   }
   return USBH_OK;
}
 8014da8:	2000      	movs	r0, #0
 8014daa:	4770      	bx	lr

08014dac <USBH_DeAllocate_AllChannel>:
{
   uint8_t idx;
   
   for (idx = 2; idx < HC_MAX ; idx ++)
   {
	 pdev->host.channel[idx] = 0;
 8014dac:	2300      	movs	r3, #0
 8014dae:	f8a0 3a74 	strh.w	r3, [r0, #2676]	; 0xa74
 8014db2:	f8a0 3a76 	strh.w	r3, [r0, #2678]	; 0xa76
 8014db6:	f8a0 3a78 	strh.w	r3, [r0, #2680]	; 0xa78
 8014dba:	f8a0 3a7a 	strh.w	r3, [r0, #2682]	; 0xa7a
 8014dbe:	f8a0 3a7c 	strh.w	r3, [r0, #2684]	; 0xa7c
 8014dc2:	f8a0 3a7e 	strh.w	r3, [r0, #2686]	; 0xa7e
   }
   return USBH_OK;
}
 8014dc6:	4618      	mov	r0, r3
 8014dc8:	4770      	bx	lr

08014dca <USBH_CtlReq>:
                             uint16_t            length)
{
  USBH_Status status;
  status = USBH_BUSY;
  
  switch (phost->RequestState)
 8014dca:	78c8      	ldrb	r0, [r1, #3]
 8014dcc:	2801      	cmp	r0, #1
  */
USBH_Status USBH_CtlReq     (USB_OTG_CORE_HANDLE *pdev, 
                             USBH_HOST           *phost, 
                             uint8_t             *buff,
                             uint16_t            length)
{
 8014dce:	b510      	push	{r4, lr}
  USBH_Status status;
  status = USBH_BUSY;
  
  switch (phost->RequestState)
 8014dd0:	d004      	beq.n	8014ddc <USBH_CtlReq+0x12>
 8014dd2:	2802      	cmp	r0, #2
 8014dd4:	f04f 0301 	mov.w	r3, #1
 8014dd8:	d119      	bne.n	8014e0e <USBH_CtlReq+0x44>
 8014dda:	e008      	b.n	8014dee <USBH_CtlReq+0x24>
                                           uint8_t* buff, 
                                           uint16_t length)
{
  
  /* Save Global State */
  phost->gStateBkp =   phost->gState; 
 8014ddc:	780c      	ldrb	r4, [r1, #0]
  
  /* Prepare the Transactions */
  phost->gState = HOST_CTRL_XFER;
  phost->Control.buff = buff; 
  phost->Control.length = length;
 8014dde:	818b      	strh	r3, [r1, #12]
                                           uint8_t* buff, 
                                           uint16_t length)
{
  
  /* Save Global State */
  phost->gStateBkp =   phost->gState; 
 8014de0:	704c      	strb	r4, [r1, #1]
  
  /* Prepare the Transactions */
  phost->gState = HOST_CTRL_XFER;
 8014de2:	2407      	movs	r4, #7
 8014de4:	700c      	strb	r4, [r1, #0]
  phost->Control.buff = buff; 
 8014de6:	608a      	str	r2, [r1, #8]
  phost->Control.length = length;
  phost->Control.state = CTRL_SETUP;  
 8014de8:	7708      	strb	r0, [r1, #28]
  switch (phost->RequestState)
  {
  case CMD_SEND:
    /* Start a SETUP transfer */
    USBH_SubmitSetupRequest(phost, buff, length);
    phost->RequestState = CMD_WAIT;
 8014dea:	2302      	movs	r3, #2
 8014dec:	e008      	b.n	8014e00 <USBH_CtlReq+0x36>
    status = USBH_BUSY;
    break;
    
  case CMD_WAIT:
     if (phost->Control.state == CTRL_COMPLETE ) 
 8014dee:	7f0a      	ldrb	r2, [r1, #28]
 8014df0:	2a0d      	cmp	r2, #13
 8014df2:	d103      	bne.n	8014dfc <USBH_CtlReq+0x32>
    {
      /* Commands successfully sent and Response Received  */       
      phost->RequestState = CMD_SEND;
      phost->Control.state =CTRL_IDLE;  
 8014df4:	2000      	movs	r0, #0
    
  case CMD_WAIT:
     if (phost->Control.state == CTRL_COMPLETE ) 
    {
      /* Commands successfully sent and Response Received  */       
      phost->RequestState = CMD_SEND;
 8014df6:	70cb      	strb	r3, [r1, #3]
      phost->Control.state =CTRL_IDLE;  
 8014df8:	7708      	strb	r0, [r1, #28]
 8014dfa:	bd10      	pop	{r4, pc}
      status = USBH_OK;      
    }
    else if  (phost->Control.state == CTRL_ERROR)
 8014dfc:	2a0b      	cmp	r2, #11
 8014dfe:	d101      	bne.n	8014e04 <USBH_CtlReq+0x3a>
    {
      /* Failure Mode */
      phost->RequestState = CMD_SEND;
 8014e00:	70cb      	strb	r3, [r1, #3]
 8014e02:	bd10      	pop	{r4, pc}
      status = USBH_FAIL;
    }   
     else if  (phost->Control.state == CTRL_STALLED )
 8014e04:	2a0c      	cmp	r2, #12
 8014e06:	d102      	bne.n	8014e0e <USBH_CtlReq+0x44>
    {
      /* Commands successfully sent and Response Received  */       
      phost->RequestState = CMD_SEND;
 8014e08:	70cb      	strb	r3, [r1, #3]
      status = USBH_NOT_SUPPORTED;
 8014e0a:	2003      	movs	r0, #3
 8014e0c:	bd10      	pop	{r4, pc}
                             USBH_HOST           *phost, 
                             uint8_t             *buff,
                             uint16_t            length)
{
  USBH_Status status;
  status = USBH_BUSY;
 8014e0e:	4618      	mov	r0, r3
    
  default:
    break; 
  }
  return status;
}
 8014e10:	bd10      	pop	{r4, pc}

08014e12 <USBH_CtlSendSetup>:
  * @param  hc_num: Host channel Number
  * @retval Status
  */
USBH_Status USBH_CtlSendSetup ( USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t *buff, 
                                uint8_t hc_num){
 8014e12:	b538      	push	{r3, r4, r5, lr}
  pdev->host.hc[hc_num].ep_is_in = 0;
 8014e14:	eb00 1442 	add.w	r4, r0, r2, lsl #5
 8014e18:	2500      	movs	r5, #0
 8014e1a:	f884 5892 	strb.w	r5, [r4, #2194]	; 0x892
  pdev->host.hc[hc_num].data_pid = HC_PID_SETUP;   
 8014e1e:	f102 0515 	add.w	r5, r2, #21
 8014e22:	eb00 1345 	add.w	r3, r0, r5, lsl #5
 8014e26:	2503      	movs	r5, #3
  pdev->host.hc[hc_num].xfer_buff = buff;
 8014e28:	f8c3 15fc 	str.w	r1, [r3, #1532]	; 0x5fc
  pdev->host.hc[hc_num].xfer_len = USBH_SETUP_PKT_SIZE;   
 8014e2c:	2108      	movs	r1, #8
 8014e2e:	f8c4 18a0 	str.w	r1, [r4, #2208]	; 0x8a0
  */
USBH_Status USBH_CtlSendSetup ( USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t *buff, 
                                uint8_t hc_num){
  pdev->host.hc[hc_num].ep_is_in = 0;
  pdev->host.hc[hc_num].data_pid = HC_PID_SETUP;   
 8014e32:	f883 55f8 	strb.w	r5, [r3, #1528]	; 0x5f8
  pdev->host.hc[hc_num].xfer_buff = buff;
  pdev->host.hc[hc_num].xfer_len = USBH_SETUP_PKT_SIZE;   

  return (USBH_Status)HCD_SubmitRequest (pdev , hc_num);   
 8014e36:	4611      	mov	r1, r2
 8014e38:	f001 fb7e 	bl	8016538 <HCD_SubmitRequest>
}
 8014e3c:	b2c0      	uxtb	r0, r0
 8014e3e:	bd38      	pop	{r3, r4, r5, pc}

08014e40 <USBH_CtlSendData>:
  */
USBH_Status USBH_CtlSendData ( USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t hc_num)
{
 8014e40:	b538      	push	{r3, r4, r5, lr}
  pdev->host.hc[hc_num].ep_is_in = 0;
 8014e42:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8014e46:	2500      	movs	r5, #0
 8014e48:	f884 5892 	strb.w	r5, [r4, #2194]	; 0x892
  pdev->host.hc[hc_num].xfer_buff = buff;
 8014e4c:	f8c4 189c 	str.w	r1, [r4, #2204]	; 0x89c
 8014e50:	4625      	mov	r5, r4
  pdev->host.hc[hc_num].xfer_len = length;
 8014e52:	f8c4 28a0 	str.w	r2, [r4, #2208]	; 0x8a0
 
  if ( length == 0 )
 8014e56:	b912      	cbnz	r2, 8014e5e <USBH_CtlSendData+0x1e>
  { /* For Status OUT stage, Length==0, Status Out PID = 1 */
    pdev->host.hc[hc_num].toggle_out = 1;   
 8014e58:	2101      	movs	r1, #1
 8014e5a:	f884 18a9 	strb.w	r1, [r4, #2217]	; 0x8a9
  }
 
 /* Set the Data Toggle bit as per the Flag */
  if ( pdev->host.hc[hc_num].toggle_out == 0)
 8014e5e:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 8014e62:	f892 18a9 	ldrb.w	r1, [r2, #2217]	; 0x8a9
 8014e66:	f103 0215 	add.w	r2, r3, #21
  { /* Put the PID 0 */
      pdev->host.hc[hc_num].data_pid = HC_PID_DATA0;    
 8014e6a:	eb00 1242 	add.w	r2, r0, r2, lsl #5
  { /* For Status OUT stage, Length==0, Status Out PID = 1 */
    pdev->host.hc[hc_num].toggle_out = 1;   
  }
 
 /* Set the Data Toggle bit as per the Flag */
  if ( pdev->host.hc[hc_num].toggle_out == 0)
 8014e6e:	b101      	cbz	r1, 8014e72 <USBH_CtlSendData+0x32>
  { /* Put the PID 0 */
      pdev->host.hc[hc_num].data_pid = HC_PID_DATA0;    
  }
 else
 { /* Put the PID 1 */
      pdev->host.hc[hc_num].data_pid = HC_PID_DATA1 ;
 8014e70:	2102      	movs	r1, #2
 8014e72:	f882 15f8 	strb.w	r1, [r2, #1528]	; 0x5f8
 }

  HCD_SubmitRequest (pdev , hc_num);   
 8014e76:	4619      	mov	r1, r3
 8014e78:	f001 fb5e 	bl	8016538 <HCD_SubmitRequest>
   
  return USBH_OK;
}
 8014e7c:	2000      	movs	r0, #0
 8014e7e:	bd38      	pop	{r3, r4, r5, pc}

08014e80 <USBH_CtlReceiveData>:
  */
USBH_Status USBH_CtlReceiveData(USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t* buff, 
                                uint16_t length,
                                uint8_t hc_num)
{
 8014e80:	b570      	push	{r4, r5, r6, lr}

  pdev->host.hc[hc_num].ep_is_in = 1;
 8014e82:	eb00 1543 	add.w	r5, r0, r3, lsl #5
 8014e86:	2601      	movs	r6, #1
 8014e88:	f885 6892 	strb.w	r6, [r5, #2194]	; 0x892
  pdev->host.hc[hc_num].data_pid = HC_PID_DATA1;
 8014e8c:	f103 0615 	add.w	r6, r3, #21
 8014e90:	eb00 1446 	add.w	r4, r0, r6, lsl #5
 8014e94:	2602      	movs	r6, #2
  pdev->host.hc[hc_num].xfer_buff = buff;
 8014e96:	f8c4 15fc 	str.w	r1, [r4, #1532]	; 0x5fc
                                uint16_t length,
                                uint8_t hc_num)
{

  pdev->host.hc[hc_num].ep_is_in = 1;
  pdev->host.hc[hc_num].data_pid = HC_PID_DATA1;
 8014e9a:	f884 65f8 	strb.w	r6, [r4, #1528]	; 0x5f8
  pdev->host.hc[hc_num].xfer_buff = buff;
  pdev->host.hc[hc_num].xfer_len = length;  
 8014e9e:	f8c5 28a0 	str.w	r2, [r5, #2208]	; 0x8a0

  HCD_SubmitRequest (pdev , hc_num);   
 8014ea2:	4619      	mov	r1, r3
 8014ea4:	f001 fb48 	bl	8016538 <HCD_SubmitRequest>
  
  return USBH_OK;
  
}
 8014ea8:	2000      	movs	r0, #0
 8014eaa:	bd70      	pop	{r4, r5, r6, pc}

08014eac <USBH_BulkSendData>:
  */
USBH_Status USBH_BulkSendData ( USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t hc_num)
{ 
 8014eac:	b538      	push	{r3, r4, r5, lr}
  pdev->host.hc[hc_num].ep_is_in = 0;
 8014eae:	eb00 1543 	add.w	r5, r0, r3, lsl #5
 8014eb2:	2400      	movs	r4, #0
 8014eb4:	f885 4892 	strb.w	r4, [r5, #2194]	; 0x892
  pdev->host.hc[hc_num].xfer_buff = buff;
 8014eb8:	f103 0415 	add.w	r4, r3, #21
 8014ebc:	eb00 1444 	add.w	r4, r0, r4, lsl #5
  pdev->host.hc[hc_num].xfer_len = length;  
 8014ec0:	f8c5 28a0 	str.w	r2, [r5, #2208]	; 0x8a0
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t hc_num)
{ 
  pdev->host.hc[hc_num].ep_is_in = 0;
  pdev->host.hc[hc_num].xfer_buff = buff;
 8014ec4:	f8c4 15fc 	str.w	r1, [r4, #1532]	; 0x5fc
  pdev->host.hc[hc_num].xfer_len = length;  

 /* Set the Data Toggle bit as per the Flag */
  if ( pdev->host.hc[hc_num].toggle_out == 0)
 8014ec8:	f895 18a9 	ldrb.w	r1, [r5, #2217]	; 0x8a9
 8014ecc:	f504 64be 	add.w	r4, r4, #1520	; 0x5f0
 8014ed0:	b101      	cbz	r1, 8014ed4 <USBH_BulkSendData+0x28>
  { /* Put the PID 0 */
      pdev->host.hc[hc_num].data_pid = HC_PID_DATA0;    
  }
 else
 { /* Put the PID 1 */
      pdev->host.hc[hc_num].data_pid = HC_PID_DATA1 ;
 8014ed2:	2102      	movs	r1, #2
 8014ed4:	7221      	strb	r1, [r4, #8]
 }

  HCD_SubmitRequest (pdev , hc_num);   
 8014ed6:	4619      	mov	r1, r3
 8014ed8:	f001 fb2e 	bl	8016538 <HCD_SubmitRequest>
  return USBH_OK;
}
 8014edc:	2000      	movs	r0, #0
 8014ede:	bd38      	pop	{r3, r4, r5, pc}

08014ee0 <USBH_BulkReceiveData>:
  */
USBH_Status USBH_BulkReceiveData( USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t hc_num)
{
 8014ee0:	b538      	push	{r3, r4, r5, lr}
  pdev->host.hc[hc_num].ep_is_in = 1;   
 8014ee2:	eb00 1543 	add.w	r5, r0, r3, lsl #5
 8014ee6:	2401      	movs	r4, #1
 8014ee8:	f885 4892 	strb.w	r4, [r5, #2194]	; 0x892
  pdev->host.hc[hc_num].xfer_buff = buff;
 8014eec:	f103 0415 	add.w	r4, r3, #21
 8014ef0:	eb00 1444 	add.w	r4, r0, r4, lsl #5
  pdev->host.hc[hc_num].xfer_len = length;
 8014ef4:	f8c5 28a0 	str.w	r2, [r5, #2208]	; 0x8a0
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t hc_num)
{
  pdev->host.hc[hc_num].ep_is_in = 1;   
  pdev->host.hc[hc_num].xfer_buff = buff;
 8014ef8:	f8c4 15fc 	str.w	r1, [r4, #1532]	; 0x5fc
  pdev->host.hc[hc_num].xfer_len = length;
  

  if( pdev->host.hc[hc_num].toggle_in == 0)
 8014efc:	f895 18a8 	ldrb.w	r1, [r5, #2216]	; 0x8a8
 8014f00:	f504 64be 	add.w	r4, r4, #1520	; 0x5f0
 8014f04:	b101      	cbz	r1, 8014f08 <USBH_BulkReceiveData+0x28>
  {
    pdev->host.hc[hc_num].data_pid = HC_PID_DATA0;
  }
  else
  {
    pdev->host.hc[hc_num].data_pid = HC_PID_DATA1;
 8014f06:	2102      	movs	r1, #2
 8014f08:	7221      	strb	r1, [r4, #8]
  }

  HCD_SubmitRequest (pdev , hc_num);  
 8014f0a:	4619      	mov	r1, r3
 8014f0c:	f001 fb14 	bl	8016538 <HCD_SubmitRequest>
  return USBH_OK;
}
 8014f10:	2000      	movs	r0, #0
 8014f12:	bd38      	pop	{r3, r4, r5, pc}

08014f14 <USBH_GetDescriptor>:
                               USBH_HOST           *phost,                                
                               uint8_t  req_type,
                               uint16_t value_idx, 
                               uint8_t* buff, 
                               uint16_t length )
{ 
 8014f14:	b530      	push	{r4, r5, lr}
  phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8014f16:	f062 027f 	orn	r2, r2, #127	; 0x7f
  phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
  phost->Control.setup.b.wValue.w = value_idx;
 8014f1a:	82cb      	strh	r3, [r1, #22]
  
  if ((value_idx & 0xff00) == USB_DESC_STRING)
 8014f1c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
                               USBH_HOST           *phost,                                
                               uint8_t  req_type,
                               uint16_t value_idx, 
                               uint8_t* buff, 
                               uint16_t length )
{ 
 8014f20:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 8014f24:	9d03      	ldr	r5, [sp, #12]
  phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8014f26:	750a      	strb	r2, [r1, #20]
  phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8014f28:	2206      	movs	r2, #6
  phost->Control.setup.b.wValue.w = value_idx;
  
  if ((value_idx & 0xff00) == USB_DESC_STRING)
 8014f2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
  {
    phost->Control.setup.b.wIndex.w = 0x0409;
 8014f2e:	bf0c      	ite	eq
 8014f30:	f240 4309 	movweq	r3, #1033	; 0x409
  }
  else
  {
    phost->Control.setup.b.wIndex.w = 0;
 8014f34:	2300      	movne	r3, #0
                               uint16_t value_idx, 
                               uint8_t* buff, 
                               uint16_t length )
{ 
  phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
  phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8014f36:	754a      	strb	r2, [r1, #21]
  {
    phost->Control.setup.b.wIndex.w = 0x0409;
  }
  else
  {
    phost->Control.setup.b.wIndex.w = 0;
 8014f38:	830b      	strh	r3, [r1, #24]
  }
  phost->Control.setup.b.wLength.w = length;           
  return USBH_CtlReq(pdev, phost, buff , length );     
 8014f3a:	462a      	mov	r2, r5
 8014f3c:	4623      	mov	r3, r4
  }
  else
  {
    phost->Control.setup.b.wIndex.w = 0;
  }
  phost->Control.setup.b.wLength.w = length;           
 8014f3e:	834c      	strh	r4, [r1, #26]
  return USBH_CtlReq(pdev, phost, buff , length );     
}
 8014f40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  else
  {
    phost->Control.setup.b.wIndex.w = 0;
  }
  phost->Control.setup.b.wLength.w = length;           
  return USBH_CtlReq(pdev, phost, buff , length );     
 8014f44:	f7ff bf41 	b.w	8014dca <USBH_CtlReq>

08014f48 <USBH_Get_StringDesc>:
USBH_Status USBH_Get_StringDesc(USB_OTG_CORE_HANDLE *pdev,
                                USBH_HOST *phost,
                                uint8_t string_index, 
                                uint8_t *buff, 
                                uint16_t length)
{
 8014f48:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014f4a:	f8bd 6018 	ldrh.w	r6, [sp, #24]
 8014f4e:	461d      	mov	r5, r3
  USBH_Status status;
  
  if((status = USBH_GetDescriptor(pdev,
 8014f50:	f442 7340 	orr.w	r3, r2, #768	; 0x300
                                  phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,                                    
                                  USB_DESC_STRING | string_index, 
                                  pdev->host.Rx_Buffer,
 8014f54:	f200 52f4 	addw	r2, r0, #1524	; 0x5f4
                                uint8_t *buff, 
                                uint16_t length)
{
  USBH_Status status;
  
  if((status = USBH_GetDescriptor(pdev,
 8014f58:	e88d 0044 	stmia.w	sp, {r2, r6}
 8014f5c:	2200      	movs	r2, #0
USBH_Status USBH_Get_StringDesc(USB_OTG_CORE_HANDLE *pdev,
                                USBH_HOST *phost,
                                uint8_t string_index, 
                                uint8_t *buff, 
                                uint16_t length)
{
 8014f5e:	4604      	mov	r4, r0
  USBH_Status status;
  
  if((status = USBH_GetDescriptor(pdev,
 8014f60:	f7ff ffd8 	bl	8014f14 <USBH_GetDescriptor>
 8014f64:	b9b8      	cbnz	r0, 8014f96 <USBH_Get_StringDesc+0x4e>
  */
  
  /* Check which is lower size, the Size of string or the length of bytes read 
  from the device */
  
  if ( psrc[1] == USB_DESC_TYPE_STRING)
 8014f66:	f894 35f5 	ldrb.w	r3, [r4, #1525]	; 0x5f5
 8014f6a:	2b03      	cmp	r3, #3
 8014f6c:	d113      	bne.n	8014f96 <USBH_Get_StringDesc+0x4e>
  { /* Make sure the Descriptor is String Type */
    
    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */      
    strlength = ( ( (psrc[0]-2) <= length) ? (psrc[0]-2) :length); 
 8014f6e:	f894 15f4 	ldrb.w	r1, [r4, #1524]	; 0x5f4
 8014f72:	1e8a      	subs	r2, r1, #2
 8014f74:	4296      	cmp	r6, r2
 8014f76:	bfa8      	it	ge
 8014f78:	4616      	movge	r6, r2
 8014f7a:	b2b6      	uxth	r6, r6
    psrc += 2; /* Adjust the offset ignoring the String Len and Descriptor type */
 8014f7c:	f204 54f6 	addw	r4, r4, #1526	; 0x5f6
    
    for (idx = 0; idx < strlength; idx+=2 )
 8014f80:	4603      	mov	r3, r0
 8014f82:	42b3      	cmp	r3, r6
 8014f84:	d205      	bcs.n	8014f92 <USBH_Get_StringDesc+0x4a>
    {/* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8014f86:	5ce1      	ldrb	r1, [r4, r3]
    
    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */      
    strlength = ( ( (psrc[0]-2) <= length) ? (psrc[0]-2) :length); 
    psrc += 2; /* Adjust the offset ignoring the String Len and Descriptor type */
    
    for (idx = 0; idx < strlength; idx+=2 )
 8014f88:	1c9a      	adds	r2, r3, #2
    {/* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8014f8a:	f805 1b01 	strb.w	r1, [r5], #1
    
    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */      
    strlength = ( ( (psrc[0]-2) <= length) ? (psrc[0]-2) :length); 
    psrc += 2; /* Adjust the offset ignoring the String Len and Descriptor type */
    
    for (idx = 0; idx < strlength; idx+=2 )
 8014f8e:	b293      	uxth	r3, r2
 8014f90:	e7f7      	b.n	8014f82 <USBH_Get_StringDesc+0x3a>
    {/* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
      pdest++;
    }  
    *pdest = 0; /* mark end of string */  
 8014f92:	2300      	movs	r3, #0
 8014f94:	702b      	strb	r3, [r5, #0]
  {
    /* Commands successfully sent and Response Received  */       
    USBH_ParseStringDesc(pdev->host.Rx_Buffer,buff, length);    
  }
  return status;
}
 8014f96:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

08014f98 <USBH_Get_DevDesc>:
* @retval Status
*/
USBH_Status USBH_Get_DevDesc(USB_OTG_CORE_HANDLE *pdev,
                             USBH_HOST *phost,
                             uint8_t length)
{
 8014f98:	b573      	push	{r0, r1, r4, r5, r6, lr}
  
  if((status = USBH_GetDescriptor(pdev, 
                                  phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,                          
                                  USB_DESC_DEVICE, 
                                  pdev->host.Rx_Buffer,
 8014f9a:	f200 53f4 	addw	r3, r0, #1524	; 0x5f4
* @retval Status
*/
USBH_Status USBH_Get_DevDesc(USB_OTG_CORE_HANDLE *pdev,
                             USBH_HOST *phost,
                             uint8_t length)
{
 8014f9e:	4616      	mov	r6, r2
  
  USBH_Status status;
  
  if((status = USBH_GetDescriptor(pdev, 
 8014fa0:	e88d 0048 	stmia.w	sp, {r3, r6}
 8014fa4:	2200      	movs	r2, #0
 8014fa6:	f44f 7380 	mov.w	r3, #256	; 0x100
* @retval Status
*/
USBH_Status USBH_Get_DevDesc(USB_OTG_CORE_HANDLE *pdev,
                             USBH_HOST *phost,
                             uint8_t length)
{
 8014faa:	4604      	mov	r4, r0
 8014fac:	460d      	mov	r5, r1
  
  USBH_Status status;
  
  if((status = USBH_GetDescriptor(pdev, 
 8014fae:	f7ff ffb1 	bl	8014f14 <USBH_GetDescriptor>
 8014fb2:	2800      	cmp	r0, #0
 8014fb4:	d145      	bne.n	8015042 <USBH_Get_DevDesc+0xaa>
*/
static void  USBH_ParseDevDesc (USBH_DevDesc_TypeDef* dev_desc,
                                uint8_t *buf, 
                                uint16_t length)
{
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8014fb6:	f894 35f4 	ldrb.w	r3, [r4, #1524]	; 0x5f4
 8014fba:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8014fbe:	f894 15f5 	ldrb.w	r1, [r4, #1525]	; 0x5f5
 8014fc2:	f885 1023 	strb.w	r1, [r5, #35]	; 0x23
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8014fc6:	f894 25f7 	ldrb.w	r2, [r4, #1527]	; 0x5f7
 8014fca:	f894 35f6 	ldrb.w	r3, [r4, #1526]	; 0x5f6
 8014fce:	eb03 2102 	add.w	r1, r3, r2, lsl #8
 8014fd2:	84a9      	strh	r1, [r5, #36]	; 0x24
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8014fd4:	f894 25f8 	ldrb.w	r2, [r4, #1528]	; 0x5f8
 8014fd8:	f885 2026 	strb.w	r2, [r5, #38]	; 0x26
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8014fdc:	f894 35f9 	ldrb.w	r3, [r4, #1529]	; 0x5f9
 8014fe0:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8014fe4:	f894 15fa 	ldrb.w	r1, [r4, #1530]	; 0x5fa
 8014fe8:	f885 1028 	strb.w	r1, [r5, #40]	; 0x28
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8014fec:	f894 25fb 	ldrb.w	r2, [r4, #1531]	; 0x5fb
  
  if (length > 8)
 8014ff0:	2e08      	cmp	r6, #8
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
  dev_desc->bcdUSB             = LE16 (buf +  2);
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8014ff2:	f885 2029 	strb.w	r2, [r5, #41]	; 0x29
  
  if (length > 8)
 8014ff6:	d924      	bls.n	8015042 <USBH_Get_DevDesc+0xaa>
  { /* For 1st time after device connection, Host may issue only 8 bytes for 
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8014ff8:	f894 15fd 	ldrb.w	r1, [r4, #1533]	; 0x5fd
 8014ffc:	f894 35fc 	ldrb.w	r3, [r4, #1532]	; 0x5fc
 8015000:	eb03 2201 	add.w	r2, r3, r1, lsl #8
 8015004:	856a      	strh	r2, [r5, #42]	; 0x2a
    dev_desc->idProduct          = LE16 (buf + 10);
 8015006:	f894 15ff 	ldrb.w	r1, [r4, #1535]	; 0x5ff
 801500a:	f894 35fe 	ldrb.w	r3, [r4, #1534]	; 0x5fe
 801500e:	eb03 2201 	add.w	r2, r3, r1, lsl #8
 8015012:	85aa      	strh	r2, [r5, #44]	; 0x2c
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8015014:	f894 1601 	ldrb.w	r1, [r4, #1537]	; 0x601
 8015018:	f894 3600 	ldrb.w	r3, [r4, #1536]	; 0x600
 801501c:	eb03 2201 	add.w	r2, r3, r1, lsl #8
 8015020:	85ea      	strh	r2, [r5, #46]	; 0x2e
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8015022:	f894 1602 	ldrb.w	r1, [r4, #1538]	; 0x602
 8015026:	f885 1030 	strb.w	r1, [r5, #48]	; 0x30
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 801502a:	f894 3603 	ldrb.w	r3, [r4, #1539]	; 0x603
 801502e:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8015032:	f894 2604 	ldrb.w	r2, [r4, #1540]	; 0x604
 8015036:	f885 2032 	strb.w	r2, [r5, #50]	; 0x32
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 801503a:	f894 1605 	ldrb.w	r1, [r4, #1541]	; 0x605
 801503e:	f885 1033 	strb.w	r1, [r5, #51]	; 0x33
  {
    /* Commands successfully sent and Response Received */       
    USBH_ParseDevDesc(&phost->device_prop.Dev_Desc, pdev->host.Rx_Buffer, length);
  }
  return status;      
}
 8015042:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

08015044 <USBH_Get_CfgDesc>:
*/
USBH_Status USBH_Get_CfgDesc(USB_OTG_CORE_HANDLE *pdev, 
                             USBH_HOST           *phost,                      
                             uint16_t length)

{
 8015044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015048:	4617      	mov	r7, r2
 801504a:	b08d      	sub	sp, #52	; 0x34
  
  if((status = USBH_GetDescriptor(pdev,
                                  phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,                          
                                  USB_DESC_CONFIGURATION, 
                                  pdev->host.Rx_Buffer,
 801504c:	f200 54f4 	addw	r4, r0, #1524	; 0x5f4

{
  USBH_Status status;
  uint16_t index = 0;
  
  if((status = USBH_GetDescriptor(pdev,
 8015050:	e88d 0090 	stmia.w	sp, {r4, r7}
 8015054:	2200      	movs	r2, #0
 8015056:	f44f 7300 	mov.w	r3, #512	; 0x200
*/
USBH_Status USBH_Get_CfgDesc(USB_OTG_CORE_HANDLE *pdev, 
                             USBH_HOST           *phost,                      
                             uint16_t length)

{
 801505a:	4606      	mov	r6, r0
 801505c:	460d      	mov	r5, r1
  USBH_Status status;
  uint16_t index = 0;
  
  if((status = USBH_GetDescriptor(pdev,
 801505e:	f7ff ff59 	bl	8014f14 <USBH_GetDescriptor>
 8015062:	9002      	str	r0, [sp, #8]
 8015064:	2800      	cmp	r0, #0
 8015066:	f040 80d1 	bne.w	801520c <USBH_Get_CfgDesc+0x1c8>
 801506a:	9b02      	ldr	r3, [sp, #8]
                                  USB_DESC_CONFIGURATION, 
                                  pdev->host.Rx_Buffer,
                                  length)) == USBH_OK)
  {
    /*save Cfg descriptor for class parsing usage */
    for( ; index < length ; index ++)
 801506c:	b29a      	uxth	r2, r3
 801506e:	42ba      	cmp	r2, r7
 8015070:	d206      	bcs.n	8015080 <USBH_Get_CfgDesc+0x3c>
* @param  itf_desc: Interface Descriptor address
* @param  ep_desc: Endpoint Descriptor address
* @param  length: Length of the descriptor
* @retval Status
*/
USBH_Status USBH_Get_CfgDesc(USB_OTG_CORE_HANDLE *pdev, 
 8015072:	18f2      	adds	r2, r6, r3
                                  length)) == USBH_OK)
  {
    /*save Cfg descriptor for class parsing usage */
    for( ; index < length ; index ++)
    {
      USBH_CfgDesc[index] = pdev->host.Rx_Buffer[index];
 8015074:	4867      	ldr	r0, [pc, #412]	; (8015214 <USBH_Get_CfgDesc+0x1d0>)
 8015076:	f892 15f4 	ldrb.w	r1, [r2, #1524]	; 0x5f4
 801507a:	5419      	strb	r1, [r3, r0]
 801507c:	3301      	adds	r3, #1
 801507e:	e7f5      	b.n	801506c <USBH_Get_CfgDesc+0x28>
  
  
  pdesc   = (USBH_DescHeader_t *)buf;
  
  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8015080:	f896 05f4 	ldrb.w	r0, [r6, #1524]	; 0x5f4
 8015084:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8015088:	f896 15f5 	ldrb.w	r1, [r6, #1525]	; 0x5f5
 801508c:	f885 1035 	strb.w	r1, [r5, #53]	; 0x35
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8015090:	f896 25f7 	ldrb.w	r2, [r6, #1527]	; 0x5f7
 8015094:	f896 35f6 	ldrb.w	r3, [r6, #1526]	; 0x5f6
 8015098:	eb03 2002 	add.w	r0, r3, r2, lsl #8
 801509c:	86e8      	strh	r0, [r5, #54]	; 0x36
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 801509e:	f896 15f8 	ldrb.w	r1, [r6, #1528]	; 0x5f8
 80150a2:	f885 1038 	strb.w	r1, [r5, #56]	; 0x38
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 80150a6:	f896 25f9 	ldrb.w	r2, [r6, #1529]	; 0x5f9
 80150aa:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 80150ae:	f896 35fa 	ldrb.w	r3, [r6, #1530]	; 0x5fa
 80150b2:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 80150b6:	f896 05fb 	ldrb.w	r0, [r6, #1531]	; 0x5fb
 80150ba:	f885 003b 	strb.w	r0, [r5, #59]	; 0x3b
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);    
 80150be:	f896 25fc 	ldrb.w	r2, [r6, #1532]	; 0x5fc
  
  
  if (length > USB_CONFIGURATION_DESC_SIZE)
 80150c2:	2f09      	cmp	r7, #9
  cfg_desc->wTotalLength        = LE16 (buf + 2);
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);    
 80150c4:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
  
  
  if (length > USB_CONFIGURATION_DESC_SIZE)
 80150c8:	f240 80a0 	bls.w	801520c <USBH_Get_CfgDesc+0x1c8>
  {
    ptr = USB_LEN_CFG_DESC;
    
    if ( cfg_desc->bNumInterfaces <= USBH_MAX_NUM_INTERFACES) 
 80150cc:	2902      	cmp	r1, #2
 80150ce:	d905      	bls.n	80150dc <USBH_Get_CfgDesc+0x98>
          }
         }
        }
      }
    }
    prev_ep_size = 0;
 80150d0:	4851      	ldr	r0, [pc, #324]	; (8015218 <USBH_Get_CfgDesc+0x1d4>)
    prev_itf = 0; 
 80150d2:	4952      	ldr	r1, [pc, #328]	; (801521c <USBH_Get_CfgDesc+0x1d8>)
          }
         }
        }
      }
    }
    prev_ep_size = 0;
 80150d4:	2300      	movs	r3, #0
 80150d6:	8003      	strh	r3, [r0, #0]
    prev_itf = 0; 
 80150d8:	700b      	strb	r3, [r1, #0]
 80150da:	e097      	b.n	801520c <USBH_Get_CfgDesc+0x1c8>
 80150dc:	494f      	ldr	r1, [pc, #316]	; (801521c <USBH_Get_CfgDesc+0x1d8>)
 80150de:	484e      	ldr	r0, [pc, #312]	; (8015218 <USBH_Get_CfgDesc+0x1d4>)
 80150e0:	780b      	ldrb	r3, [r1, #0]
 80150e2:	f8b0 9000 	ldrh.w	r9, [r0]
 80150e6:	930a      	str	r3, [sp, #40]	; 0x28
  
  if (length > USB_CONFIGURATION_DESC_SIZE)
  {
    ptr = USB_LEN_CFG_DESC;
    
    if ( cfg_desc->bNumInterfaces <= USBH_MAX_NUM_INTERFACES) 
 80150e8:	2209      	movs	r2, #9
    {
      pif = (USBH_InterfaceDesc_TypeDef *)0;
      
      while (ptr < cfg_desc->wTotalLength ) 
 80150ea:	8ee9      	ldrh	r1, [r5, #54]	; 0x36
 80150ec:	4291      	cmp	r1, r2
 80150ee:	d9ef      	bls.n	80150d0 <USBH_Get_CfgDesc+0x8c>
*/
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
  USBH_DescHeader_t  *pnext;
 
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 80150f0:	7823      	ldrb	r3, [r4, #0]
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
 80150f2:	18e4      	adds	r4, r4, r3
*/
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
  USBH_DescHeader_t  *pnext;
 
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 80150f4:	18d2      	adds	r2, r2, r3
      pif = (USBH_InterfaceDesc_TypeDef *)0;
      
      while (ptr < cfg_desc->wTotalLength ) 
      {
        pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
        if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
 80150f6:	7860      	ldrb	r0, [r4, #1]
 80150f8:	2804      	cmp	r0, #4
*/
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
  USBH_DescHeader_t  *pnext;
 
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 80150fa:	b292      	uxth	r2, r2
      pif = (USBH_InterfaceDesc_TypeDef *)0;
      
      while (ptr < cfg_desc->wTotalLength ) 
      {
        pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
        if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
 80150fc:	d1f5      	bne.n	80150ea <USBH_Get_CfgDesc+0xa6>
        {
          if_ix             = *(((uint8_t *)pdesc ) + 2);
          pif               = &itf_desc[if_ix];
          
          if((*((uint8_t *)pdesc + 3)) < 3)
 80150fe:	f894 b003 	ldrb.w	fp, [r4, #3]
      while (ptr < cfg_desc->wTotalLength ) 
      {
        pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
        if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
        {
          if_ix             = *(((uint8_t *)pdesc ) + 2);
 8015102:	78a7      	ldrb	r7, [r4, #2]
          pif               = &itf_desc[if_ix];
          
          if((*((uint8_t *)pdesc + 3)) < 3)
 8015104:	f1bb 0f02 	cmp.w	fp, #2
 8015108:	d8ef      	bhi.n	80150ea <USBH_Get_CfgDesc+0xa6>
* @retval None
*/
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDesc_TypeDef *if_descriptor, 
                                      uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 801510a:	7826      	ldrb	r6, [r4, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 801510c:	7961      	ldrb	r1, [r4, #5]
* @retval None
*/
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDesc_TypeDef *if_descriptor, 
                                      uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 801510e:	9605      	str	r6, [sp, #20]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8015110:	7926      	ldrb	r6, [r4, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8015112:	9106      	str	r1, [sp, #24]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8015114:	79a3      	ldrb	r3, [r4, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8015116:	79e0      	ldrb	r0, [r4, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8015118:	7a21      	ldrb	r1, [r4, #8]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 801511a:	9307      	str	r3, [sp, #28]
          {
          USBH_ParseInterfaceDesc (&temp_pif, (uint8_t *)pdesc);            
          ep_ix = 0;
          
          /* Parse Ep descriptors relative to the current interface */
          if(temp_pif.bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS)
 801511c:	2e02      	cmp	r6, #2
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 801511e:	9008      	str	r0, [sp, #32]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8015120:	9109      	str	r1, [sp, #36]	; 0x24
          {
          USBH_ParseInterfaceDesc (&temp_pif, (uint8_t *)pdesc);            
          ep_ix = 0;
          
          /* Parse Ep descriptors relative to the current interface */
          if(temp_pif.bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS)
 8015122:	d8e2      	bhi.n	80150ea <USBH_Get_CfgDesc+0xa6>
      while (ptr < cfg_desc->wTotalLength ) 
      {
        pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
        if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
        {
          if_ix             = *(((uint8_t *)pdesc ) + 2);
 8015124:	b2fb      	uxtb	r3, r7
          pif               = &itf_desc[if_ix];
 8015126:	b258      	sxtb	r0, r3
 8015128:	2109      	movs	r1, #9
      while (ptr < cfg_desc->wTotalLength ) 
      {
        pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
        if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
        {
          if_ix             = *(((uint8_t *)pdesc ) + 2);
 801512a:	9303      	str	r3, [sp, #12]
          pif               = &itf_desc[if_ix];
 801512c:	fb01 5300 	mla	r3, r1, r0, r5
            while (ep_ix < temp_pif.bNumEndpoints) 
            {
              pdesc = USBH_GetNextDesc((void* )pdesc, &ptr);
              if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
              {  
                pep               = &ep_desc[if_ix][ep_ix];
 8015130:	3005      	adds	r0, #5
 8015132:	eb05 1100 	add.w	r1, r5, r0, lsl #4
      {
        pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
        if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
        {
          if_ix             = *(((uint8_t *)pdesc ) + 2);
          pif               = &itf_desc[if_ix];
 8015136:	333e      	adds	r3, #62	; 0x3e
            while (ep_ix < temp_pif.bNumEndpoints) 
            {
              pdesc = USBH_GetNextDesc((void* )pdesc, &ptr);
              if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
              {  
                pep               = &ep_desc[if_ix][ep_ix];
 8015138:	9104      	str	r1, [sp, #16]
 801513a:	f04f 0800 	mov.w	r8, #0
          ep_ix = 0;
          
          /* Parse Ep descriptors relative to the current interface */
          if(temp_pif.bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS)
          {          
            while (ep_ix < temp_pif.bNumEndpoints) 
 801513e:	fa4f fc88 	sxtb.w	ip, r8
 8015142:	45b4      	cmp	ip, r6
 8015144:	dad1      	bge.n	80150ea <USBH_Get_CfgDesc+0xa6>
*/
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
  USBH_DescHeader_t  *pnext;
 
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 8015146:	7820      	ldrb	r0, [r4, #0]
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
 8015148:	1824      	adds	r4, r4, r0
*/
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
  USBH_DescHeader_t  *pnext;
 
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 801514a:	1812      	adds	r2, r2, r0
          if(temp_pif.bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS)
          {          
            while (ep_ix < temp_pif.bNumEndpoints) 
            {
              pdesc = USBH_GetNextDesc((void* )pdesc, &ptr);
              if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
 801514c:	7861      	ldrb	r1, [r4, #1]
 801514e:	2905      	cmp	r1, #5
*/
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
  USBH_DescHeader_t  *pnext;
 
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 8015150:	b292      	uxth	r2, r2
          if(temp_pif.bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS)
          {          
            while (ep_ix < temp_pif.bNumEndpoints) 
            {
              pdesc = USBH_GetNextDesc((void* )pdesc, &ptr);
              if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
 8015152:	d1f4      	bne.n	801513e <USBH_Get_CfgDesc+0xfa>
              {  
                pep               = &ep_desc[if_ix][ep_ix];
 8015154:	9804      	ldr	r0, [sp, #16]
 8015156:	eb00 01cc 	add.w	r1, r0, ip, lsl #3
                
                if(prev_itf != if_ix)
 801515a:	9803      	ldr	r0, [sp, #12]
 801515c:	fa4f fa80 	sxtb.w	sl, r0
 8015160:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015162:	4550      	cmp	r0, sl
 8015164:	d013      	beq.n	801518e <USBH_Get_CfgDesc+0x14a>
* @retval None
*/
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDesc_TypeDef *if_descriptor, 
                                      uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8015166:	9805      	ldr	r0, [sp, #20]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8015168:	709f      	strb	r7, [r3, #2]
* @retval None
*/
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDesc_TypeDef *if_descriptor, 
                                      uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 801516a:	7018      	strb	r0, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 801516c:	9806      	ldr	r0, [sp, #24]
                                      uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 801516e:	f883 b003 	strb.w	fp, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8015172:	7158      	strb	r0, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8015174:	9807      	ldr	r0, [sp, #28]
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8015176:	711e      	strb	r6, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8015178:	7198      	strb	r0, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 801517a:	9808      	ldr	r0, [sp, #32]
              {  
                pep               = &ep_desc[if_ix][ep_ix];
                
                if(prev_itf != if_ix)
                {
                  prev_itf = if_ix;
 801517c:	970a      	str	r7, [sp, #40]	; 0x28
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 801517e:	71d8      	strb	r0, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8015180:	9809      	ldr	r0, [sp, #36]	; 0x24
*/
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDesc_TypeDef *if_descriptor, 
                                      uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8015182:	f04f 0e04 	mov.w	lr, #4
 8015186:	f883 e001 	strb.w	lr, [r3, #1]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 801518a:	7218      	strb	r0, [r3, #8]
 801518c:	e018      	b.n	80151c0 <USBH_Get_CfgDesc+0x17c>
                  prev_itf = if_ix;
                  USBH_ParseInterfaceDesc (pif, (uint8_t *)&temp_pif); 
                }
                else
                {
                  if(prev_ep_size > LE16((uint8_t *)pdesc + 4))
 801518e:	f894 a004 	ldrb.w	sl, [r4, #4]
 8015192:	7960      	ldrb	r0, [r4, #5]
 8015194:	eb0a 2a00 	add.w	sl, sl, r0, lsl #8
 8015198:	45d1      	cmp	r9, sl
 801519a:	dca6      	bgt.n	80150ea <USBH_Get_CfgDesc+0xa6>
* @retval None
*/
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDesc_TypeDef *if_descriptor, 
                                      uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 801519c:	9805      	ldr	r0, [sp, #20]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 801519e:	709f      	strb	r7, [r3, #2]
* @retval None
*/
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDesc_TypeDef *if_descriptor, 
                                      uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 80151a0:	7018      	strb	r0, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 80151a2:	9806      	ldr	r0, [sp, #24]
                                      uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 80151a4:	f883 b003 	strb.w	fp, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 80151a8:	7158      	strb	r0, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 80151aa:	9807      	ldr	r0, [sp, #28]
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 80151ac:	711e      	strb	r6, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 80151ae:	7198      	strb	r0, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 80151b0:	9808      	ldr	r0, [sp, #32]
 80151b2:	71d8      	strb	r0, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 80151b4:	9809      	ldr	r0, [sp, #36]	; 0x24
*/
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDesc_TypeDef *if_descriptor, 
                                      uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 80151b6:	f04f 0904 	mov.w	r9, #4
 80151ba:	f883 9001 	strb.w	r9, [r3, #1]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 80151be:	7218      	strb	r0, [r3, #8]
*/
static void  USBH_ParseEPDesc (USBH_EpDesc_TypeDef  *ep_descriptor, 
                               uint8_t *buf)
{
  
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 80151c0:	f894 9000 	ldrb.w	r9, [r4]
 80151c4:	9804      	ldr	r0, [sp, #16]
 80151c6:	f800 903c 	strb.w	r9, [r0, ip, lsl #3]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 80151ca:	f894 c001 	ldrb.w	ip, [r4, #1]
 80151ce:	f881 c001 	strb.w	ip, [r1, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 80151d2:	78a0      	ldrb	r0, [r4, #2]
 80151d4:	7088      	strb	r0, [r1, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 80151d6:	f894 e003 	ldrb.w	lr, [r4, #3]
 80151da:	f881 e003 	strb.w	lr, [r1, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 80151de:	f894 9005 	ldrb.w	r9, [r4, #5]
 80151e2:	f894 c004 	ldrb.w	ip, [r4, #4]
 80151e6:	eb0c 2009 	add.w	r0, ip, r9, lsl #8
 80151ea:	8088      	strh	r0, [r1, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 80151ec:	f894 e006 	ldrb.w	lr, [r4, #6]
 80151f0:	f881 e006 	strb.w	lr, [r1, #6]
                  {
                    USBH_ParseInterfaceDesc (pif, (uint8_t *)&temp_pif);    
                  }
                }
                USBH_ParseEPDesc (pep, (uint8_t *)pdesc);
                prev_ep_size = LE16((uint8_t *)pdesc + 4);
 80151f4:	f894 9005 	ldrb.w	r9, [r4, #5]
 80151f8:	7921      	ldrb	r1, [r4, #4]
                ep_ix++;
 80151fa:	f108 0801 	add.w	r8, r8, #1
                  {
                    USBH_ParseInterfaceDesc (pif, (uint8_t *)&temp_pif);    
                  }
                }
                USBH_ParseEPDesc (pep, (uint8_t *)pdesc);
                prev_ep_size = LE16((uint8_t *)pdesc + 4);
 80151fe:	eb01 2009 	add.w	r0, r1, r9, lsl #8
 8015202:	fa1f f980 	uxth.w	r9, r0
                ep_ix++;
 8015206:	fa5f f888 	uxtb.w	r8, r8
 801520a:	e798      	b.n	801513e <USBH_Get_CfgDesc+0xfa>
                       pdev->host.Rx_Buffer,
                       length); 
    
  }
  return status;
}
 801520c:	9802      	ldr	r0, [sp, #8]
 801520e:	b00d      	add	sp, #52	; 0x34
 8015210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015214:	20003a18 	.word	0x20003a18
 8015218:	200005aa 	.word	0x200005aa
 801521c:	200005ac 	.word	0x200005ac

08015220 <USBH_SetAddress>:
* @retval Status
*/
USBH_Status USBH_SetAddress(USB_OTG_CORE_HANDLE *pdev, 
                            USBH_HOST *phost,
                            uint8_t DeviceAddress)
{
 8015220:	b530      	push	{r4, r5, lr}
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8015222:	2400      	movs	r4, #0
    USB_REQ_TYPE_STANDARD;
  
  phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8015224:	2505      	movs	r5, #5
  
  phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8015226:	82ca      	strh	r2, [r1, #22]
  phost->Control.setup.b.wIndex.w = 0;
  phost->Control.setup.b.wLength.w = 0;
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );
 8015228:	4623      	mov	r3, r4
 801522a:	4622      	mov	r2, r4
*/
USBH_Status USBH_SetAddress(USB_OTG_CORE_HANDLE *pdev, 
                            USBH_HOST *phost,
                            uint8_t DeviceAddress)
{
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 801522c:	750c      	strb	r4, [r1, #20]
    USB_REQ_TYPE_STANDARD;
  
  phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 801522e:	754d      	strb	r5, [r1, #21]
  
  phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
  phost->Control.setup.b.wIndex.w = 0;
 8015230:	830c      	strh	r4, [r1, #24]
  phost->Control.setup.b.wLength.w = 0;
 8015232:	834c      	strh	r4, [r1, #26]
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );
}
 8015234:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  
  phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
  phost->Control.setup.b.wIndex.w = 0;
  phost->Control.setup.b.wLength.w = 0;
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );
 8015238:	f7ff bdc7 	b.w	8014dca <USBH_CtlReq>

0801523c <USBH_SetCfg>:
* @retval Status
*/
USBH_Status USBH_SetCfg(USB_OTG_CORE_HANDLE *pdev, 
                        USBH_HOST *phost,
                        uint16_t cfg_idx)
{
 801523c:	b530      	push	{r4, r5, lr}
  
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE |\
 801523e:	2400      	movs	r4, #0
    USB_REQ_TYPE_STANDARD;
  phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8015240:	2509      	movs	r5, #9
  phost->Control.setup.b.wValue.w = cfg_idx;
 8015242:	82ca      	strh	r2, [r1, #22]
  phost->Control.setup.b.wIndex.w = 0;
  phost->Control.setup.b.wLength.w = 0;           
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );      
 8015244:	4623      	mov	r3, r4
 8015246:	4622      	mov	r2, r4
USBH_Status USBH_SetCfg(USB_OTG_CORE_HANDLE *pdev, 
                        USBH_HOST *phost,
                        uint16_t cfg_idx)
{
  
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE |\
 8015248:	750c      	strb	r4, [r1, #20]
    USB_REQ_TYPE_STANDARD;
  phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 801524a:	754d      	strb	r5, [r1, #21]
  phost->Control.setup.b.wValue.w = cfg_idx;
  phost->Control.setup.b.wIndex.w = 0;
 801524c:	830c      	strh	r4, [r1, #24]
  phost->Control.setup.b.wLength.w = 0;           
 801524e:	834c      	strh	r4, [r1, #26]
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );      
}
 8015250:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
  phost->Control.setup.b.wValue.w = cfg_idx;
  phost->Control.setup.b.wIndex.w = 0;
  phost->Control.setup.b.wLength.w = 0;           
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );      
 8015254:	f7ff bdb9 	b.w	8014dca <USBH_CtlReq>

08015258 <USBH_ClrFeature>:
*/
USBH_Status USBH_ClrFeature(USB_OTG_CORE_HANDLE *pdev,
                            USBH_HOST *phost,
                            uint8_t ep_num, 
                            uint8_t hc_num) 
{
 8015258:	b530      	push	{r4, r5, lr}
 801525a:	f103 0345 	add.w	r3, r3, #69	; 0x45
  phost->Control.setup.b.wIndex.w = ep_num;
  phost->Control.setup.b.wLength.w = 0;           
  
  if ((ep_num & USB_REQ_DIR_MASK ) == USB_D2H)
  { /* EP Type is IN */
    pdev->host.hc[hc_num].toggle_in = 0; 
 801525e:	eb00 1343 	add.w	r3, r0, r3, lsl #5
                            USBH_HOST *phost,
                            uint8_t ep_num, 
                            uint8_t hc_num) 
{
  
  phost->Control.setup.b.bmRequestType = USB_H2D | 
 8015262:	2402      	movs	r4, #2
 8015264:	750c      	strb	r4, [r1, #20]
                                         USB_REQ_RECIPIENT_ENDPOINT |
                                         USB_REQ_TYPE_STANDARD;
  
  phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8015266:	2501      	movs	r5, #1
  phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8015268:	2400      	movs	r4, #0
  phost->Control.setup.b.wIndex.w = ep_num;
  phost->Control.setup.b.wLength.w = 0;           
  
  if ((ep_num & USB_REQ_DIR_MASK ) == USB_D2H)
 801526a:	f012 0f80 	tst.w	r2, #128	; 0x80
  
  phost->Control.setup.b.bmRequestType = USB_H2D | 
                                         USB_REQ_RECIPIENT_ENDPOINT |
                                         USB_REQ_TYPE_STANDARD;
  
  phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 801526e:	754d      	strb	r5, [r1, #21]
  phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
  phost->Control.setup.b.wIndex.w = ep_num;
 8015270:	830a      	strh	r2, [r1, #24]
  phost->Control.setup.b.bmRequestType = USB_H2D | 
                                         USB_REQ_RECIPIENT_ENDPOINT |
                                         USB_REQ_TYPE_STANDARD;
  
  phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
  phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8015272:	82cc      	strh	r4, [r1, #22]
  phost->Control.setup.b.wIndex.w = ep_num;
  phost->Control.setup.b.wLength.w = 0;           
 8015274:	834c      	strh	r4, [r1, #26]
  
  if ((ep_num & USB_REQ_DIR_MASK ) == USB_D2H)
  { /* EP Type is IN */
    pdev->host.hc[hc_num].toggle_in = 0; 
 8015276:	bf14      	ite	ne
 8015278:	721c      	strbne	r4, [r3, #8]
  }
  else
  {/* EP Type is OUT */
    pdev->host.hc[hc_num].toggle_out = 0; 
 801527a:	725c      	strbeq	r4, [r3, #9]
  }
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );   
 801527c:	2200      	movs	r2, #0
  phost->Control.setup.b.bmRequestType = USB_H2D | 
                                         USB_REQ_RECIPIENT_ENDPOINT |
                                         USB_REQ_TYPE_STANDARD;
  
  phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
  phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 801527e:	4625      	mov	r5, r4
  else
  {/* EP Type is OUT */
    pdev->host.hc[hc_num].toggle_out = 0; 
  }
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );   
 8015280:	4613      	mov	r3, r2
}
 8015282:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  else
  {/* EP Type is OUT */
    pdev->host.hc[hc_num].toggle_out = 0; 
  }
  
  return USBH_CtlReq(pdev, phost, 0 , 0 );   
 8015286:	f7ff bda0 	b.w	8014dca <USBH_CtlReq>
	...

0801528c <USB_OTG_EnableCommonInt>:
  /* Clear any pending USB_OTG Interrupts */
#ifndef USE_OTG_MODE
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GOTGINT, 0xFFFFFFFF);
#endif
  /* Clear any pending interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, 0xBFFFFFFF);
 801528c:	68c3      	ldr	r3, [r0, #12]
  int_mask.b.usbsuspend = 1; 
  
#ifdef USE_OTG_MODE
  int_mask.b.otgintr = 1;
  int_mask.b.sessreqintr = 1;
  int_mask.b.conidstschng = 1;
 801528e:	4803      	ldr	r0, [pc, #12]	; (801529c <USB_OTG_EnableCommonInt+0x10>)
  /* Clear any pending USB_OTG Interrupts */
#ifndef USE_OTG_MODE
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GOTGINT, 0xFFFFFFFF);
#endif
  /* Clear any pending interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, 0xBFFFFFFF);
 8015290:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8015294:	615a      	str	r2, [r3, #20]
#ifdef USE_OTG_MODE
  int_mask.b.otgintr = 1;
  int_mask.b.sessreqintr = 1;
  int_mask.b.conidstschng = 1;
#endif
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTMSK, int_mask.d32);
 8015296:	6198      	str	r0, [r3, #24]
 8015298:	4770      	bx	lr
 801529a:	bf00      	nop
 801529c:	d0000804 	.word	0xd0000804

080152a0 <USB_OTG_CoreReset>:
* @brief  USB_OTG_CoreReset : Soft reset of the core
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
static USB_OTG_STS USB_OTG_CoreReset(USB_OTG_CORE_HANDLE *pdev)
{
 80152a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  USB_OTG_STS status = USB_OTG_OK;
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  uint32_t count = 0;
  
  greset.d32 = 0;
 80152a2:	2300      	movs	r3, #0
 80152a4:	4c10      	ldr	r4, [pc, #64]	; (80152e8 <USB_OTG_CoreReset+0x48>)
 80152a6:	9301      	str	r3, [sp, #4]
* @brief  USB_OTG_CoreReset : Soft reset of the core
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
static USB_OTG_STS USB_OTG_CoreReset(USB_OTG_CORE_HANDLE *pdev)
{
 80152a8:	4605      	mov	r5, r0
  
  greset.d32 = 0;
  /* Wait for AHB master IDLE state. */
  do
  {
    USB_OTG_BSP_uDelay(3);
 80152aa:	2003      	movs	r0, #3
 80152ac:	f7fd fb42 	bl	8012934 <USB_OTG_BSP_uDelay>
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 80152b0:	68e8      	ldr	r0, [r5, #12]
 80152b2:	6902      	ldr	r2, [r0, #16]
    if (++count > 200000)
 80152b4:	3c01      	subs	r4, #1
  greset.d32 = 0;
  /* Wait for AHB master IDLE state. */
  do
  {
    USB_OTG_BSP_uDelay(3);
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 80152b6:	9201      	str	r2, [sp, #4]
    if (++count > 200000)
 80152b8:	d013      	beq.n	80152e2 <USB_OTG_CoreReset+0x42>
    {
      return USB_OTG_OK;
    }
  }
  while (greset.b.ahbidle == 0);
 80152ba:	9901      	ldr	r1, [sp, #4]
 80152bc:	2900      	cmp	r1, #0
 80152be:	daf4      	bge.n	80152aa <USB_OTG_CoreReset+0xa>
  /* Core Soft Reset */
  count = 0;
  greset.b.csftrst = 1;
 80152c0:	9b01      	ldr	r3, [sp, #4]
 80152c2:	f043 0201 	orr.w	r2, r3, #1
 80152c6:	9201      	str	r2, [sp, #4]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRSTCTL, greset.d32 );
 80152c8:	9901      	ldr	r1, [sp, #4]
 80152ca:	4a07      	ldr	r2, [pc, #28]	; (80152e8 <USB_OTG_CoreReset+0x48>)
 80152cc:	6101      	str	r1, [r0, #16]
  do
  {
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 80152ce:	6903      	ldr	r3, [r0, #16]
    if (++count > 200000)
 80152d0:	3a01      	subs	r2, #1
  count = 0;
  greset.b.csftrst = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRSTCTL, greset.d32 );
  do
  {
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 80152d2:	9301      	str	r3, [sp, #4]
    if (++count > 200000)
 80152d4:	d002      	beq.n	80152dc <USB_OTG_CoreReset+0x3c>
    {
      break;
    }
  }
  while (greset.b.csftrst == 1);
 80152d6:	9901      	ldr	r1, [sp, #4]
 80152d8:	07c9      	lsls	r1, r1, #31
 80152da:	d4f8      	bmi.n	80152ce <USB_OTG_CoreReset+0x2e>
  /* Wait for 3 PHY Clocks*/
  USB_OTG_BSP_uDelay(3);
 80152dc:	2003      	movs	r0, #3
 80152de:	f7fd fb29 	bl	8012934 <USB_OTG_BSP_uDelay>
  return status;
}
 80152e2:	2000      	movs	r0, #0
 80152e4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 80152e6:	bf00      	nop
 80152e8:	00030d41 	.word	0x00030d41

080152ec <USB_OTG_WritePacket>:
*/
USB_OTG_STS USB_OTG_WritePacket(USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t             *src, 
                                uint8_t             ch_ep_num, 
                                uint16_t            len)
{
 80152ec:	b530      	push	{r4, r5, lr}
  USB_OTG_STS status = USB_OTG_OK;
  if (pdev->cfg.dma_enable == 0)
 80152ee:	78c4      	ldrb	r4, [r0, #3]
 80152f0:	b96c      	cbnz	r4, 801530e <USB_OTG_WritePacket+0x22>
  {
    uint32_t count32b= 0 , i= 0;
    __IO uint32_t *fifo;
    
    count32b =  (len + 3) / 4;
    fifo = pdev->regs.DFIFO[ch_ep_num];
 80152f2:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  if (pdev->cfg.dma_enable == 0)
  {
    uint32_t count32b= 0 , i= 0;
    __IO uint32_t *fifo;
    
    count32b =  (len + 3) / 4;
 80152f6:	3303      	adds	r3, #3
    fifo = pdev->regs.DFIFO[ch_ep_num];
 80152f8:	f8d0 50d0 	ldr.w	r5, [r0, #208]	; 0xd0
  if (pdev->cfg.dma_enable == 0)
  {
    uint32_t count32b= 0 , i= 0;
    __IO uint32_t *fifo;
    
    count32b =  (len + 3) / 4;
 80152fc:	109b      	asrs	r3, r3, #2
    fifo = pdev->regs.DFIFO[ch_ep_num];
    for (i = 0; i < count32b; i++, src+=4)
 80152fe:	4622      	mov	r2, r4
 8015300:	429a      	cmp	r2, r3
 8015302:	d004      	beq.n	801530e <USB_OTG_WritePacket+0x22>
    {
      USB_OTG_WRITE_REG32( fifo, *((__packed uint32_t *)src) );
 8015304:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    uint32_t count32b= 0 , i= 0;
    __IO uint32_t *fifo;
    
    count32b =  (len + 3) / 4;
    fifo = pdev->regs.DFIFO[ch_ep_num];
    for (i = 0; i < count32b; i++, src+=4)
 8015308:	3201      	adds	r2, #1
    {
      USB_OTG_WRITE_REG32( fifo, *((__packed uint32_t *)src) );
 801530a:	6028      	str	r0, [r5, #0]
 801530c:	e7f8      	b.n	8015300 <USB_OTG_WritePacket+0x14>
    }
  }
  return status;
}
 801530e:	2000      	movs	r0, #0
 8015310:	bd30      	pop	{r4, r5, pc}

08015312 <USB_OTG_ReadPacket>:
* @retval None
*/
void *USB_OTG_ReadPacket(USB_OTG_CORE_HANDLE *pdev, 
                         uint8_t *dest, 
                         uint16_t len)
{
 8015312:	b510      	push	{r4, lr}
  uint32_t i=0;
  uint32_t count32b = (len + 3) / 4;
 8015314:	3203      	adds	r2, #3
  
  __IO uint32_t *fifo = pdev->regs.DFIFO[0];
 8015316:	f8d0 40d0 	ldr.w	r4, [r0, #208]	; 0xd0
void *USB_OTG_ReadPacket(USB_OTG_CORE_HANDLE *pdev, 
                         uint8_t *dest, 
                         uint16_t len)
{
  uint32_t i=0;
  uint32_t count32b = (len + 3) / 4;
 801531a:	1092      	asrs	r2, r2, #2
  
  __IO uint32_t *fifo = pdev->regs.DFIFO[0];
  
  for ( i = 0; i < count32b; i++, dest += 4 )
 801531c:	2300      	movs	r3, #0
 801531e:	4293      	cmp	r3, r2
 8015320:	ea4f 0083 	mov.w	r0, r3, lsl #2
 8015324:	d004      	beq.n	8015330 <USB_OTG_ReadPacket+0x1e>
  {
    *(__packed uint32_t *)dest = USB_OTG_READ_REG32(fifo);
 8015326:	6820      	ldr	r0, [r4, #0]
 8015328:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  uint32_t i=0;
  uint32_t count32b = (len + 3) / 4;
  
  __IO uint32_t *fifo = pdev->regs.DFIFO[0];
  
  for ( i = 0; i < count32b; i++, dest += 4 )
 801532c:	3301      	adds	r3, #1
 801532e:	e7f6      	b.n	801531e <USB_OTG_ReadPacket+0xc>
  {
    *(__packed uint32_t *)dest = USB_OTG_READ_REG32(fifo);
    
  }
  return ((void *)dest);
}
 8015330:	1808      	adds	r0, r1, r0
 8015332:	bd10      	pop	{r4, pc}

08015334 <USB_OTG_SelectCore>:
* @param  coreID : USB OTG Core ID
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_SelectCore(USB_OTG_CORE_HANDLE *pdev, 
                               USB_OTG_CORE_ID_TypeDef coreID)
{
 8015334:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i , baseAddress = 0;
  USB_OTG_STS status = USB_OTG_OK;
  
  pdev->cfg.dma_enable       = 0;
 8015336:	2300      	movs	r3, #0
  
  /* at startup the core is in FS mode */
  pdev->cfg.speed            = USB_OTG_SPEED_FULL;
 8015338:	2201      	movs	r2, #1
  pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;    
 801533a:	2440      	movs	r4, #64	; 0x40
  
  /* initialize device cfg following its address */
  if (coreID == USB_OTG_FS_CORE_ID)
 801533c:	2901      	cmp	r1, #1
                               USB_OTG_CORE_ID_TypeDef coreID)
{
  uint32_t i , baseAddress = 0;
  USB_OTG_STS status = USB_OTG_OK;
  
  pdev->cfg.dma_enable       = 0;
 801533e:	70c3      	strb	r3, [r0, #3]
  
  /* at startup the core is in FS mode */
  pdev->cfg.speed            = USB_OTG_SPEED_FULL;
 8015340:	7082      	strb	r2, [r0, #2]
  pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;    
 8015342:	8084      	strh	r4, [r0, #4]
  
  /* initialize device cfg following its address */
  if (coreID == USB_OTG_FS_CORE_ID)
 8015344:	d10c      	bne.n	8015360 <USB_OTG_SelectCore+0x2c>
    baseAddress                = USB_OTG_FS_BASE_ADDR;
    pdev->cfg.coreID           = USB_OTG_FS_CORE_ID;
    pdev->cfg.host_channels    = 8 ;
    pdev->cfg.dev_endpoints    = 4 ;
    pdev->cfg.TotalFifoSize    = 320; /* in 32-bits */
    pdev->cfg.phy_itface       = USB_OTG_EMBEDDED_PHY;     
 8015346:	2302      	movs	r3, #2
  /* initialize device cfg following its address */
  if (coreID == USB_OTG_FS_CORE_ID)
  {
    baseAddress                = USB_OTG_FS_BASE_ADDR;
    pdev->cfg.coreID           = USB_OTG_FS_CORE_ID;
    pdev->cfg.host_channels    = 8 ;
 8015348:	2608      	movs	r6, #8
    pdev->cfg.dev_endpoints    = 4 ;
 801534a:	2204      	movs	r2, #4
    pdev->cfg.TotalFifoSize    = 320; /* in 32-bits */
 801534c:	f44f 74a0 	mov.w	r4, #320	; 0x140
    pdev->cfg.phy_itface       = USB_OTG_EMBEDDED_PHY;     
 8015350:	7203      	strb	r3, [r0, #8]
  
  /* initialize device cfg following its address */
  if (coreID == USB_OTG_FS_CORE_ID)
  {
    baseAddress                = USB_OTG_FS_BASE_ADDR;
    pdev->cfg.coreID           = USB_OTG_FS_CORE_ID;
 8015352:	72c1      	strb	r1, [r0, #11]
    pdev->cfg.host_channels    = 8 ;
 8015354:	7006      	strb	r6, [r0, #0]
    pdev->cfg.dev_endpoints    = 4 ;
 8015356:	7042      	strb	r2, [r0, #1]
    pdev->cfg.TotalFifoSize    = 320; /* in 32-bits */
 8015358:	80c4      	strh	r4, [r0, #6]
  pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;    
  
  /* initialize device cfg following its address */
  if (coreID == USB_OTG_FS_CORE_ID)
  {
    baseAddress                = USB_OTG_FS_BASE_ADDR;
 801535a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801535e:	e009      	b.n	8015374 <USB_OTG_SelectCore+0x40>
    
#ifdef USB_OTG_FS_LOW_PWR_MGMT_SUPPORT    
    pdev->cfg.low_power        = 1;    
#endif     
  }
  else if (coreID == USB_OTG_HS_CORE_ID)
 8015360:	b941      	cbnz	r1, 8015374 <USB_OTG_SelectCore+0x40>
  {
    baseAddress                = USB_OTG_HS_BASE_ADDR;
    pdev->cfg.coreID           = USB_OTG_HS_CORE_ID;    
    pdev->cfg.host_channels    = 12 ;
 8015362:	230c      	movs	r3, #12
#endif     
  }
  else if (coreID == USB_OTG_HS_CORE_ID)
  {
    baseAddress                = USB_OTG_HS_BASE_ADDR;
    pdev->cfg.coreID           = USB_OTG_HS_CORE_ID;    
 8015364:	72c1      	strb	r1, [r0, #11]
    pdev->cfg.host_channels    = 12 ;
 8015366:	7003      	strb	r3, [r0, #0]
    pdev->cfg.dev_endpoints    = 6 ;
 8015368:	2106      	movs	r1, #6
    pdev->cfg.TotalFifoSize    = 1280;/* in 32-bits */
 801536a:	f44f 65a0 	mov.w	r5, #1280	; 0x500
    pdev->cfg.low_power        = 1;    
#endif     
  }
  else if (coreID == USB_OTG_HS_CORE_ID)
  {
    baseAddress                = USB_OTG_HS_BASE_ADDR;
 801536e:	4b20      	ldr	r3, [pc, #128]	; (80153f0 <USB_OTG_SelectCore+0xbc>)
    pdev->cfg.coreID           = USB_OTG_HS_CORE_ID;    
    pdev->cfg.host_channels    = 12 ;
    pdev->cfg.dev_endpoints    = 6 ;
 8015370:	7041      	strb	r1, [r0, #1]
    pdev->cfg.TotalFifoSize    = 1280;/* in 32-bits */
 8015372:	80c5      	strh	r5, [r0, #6]
    
  }
  
  pdev->regs.GREGS = (USB_OTG_GREGS *)(baseAddress + \
    USB_OTG_CORE_GLOBAL_REGS_OFFSET);
  pdev->regs.DREGS =  (USB_OTG_DREGS  *)  (baseAddress + \
 8015374:	f503 6100 	add.w	r1, r3, #2048	; 0x800
    USB_OTG_DEV_GLOBAL_REG_OFFSET);
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8015378:	7845      	ldrb	r5, [r0, #1]
    
  }
  
  pdev->regs.GREGS = (USB_OTG_GREGS *)(baseAddress + \
    USB_OTG_CORE_GLOBAL_REGS_OFFSET);
  pdev->regs.DREGS =  (USB_OTG_DREGS  *)  (baseAddress + \
 801537a:	6101      	str	r1, [r0, #16]
    pdev->cfg.low_power        = 1;    
#endif 
    
  }
  
  pdev->regs.GREGS = (USB_OTG_GREGS *)(baseAddress + \
 801537c:	60c3      	str	r3, [r0, #12]
 801537e:	4602      	mov	r2, r0
    USB_OTG_CORE_GLOBAL_REGS_OFFSET);
  pdev->regs.DREGS =  (USB_OTG_DREGS  *)  (baseAddress + \
    USB_OTG_DEV_GLOBAL_REG_OFFSET);
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8015380:	4619      	mov	r1, r3
 8015382:	2400      	movs	r4, #0
 8015384:	3204      	adds	r2, #4
 8015386:	42ac      	cmp	r4, r5
 8015388:	f101 0620 	add.w	r6, r1, #32
 801538c:	d208      	bcs.n	80153a0 <USB_OTG_SelectCore+0x6c>
*         Initialize core registers address.
* @param  pdev : Selected device
* @param  coreID : USB OTG Core ID
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_SelectCore(USB_OTG_CORE_HANDLE *pdev, 
 801538e:	f501 6710 	add.w	r7, r1, #2304	; 0x900
 8015392:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
  {
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
 8015396:	6511      	str	r1, [r2, #80]	; 0x50
  pdev->regs.DREGS =  (USB_OTG_DREGS  *)  (baseAddress + \
    USB_OTG_DEV_GLOBAL_REG_OFFSET);
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
  {
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
 8015398:	6157      	str	r7, [r2, #20]
  pdev->regs.GREGS = (USB_OTG_GREGS *)(baseAddress + \
    USB_OTG_CORE_GLOBAL_REGS_OFFSET);
  pdev->regs.DREGS =  (USB_OTG_DREGS  *)  (baseAddress + \
    USB_OTG_DEV_GLOBAL_REG_OFFSET);
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 801539a:	3401      	adds	r4, #1
 801539c:	4631      	mov	r1, r6
 801539e:	e7f1      	b.n	8015384 <USB_OTG_SelectCore+0x50>
        (i * USB_OTG_EP_REG_OFFSET));
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
  }
  pdev->regs.HREGS = (USB_OTG_HREGS *)(baseAddress + \
 80153a0:	f503 6480 	add.w	r4, r3, #1024	; 0x400
    USB_OTG_HOST_GLOBAL_REG_OFFSET);
  pdev->regs.HPRT0 = (uint32_t *)(baseAddress + USB_OTG_HOST_PORT_REGS_OFFSET);
 80153a4:	f503 6188 	add.w	r1, r3, #1088	; 0x440
        (i * USB_OTG_EP_REG_OFFSET));
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
  }
  pdev->regs.HREGS = (USB_OTG_HREGS *)(baseAddress + \
 80153a8:	6144      	str	r4, [r0, #20]
    USB_OTG_HOST_GLOBAL_REG_OFFSET);
  pdev->regs.HPRT0 = (uint32_t *)(baseAddress + USB_OTG_HOST_PORT_REGS_OFFSET);
  
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80153aa:	7804      	ldrb	r4, [r0, #0]
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
  }
  pdev->regs.HREGS = (USB_OTG_HREGS *)(baseAddress + \
    USB_OTG_HOST_GLOBAL_REG_OFFSET);
  pdev->regs.HPRT0 = (uint32_t *)(baseAddress + USB_OTG_HOST_PORT_REGS_OFFSET);
 80153ac:	f8c0 10cc 	str.w	r1, [r0, #204]	; 0xcc
  
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80153b0:	2200      	movs	r2, #0
 80153b2:	f503 61a0 	add.w	r1, r3, #1280	; 0x500
 80153b6:	42a2      	cmp	r2, r4
 80153b8:	d206      	bcs.n	80153c8 <USB_OTG_SelectCore+0x94>
*         Initialize core registers address.
* @param  pdev : Selected device
* @param  coreID : USB OTG Core ID
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_SelectCore(USB_OTG_CORE_HANDLE *pdev, 
 80153ba:	eb00 0582 	add.w	r5, r0, r2, lsl #2
  }
  pdev->regs.HREGS = (USB_OTG_HREGS *)(baseAddress + \
    USB_OTG_HOST_GLOBAL_REG_OFFSET);
  pdev->regs.HPRT0 = (uint32_t *)(baseAddress + USB_OTG_HOST_PORT_REGS_OFFSET);
  
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80153be:	3201      	adds	r2, #1
  {
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
 80153c0:	f8c5 1090 	str.w	r1, [r5, #144]	; 0x90
 80153c4:	3120      	adds	r1, #32
 80153c6:	e7f6      	b.n	80153b6 <USB_OTG_SelectCore+0x82>
 80153c8:	f503 5180 	add.w	r1, r3, #4096	; 0x1000
  }
  pdev->regs.HREGS = (USB_OTG_HREGS *)(baseAddress + \
    USB_OTG_HOST_GLOBAL_REG_OFFSET);
  pdev->regs.HPRT0 = (uint32_t *)(baseAddress + USB_OTG_HOST_PORT_REGS_OFFSET);
  
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80153cc:	2200      	movs	r2, #0
  {
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
        (i * USB_OTG_CHAN_REGS_OFFSET));
  }
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80153ce:	42a2      	cmp	r2, r4
 80153d0:	d207      	bcs.n	80153e2 <USB_OTG_SelectCore+0xae>
*         Initialize core registers address.
* @param  pdev : Selected device
* @param  coreID : USB OTG Core ID
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_SelectCore(USB_OTG_CORE_HANDLE *pdev, 
 80153d2:	eb00 0582 	add.w	r5, r0, r2, lsl #2
  {
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
        (i * USB_OTG_CHAN_REGS_OFFSET));
  }
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80153d6:	3201      	adds	r2, #1
  {
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 80153d8:	f8c5 10d0 	str.w	r1, [r5, #208]	; 0xd0
 80153dc:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 80153e0:	e7f5      	b.n	80153ce <USB_OTG_SelectCore+0x9a>
      (i * USB_OTG_DATA_FIFO_SIZE));
  }
  pdev->regs.PCGCCTL = (uint32_t *)(baseAddress + USB_OTG_PCGCCTL_OFFSET);
 80153e2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80153e6:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  
  return status;
}
 80153ea:	2000      	movs	r0, #0
 80153ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80153ee:	bf00      	nop
 80153f0:	40040000 	.word	0x40040000

080153f4 <USB_OTG_CoreInit>:
*         device mode or host mode operation.
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_CoreInit(USB_OTG_CORE_HANDLE *pdev)
{
 80153f4:	b538      	push	{r3, r4, r5, lr}
  gccfg.d32 = 0;
  ahbcfg.d32 = 0;
  
  
  
  if (pdev->cfg.phy_itface == USB_OTG_ULPI_PHY)
 80153f6:	7a03      	ldrb	r3, [r0, #8]
  USB_OTG_GCCFG_TypeDef    gccfg;
  USB_OTG_GAHBCFG_TypeDef  ahbcfg;
  
  usbcfg.d32 = 0;
  gccfg.d32 = 0;
  ahbcfg.d32 = 0;
 80153f8:	2500      	movs	r5, #0
  
  
  
  if (pdev->cfg.phy_itface == USB_OTG_ULPI_PHY)
 80153fa:	2b01      	cmp	r3, #1
*         device mode or host mode operation.
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_CoreInit(USB_OTG_CORE_HANDLE *pdev)
{
 80153fc:	4604      	mov	r4, r0
 80153fe:	68c3      	ldr	r3, [r0, #12]
  gccfg.d32 = 0;
  ahbcfg.d32 = 0;
  
  
  
  if (pdev->cfg.phy_itface == USB_OTG_ULPI_PHY)
 8015400:	d11f      	bne.n	8015442 <USB_OTG_CoreInit+0x4e>
  {
    gccfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GCCFG);
 8015402:	6b98      	ldr	r0, [r3, #56]	; 0x38
    gccfg.b.pwdn = 0;
    
    if (pdev->cfg.Sof_output)
 8015404:	7a61      	ldrb	r1, [r4, #9]
  
  
  if (pdev->cfg.phy_itface == USB_OTG_ULPI_PHY)
  {
    gccfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GCCFG);
    gccfg.b.pwdn = 0;
 8015406:	f365 4010 	bfi	r0, r5, #16, #1
    
    if (pdev->cfg.Sof_output)
 801540a:	b109      	cbz	r1, 8015410 <USB_OTG_CoreInit+0x1c>
    {
      gccfg.b.sofouten = 1;   
 801540c:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    }
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GCCFG, gccfg.d32);
 8015410:	6398      	str	r0, [r3, #56]	; 0x38
    
    /* Init The ULPI Interface */
    usbcfg.d32 = 0;
    usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 8015412:	68da      	ldr	r2, [r3, #12]
    
    usbcfg.b.physel            = 0; /* HS Interface */
 8015414:	f36f 1286 	bfc	r2, #6, #1
#else
#ifdef USB_OTG_EXTERNAL_VBUS_ENABLED    
    usbcfg.b.ulpi_ext_vbus_drv = 1; /* Use external VBUS */
#endif
#endif 
    usbcfg.b.term_sel_dl_pulse = 0; /* Data line pulsing using utmi_txvalid */    
 8015418:	f36f 5296 	bfc	r2, #22, #1
    
    usbcfg.b.ulpi_fsls = 0;
 801541c:	f36f 4251 	bfc	r2, #17, #1
    usbcfg.b.ulpi_clk_sus_m = 0;
 8015420:	f36f 42d3 	bfc	r2, #19, #1
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 8015424:	60da      	str	r2, [r3, #12]
    
    /* Reset after a PHY select  */
    USB_OTG_CoreReset(pdev);
 8015426:	4620      	mov	r0, r4
 8015428:	f7ff ff3a 	bl	80152a0 <USB_OTG_CoreReset>
    
    if(pdev->cfg.dma_enable == 1)
 801542c:	78e3      	ldrb	r3, [r4, #3]
 801542e:	2b01      	cmp	r3, #1
 8015430:	d119      	bne.n	8015466 <USB_OTG_CoreInit+0x72>
    {
      
      ahbcfg.b.hburstlen = 5; /* 64 x 32-bits*/
 8015432:	2105      	movs	r1, #5
 8015434:	f361 0544 	bfi	r5, r1, #1, #4
      ahbcfg.b.dmaenable = 1;
      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32);
 8015438:	68e0      	ldr	r0, [r4, #12]
    
    if(pdev->cfg.dma_enable == 1)
    {
      
      ahbcfg.b.hburstlen = 5; /* 64 x 32-bits*/
      ahbcfg.b.dmaenable = 1;
 801543a:	f045 0520 	orr.w	r5, r5, #32
      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32);
 801543e:	6085      	str	r5, [r0, #8]
 8015440:	e011      	b.n	8015466 <USB_OTG_CoreInit+0x72>
    }    
  }
  else /* FS interface (embedded Phy) */
  {
    
    usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);;
 8015442:	68da      	ldr	r2, [r3, #12]
    usbcfg.b.physel  = 1; /* FS Interface */
 8015444:	f042 0140 	orr.w	r1, r2, #64	; 0x40
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 8015448:	60d9      	str	r1, [r3, #12]
    /* Reset after a PHY select and set Host mode */
    USB_OTG_CoreReset(pdev);
 801544a:	f7ff ff29 	bl	80152a0 <USB_OTG_CoreReset>
    gccfg.b.vbussensingB = 1 ;     
#ifndef VBUS_SENSING_ENABLED
    gccfg.b.disablevbussensing = 1; 
#endif    
    
    if(pdev->cfg.Sof_output)
 801544e:	7a60      	ldrb	r0, [r4, #9]
    {
      gccfg.b.sofouten = 1;  
    }
    
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GCCFG, gccfg.d32);
 8015450:	68e3      	ldr	r3, [r4, #12]
    gccfg.b.disablevbussensing = 1; 
#endif    
    
    if(pdev->cfg.Sof_output)
    {
      gccfg.b.sofouten = 1;  
 8015452:	2800      	cmp	r0, #0
 8015454:	bf0c      	ite	eq
 8015456:	f44f 1234 	moveq.w	r2, #2949120	; 0x2d0000
 801545a:	f44f 1274 	movne.w	r2, #3997696	; 0x3d0000
    }
    
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GCCFG, gccfg.d32);
 801545e:	639a      	str	r2, [r3, #56]	; 0x38
    USB_OTG_BSP_mDelay(20);
 8015460:	2014      	movs	r0, #20
 8015462:	f7fd fa6a 	bl	801293a <USB_OTG_BSP_mDelay>
  }
  /* case the HS core is working in FS mode */
  if(pdev->cfg.dma_enable == 1)
 8015466:	78e2      	ldrb	r2, [r4, #3]
 8015468:	2a01      	cmp	r2, #1
 801546a:	d106      	bne.n	801547a <USB_OTG_CoreInit+0x86>
  {
    
    ahbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GAHBCFG);
 801546c:	68e3      	ldr	r3, [r4, #12]
 801546e:	6899      	ldr	r1, [r3, #8]
    ahbcfg.b.hburstlen = 5; /* 64 x 32-bits*/
 8015470:	f021 003e 	bic.w	r0, r1, #62	; 0x3e
    ahbcfg.b.dmaenable = 1;
 8015474:	f040 022a 	orr.w	r2, r0, #42	; 0x2a
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32);
 8015478:	609a      	str	r2, [r3, #8]
    
  }
  /* initialize OTG features */
#ifdef  USE_OTG_MODE
  usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 801547a:	68e3      	ldr	r3, [r4, #12]
 801547c:	68d9      	ldr	r1, [r3, #12]
  usbcfg.b.hnpcap = 1;
  usbcfg.b.srpcap = 1;
 801547e:	f441 7040 	orr.w	r0, r1, #768	; 0x300
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 8015482:	60d8      	str	r0, [r3, #12]
  USB_OTG_EnableCommonInt(pdev);
 8015484:	4620      	mov	r0, r4
 8015486:	f7ff ff01 	bl	801528c <USB_OTG_EnableCommonInt>
#endif
  return status;
}
 801548a:	2000      	movs	r0, #0
 801548c:	bd38      	pop	{r3, r4, r5, pc}

0801548e <USB_OTG_EnableGlobalInt>:
  USB_OTG_STS status = USB_OTG_OK;
  USB_OTG_GAHBCFG_TypeDef  ahbcfg;
  
  ahbcfg.d32 = 0;
  ahbcfg.b.glblintrmsk = 1; /* Enable interrupts */
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GAHBCFG, 0, ahbcfg.d32);
 801548e:	68c3      	ldr	r3, [r0, #12]
 8015490:	689a      	ldr	r2, [r3, #8]
 8015492:	f042 0001 	orr.w	r0, r2, #1
 8015496:	6098      	str	r0, [r3, #8]
  return status;
}
 8015498:	2000      	movs	r0, #0
 801549a:	4770      	bx	lr

0801549c <USB_OTG_DisableGlobalInt>:
{
  USB_OTG_STS status = USB_OTG_OK;
  USB_OTG_GAHBCFG_TypeDef  ahbcfg;
  ahbcfg.d32 = 0;
  ahbcfg.b.glblintrmsk = 1; /* Enable interrupts */
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32, 0);
 801549c:	68c3      	ldr	r3, [r0, #12]
 801549e:	689a      	ldr	r2, [r3, #8]
 80154a0:	f022 0001 	bic.w	r0, r2, #1
 80154a4:	6098      	str	r0, [r3, #8]
  return status;
}
 80154a6:	2000      	movs	r0, #0
 80154a8:	4770      	bx	lr
	...

080154ac <USB_OTG_FlushTxFifo>:
* @param  pdev : Selected device
* @param  num : FO num
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_FlushTxFifo (USB_OTG_CORE_HANDLE *pdev , uint32_t num )
{
 80154ac:	b507      	push	{r0, r1, r2, lr}
  USB_OTG_STS status = USB_OTG_OK;
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  
  uint32_t count = 0;
  greset.d32 = 0;
 80154ae:	2300      	movs	r3, #0
 80154b0:	9301      	str	r3, [sp, #4]
  greset.b.txfflsh = 1;
 80154b2:	9a01      	ldr	r2, [sp, #4]
 80154b4:	f042 0320 	orr.w	r3, r2, #32
 80154b8:	9301      	str	r3, [sp, #4]
  greset.b.txfnum  = num;
 80154ba:	9a01      	ldr	r2, [sp, #4]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GRSTCTL, greset.d32 );
 80154bc:	4b09      	ldr	r3, [pc, #36]	; (80154e4 <USB_OTG_FlushTxFifo+0x38>)
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  
  uint32_t count = 0;
  greset.d32 = 0;
  greset.b.txfflsh = 1;
  greset.b.txfnum  = num;
 80154be:	f361 128a 	bfi	r2, r1, #6, #5
 80154c2:	9201      	str	r2, [sp, #4]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GRSTCTL, greset.d32 );
 80154c4:	68c2      	ldr	r2, [r0, #12]
 80154c6:	9801      	ldr	r0, [sp, #4]
 80154c8:	6110      	str	r0, [r2, #16]
  do
  {
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
 80154ca:	6911      	ldr	r1, [r2, #16]
    if (++count > 200000)
 80154cc:	3b01      	subs	r3, #1
  greset.b.txfflsh = 1;
  greset.b.txfnum  = num;
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GRSTCTL, greset.d32 );
  do
  {
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
 80154ce:	9101      	str	r1, [sp, #4]
    if (++count > 200000)
 80154d0:	d002      	beq.n	80154d8 <USB_OTG_FlushTxFifo+0x2c>
    {
      break;
    }
  }
  while (greset.b.txfflsh == 1);
 80154d2:	9801      	ldr	r0, [sp, #4]
 80154d4:	0680      	lsls	r0, r0, #26
 80154d6:	d4f8      	bmi.n	80154ca <USB_OTG_FlushTxFifo+0x1e>
  /* Wait for 3 PHY Clocks*/
  USB_OTG_BSP_uDelay(3);
 80154d8:	2003      	movs	r0, #3
 80154da:	f7fd fa2b 	bl	8012934 <USB_OTG_BSP_uDelay>
  return status;
}
 80154de:	2000      	movs	r0, #0
 80154e0:	bd0e      	pop	{r1, r2, r3, pc}
 80154e2:	bf00      	nop
 80154e4:	00030d41 	.word	0x00030d41

080154e8 <USB_OTG_FlushRxFifo>:
* @brief  USB_OTG_FlushRxFifo : Flush a Rx FIFO
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_FlushRxFifo( USB_OTG_CORE_HANDLE *pdev )
{
 80154e8:	b507      	push	{r0, r1, r2, lr}
  USB_OTG_STS status = USB_OTG_OK;
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  uint32_t count = 0;
  
  greset.d32 = 0;
 80154ea:	2300      	movs	r3, #0
 80154ec:	9301      	str	r3, [sp, #4]
  greset.b.rxfflsh = 1;
 80154ee:	9901      	ldr	r1, [sp, #4]
 80154f0:	f041 0210 	orr.w	r2, r1, #16
 80154f4:	9201      	str	r2, [sp, #4]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GRSTCTL, greset.d32 );
 80154f6:	68c0      	ldr	r0, [r0, #12]
 80154f8:	9b01      	ldr	r3, [sp, #4]
 80154fa:	4a07      	ldr	r2, [pc, #28]	; (8015518 <USB_OTG_FlushRxFifo+0x30>)
 80154fc:	6103      	str	r3, [r0, #16]
  do
  {
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
 80154fe:	6901      	ldr	r1, [r0, #16]
    if (++count > 200000)
 8015500:	3a01      	subs	r2, #1
  greset.d32 = 0;
  greset.b.rxfflsh = 1;
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GRSTCTL, greset.d32 );
  do
  {
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
 8015502:	9101      	str	r1, [sp, #4]
    if (++count > 200000)
 8015504:	d002      	beq.n	801550c <USB_OTG_FlushRxFifo+0x24>
    {
      break;
    }
  }
  while (greset.b.rxfflsh == 1);
 8015506:	9b01      	ldr	r3, [sp, #4]
 8015508:	06d9      	lsls	r1, r3, #27
 801550a:	d4f8      	bmi.n	80154fe <USB_OTG_FlushRxFifo+0x16>
  /* Wait for 3 PHY Clocks*/
  USB_OTG_BSP_uDelay(3);
 801550c:	2003      	movs	r0, #3
 801550e:	f7fd fa11 	bl	8012934 <USB_OTG_BSP_uDelay>
  return status;
}
 8015512:	2000      	movs	r0, #0
 8015514:	bd0e      	pop	{r1, r2, r3, pc}
 8015516:	bf00      	nop
 8015518:	00030d41 	.word	0x00030d41

0801551c <USB_OTG_SetCurrentMode>:
USB_OTG_STS USB_OTG_SetCurrentMode(USB_OTG_CORE_HANDLE *pdev , uint8_t mode)
{
  USB_OTG_STS status = USB_OTG_OK;
  USB_OTG_GUSBCFG_TypeDef  usbcfg;
  
  usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 801551c:	68c2      	ldr	r2, [r0, #12]
* @param  pdev : Selected device
* @param  mode :  (Host/device)
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_SetCurrentMode(USB_OTG_CORE_HANDLE *pdev , uint8_t mode)
{
 801551e:	b508      	push	{r3, lr}
  USB_OTG_STS status = USB_OTG_OK;
  USB_OTG_GUSBCFG_TypeDef  usbcfg;
  
  usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 8015520:	68d3      	ldr	r3, [r2, #12]
  
  usbcfg.b.force_host = 0;
  usbcfg.b.force_dev = 0;
  
  if ( mode == HOST_MODE)
 8015522:	2901      	cmp	r1, #1
  USB_OTG_STS status = USB_OTG_OK;
  USB_OTG_GUSBCFG_TypeDef  usbcfg;
  
  usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
  
  usbcfg.b.force_host = 0;
 8015524:	f36f 735d 	bfc	r3, #29, #1
  usbcfg.b.force_dev = 0;
 8015528:	f36f 739e 	bfc	r3, #30, #1
  
  if ( mode == HOST_MODE)
 801552c:	d102      	bne.n	8015534 <USB_OTG_SetCurrentMode+0x18>
  {
    usbcfg.b.force_host = 1;
 801552e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8015532:	e002      	b.n	801553a <USB_OTG_SetCurrentMode+0x1e>
  }
  else if ( mode == DEVICE_MODE)
 8015534:	b909      	cbnz	r1, 801553a <USB_OTG_SetCurrentMode+0x1e>
  {
    usbcfg.b.force_dev = 1;
 8015536:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  }
  
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
  USB_OTG_BSP_mDelay(50);
 801553a:	2032      	movs	r0, #50	; 0x32
  else if ( mode == DEVICE_MODE)
  {
    usbcfg.b.force_dev = 1;
  }
  
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 801553c:	60d3      	str	r3, [r2, #12]
  USB_OTG_BSP_mDelay(50);
 801553e:	f7fd f9fc 	bl	801293a <USB_OTG_BSP_mDelay>
  return status;
}
 8015542:	2000      	movs	r0, #0
 8015544:	bd08      	pop	{r3, pc}

08015546 <USB_OTG_IsDeviceMode>:
* @param  pdev : Selected device
* @retval current mode
*/
uint32_t USB_OTG_GetMode(USB_OTG_CORE_HANDLE *pdev)
{
  return (USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTSTS ) & 0x1);
 8015546:	68c3      	ldr	r3, [r0, #12]
 8015548:	6958      	ldr	r0, [r3, #20]
 801554a:	f000 0101 	and.w	r1, r0, #1
* @retval num_in_ep
*/
uint8_t USB_OTG_IsDeviceMode(USB_OTG_CORE_HANDLE *pdev)
{
  return (USB_OTG_GetMode(pdev) != HOST_MODE);
}
 801554e:	f081 0001 	eor.w	r0, r1, #1
 8015552:	4770      	bx	lr

08015554 <USB_OTG_IsHostMode>:
* @param  pdev : Selected device
* @retval current mode
*/
uint32_t USB_OTG_GetMode(USB_OTG_CORE_HANDLE *pdev)
{
  return (USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTSTS ) & 0x1);
 8015554:	68c3      	ldr	r3, [r0, #12]
 8015556:	6958      	ldr	r0, [r3, #20]
* @retval num_in_ep
*/
uint8_t USB_OTG_IsHostMode(USB_OTG_CORE_HANDLE *pdev)
{
  return (USB_OTG_GetMode(pdev) == HOST_MODE);
}
 8015558:	f000 0001 	and.w	r0, r0, #1
 801555c:	4770      	bx	lr

0801555e <USB_OTG_ReadCoreItr>:
* @retval Status
*/
uint32_t USB_OTG_ReadCoreItr(USB_OTG_CORE_HANDLE *pdev)
{
  uint32_t v = 0;
  v = USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTSTS);
 801555e:	68c3      	ldr	r3, [r0, #12]
 8015560:	695a      	ldr	r2, [r3, #20]
  v &= USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTMSK);
 8015562:	6998      	ldr	r0, [r3, #24]
  return v;
}
 8015564:	4010      	ands	r0, r2
 8015566:	4770      	bx	lr

08015568 <USB_OTG_IsEvenFrame>:
* @param  pdev : Selected device
* @retval Frame number
*/
uint8_t USB_OTG_IsEvenFrame (USB_OTG_CORE_HANDLE *pdev) 
{
  return !(USB_OTG_READ_REG32(&pdev->regs.HREGS->HFNUM) & 0x1);
 8015568:	6943      	ldr	r3, [r0, #20]
 801556a:	6898      	ldr	r0, [r3, #8]
 801556c:	f000 0101 	and.w	r1, r0, #1
}
 8015570:	f081 0001 	eor.w	r0, r1, #1
 8015574:	4770      	bx	lr

08015576 <USB_OTG_EnableHostInt>:
* @brief  USB_OTG_EnableHostInt: Enables the Host mode interrupts
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EnableHostInt(USB_OTG_CORE_HANDLE *pdev)
{
 8015576:	b538      	push	{r3, r4, r5, lr}
  USB_OTG_STS       status = USB_OTG_OK;
  USB_OTG_GINTMSK_TypeDef  intmsk;
  intmsk.d32 = 0;
  /* Disable all interrupts. */
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTMSK, 0);
 8015578:	68c3      	ldr	r3, [r0, #12]
* @brief  USB_OTG_EnableHostInt: Enables the Host mode interrupts
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EnableHostInt(USB_OTG_CORE_HANDLE *pdev)
{
 801557a:	4604      	mov	r4, r0
  USB_OTG_STS       status = USB_OTG_OK;
  USB_OTG_GINTMSK_TypeDef  intmsk;
  intmsk.d32 = 0;
 801557c:	2500      	movs	r5, #0
  /* Disable all interrupts. */
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTMSK, 0);
  
  /* Clear any pending interrupts. */
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, 0xFFFFFFFF);
 801557e:	f04f 32ff 	mov.w	r2, #4294967295
{
  USB_OTG_STS       status = USB_OTG_OK;
  USB_OTG_GINTMSK_TypeDef  intmsk;
  intmsk.d32 = 0;
  /* Disable all interrupts. */
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTMSK, 0);
 8015582:	619d      	str	r5, [r3, #24]
  
  /* Clear any pending interrupts. */
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, 0xFFFFFFFF);
 8015584:	615a      	str	r2, [r3, #20]
  
  /* Enable the common interrupts */
  USB_OTG_EnableCommonInt(pdev);
 8015586:	f7ff fe81 	bl	801528c <USB_OTG_EnableCommonInt>
  
  if (pdev->cfg.dma_enable == 0)
 801558a:	78e0      	ldrb	r0, [r4, #3]
  {  
    intmsk.b.rxstsqlvl  = 1;
 801558c:	42a8      	cmp	r0, r5
 801558e:	bf0c      	ite	eq
 8015590:	2110      	moveq	r1, #16
 8015592:	4629      	movne	r1, r5
  }  
  intmsk.b.portintr   = 1;
  intmsk.b.hcintr     = 1;
  intmsk.b.disconnect = 1;  
 8015594:	f041 530c 	orr.w	r3, r1, #587202560	; 0x23000000
  intmsk.b.sofintr    = 1;  
 8015598:	f043 0208 	orr.w	r2, r3, #8
  intmsk.b.incomplisoout  = 1; 
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, intmsk.d32, intmsk.d32);
 801559c:	68e3      	ldr	r3, [r4, #12]
 801559e:	6999      	ldr	r1, [r3, #24]
  }  
  intmsk.b.portintr   = 1;
  intmsk.b.hcintr     = 1;
  intmsk.b.disconnect = 1;  
  intmsk.b.sofintr    = 1;  
  intmsk.b.incomplisoout  = 1; 
 80155a0:	f442 1000 	orr.w	r0, r2, #2097152	; 0x200000
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, intmsk.d32, intmsk.d32);
 80155a4:	ea21 0100 	bic.w	r1, r1, r0
 80155a8:	ea41 0200 	orr.w	r2, r1, r0
 80155ac:	619a      	str	r2, [r3, #24]
  return status;
}
 80155ae:	4628      	mov	r0, r5
 80155b0:	bd38      	pop	{r3, r4, r5, pc}

080155b2 <USB_OTG_InitFSLSPClkSel>:
*/
void USB_OTG_InitFSLSPClkSel(USB_OTG_CORE_HANDLE *pdev , uint8_t freq)
{
  USB_OTG_HCFG_TypeDef   hcfg;
  
  hcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HCFG);
 80155b2:	6943      	ldr	r3, [r0, #20]
 80155b4:	681a      	ldr	r2, [r3, #0]
  hcfg.b.fslspclksel = freq;
 80155b6:	f361 0201 	bfi	r2, r1, #0, #2
  USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HCFG, hcfg.d32);
 80155ba:	601a      	str	r2, [r3, #0]
 80155bc:	4770      	bx	lr

080155be <USB_OTG_ReadHPRT0>:
*/
uint32_t USB_OTG_ReadHPRT0(USB_OTG_CORE_HANDLE *pdev)
{
  USB_OTG_HPRT0_TypeDef  hprt0;
  
  hprt0.d32 = USB_OTG_READ_REG32(pdev->regs.HPRT0);
 80155be:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
 80155c2:	6818      	ldr	r0, [r3, #0]
  hprt0.b.prtena = 0;
  hprt0.b.prtconndet = 0;
  hprt0.b.prtenchng = 0;
  hprt0.b.prtovrcurrchng = 0;
  return hprt0.d32;
}
 80155c4:	f020 002e 	bic.w	r0, r0, #46	; 0x2e
 80155c8:	4770      	bx	lr

080155ca <USB_OTG_DriveVbus>:
* @param  pdev : Selected device
* @param  state : VBUS state
* @retval None
*/
void USB_OTG_DriveVbus (USB_OTG_CORE_HANDLE *pdev, uint8_t state)
{
 80155ca:	b538      	push	{r3, r4, r5, lr}
 80155cc:	4604      	mov	r4, r0
 80155ce:	460d      	mov	r5, r1
  USB_OTG_HPRT0_TypeDef     hprt0;
  
  hprt0.d32 = 0;
  
  /* enable disable the external charge pump */
  USB_OTG_BSP_DriveVBUS(pdev, state);
 80155d0:	f7fd f9dc 	bl	801298c <USB_OTG_BSP_DriveVBUS>
  
  /* Turn on the Host port power. */
  hprt0.d32 = USB_OTG_ReadHPRT0(pdev);
 80155d4:	4620      	mov	r0, r4
 80155d6:	f7ff fff2 	bl	80155be <USB_OTG_ReadHPRT0>
  if ((hprt0.b.prtpwr == 0 ) && (state == 1 ))
 80155da:	f3c0 2207 	ubfx	r2, r0, #8, #8
 80155de:	f002 0110 	and.w	r1, r2, #16
 80155e2:	b2cb      	uxtb	r3, r1
 80155e4:	b933      	cbnz	r3, 80155f4 <USB_OTG_DriveVbus+0x2a>
 80155e6:	2d01      	cmp	r5, #1
 80155e8:	d104      	bne.n	80155f4 <USB_OTG_DriveVbus+0x2a>
  {
    hprt0.b.prtpwr = 1;
    USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
 80155ea:	f8d4 20cc 	ldr.w	r2, [r4, #204]	; 0xcc
  
  /* Turn on the Host port power. */
  hprt0.d32 = USB_OTG_ReadHPRT0(pdev);
  if ((hprt0.b.prtpwr == 0 ) && (state == 1 ))
  {
    hprt0.b.prtpwr = 1;
 80155ee:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
    USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
 80155f2:	6010      	str	r0, [r2, #0]
  }
  if ((hprt0.b.prtpwr == 1 ) && (state == 0 ))
 80155f4:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80155f8:	f001 0310 	and.w	r3, r1, #16
 80155fc:	b2da      	uxtb	r2, r3
 80155fe:	b12a      	cbz	r2, 801560c <USB_OTG_DriveVbus+0x42>
 8015600:	b925      	cbnz	r5, 801560c <USB_OTG_DriveVbus+0x42>
  {
    hprt0.b.prtpwr = 0;
    USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
 8015602:	f8d4 10cc 	ldr.w	r1, [r4, #204]	; 0xcc
    hprt0.b.prtpwr = 1;
    USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
  }
  if ((hprt0.b.prtpwr == 1 ) && (state == 0 ))
  {
    hprt0.b.prtpwr = 0;
 8015606:	f365 300c 	bfi	r0, r5, #12, #1
    USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
 801560a:	6008      	str	r0, [r1, #0]
  }
  
  USB_OTG_BSP_mDelay(200);
 801560c:	20c8      	movs	r0, #200	; 0xc8
}
 801560e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  {
    hprt0.b.prtpwr = 0;
    USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
  }
  
  USB_OTG_BSP_mDelay(200);
 8015612:	f7fd b992 	b.w	801293a <USB_OTG_BSP_mDelay>

08015616 <USB_OTG_ReadHostAllChannels_intr>:
* @param  pdev : Selected device
* @retval Status
*/
uint32_t USB_OTG_ReadHostAllChannels_intr (USB_OTG_CORE_HANDLE *pdev)
{
  return (USB_OTG_READ_REG32 (&pdev->regs.HREGS->HAINT));
 8015616:	6943      	ldr	r3, [r0, #20]
 8015618:	6958      	ldr	r0, [r3, #20]
}
 801561a:	4770      	bx	lr

0801561c <USB_OTG_ResetPort>:
* @retval status
* @note : (1)The application must wait at least 10 ms (+ 10 ms security)
*   before clearing the reset bit.
*/
uint32_t USB_OTG_ResetPort(USB_OTG_CORE_HANDLE *pdev)
{
 801561c:	b538      	push	{r3, r4, r5, lr}
 801561e:	4605      	mov	r5, r0
  USB_OTG_HPRT0_TypeDef  hprt0;
  
  hprt0.d32 = USB_OTG_ReadHPRT0(pdev);
 8015620:	f7ff ffcd 	bl	80155be <USB_OTG_ReadHPRT0>
  hprt0.b.prtrst = 1;
  USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
 8015624:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
uint32_t USB_OTG_ResetPort(USB_OTG_CORE_HANDLE *pdev)
{
  USB_OTG_HPRT0_TypeDef  hprt0;
  
  hprt0.d32 = USB_OTG_ReadHPRT0(pdev);
  hprt0.b.prtrst = 1;
 8015628:	f440 7480 	orr.w	r4, r0, #256	; 0x100
  USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
 801562c:	601c      	str	r4, [r3, #0]
  USB_OTG_BSP_mDelay (10);                                /* See Note #1 */
 801562e:	200a      	movs	r0, #10
 8015630:	f7fd f983 	bl	801293a <USB_OTG_BSP_mDelay>
  hprt0.b.prtrst = 0;
  USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
 8015634:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
  
  hprt0.d32 = USB_OTG_ReadHPRT0(pdev);
  hprt0.b.prtrst = 1;
  USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
  USB_OTG_BSP_mDelay (10);                                /* See Note #1 */
  hprt0.b.prtrst = 0;
 8015638:	f36f 2408 	bfc	r4, #8, #1
  USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0.d32);
 801563c:	6004      	str	r4, [r0, #0]
  USB_OTG_BSP_mDelay (20);   
 801563e:	2014      	movs	r0, #20
 8015640:	f7fd f97b 	bl	801293a <USB_OTG_BSP_mDelay>
  return 1;
}
 8015644:	2001      	movs	r0, #1
 8015646:	bd38      	pop	{r3, r4, r5, pc}

08015648 <USB_OTG_CoreInitHost>:
* @brief  USB_OTG_CoreInitHost : Initializes USB_OTG controller for host mode
* @param  pdev : Selected device
* @retval status
*/
USB_OTG_STS USB_OTG_CoreInitHost(USB_OTG_CORE_HANDLE *pdev)
{
 8015648:	b570      	push	{r4, r5, r6, lr}
 801564a:	4604      	mov	r4, r0
#endif
  hcfg.d32 = 0;
  
  
  /* configure charge pump IO */
  USB_OTG_BSP_ConfigVBUS(pdev);
 801564c:	f7fd f97c 	bl	8012948 <USB_OTG_BSP_ConfigVBUS>
  
  /* Restart the Phy Clock */
  USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, 0);
 8015650:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
  //USB_OTG_OTGCTL_TypeDef          gotgctl;
#endif
  
  uint32_t                        i = 0;
  
  nptxfifosize.d32 = 0;  
 8015654:	2500      	movs	r5, #0
  
  /* configure charge pump IO */
  USB_OTG_BSP_ConfigVBUS(pdev);
  
  /* Restart the Phy Clock */
  USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, 0);
 8015656:	601d      	str	r5, [r3, #0]
  
  /* Initialize Host Configuration Register */
  if (pdev->cfg.phy_itface == USB_OTG_ULPI_PHY)
 8015658:	7a21      	ldrb	r1, [r4, #8]
 801565a:	2901      	cmp	r1, #1
  {
    USB_OTG_InitFSLSPClkSel(pdev , HCFG_30_60_MHZ); 
 801565c:	bf08      	it	eq
 801565e:	4629      	moveq	r1, r5
 8015660:	4620      	mov	r0, r4
  }
  else
  {
    USB_OTG_InitFSLSPClkSel(pdev , HCFG_48_MHZ); 
 8015662:	bf18      	it	ne
 8015664:	2101      	movne	r1, #1
 8015666:	f7ff ffa4 	bl	80155b2 <USB_OTG_InitFSLSPClkSel>
  }
  USB_OTG_ResetPort(pdev);
 801566a:	4620      	mov	r0, r4
 801566c:	f7ff ffd6 	bl	801561c <USB_OTG_ResetPort>
  
  hcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HCFG);
 8015670:	6960      	ldr	r0, [r4, #20]
 8015672:	6802      	ldr	r2, [r0, #0]
  hcfg.b.fslssupp = 0;
 8015674:	f36f 0282 	bfc	r2, #2, #1
  USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HCFG, hcfg.d32);
 8015678:	6002      	str	r2, [r0, #0]
  
  /* Configure data FIFO sizes */
  /* Rx FIFO */
#ifdef USB_OTG_FS_CORE
  if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID)
 801567a:	7ae3      	ldrb	r3, [r4, #11]
 801567c:	2b01      	cmp	r3, #1
#endif
  
  uint32_t                        i = 0;
  
  nptxfifosize.d32 = 0;  
  ptxfifosize.d32 = 0;
 801567e:	462e      	mov	r6, r5
  USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HCFG, hcfg.d32);
  
  /* Configure data FIFO sizes */
  /* Rx FIFO */
#ifdef USB_OTG_FS_CORE
  if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID)
 8015680:	d10e      	bne.n	80156a0 <USB_OTG_CoreInitHost+0x58>
  {
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_FS_SIZE);
 8015682:	2080      	movs	r0, #128	; 0x80
    nptxfifosize.b.startaddr = RX_FIFO_FS_SIZE;   
    nptxfifosize.b.depth = TXH_NP_FS_FIFOSIZ;  
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32);
    
    ptxfifosize.b.startaddr = RX_FIFO_FS_SIZE + TXH_NP_FS_FIFOSIZ;
 8015684:	22e0      	movs	r2, #224	; 0xe0
  /* Rx FIFO */
#ifdef USB_OTG_FS_CORE
  if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID)
  {
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_FS_SIZE);
 8015686:	68e1      	ldr	r1, [r4, #12]
    nptxfifosize.b.startaddr = RX_FIFO_FS_SIZE;   
 8015688:	f360 050f 	bfi	r5, r0, #0, #16
    nptxfifosize.b.depth = TXH_NP_FS_FIFOSIZ;  
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32);
    
    ptxfifosize.b.startaddr = RX_FIFO_FS_SIZE + TXH_NP_FS_FIFOSIZ;
 801568c:	f362 060f 	bfi	r6, r2, #0, #16
  if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID)
  {
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_FS_SIZE);
    nptxfifosize.b.startaddr = RX_FIFO_FS_SIZE;   
    nptxfifosize.b.depth = TXH_NP_FS_FIFOSIZ;  
 8015690:	f2c0 0560 	movt	r5, #96	; 0x60
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32);
    
    ptxfifosize.b.startaddr = RX_FIFO_FS_SIZE + TXH_NP_FS_FIFOSIZ;
    ptxfifosize.b.depth     = TXH_P_FS_FIFOSIZ;
 8015694:	f2c0 0660 	movt	r6, #96	; 0x60
  /* Rx FIFO */
#ifdef USB_OTG_FS_CORE
  if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID)
  {
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_FS_SIZE);
 8015698:	6248      	str	r0, [r1, #36]	; 0x24
    nptxfifosize.b.startaddr = RX_FIFO_FS_SIZE;   
    nptxfifosize.b.depth = TXH_NP_FS_FIFOSIZ;  
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32);
 801569a:	628d      	str	r5, [r1, #40]	; 0x28
    
    ptxfifosize.b.startaddr = RX_FIFO_FS_SIZE + TXH_NP_FS_FIFOSIZ;
    ptxfifosize.b.depth     = TXH_P_FS_FIFOSIZ;
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->HPTXFSIZ, ptxfifosize.d32);      
 801569c:	f8c1 6100 	str.w	r6, [r1, #256]	; 0x100
  
#ifdef USE_OTG_MODE
  /* Clear Host Set HNP Enable in the USB_OTG Control Register */
  //gotgctl.b.hstsethnpen = 1;
  //USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GOTGCTL, gotgctl.d32, 0);
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GOTGCTL, (1 << 11), 0);
 80156a0:	68e3      	ldr	r3, [r4, #12]
 80156a2:	6819      	ldr	r1, [r3, #0]
 80156a4:	f421 6000 	bic.w	r0, r1, #2048	; 0x800
 80156a8:	6018      	str	r0, [r3, #0]
#endif
  
  /* Make sure the FIFOs are flushed. */
  USB_OTG_FlushTxFifo(pdev, 0x10 );         /* all Tx FIFOs */
 80156aa:	2110      	movs	r1, #16
 80156ac:	4620      	mov	r0, r4
 80156ae:	f7ff fefd 	bl	80154ac <USB_OTG_FlushTxFifo>
  USB_OTG_FlushRxFifo(pdev);
 80156b2:	4620      	mov	r0, r4
 80156b4:	f7ff ff18 	bl	80154e8 <USB_OTG_FlushRxFifo>
  
  
  /* Clear all pending HC Interrupts */
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80156b8:	2300      	movs	r3, #0
 80156ba:	7822      	ldrb	r2, [r4, #0]
 80156bc:	4293      	cmp	r3, r2
 80156be:	d20a      	bcs.n	80156d6 <USB_OTG_CoreInitHost+0x8e>
/**
* @brief  USB_OTG_CoreInitHost : Initializes USB_OTG controller for host mode
* @param  pdev : Selected device
* @retval status
*/
USB_OTG_STS USB_OTG_CoreInitHost(USB_OTG_CORE_HANDLE *pdev)
 80156c0:	eb04 0183 	add.w	r1, r4, r3, lsl #2
  
  
  /* Clear all pending HC Interrupts */
  for (i = 0; i < pdev->cfg.host_channels; i++)
  {
    USB_OTG_WRITE_REG32( &pdev->regs.HC_REGS[i]->HCINT, 0xFFFFFFFF );
 80156c4:	f04f 32ff 	mov.w	r2, #4294967295
 80156c8:	f8d1 0090 	ldr.w	r0, [r1, #144]	; 0x90
    USB_OTG_WRITE_REG32( &pdev->regs.HC_REGS[i]->HCINTMSK, 0 );
 80156cc:	2100      	movs	r1, #0
  
  
  /* Clear all pending HC Interrupts */
  for (i = 0; i < pdev->cfg.host_channels; i++)
  {
    USB_OTG_WRITE_REG32( &pdev->regs.HC_REGS[i]->HCINT, 0xFFFFFFFF );
 80156ce:	6082      	str	r2, [r0, #8]
  USB_OTG_FlushTxFifo(pdev, 0x10 );         /* all Tx FIFOs */
  USB_OTG_FlushRxFifo(pdev);
  
  
  /* Clear all pending HC Interrupts */
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80156d0:	3301      	adds	r3, #1
  {
    USB_OTG_WRITE_REG32( &pdev->regs.HC_REGS[i]->HCINT, 0xFFFFFFFF );
    USB_OTG_WRITE_REG32( &pdev->regs.HC_REGS[i]->HCINTMSK, 0 );
 80156d2:	60c1      	str	r1, [r0, #12]
 80156d4:	e7f1      	b.n	80156ba <USB_OTG_CoreInitHost+0x72>
  }
#ifndef USE_OTG_MODE
  USB_OTG_DriveVbus(pdev, 1);
#endif
  
  USB_OTG_EnableHostInt(pdev);
 80156d6:	4620      	mov	r0, r4
 80156d8:	f7ff ff4d 	bl	8015576 <USB_OTG_EnableHostInt>
  return status;
}
 80156dc:	2000      	movs	r0, #0
 80156de:	bd70      	pop	{r4, r5, r6, pc}

080156e0 <USB_OTG_HC_Init>:
* @param  pdev : Selected device
* @param  hc_num : channel number
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_HC_Init(USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num)
{
 80156e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  hcintmsk.d32 = 0;
  hcchar.d32 = 0;
  
  /* Clear old interrupt conditions for this host channel. */
  hcint.d32 = 0xFFFFFFFF;
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCINT, hcint.d32);
 80156e2:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80156e6:	f04f 35ff 	mov.w	r5, #4294967295
 80156ea:	f8d3 4090 	ldr.w	r4, [r3, #144]	; 0x90
 80156ee:	60a5      	str	r5, [r4, #8]
  
  /* Enable channel interrupts required for this transfer. */
  hcintmsk.d32 = 0;
  
  if (pdev->cfg.dma_enable == 1)
 80156f0:	78c6      	ldrb	r6, [r0, #3]
  USB_OTG_HCINTn_TypeDef     hcint;
  
  
  gintmsk.d32 = 0;
  hcintmsk.d32 = 0;
  hcchar.d32 = 0;
 80156f2:	2200      	movs	r2, #0
  /* Enable channel interrupts required for this transfer. */
  hcintmsk.d32 = 0;
  
  if (pdev->cfg.dma_enable == 1)
  {
    hcintmsk.b.ahberr = 1;
 80156f4:	2e01      	cmp	r6, #1
 80156f6:	bf0c      	ite	eq
 80156f8:	2304      	moveq	r3, #4
 80156fa:	4613      	movne	r3, r2
  }
  
  switch (pdev->host.hc[hc_num].ep_type) 
 80156fc:	014e      	lsls	r6, r1, #5
 80156fe:	1987      	adds	r7, r0, r6
 8015700:	f897 5895 	ldrb.w	r5, [r7, #2197]	; 0x895
 8015704:	2d03      	cmp	r5, #3
 8015706:	d82b      	bhi.n	8015760 <USB_OTG_HC_Init+0x80>
 8015708:	e8df f005 	tbb	[pc, r5]
 801570c:	14022002 	.word	0x14022002
    hcintmsk.b.xfercompl = 1;
    hcintmsk.b.stall = 1;
    hcintmsk.b.xacterr = 1;
    hcintmsk.b.datatglerr = 1;
    hcintmsk.b.nak = 1;  
    if (pdev->host.hc[hc_num].ep_is_in) 
 8015710:	eb00 1641 	add.w	r6, r0, r1, lsl #5
  {
  case EP_TYPE_CTRL:
  case EP_TYPE_BULK:
    hcintmsk.b.xfercompl = 1;
    hcintmsk.b.stall = 1;
    hcintmsk.b.xacterr = 1;
 8015714:	f043 0789 	orr.w	r7, r3, #137	; 0x89
    hcintmsk.b.datatglerr = 1;
    hcintmsk.b.nak = 1;  
    if (pdev->host.hc[hc_num].ep_is_in) 
 8015718:	f896 5892 	ldrb.w	r5, [r6, #2194]	; 0x892
 801571c:	b115      	cbz	r5, 8015724 <USB_OTG_HC_Init+0x44>
    {
      hcintmsk.b.bblerr = 1;
 801571e:	f447 63a2 	orr.w	r3, r7, #1296	; 0x510
 8015722:	e01d      	b.n	8015760 <USB_OTG_HC_Init+0x80>
    } 
    else 
    {
      hcintmsk.b.nyet = 1;
      if (pdev->host.hc[hc_num].do_ping) 
 8015724:	f896 6894 	ldrb.w	r6, [r6, #2196]	; 0x894
    {
      hcintmsk.b.bblerr = 1;
    } 
    else 
    {
      hcintmsk.b.nyet = 1;
 8015728:	f447 638a 	orr.w	r3, r7, #1104	; 0x450
      if (pdev->host.hc[hc_num].do_ping) 
 801572c:	b1c6      	cbz	r6, 8015760 <USB_OTG_HC_Init+0x80>
      {
        hcintmsk.b.ack = 1;
 801572e:	f447 638e 	orr.w	r3, r7, #1136	; 0x470
 8015732:	e015      	b.n	8015760 <USB_OTG_HC_Init+0x80>
    hcintmsk.b.stall = 1;
    hcintmsk.b.xacterr = 1;
    hcintmsk.b.datatglerr = 1;
    hcintmsk.b.frmovrun = 1;
    
    if (pdev->host.hc[hc_num].ep_is_in) 
 8015734:	eb00 1641 	add.w	r6, r0, r1, lsl #5
    break;
  case EP_TYPE_INTR:
    hcintmsk.b.xfercompl = 1;
    hcintmsk.b.nak = 1;
    hcintmsk.b.stall = 1;
    hcintmsk.b.xacterr = 1;
 8015738:	f043 0799 	orr.w	r7, r3, #153	; 0x99
    hcintmsk.b.datatglerr = 1;
    hcintmsk.b.frmovrun = 1;
    
    if (pdev->host.hc[hc_num].ep_is_in) 
 801573c:	f896 5892 	ldrb.w	r5, [r6, #2194]	; 0x892
    hcintmsk.b.xfercompl = 1;
    hcintmsk.b.nak = 1;
    hcintmsk.b.stall = 1;
    hcintmsk.b.xacterr = 1;
    hcintmsk.b.datatglerr = 1;
    hcintmsk.b.frmovrun = 1;
 8015740:	f447 63c0 	orr.w	r3, r7, #1536	; 0x600
    
    if (pdev->host.hc[hc_num].ep_is_in) 
 8015744:	b165      	cbz	r5, 8015760 <USB_OTG_HC_Init+0x80>
    {
      hcintmsk.b.bblerr = 1;
 8015746:	f447 63e0 	orr.w	r3, r7, #1792	; 0x700
 801574a:	e009      	b.n	8015760 <USB_OTG_HC_Init+0x80>
  case EP_TYPE_ISOC:
    hcintmsk.b.xfercompl = 1;
    hcintmsk.b.frmovrun = 1;
    hcintmsk.b.ack = 1;
    
    if (pdev->host.hc[hc_num].ep_is_in) 
 801574c:	1986      	adds	r6, r0, r6
      hcintmsk.b.bblerr = 1;
    }
    
    break;
  case EP_TYPE_ISOC:
    hcintmsk.b.xfercompl = 1;
 801574e:	f043 0701 	orr.w	r7, r3, #1
    hcintmsk.b.frmovrun = 1;
    hcintmsk.b.ack = 1;
    
    if (pdev->host.hc[hc_num].ep_is_in) 
 8015752:	f896 5892 	ldrb.w	r5, [r6, #2194]	; 0x892
    
    break;
  case EP_TYPE_ISOC:
    hcintmsk.b.xfercompl = 1;
    hcintmsk.b.frmovrun = 1;
    hcintmsk.b.ack = 1;
 8015756:	f447 7308 	orr.w	r3, r7, #544	; 0x220
    
    if (pdev->host.hc[hc_num].ep_is_in) 
 801575a:	b10d      	cbz	r5, 8015760 <USB_OTG_HC_Init+0x80>
    {
      hcintmsk.b.xacterr = 1;
      hcintmsk.b.bblerr = 1;
 801575c:	f447 7368 	orr.w	r3, r7, #928	; 0x3a0
    }
    break;
  }
  
  
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCINTMSK, hcintmsk.d32);
 8015760:	60e3      	str	r3, [r4, #12]
  
  
  /* Enable the top level host channel interrupt. */
  intr_enable = (1 << hc_num);
  USB_OTG_MODIFY_REG32(&pdev->regs.HREGS->HAINTMSK, 0, intr_enable);
 8015762:	6943      	ldr	r3, [r0, #20]
  
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCINTMSK, hcintmsk.d32);
  
  
  /* Enable the top level host channel interrupt. */
  intr_enable = (1 << hc_num);
 8015764:	2701      	movs	r7, #1
  USB_OTG_MODIFY_REG32(&pdev->regs.HREGS->HAINTMSK, 0, intr_enable);
 8015766:	699e      	ldr	r6, [r3, #24]
  
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCINTMSK, hcintmsk.d32);
  
  
  /* Enable the top level host channel interrupt. */
  intr_enable = (1 << hc_num);
 8015768:	fa07 f701 	lsl.w	r7, r7, r1
  USB_OTG_MODIFY_REG32(&pdev->regs.HREGS->HAINTMSK, 0, intr_enable);
 801576c:	4337      	orrs	r7, r6
 801576e:	619f      	str	r7, [r3, #24]
  
  /* Make sure host channel interrupts are enabled. */
  gintmsk.b.hcintr = 1;
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, 0, gintmsk.d32);
 8015770:	68c3      	ldr	r3, [r0, #12]
 8015772:	699d      	ldr	r5, [r3, #24]
  
  /* Program the HCCHAR register */
  hcchar.d32 = 0;
  hcchar.b.devaddr = pdev->host.hc[hc_num].dev_addr;
 8015774:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  intr_enable = (1 << hc_num);
  USB_OTG_MODIFY_REG32(&pdev->regs.HREGS->HAINTMSK, 0, intr_enable);
  
  /* Make sure host channel interrupts are enabled. */
  gintmsk.b.hcintr = 1;
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, 0, gintmsk.d32);
 8015778:	f045 7500 	orr.w	r5, r5, #33554432	; 0x2000000
 801577c:	619d      	str	r5, [r3, #24]
  
  /* Program the HCCHAR register */
  hcchar.d32 = 0;
  hcchar.b.devaddr = pdev->host.hc[hc_num].dev_addr;
 801577e:	f890 1890 	ldrb.w	r1, [r0, #2192]	; 0x890
  hcchar.b.epnum   = pdev->host.hc[hc_num].ep_num;
 8015782:	f890 7891 	ldrb.w	r7, [r0, #2193]	; 0x891
  hcchar.b.epdir   = pdev->host.hc[hc_num].ep_is_in;
 8015786:	f890 3892 	ldrb.w	r3, [r0, #2194]	; 0x892
  gintmsk.b.hcintr = 1;
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, 0, gintmsk.d32);
  
  /* Program the HCCHAR register */
  hcchar.d32 = 0;
  hcchar.b.devaddr = pdev->host.hc[hc_num].dev_addr;
 801578a:	f361 529c 	bfi	r2, r1, #22, #7
  hcchar.b.epnum   = pdev->host.hc[hc_num].ep_num;
  hcchar.b.epdir   = pdev->host.hc[hc_num].ep_is_in;
  hcchar.b.lspddev = (pdev->host.hc[hc_num].speed == HPRT0_PRTSPD_LOW_SPEED);
 801578e:	f890 1893 	ldrb.w	r1, [r0, #2195]	; 0x893
 8015792:	f1b1 0c02 	subs.w	ip, r1, #2
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, 0, gintmsk.d32);
  
  /* Program the HCCHAR register */
  hcchar.d32 = 0;
  hcchar.b.devaddr = pdev->host.hc[hc_num].dev_addr;
  hcchar.b.epnum   = pdev->host.hc[hc_num].ep_num;
 8015796:	f367 22ce 	bfi	r2, r7, #11, #4
  hcchar.b.epdir   = pdev->host.hc[hc_num].ep_is_in;
  hcchar.b.lspddev = (pdev->host.hc[hc_num].speed == HPRT0_PRTSPD_LOW_SPEED);
 801579a:	f1dc 0700 	rsbs	r7, ip, #0
  
  /* Program the HCCHAR register */
  hcchar.d32 = 0;
  hcchar.b.devaddr = pdev->host.hc[hc_num].dev_addr;
  hcchar.b.epnum   = pdev->host.hc[hc_num].ep_num;
  hcchar.b.epdir   = pdev->host.hc[hc_num].ep_is_in;
 801579e:	f363 32cf 	bfi	r2, r3, #15, #1
  hcchar.b.lspddev = (pdev->host.hc[hc_num].speed == HPRT0_PRTSPD_LOW_SPEED);
 80157a2:	eb57 030c 	adcs.w	r3, r7, ip
  hcchar.b.eptype  = pdev->host.hc[hc_num].ep_type;
 80157a6:	f890 7895 	ldrb.w	r7, [r0, #2197]	; 0x895
  hcchar.b.mps     = pdev->host.hc[hc_num].max_packet;
 80157aa:	f8b0 0896 	ldrh.w	r0, [r0, #2198]	; 0x896
  /* Program the HCCHAR register */
  hcchar.d32 = 0;
  hcchar.b.devaddr = pdev->host.hc[hc_num].dev_addr;
  hcchar.b.epnum   = pdev->host.hc[hc_num].ep_num;
  hcchar.b.epdir   = pdev->host.hc[hc_num].ep_is_in;
  hcchar.b.lspddev = (pdev->host.hc[hc_num].speed == HPRT0_PRTSPD_LOW_SPEED);
 80157ae:	f363 4251 	bfi	r2, r3, #17, #1
  hcchar.b.eptype  = pdev->host.hc[hc_num].ep_type;
 80157b2:	f367 4293 	bfi	r2, r7, #18, #2
  hcchar.b.mps     = pdev->host.hc[hc_num].max_packet;
 80157b6:	f360 020a 	bfi	r2, r0, #0, #11
  if (pdev->host.hc[hc_num].ep_type == HCCHAR_INTR)
 80157ba:	2f03      	cmp	r7, #3
  {
    hcchar.b.oddfrm  = 1;
 80157bc:	bf08      	it	eq
 80157be:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
  }
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR, hcchar.d32);
 80157c2:	6022      	str	r2, [r4, #0]
  return status;
}
 80157c4:	2000      	movs	r0, #0
 80157c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080157c8 <USB_OTG_HC_StartXfer>:
* @param  pdev : Selected device
* @param  hc_num : channel number
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_HC_StartXfer(USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num)
{
 80157c8:	b570      	push	{r4, r5, r6, lr}
 80157ca:	460d      	mov	r5, r1
  hctsiz.d32 = 0;
  hcchar.d32 = 0;
  intmsk.d32 = 0;
  
  /* Compute the expected number of packets associated to the transfer */
  if (pdev->host.hc[hc_num].xfer_len > 0)
 80157cc:	eb00 1141 	add.w	r1, r0, r1, lsl #5
* @param  pdev : Selected device
* @param  hc_num : channel number
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_HC_StartXfer(USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num)
{
 80157d0:	b086      	sub	sp, #24
  hctsiz.d32 = 0;
  hcchar.d32 = 0;
  intmsk.d32 = 0;
  
  /* Compute the expected number of packets associated to the transfer */
  if (pdev->host.hc[hc_num].xfer_len > 0)
 80157d2:	f8d1 38a0 	ldr.w	r3, [r1, #2208]	; 0x8a0
* @param  pdev : Selected device
* @param  hc_num : channel number
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_HC_StartXfer(USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num)
{
 80157d6:	4604      	mov	r4, r0
  
  uint16_t num_packets;
  uint16_t max_hc_pkt_count;
  
  max_hc_pkt_count = 256;
  hctsiz.d32 = 0;
 80157d8:	2200      	movs	r2, #0
  hcchar.d32 = 0;
  intmsk.d32 = 0;
  
  /* Compute the expected number of packets associated to the transfer */
  if (pdev->host.hc[hc_num].xfer_len > 0)
 80157da:	b17b      	cbz	r3, 80157fc <USB_OTG_HC_StartXfer+0x34>
  {
    num_packets = (pdev->host.hc[hc_num].xfer_len + \
      pdev->host.hc[hc_num].max_packet - 1) / pdev->host.hc[hc_num].max_packet;
 80157dc:	f8b1 0896 	ldrh.w	r0, [r1, #2198]	; 0x896
  intmsk.d32 = 0;
  
  /* Compute the expected number of packets associated to the transfer */
  if (pdev->host.hc[hc_num].xfer_len > 0)
  {
    num_packets = (pdev->host.hc[hc_num].xfer_len + \
 80157e0:	1e5e      	subs	r6, r3, #1
      pdev->host.hc[hc_num].max_packet - 1) / pdev->host.hc[hc_num].max_packet;
 80157e2:	1833      	adds	r3, r6, r0
 80157e4:	fbb3 f6f0 	udiv	r6, r3, r0
  intmsk.d32 = 0;
  
  /* Compute the expected number of packets associated to the transfer */
  if (pdev->host.hc[hc_num].xfer_len > 0)
  {
    num_packets = (pdev->host.hc[hc_num].xfer_len + \
 80157e8:	b2b3      	uxth	r3, r6
      pdev->host.hc[hc_num].max_packet - 1) / pdev->host.hc[hc_num].max_packet;
    
    if (num_packets > max_hc_pkt_count)
 80157ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80157ee:	d906      	bls.n	80157fe <USB_OTG_HC_StartXfer+0x36>
    {
      num_packets = max_hc_pkt_count;
      pdev->host.hc[hc_num].xfer_len = num_packets * \
 80157f0:	0200      	lsls	r0, r0, #8
 80157f2:	f8c1 08a0 	str.w	r0, [r1, #2208]	; 0x8a0
    num_packets = (pdev->host.hc[hc_num].xfer_len + \
      pdev->host.hc[hc_num].max_packet - 1) / pdev->host.hc[hc_num].max_packet;
    
    if (num_packets > max_hc_pkt_count)
    {
      num_packets = max_hc_pkt_count;
 80157f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80157fa:	e000      	b.n	80157fe <USB_OTG_HC_StartXfer+0x36>
        pdev->host.hc[hc_num].max_packet;
    }
  }
  else
  {
    num_packets = 1;
 80157fc:	2301      	movs	r3, #1
  }
  if (pdev->host.hc[hc_num].ep_is_in)
 80157fe:	0168      	lsls	r0, r5, #5
 8015800:	1821      	adds	r1, r4, r0
 8015802:	f891 6892 	ldrb.w	r6, [r1, #2194]	; 0x892
 8015806:	b126      	cbz	r6, 8015812 <USB_OTG_HC_StartXfer+0x4a>
  {
    pdev->host.hc[hc_num].xfer_len = num_packets * \
 8015808:	f8b1 6896 	ldrh.w	r6, [r1, #2198]	; 0x896
 801580c:	435e      	muls	r6, r3
 801580e:	f8c1 68a0 	str.w	r6, [r1, #2208]	; 0x8a0
      pdev->host.hc[hc_num].max_packet;
  }
  /* Initialize the HCTSIZn register */
  hctsiz.b.xfersize = pdev->host.hc[hc_num].xfer_len;
 8015812:	1820      	adds	r0, r4, r0
 8015814:	f8d0 18a0 	ldr.w	r1, [r0, #2208]	; 0x8a0
 8015818:	f361 0212 	bfi	r2, r1, #0, #19
  hctsiz.b.pktcnt = num_packets;
 801581c:	f363 42dc 	bfi	r2, r3, #19, #10
  hctsiz.b.pid = pdev->host.hc[hc_num].data_pid;
 8015820:	f105 0315 	add.w	r3, r5, #21
 8015824:	eb04 1643 	add.w	r6, r4, r3, lsl #5
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCTSIZ, hctsiz.d32);
 8015828:	eb04 0185 	add.w	r1, r4, r5, lsl #2
      pdev->host.hc[hc_num].max_packet;
  }
  /* Initialize the HCTSIZn register */
  hctsiz.b.xfersize = pdev->host.hc[hc_num].xfer_len;
  hctsiz.b.pktcnt = num_packets;
  hctsiz.b.pid = pdev->host.hc[hc_num].data_pid;
 801582c:	f896 05f8 	ldrb.w	r0, [r6, #1528]	; 0x5f8
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCTSIZ, hctsiz.d32);
 8015830:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
      pdev->host.hc[hc_num].max_packet;
  }
  /* Initialize the HCTSIZn register */
  hctsiz.b.xfersize = pdev->host.hc[hc_num].xfer_len;
  hctsiz.b.pktcnt = num_packets;
  hctsiz.b.pid = pdev->host.hc[hc_num].data_pid;
 8015834:	f360 725e 	bfi	r2, r0, #29, #2
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCTSIZ, hctsiz.d32);
 8015838:	611a      	str	r2, [r3, #16]
  
  if (pdev->cfg.dma_enable == 1)
 801583a:	78e2      	ldrb	r2, [r4, #3]
 801583c:	2a01      	cmp	r2, #1
  {
    USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCDMA, (unsigned int)pdev->host.hc[hc_num].xfer_buff);
 801583e:	bf08      	it	eq
 8015840:	f8d6 25fc 	ldreq.w	r2, [r6, #1532]	; 0x5fc
  }
  
  
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR);
  hcchar.b.oddfrm = USB_OTG_IsEvenFrame(pdev);
 8015844:	4620      	mov	r0, r4
  hctsiz.b.pid = pdev->host.hc[hc_num].data_pid;
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCTSIZ, hctsiz.d32);
  
  if (pdev->cfg.dma_enable == 1)
  {
    USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCDMA, (unsigned int)pdev->host.hc[hc_num].xfer_buff);
 8015846:	bf08      	it	eq
 8015848:	615a      	streq	r2, [r3, #20]
  }
  
  
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR);
 801584a:	681e      	ldr	r6, [r3, #0]
  hcchar.b.oddfrm = USB_OTG_IsEvenFrame(pdev);
 801584c:	f7ff fe8c 	bl	8015568 <USB_OTG_IsEvenFrame>
 8015850:	f360 765d 	bfi	r6, r0, #29, #1
  
  /* Set host channel enable */
  hcchar.b.chen = 1;
  hcchar.b.chdis = 0;
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR, hcchar.d32);
 8015854:	eb04 0085 	add.w	r0, r4, r5, lsl #2
  
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR);
  hcchar.b.oddfrm = USB_OTG_IsEvenFrame(pdev);
  
  /* Set host channel enable */
  hcchar.b.chen = 1;
 8015858:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
  hcchar.b.chdis = 0;
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR, hcchar.d32);
 801585c:	f8d0 1090 	ldr.w	r1, [r0, #144]	; 0x90
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR);
  hcchar.b.oddfrm = USB_OTG_IsEvenFrame(pdev);
  
  /* Set host channel enable */
  hcchar.b.chen = 1;
  hcchar.b.chdis = 0;
 8015860:	f36f 769e 	bfc	r6, #30, #1
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR, hcchar.d32);
 8015864:	600e      	str	r6, [r1, #0]
  
  if (pdev->cfg.dma_enable == 0) /* Slave mode */
 8015866:	78e3      	ldrb	r3, [r4, #3]
 8015868:	2b00      	cmp	r3, #0
 801586a:	d134      	bne.n	80158d6 <USB_OTG_HC_StartXfer+0x10e>
  {  
    if((pdev->host.hc[hc_num].ep_is_in == 0) && 
 801586c:	eb04 1245 	add.w	r2, r4, r5, lsl #5
 8015870:	f892 0892 	ldrb.w	r0, [r2, #2194]	; 0x892
 8015874:	2800      	cmp	r0, #0
 8015876:	d12e      	bne.n	80158d6 <USB_OTG_HC_StartXfer+0x10e>
       (pdev->host.hc[hc_num].xfer_len > 0))
 8015878:	f8d2 38a0 	ldr.w	r3, [r2, #2208]	; 0x8a0
  hcchar.b.chdis = 0;
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR, hcchar.d32);
  
  if (pdev->cfg.dma_enable == 0) /* Slave mode */
  {  
    if((pdev->host.hc[hc_num].ep_is_in == 0) && 
 801587c:	b35b      	cbz	r3, 80158d6 <USB_OTG_HC_StartXfer+0x10e>
       (pdev->host.hc[hc_num].xfer_len > 0))
    {
      switch(pdev->host.hc[hc_num].ep_type) 
 801587e:	f892 2895 	ldrb.w	r2, [r2, #2197]	; 0x895
 8015882:	2a03      	cmp	r2, #3
 8015884:	d81e      	bhi.n	80158c4 <USB_OTG_HC_StartXfer+0xfc>
 8015886:	e8df f002 	tbb	[pc, r2]
 801588a:	0f02      	.short	0x0f02
 801588c:	0f02      	.short	0x0f02
      {
        /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:
        
        hnptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
 801588e:	68e2      	ldr	r2, [r4, #12]
 8015890:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
        len_words = (pdev->host.hc[hc_num].xfer_len + 3) / 4;
 8015892:	1cd8      	adds	r0, r3, #3
      {
        /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:
        
        hnptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
 8015894:	9103      	str	r1, [sp, #12]
        len_words = (pdev->host.hc[hc_num].xfer_len + 3) / 4;
        
        /* check if there is enough space in FIFO space */
        if(len_words > hnptxsts.b.nptxfspcavail)
 8015896:	f3c0 008f 	ubfx	r0, r0, #2, #16
 801589a:	b289      	uxth	r1, r1
 801589c:	4281      	cmp	r1, r0
 801589e:	d211      	bcs.n	80158c4 <USB_OTG_HC_StartXfer+0xfc>
        {
          /* need to process data in nptxfempty interrupt */
          intmsk.b.nptxfempty = 1;
          USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, 0, intmsk.d32);  
 80158a0:	6991      	ldr	r1, [r2, #24]
 80158a2:	f041 0020 	orr.w	r0, r1, #32
 80158a6:	e00c      	b.n	80158c2 <USB_OTG_HC_StartXfer+0xfa>
        
        break;
        /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
 80158a8:	6961      	ldr	r1, [r4, #20]
 80158aa:	6908      	ldr	r0, [r1, #16]
        len_words = (pdev->host.hc[hc_num].xfer_len + 3) / 4;
 80158ac:	1cd9      	adds	r1, r3, #3
        /* check if there is enough space in FIFO space */
        if(len_words > hptxsts.b.ptxfspcavail) /* split the transfer */
 80158ae:	b282      	uxth	r2, r0
        
        break;
        /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
 80158b0:	9001      	str	r0, [sp, #4]
        len_words = (pdev->host.hc[hc_num].xfer_len + 3) / 4;
        /* check if there is enough space in FIFO space */
        if(len_words > hptxsts.b.ptxfspcavail) /* split the transfer */
 80158b2:	f3c1 008f 	ubfx	r0, r1, #2, #16
 80158b6:	4282      	cmp	r2, r0
 80158b8:	d204      	bcs.n	80158c4 <USB_OTG_HC_StartXfer+0xfc>
        {
          /* need to process data in ptxfempty interrupt */
          intmsk.b.ptxfempty = 1;
          USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, 0, intmsk.d32);  
 80158ba:	68e2      	ldr	r2, [r4, #12]
 80158bc:	6991      	ldr	r1, [r2, #24]
 80158be:	f041 6080 	orr.w	r0, r1, #67108864	; 0x4000000
 80158c2:	6190      	str	r0, [r2, #24]
      default:
        break;
      }
      
      /* Write packet into the Tx FIFO. */
      USB_OTG_WritePacket(pdev, 
 80158c4:	eb04 1245 	add.w	r2, r4, r5, lsl #5
 80158c8:	4620      	mov	r0, r4
 80158ca:	f8d2 189c 	ldr.w	r1, [r2, #2204]	; 0x89c
 80158ce:	b29b      	uxth	r3, r3
 80158d0:	462a      	mov	r2, r5
 80158d2:	f7ff fd0b 	bl	80152ec <USB_OTG_WritePacket>
                          pdev->host.hc[hc_num].xfer_buff , 
                          hc_num, pdev->host.hc[hc_num].xfer_len);
    }
  }
  return status;
}
 80158d6:	2000      	movs	r0, #0
 80158d8:	b006      	add	sp, #24
 80158da:	bd70      	pop	{r4, r5, r6, pc}

080158dc <USB_OTG_HC_Halt>:
  USB_OTG_HPTXSTS_TypeDef             hptxsts;
  USB_OTG_HCCHAR_TypeDef              hcchar;
  
  nptxsts.d32 = 0;
  hptxsts.d32 = 0;
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR);
 80158dc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
* @param  pdev : Selected device
* @param  hc_num : channel number
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_HC_Halt(USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num)
{
 80158e0:	b086      	sub	sp, #24
  USB_OTG_HPTXSTS_TypeDef             hptxsts;
  USB_OTG_HCCHAR_TypeDef              hcchar;
  
  nptxsts.d32 = 0;
  hptxsts.d32 = 0;
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR);
 80158e2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80158e6:	6813      	ldr	r3, [r2, #0]
  hcchar.b.chen = 1;
  hcchar.b.chdis = 1;
 80158e8:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  
  /* Check for space in the request queue to issue the halt. */
  if (hcchar.b.eptype == HCCHAR_CTRL || hcchar.b.eptype == HCCHAR_BULK)
 80158ec:	f3c3 4107 	ubfx	r1, r3, #16, #8
 80158f0:	f011 010c 	ands.w	r1, r1, #12
 80158f4:	d001      	beq.n	80158fa <USB_OTG_HC_Halt+0x1e>
 80158f6:	2908      	cmp	r1, #8
 80158f8:	d102      	bne.n	8015900 <USB_OTG_HC_Halt+0x24>
  {
    nptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
 80158fa:	68c0      	ldr	r0, [r0, #12]
 80158fc:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80158fe:	e001      	b.n	8015904 <USB_OTG_HC_Halt+0x28>
      hcchar.b.chen = 0;
    }
  }
  else
  {
    hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
 8015900:	6940      	ldr	r0, [r0, #20]
 8015902:	6901      	ldr	r1, [r0, #16]
    if (hptxsts.b.ptxqspcavail == 0)
 8015904:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8015908:	b909      	cbnz	r1, 801590e <USB_OTG_HC_Halt+0x32>
    {
      hcchar.b.chen = 0;
 801590a:	f361 73df 	bfi	r3, r1, #31, #1
    }
  }
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR, hcchar.d32);
 801590e:	6013      	str	r3, [r2, #0]
  return status;
}
 8015910:	2000      	movs	r0, #0
 8015912:	b006      	add	sp, #24
 8015914:	4770      	bx	lr

08015916 <USB_OTG_HC_DoPing>:
  USB_OTG_HCTSIZn_TypeDef   hctsiz;  
  
  hctsiz.d32 = 0;
  hctsiz.b.dopng = 1;
  hctsiz.b.pktcnt = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCTSIZ, hctsiz.d32);
 8015916:	eb00 0181 	add.w	r1, r0, r1, lsl #2
* @brief  Issue a ping token
* @param  None
* @retval : None
*/
USB_OTG_STS USB_OTG_HC_DoPing(USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num)
{
 801591a:	b510      	push	{r4, lr}
  USB_OTG_HCTSIZn_TypeDef   hctsiz;  
  
  hctsiz.d32 = 0;
  hctsiz.b.dopng = 1;
  hctsiz.b.pktcnt = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCTSIZ, hctsiz.d32);
 801591c:	f8d1 0090 	ldr.w	r0, [r1, #144]	; 0x90
  USB_OTG_HCCHAR_TypeDef    hcchar;
  USB_OTG_HCTSIZn_TypeDef   hctsiz;  
  
  hctsiz.d32 = 0;
  hctsiz.b.dopng = 1;
  hctsiz.b.pktcnt = 1;
 8015920:	2301      	movs	r3, #1
  USB_OTG_STS               status = USB_OTG_OK;
  USB_OTG_HCCHAR_TypeDef    hcchar;
  USB_OTG_HCTSIZn_TypeDef   hctsiz;  
  
  hctsiz.d32 = 0;
  hctsiz.b.dopng = 1;
 8015922:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
  hctsiz.b.pktcnt = 1;
 8015926:	f363 44dc 	bfi	r4, r3, #19, #10
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCTSIZ, hctsiz.d32);
 801592a:	6104      	str	r4, [r0, #16]
  
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR);
 801592c:	6803      	ldr	r3, [r0, #0]
{
  USB_OTG_STS               status = USB_OTG_OK;
  USB_OTG_HCCHAR_TypeDef    hcchar;
  USB_OTG_HCTSIZn_TypeDef   hctsiz;  
  
  hctsiz.d32 = 0;
 801592e:	2200      	movs	r2, #0
  hctsiz.b.dopng = 1;
  hctsiz.b.pktcnt = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCTSIZ, hctsiz.d32);
  
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR);
  hcchar.b.chen = 1;
 8015930:	f043 4100 	orr.w	r1, r3, #2147483648	; 0x80000000
  hcchar.b.chdis = 0;
 8015934:	f362 719e 	bfi	r1, r2, #30, #1
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[hc_num]->HCCHAR, hcchar.d32);
 8015938:	6001      	str	r1, [r0, #0]
  return status;  
}
 801593a:	4610      	mov	r0, r2
 801593c:	bd10      	pop	{r4, pc}

0801593e <USB_OTG_InitDevSpeed>:
*/
void USB_OTG_InitDevSpeed(USB_OTG_CORE_HANDLE *pdev , uint8_t speed)
{
  USB_OTG_DCFG_TypeDef   dcfg;
  
  dcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DCFG);
 801593e:	6903      	ldr	r3, [r0, #16]
 8015940:	681a      	ldr	r2, [r3, #0]
  dcfg.b.devspd = speed;
 8015942:	f361 0201 	bfi	r2, r1, #0, #2
  USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DCFG, dcfg.d32);
 8015946:	601a      	str	r2, [r3, #0]
 8015948:	4770      	bx	lr

0801594a <USB_OTG_EnableDevInt>:
* @brief  USB_OTG_EnableDevInt : Enables the Device mode interrupts
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EnableDevInt(USB_OTG_CORE_HANDLE *pdev)
{
 801594a:	b538      	push	{r3, r4, r5, lr}
  USB_OTG_GINTMSK_TypeDef  intmsk;
  
  intmsk.d32 = 0;
  
  /* Disable all interrupts. */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTMSK, 0);
 801594c:	68c3      	ldr	r3, [r0, #12]
* @brief  USB_OTG_EnableDevInt : Enables the Device mode interrupts
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EnableDevInt(USB_OTG_CORE_HANDLE *pdev)
{
 801594e:	4604      	mov	r4, r0
  USB_OTG_STS status = USB_OTG_OK;
  USB_OTG_GINTMSK_TypeDef  intmsk;
  
  intmsk.d32 = 0;
 8015950:	2500      	movs	r5, #0
  
  /* Disable all interrupts. */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTMSK, 0);
  /* Clear any pending interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, 0xBFFFFFFF);
 8015952:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
  USB_OTG_GINTMSK_TypeDef  intmsk;
  
  intmsk.d32 = 0;
  
  /* Disable all interrupts. */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTMSK, 0);
 8015956:	619d      	str	r5, [r3, #24]
  /* Clear any pending interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, 0xBFFFFFFF);
 8015958:	615a      	str	r2, [r3, #20]
  /* Enable the common interrupts */
  USB_OTG_EnableCommonInt(pdev);
 801595a:	f7ff fc97 	bl	801528c <USB_OTG_EnableCommonInt>
  
  if (pdev->cfg.dma_enable == 0)
 801595e:	78e0      	ldrb	r0, [r4, #3]
  {
    intmsk.b.rxstsqlvl = 1;
 8015960:	42a8      	cmp	r0, r5
 8015962:	bf0c      	ite	eq
 8015964:	2110      	moveq	r1, #16
 8015966:	4629      	movne	r1, r5
  
  /* Enable interrupts matching to the Device mode ONLY */
  intmsk.b.usbsuspend = 1;
  intmsk.b.usbreset   = 1;
  intmsk.b.enumdone   = 1;
  intmsk.b.inepintr   = 1;
 8015968:	f441 2387 	orr.w	r3, r1, #276480	; 0x43800
  intmsk.b.outepintr  = 1;
  intmsk.b.sofintr    = 1; 
 801596c:	f043 1208 	orr.w	r2, r3, #524296	; 0x80008
  intmsk.b.incomplisoout    = 1;   
#ifdef VBUS_SENSING_ENABLED
  intmsk.b.sessreqintr    = 1; 
  intmsk.b.otgintr    = 1;    
#endif  
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, intmsk.d32);
 8015970:	68e3      	ldr	r3, [r4, #12]
 8015972:	6999      	ldr	r1, [r3, #24]
  intmsk.b.inepintr   = 1;
  intmsk.b.outepintr  = 1;
  intmsk.b.sofintr    = 1; 
  
  intmsk.b.incomplisoin    = 1; 
  intmsk.b.incomplisoout    = 1;   
 8015974:	f442 1040 	orr.w	r0, r2, #3145728	; 0x300000
#ifdef VBUS_SENSING_ENABLED
  intmsk.b.sessreqintr    = 1; 
  intmsk.b.otgintr    = 1;    
#endif  
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, intmsk.d32);
 8015978:	ea21 0100 	bic.w	r1, r1, r0
 801597c:	ea41 0200 	orr.w	r2, r1, r0
 8015980:	619a      	str	r2, [r3, #24]
  return status;
}
 8015982:	4628      	mov	r0, r5
 8015984:	bd38      	pop	{r3, r4, r5, pc}
	...

08015988 <USB_OTG_CoreInitDev>:
*         for device mode
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_CoreInitDev (USB_OTG_CORE_HANDLE *pdev)
{
 8015988:	b538      	push	{r3, r4, r5, lr}
  nptxfifosize.d32 = 0;
  txfifosize.d32 = 0;
  msk.d32 = 0;
  
  /* Restart the Phy Clock */
  USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, 0);
 801598a:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
  /* Device configuration register */
  dcfg.d32 = USB_OTG_READ_REG32( &pdev->regs.DREGS->DCFG);
 801598e:	6901      	ldr	r1, [r0, #16]
  USB_OTG_DIEPMSK_TypeDef msk;
  USB_OTG_DTHRCTL_TypeDef dthrctl;  
  
  depctl.d32 = 0;
  dcfg.d32 = 0;
  nptxfifosize.d32 = 0;
 8015990:	2200      	movs	r2, #0
  txfifosize.d32 = 0;
  msk.d32 = 0;
  
  /* Restart the Phy Clock */
  USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, 0);
 8015992:	601a      	str	r2, [r3, #0]
  USB_OTG_DTHRCTL_TypeDef dthrctl;  
  
  depctl.d32 = 0;
  dcfg.d32 = 0;
  nptxfifosize.d32 = 0;
  txfifosize.d32 = 0;
 8015994:	4615      	mov	r5, r2
  msk.d32 = 0;
  
  /* Restart the Phy Clock */
  USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, 0);
  /* Device configuration register */
  dcfg.d32 = USB_OTG_READ_REG32( &pdev->regs.DREGS->DCFG);
 8015996:	680a      	ldr	r2, [r1, #0]
  dcfg.b.perfrint = DCFG_FRAME_INTERVAL_80;
 8015998:	f365 22cc 	bfi	r2, r5, #11, #2
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DCFG, dcfg.d32 );
 801599c:	600a      	str	r2, [r1, #0]
  
#ifdef USB_OTG_FS_CORE
  if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID  )
 801599e:	7ac3      	ldrb	r3, [r0, #11]
 80159a0:	2b01      	cmp	r3, #1
*         for device mode
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_CoreInitDev (USB_OTG_CORE_HANDLE *pdev)
{
 80159a2:	4604      	mov	r4, r0
  dcfg.d32 = USB_OTG_READ_REG32( &pdev->regs.DREGS->DCFG);
  dcfg.b.perfrint = DCFG_FRAME_INTERVAL_80;
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DCFG, dcfg.d32 );
  
#ifdef USB_OTG_FS_CORE
  if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID  )
 80159a4:	d11b      	bne.n	80159de <USB_OTG_CoreInitDev+0x56>
  {  
    
    /* Set Full speed phy */
    USB_OTG_InitDevSpeed (pdev , USB_OTG_SPEED_PARAM_FULL);
 80159a6:	2103      	movs	r1, #3
 80159a8:	f7ff ffc9 	bl	801593e <USB_OTG_InitDevSpeed>
    
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_FS_SIZE);
 80159ac:	68e0      	ldr	r0, [r4, #12]
    nptxfifosize.b.startaddr = RX_FIFO_FS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32 );
    
    
    /* EP1 TX*/
    txfifosize.b.startaddr = nptxfifosize.b.startaddr + nptxfifosize.b.depth;
 80159ae:	23c0      	movs	r3, #192	; 0xc0
    
    /* Set Full speed phy */
    USB_OTG_InitDevSpeed (pdev , USB_OTG_SPEED_PARAM_FULL);
    
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_FS_SIZE);
 80159b0:	2180      	movs	r1, #128	; 0x80
    
    /* EP0 TX*/
    nptxfifosize.b.depth     = TX0_FIFO_FS_SIZE;
 80159b2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    nptxfifosize.b.startaddr = RX_FIFO_FS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32 );
    
    
    /* EP1 TX*/
    txfifosize.b.startaddr = nptxfifosize.b.startaddr + nptxfifosize.b.depth;
 80159b6:	f363 050f 	bfi	r5, r3, #0, #16
    
    /* Set Full speed phy */
    USB_OTG_InitDevSpeed (pdev , USB_OTG_SPEED_PARAM_FULL);
    
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_FS_SIZE);
 80159ba:	6241      	str	r1, [r0, #36]	; 0x24
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32 );
    
    
    /* EP1 TX*/
    txfifosize.b.startaddr = nptxfifosize.b.startaddr + nptxfifosize.b.depth;
    txfifosize.b.depth = TX1_FIFO_FS_SIZE;
 80159bc:	f361 451f 	bfi	r5, r1, #16, #16
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_FS_SIZE);
    
    /* EP0 TX*/
    nptxfifosize.b.depth     = TX0_FIFO_FS_SIZE;
    nptxfifosize.b.startaddr = RX_FIFO_FS_SIZE;
 80159c0:	f361 020f 	bfi	r2, r1, #0, #16
    txfifosize.b.depth = TX1_FIFO_FS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[0], txfifosize.d32 );
    
    
    /* EP2 TX*/
    txfifosize.b.startaddr += txfifosize.b.depth;
 80159c4:	f44f 71a0 	mov.w	r1, #320	; 0x140
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_FS_SIZE);
    
    /* EP0 TX*/
    nptxfifosize.b.depth     = TX0_FIFO_FS_SIZE;
    nptxfifosize.b.startaddr = RX_FIFO_FS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32 );
 80159c8:	6282      	str	r2, [r0, #40]	; 0x28
    
    
    /* EP1 TX*/
    txfifosize.b.startaddr = nptxfifosize.b.startaddr + nptxfifosize.b.depth;
    txfifosize.b.depth = TX1_FIFO_FS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[0], txfifosize.d32 );
 80159ca:	f8c0 5104 	str.w	r5, [r0, #260]	; 0x104
    
    
    /* EP2 TX*/
    txfifosize.b.startaddr += txfifosize.b.depth;
 80159ce:	f361 050f 	bfi	r5, r1, #0, #16
    txfifosize.b.depth = TX2_FIFO_FS_SIZE;
 80159d2:	f36f 451f 	bfc	r5, #16, #16
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[1], txfifosize.d32 );
 80159d6:	f8c0 5108 	str.w	r5, [r0, #264]	; 0x108
    
    
    /* EP3 TX*/  
    txfifosize.b.startaddr += txfifosize.b.depth;
    txfifosize.b.depth = TX3_FIFO_FS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[2], txfifosize.d32 );
 80159da:	f8c0 510c 	str.w	r5, [r0, #268]	; 0x10c
    txfifosize.b.depth = TX5_FIFO_HS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[4], txfifosize.d32 );
  }
#endif  
  /* Flush the FIFOs */
  USB_OTG_FlushTxFifo(pdev , 0x10); /* all Tx FIFOs */
 80159de:	2110      	movs	r1, #16
 80159e0:	4620      	mov	r0, r4
 80159e2:	f7ff fd63 	bl	80154ac <USB_OTG_FlushTxFifo>
  USB_OTG_FlushRxFifo(pdev);
 80159e6:	4620      	mov	r0, r4
 80159e8:	f7ff fd7e 	bl	80154e8 <USB_OTG_FlushRxFifo>
  /* Clear all pending Device Interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, 0 );
 80159ec:	6920      	ldr	r0, [r4, #16]
 80159ee:	2300      	movs	r3, #0
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, 0 );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
 80159f0:	f04f 32ff 	mov.w	r2, #4294967295
#endif  
  /* Flush the FIFOs */
  USB_OTG_FlushTxFifo(pdev , 0x10); /* all Tx FIFOs */
  USB_OTG_FlushRxFifo(pdev);
  /* Clear all pending Device Interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, 0 );
 80159f4:	6103      	str	r3, [r0, #16]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, 0 );
 80159f6:	6143      	str	r3, [r0, #20]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
 80159f8:	6182      	str	r2, [r0, #24]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, 0 );
 80159fa:	61c3      	str	r3, [r0, #28]
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 80159fc:	7861      	ldrb	r1, [r4, #1]
 80159fe:	428b      	cmp	r3, r1
 8015a00:	d214      	bcs.n	8015a2c <USB_OTG_CoreInitDev+0xa4>
* @brief  USB_OTG_CoreInitDev : Initializes the USB_OTG controller registers 
*         for device mode
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_CoreInitDev (USB_OTG_CORE_HANDLE *pdev)
 8015a02:	eb04 0283 	add.w	r2, r4, r3, lsl #2
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, 0 );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, 0 );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, 0 );
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8015a06:	3301      	adds	r3, #1
  {
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[i]->DIEPCTL);
 8015a08:	6990      	ldr	r0, [r2, #24]
 8015a0a:	6801      	ldr	r1, [r0, #0]
    if (depctl.b.epena)
 8015a0c:	f3c1 6207 	ubfx	r2, r1, #24, #8
 8015a10:	f002 0180 	and.w	r1, r2, #128	; 0x80
 8015a14:	b2ca      	uxtb	r2, r1
    {
      depctl.d32 = 0;
      depctl.b.epdis = 1;
      depctl.b.snak = 1;
 8015a16:	2a00      	cmp	r2, #0
 8015a18:	bf14      	ite	ne
 8015a1a:	f04f 4190 	movne.w	r1, #1207959552	; 0x48000000
 8015a1e:	2100      	moveq	r1, #0
    }
    else
    {
      depctl.d32 = 0;
    }
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
 8015a20:	6001      	str	r1, [r0, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
 8015a22:	2200      	movs	r2, #0
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8015a24:	21ff      	movs	r1, #255	; 0xff
    else
    {
      depctl.d32 = 0;
    }
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
 8015a26:	6102      	str	r2, [r0, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8015a28:	6081      	str	r1, [r0, #8]
 8015a2a:	e7e7      	b.n	80159fc <USB_OTG_CoreInitDev+0x74>
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, 0 );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, 0 );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, 0 );
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8015a2c:	2300      	movs	r3, #0
    }
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
  }
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8015a2e:	7860      	ldrb	r0, [r4, #1]
 8015a30:	4283      	cmp	r3, r0
 8015a32:	d214      	bcs.n	8015a5e <USB_OTG_CoreInitDev+0xd6>
* @brief  USB_OTG_CoreInitDev : Initializes the USB_OTG controller registers 
*         for device mode
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_CoreInitDev (USB_OTG_CORE_HANDLE *pdev)
 8015a34:	eb04 0083 	add.w	r0, r4, r3, lsl #2
    }
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
  }
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8015a38:	3301      	adds	r3, #1
  {
    USB_OTG_DEPCTL_TypeDef  depctl;
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[i]->DOEPCTL);
 8015a3a:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8015a3c:	6811      	ldr	r1, [r2, #0]
    if (depctl.b.epena)
 8015a3e:	f3c1 6007 	ubfx	r0, r1, #24, #8
 8015a42:	f000 0180 	and.w	r1, r0, #128	; 0x80
 8015a46:	b2c8      	uxtb	r0, r1
    {
      depctl.d32 = 0;
      depctl.b.epdis = 1;
      depctl.b.snak = 1;
 8015a48:	2800      	cmp	r0, #0
 8015a4a:	bf14      	ite	ne
 8015a4c:	f04f 4190 	movne.w	r1, #1207959552	; 0x48000000
 8015a50:	2100      	moveq	r1, #0
    }
    else
    {
      depctl.d32 = 0;
    }
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPCTL, depctl.d32);
 8015a52:	6011      	str	r1, [r2, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
 8015a54:	2000      	movs	r0, #0
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8015a56:	21ff      	movs	r1, #255	; 0xff
    else
    {
      depctl.d32 = 0;
    }
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPCTL, depctl.d32);
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
 8015a58:	6110      	str	r0, [r2, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8015a5a:	6091      	str	r1, [r2, #8]
 8015a5c:	e7e7      	b.n	8015a2e <USB_OTG_CoreInitDev+0xa6>
  }
  msk.d32 = 0;
  msk.b.txfifoundrn = 1;
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPMSK, msk.d32, msk.d32);
 8015a5e:	6923      	ldr	r3, [r4, #16]
 8015a60:	691a      	ldr	r2, [r3, #16]
 8015a62:	f442 7180 	orr.w	r1, r2, #256	; 0x100
 8015a66:	6119      	str	r1, [r3, #16]
  
  if (pdev->cfg.dma_enable == 1)
 8015a68:	78e0      	ldrb	r0, [r4, #3]
 8015a6a:	2801      	cmp	r0, #1
 8015a6c:	d104      	bne.n	8015a78 <USB_OTG_CoreInitDev+0xf0>
  {
    dthrctl.d32 = 0;
    dthrctl.b.non_iso_thr_en = 1;
    dthrctl.b.iso_thr_en = 1;
    dthrctl.b.tx_thr_len = 64;
    dthrctl.b.rx_thr_en = 1;
 8015a6e:	4a05      	ldr	r2, [pc, #20]	; (8015a84 <USB_OTG_CoreInitDev+0xfc>)
    dthrctl.b.rx_thr_len = 64;
 8015a70:	2140      	movs	r1, #64	; 0x40
 8015a72:	f361 4259 	bfi	r2, r1, #17, #9
    USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DTHRCTL, dthrctl.d32);  
 8015a76:	631a      	str	r2, [r3, #48]	; 0x30
  }
  USB_OTG_EnableDevInt(pdev);
 8015a78:	4620      	mov	r0, r4
 8015a7a:	f7ff ff66 	bl	801594a <USB_OTG_EnableDevInt>
  return status;
}
 8015a7e:	2000      	movs	r0, #0
 8015a80:	bd38      	pop	{r3, r4, r5, pc}
 8015a82:	bf00      	nop
 8015a84:	00010103 	.word	0x00010103

08015a88 <USB_OTG_GetDeviceSpeed>:
{
  USB_OTG_DSTS_TypeDef  dsts;
  enum USB_OTG_SPEED speed = USB_SPEED_UNKNOWN;
  
  
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 8015a88:	6903      	ldr	r3, [r0, #16]
 8015a8a:	6898      	ldr	r0, [r3, #8]
  
  switch (dsts.b.enumspd)
 8015a8c:	f3c0 0141 	ubfx	r1, r0, #1, #2
 8015a90:	1e4b      	subs	r3, r1, #1
 8015a92:	2b02      	cmp	r3, #2
 8015a94:	d802      	bhi.n	8015a9c <USB_OTG_GetDeviceSpeed+0x14>
 8015a96:	4a02      	ldr	r2, [pc, #8]	; (8015aa0 <USB_OTG_GetDeviceSpeed+0x18>)
 8015a98:	5cd0      	ldrb	r0, [r2, r3]
 8015a9a:	4770      	bx	lr
 8015a9c:	2003      	movs	r0, #3
    speed = USB_SPEED_LOW;
    break;
  }
  
  return speed;
}
 8015a9e:	4770      	bx	lr
 8015aa0:	080182bb 	.word	0x080182bb

08015aa4 <USB_OTG_EP0Activate>:
  USB_OTG_DEPCTL_TypeDef  diepctl;
  USB_OTG_DCTL_TypeDef    dctl;
  
  dctl.d32 = 0;
  /* Read the Device Status and Endpoint 0 Control registers */
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 8015aa4:	6903      	ldr	r3, [r0, #16]
  diepctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[0]->DIEPCTL);
 8015aa6:	6981      	ldr	r1, [r0, #24]
*   for transmitting packets
* @param  None
* @retval USB_OTG_STS : status
*/
USB_OTG_STS  USB_OTG_EP0Activate(USB_OTG_CORE_HANDLE *pdev)
{
 8015aa8:	b510      	push	{r4, lr}
  USB_OTG_DEPCTL_TypeDef  diepctl;
  USB_OTG_DCTL_TypeDef    dctl;
  
  dctl.d32 = 0;
  /* Read the Device Status and Endpoint 0 Control registers */
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 8015aaa:	689c      	ldr	r4, [r3, #8]
  diepctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[0]->DIEPCTL);
 8015aac:	680a      	ldr	r2, [r1, #0]
  /* Set the MPS of the IN EP based on the enumeration speed */
  switch (dsts.b.enumspd)
 8015aae:	f3c4 0041 	ubfx	r0, r4, #1, #2
 8015ab2:	2802      	cmp	r0, #2
 8015ab4:	d002      	beq.n	8015abc <USB_OTG_EP0Activate+0x18>
  {
  case DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ:
  case DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ:
  case DSTS_ENUMSPD_FS_PHY_48MHZ:
    diepctl.b.mps = DEP0CTL_MPS_64;
 8015ab6:	f36f 020a 	bfc	r2, #0, #11
    break;
 8015aba:	e002      	b.n	8015ac2 <USB_OTG_EP0Activate+0x1e>
  case DSTS_ENUMSPD_LS_PHY_6MHZ:
    diepctl.b.mps = DEP0CTL_MPS_8;
 8015abc:	2003      	movs	r0, #3
 8015abe:	f360 020a 	bfi	r2, r0, #0, #11
    break;
  }
  USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[0]->DIEPCTL, diepctl.d32);
 8015ac2:	600a      	str	r2, [r1, #0]
  dctl.b.cgnpinnak = 1;
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, dctl.d32, dctl.d32);
 8015ac4:	6859      	ldr	r1, [r3, #4]
 8015ac6:	f441 7280 	orr.w	r2, r1, #256	; 0x100
 8015aca:	605a      	str	r2, [r3, #4]
  return status;
}
 8015acc:	2000      	movs	r0, #0
 8015ace:	bd10      	pop	{r4, pc}

08015ad0 <USB_OTG_EPActivate>:
* @brief  USB_OTG_EPActivate : Activates an EP
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPActivate(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 8015ad0:	b530      	push	{r4, r5, lr}
  
  
  depctl.d32 = 0;
  daintmsk.d32 = 0;
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 8015ad2:	784d      	ldrb	r5, [r1, #1]
 8015ad4:	780b      	ldrb	r3, [r1, #0]
  USB_OTG_DAINT_TypeDef  daintmsk;
  __IO uint32_t *addr;
  
  
  depctl.d32 = 0;
  daintmsk.d32 = 0;
 8015ad6:	2200      	movs	r2, #0
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 8015ad8:	2d01      	cmp	r5, #1
  {
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
 8015ada:	eb00 0483 	add.w	r4, r0, r3, lsl #2
  
  
  depctl.d32 = 0;
  daintmsk.d32 = 0;
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 8015ade:	d105      	bne.n	8015aec <USB_OTG_EPActivate+0x1c>
  {
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
    daintmsk.ep.in = 1 << ep->num;
 8015ae0:	fa05 f503 	lsl.w	r5, r5, r3
  depctl.d32 = 0;
  daintmsk.d32 = 0;
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
  {
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
 8015ae4:	69a4      	ldr	r4, [r4, #24]
    daintmsk.ep.in = 1 << ep->num;
 8015ae6:	f365 020f 	bfi	r2, r5, #0, #16
 8015aea:	e005      	b.n	8015af8 <USB_OTG_EPActivate+0x28>
  }
  else
  {
    addr = &pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL;
    daintmsk.ep.out = 1 << ep->num;
 8015aec:	2501      	movs	r5, #1
 8015aee:	fa05 f303 	lsl.w	r3, r5, r3
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
    daintmsk.ep.in = 1 << ep->num;
  }
  else
  {
    addr = &pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL;
 8015af2:	6d64      	ldr	r4, [r4, #84]	; 0x54
    daintmsk.ep.out = 1 << ep->num;
 8015af4:	f363 421f 	bfi	r2, r3, #16, #16
  }
  /* If the EP is already active don't change the EP Control
  * register. */
  depctl.d32 = USB_OTG_READ_REG32(addr);
 8015af8:	6823      	ldr	r3, [r4, #0]
  if (!depctl.b.usbactep)
 8015afa:	f3c3 2507 	ubfx	r5, r3, #8, #8
 8015afe:	f005 0580 	and.w	r5, r5, #128	; 0x80
 8015b02:	b2ed      	uxtb	r5, r5
 8015b04:	b96d      	cbnz	r5, 8015b22 <USB_OTG_EPActivate+0x52>
  {
    depctl.b.mps    = ep->maxpacket;
 8015b06:	688d      	ldr	r5, [r1, #8]
 8015b08:	f365 030a 	bfi	r3, r5, #0, #11
    depctl.b.eptype = ep->type;
 8015b0c:	78cd      	ldrb	r5, [r1, #3]
    depctl.b.txfnum = ep->tx_fifo_num;
 8015b0e:	88c9      	ldrh	r1, [r1, #6]
  * register. */
  depctl.d32 = USB_OTG_READ_REG32(addr);
  if (!depctl.b.usbactep)
  {
    depctl.b.mps    = ep->maxpacket;
    depctl.b.eptype = ep->type;
 8015b10:	f365 4393 	bfi	r3, r5, #18, #2
    depctl.b.txfnum = ep->tx_fifo_num;
 8015b14:	f361 5399 	bfi	r3, r1, #22, #4
    depctl.b.setd0pid = 1;
 8015b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    depctl.b.usbactep = 1;
 8015b1c:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
    USB_OTG_WRITE_REG32(addr, depctl.d32);
 8015b20:	6021      	str	r1, [r4, #0]
  {
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DEACHMSK, 0, daintmsk.d32);
  }
  else
#endif   
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DAINTMSK, 0, daintmsk.d32);
 8015b22:	6900      	ldr	r0, [r0, #16]
 8015b24:	69c3      	ldr	r3, [r0, #28]
 8015b26:	431a      	orrs	r2, r3
 8015b28:	61c2      	str	r2, [r0, #28]
  return status;
}
 8015b2a:	2000      	movs	r0, #0
 8015b2c:	bd30      	pop	{r4, r5, pc}

08015b2e <USB_OTG_EPDeactivate>:
* @brief  USB_OTG_EPDeactivate : Deactivates an EP
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPDeactivate(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 8015b2e:	b530      	push	{r4, r5, lr}
  __IO uint32_t *addr;
  
  depctl.d32 = 0;
  daintmsk.d32 = 0;  
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 8015b30:	784d      	ldrb	r5, [r1, #1]
 8015b32:	780b      	ldrb	r3, [r1, #0]
  USB_OTG_STS status = USB_OTG_OK;
  USB_OTG_DEPCTL_TypeDef  depctl;
  USB_OTG_DAINT_TypeDef  daintmsk;
  __IO uint32_t *addr;
  
  depctl.d32 = 0;
 8015b34:	2400      	movs	r4, #0
  daintmsk.d32 = 0;  
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 8015b36:	2d01      	cmp	r5, #1
  USB_OTG_DEPCTL_TypeDef  depctl;
  USB_OTG_DAINT_TypeDef  daintmsk;
  __IO uint32_t *addr;
  
  depctl.d32 = 0;
  daintmsk.d32 = 0;  
 8015b38:	4622      	mov	r2, r4
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
  {
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
 8015b3a:	eb00 0183 	add.w	r1, r0, r3, lsl #2
  __IO uint32_t *addr;
  
  depctl.d32 = 0;
  daintmsk.d32 = 0;  
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 8015b3e:	d105      	bne.n	8015b4c <USB_OTG_EPDeactivate+0x1e>
  {
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
    daintmsk.ep.in = 1 << ep->num;
 8015b40:	fa05 f303 	lsl.w	r3, r5, r3
  depctl.d32 = 0;
  daintmsk.d32 = 0;  
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
  {
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
 8015b44:	6989      	ldr	r1, [r1, #24]
    daintmsk.ep.in = 1 << ep->num;
 8015b46:	f363 020f 	bfi	r2, r3, #0, #16
 8015b4a:	e005      	b.n	8015b58 <USB_OTG_EPDeactivate+0x2a>
  }
  else
  {
    addr = &pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL;
    daintmsk.ep.out = 1 << ep->num;
 8015b4c:	2501      	movs	r5, #1
 8015b4e:	fa05 f303 	lsl.w	r3, r5, r3
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
    daintmsk.ep.in = 1 << ep->num;
  }
  else
  {
    addr = &pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL;
 8015b52:	6d49      	ldr	r1, [r1, #84]	; 0x54
    daintmsk.ep.out = 1 << ep->num;
 8015b54:	f363 421f 	bfi	r2, r3, #16, #16
  {
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DEACHMSK, daintmsk.d32, 0);
  }
  else
#endif    
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DAINTMSK, daintmsk.d32, 0);
 8015b58:	6900      	ldr	r0, [r0, #16]
  else
  {
    addr = &pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL;
    daintmsk.ep.out = 1 << ep->num;
  }
  depctl.b.usbactep = 0;
 8015b5a:	f36f 34cf 	bfc	r4, #15, #1
  USB_OTG_WRITE_REG32(addr, depctl.d32);
 8015b5e:	600c      	str	r4, [r1, #0]
  {
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DEACHMSK, daintmsk.d32, 0);
  }
  else
#endif    
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DAINTMSK, daintmsk.d32, 0);
 8015b60:	69c1      	ldr	r1, [r0, #28]
 8015b62:	ea21 0202 	bic.w	r2, r1, r2
 8015b66:	61c2      	str	r2, [r0, #28]
  return status;
}
 8015b68:	2000      	movs	r0, #0
 8015b6a:	bd30      	pop	{r4, r5, pc}

08015b6c <USB_OTG_EPStartXfer>:
*         starts the xfer
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPStartXfer(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 8015b6c:	b570      	push	{r4, r5, r6, lr}
  uint32_t fifoemptymsk = 0;  
  
  depctl.d32 = 0;
  deptsiz.d32 = 0;
  /* IN endpoint */
  if (ep->is_in == 1)
 8015b6e:	784e      	ldrb	r6, [r1, #1]
 8015b70:	780a      	ldrb	r2, [r1, #0]
 8015b72:	2e01      	cmp	r6, #1
*         starts the xfer
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPStartXfer(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 8015b74:	460b      	mov	r3, r1
  depctl.d32 = 0;
  deptsiz.d32 = 0;
  /* IN endpoint */
  if (ep->is_in == 1)
  {
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPCTL));
 8015b76:	eb00 0182 	add.w	r1, r0, r2, lsl #2
  uint32_t fifoemptymsk = 0;  
  
  depctl.d32 = 0;
  deptsiz.d32 = 0;
  /* IN endpoint */
  if (ep->is_in == 1)
 8015b7a:	d148      	bne.n	8015c0e <USB_OTG_EPStartXfer+0xa2>
  {
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPCTL));
 8015b7c:	698d      	ldr	r5, [r1, #24]
    deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPTSIZ));
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 8015b7e:	695c      	ldr	r4, [r3, #20]
  depctl.d32 = 0;
  deptsiz.d32 = 0;
  /* IN endpoint */
  if (ep->is_in == 1)
  {
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPCTL));
 8015b80:	6829      	ldr	r1, [r5, #0]
    deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPTSIZ));
 8015b82:	692a      	ldr	r2, [r5, #16]
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
    {
      deptsiz.b.xfersize = 0;
 8015b84:	f364 0212 	bfi	r2, r4, #0, #19
  if (ep->is_in == 1)
  {
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPCTL));
    deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPTSIZ));
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 8015b88:	b914      	cbnz	r4, 8015b90 <USB_OTG_EPStartXfer+0x24>
    {
      deptsiz.b.xfersize = 0;
      deptsiz.b.pktcnt = 1;
 8015b8a:	f366 42dc 	bfi	r2, r6, #19, #10
 8015b8e:	e00b      	b.n	8015ba8 <USB_OTG_EPStartXfer+0x3c>
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      deptsiz.b.xfersize = ep->xfer_len;
      deptsiz.b.pktcnt = (ep->xfer_len - 1 + ep->maxpacket) / ep->maxpacket;
 8015b90:	689e      	ldr	r6, [r3, #8]
 8015b92:	19a4      	adds	r4, r4, r6
 8015b94:	3c01      	subs	r4, #1
 8015b96:	fbb4 f6f6 	udiv	r6, r4, r6
      
      if (ep->type == EP_TYPE_ISOC)
 8015b9a:	78dc      	ldrb	r4, [r3, #3]
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      deptsiz.b.xfersize = ep->xfer_len;
      deptsiz.b.pktcnt = (ep->xfer_len - 1 + ep->maxpacket) / ep->maxpacket;
 8015b9c:	f366 42dc 	bfi	r2, r6, #19, #10
      
      if (ep->type == EP_TYPE_ISOC)
 8015ba0:	2c01      	cmp	r4, #1
      {
        deptsiz.b.mc = 1;
 8015ba2:	bf08      	it	eq
 8015ba4:	f364 725e 	bfieq	r2, r4, #29, #2
      }       
    }
    USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPTSIZ, deptsiz.d32);
 8015ba8:	612a      	str	r2, [r5, #16]
    
    if (pdev->cfg.dma_enable == 1)
 8015baa:	78c2      	ldrb	r2, [r0, #3]
 8015bac:	2a01      	cmp	r2, #1
 8015bae:	d106      	bne.n	8015bbe <USB_OTG_EPStartXfer+0x52>
    {
      USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPDMA, ep->dma_addr);
 8015bb0:	781a      	ldrb	r2, [r3, #0]
 8015bb2:	eb00 0482 	add.w	r4, r0, r2, lsl #2
 8015bb6:	691a      	ldr	r2, [r3, #16]
 8015bb8:	69a4      	ldr	r4, [r4, #24]
 8015bba:	6162      	str	r2, [r4, #20]
 8015bbc:	e00c      	b.n	8015bd8 <USB_OTG_EPStartXfer+0x6c>
    }
    else
    {
      if (ep->type != EP_TYPE_ISOC)
 8015bbe:	78da      	ldrb	r2, [r3, #3]
 8015bc0:	2a01      	cmp	r2, #1
 8015bc2:	d009      	beq.n	8015bd8 <USB_OTG_EPStartXfer+0x6c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0)
 8015bc4:	695a      	ldr	r2, [r3, #20]
 8015bc6:	b13a      	cbz	r2, 8015bd8 <USB_OTG_EPStartXfer+0x6c>
        {
          fifoemptymsk = 1 << ep->num;
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 8015bc8:	6902      	ldr	r2, [r0, #16]
      if (ep->type != EP_TYPE_ISOC)
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0)
        {
          fifoemptymsk = 1 << ep->num;
 8015bca:	781c      	ldrb	r4, [r3, #0]
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 8015bcc:	6b55      	ldr	r5, [r2, #52]	; 0x34
      if (ep->type != EP_TYPE_ISOC)
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0)
        {
          fifoemptymsk = 1 << ep->num;
 8015bce:	2601      	movs	r6, #1
 8015bd0:	fa06 f404 	lsl.w	r4, r6, r4
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 8015bd4:	432c      	orrs	r4, r5
 8015bd6:	6354      	str	r4, [r2, #52]	; 0x34
        }
      }
    }
    
    
    if (ep->type == EP_TYPE_ISOC)
 8015bd8:	78da      	ldrb	r2, [r3, #3]
 8015bda:	2a01      	cmp	r2, #1
 8015bdc:	d107      	bne.n	8015bee <USB_OTG_EPStartXfer+0x82>
    {
      dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 8015bde:	6902      	ldr	r2, [r0, #16]
 8015be0:	6892      	ldr	r2, [r2, #8]
      
      if (((dsts.b.soffn)&0x1) == 0)
 8015be2:	05d2      	lsls	r2, r2, #23
      {
        depctl.b.setd1pid = 1;
 8015be4:	bf54      	ite	pl
 8015be6:	f041 5100 	orrpl.w	r1, r1, #536870912	; 0x20000000
      }
      else
      {
        depctl.b.setd0pid = 1;
 8015bea:	f041 5180 	orrmi.w	r1, r1, #268435456	; 0x10000000
    } 
    
    /* EP enable, IN data in FIFO */
    depctl.b.cnak = 1;
    depctl.b.epena = 1;
    USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPCTL, depctl.d32);
 8015bee:	781a      	ldrb	r2, [r3, #0]
 8015bf0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
      }
    } 
    
    /* EP enable, IN data in FIFO */
    depctl.b.cnak = 1;
    depctl.b.epena = 1;
 8015bf4:	f041 4104 	orr.w	r1, r1, #2214592512	; 0x84000000
    USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPCTL, depctl.d32);
 8015bf8:	6992      	ldr	r2, [r2, #24]
 8015bfa:	6011      	str	r1, [r2, #0]
    
    if (ep->type == EP_TYPE_ISOC)
 8015bfc:	78d9      	ldrb	r1, [r3, #3]
 8015bfe:	2901      	cmp	r1, #1
 8015c00:	d137      	bne.n	8015c72 <USB_OTG_EPStartXfer+0x106>
    {
      USB_OTG_WritePacket(pdev, ep->xfer_buff, ep->num, ep->xfer_len);   
 8015c02:	68d9      	ldr	r1, [r3, #12]
 8015c04:	781a      	ldrb	r2, [r3, #0]
 8015c06:	8a9b      	ldrh	r3, [r3, #20]
 8015c08:	f7ff fb70 	bl	80152ec <USB_OTG_WritePacket>
 8015c0c:	e031      	b.n	8015c72 <USB_OTG_EPStartXfer+0x106>
    }    
  }
  else
  {
    /* OUT endpoint */
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL));
 8015c0e:	6d4d      	ldr	r5, [r1, #84]	; 0x54
    deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ));
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    if (ep->xfer_len == 0)
 8015c10:	695e      	ldr	r6, [r3, #20]
    }    
  }
  else
  {
    /* OUT endpoint */
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL));
 8015c12:	682a      	ldr	r2, [r5, #0]
 8015c14:	689c      	ldr	r4, [r3, #8]
    deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ));
 8015c16:	6929      	ldr	r1, [r5, #16]
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    if (ep->xfer_len == 0)
 8015c18:	b92e      	cbnz	r6, 8015c26 <USB_OTG_EPStartXfer+0xba>
    {
      deptsiz.b.xfersize = ep->maxpacket;
 8015c1a:	f364 0112 	bfi	r1, r4, #0, #19
      deptsiz.b.pktcnt = 1;
 8015c1e:	2401      	movs	r4, #1
 8015c20:	f364 41dc 	bfi	r1, r4, #19, #10
 8015c24:	e00a      	b.n	8015c3c <USB_OTG_EPStartXfer+0xd0>
    }
    else
    {
      deptsiz.b.pktcnt = (ep->xfer_len + (ep->maxpacket - 1)) / ep->maxpacket;
 8015c26:	1936      	adds	r6, r6, r4
 8015c28:	3e01      	subs	r6, #1
 8015c2a:	fbb6 f6f4 	udiv	r6, r6, r4
 8015c2e:	f366 41dc 	bfi	r1, r6, #19, #10
      deptsiz.b.xfersize = deptsiz.b.pktcnt * ep->maxpacket;
 8015c32:	05b6      	lsls	r6, r6, #22
 8015c34:	0db6      	lsrs	r6, r6, #22
 8015c36:	4374      	muls	r4, r6
 8015c38:	f364 0112 	bfi	r1, r4, #0, #19
    }
    USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ, deptsiz.d32);
 8015c3c:	6129      	str	r1, [r5, #16]
    
    if (pdev->cfg.dma_enable == 1)
 8015c3e:	78c1      	ldrb	r1, [r0, #3]
 8015c40:	2901      	cmp	r1, #1
 8015c42:	d105      	bne.n	8015c50 <USB_OTG_EPStartXfer+0xe4>
    {
      USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPDMA, ep->dma_addr);
 8015c44:	781c      	ldrb	r4, [r3, #0]
 8015c46:	eb00 0184 	add.w	r1, r0, r4, lsl #2
 8015c4a:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 8015c4c:	6919      	ldr	r1, [r3, #16]
 8015c4e:	6161      	str	r1, [r4, #20]
    }
    
    if (ep->type == EP_TYPE_ISOC)
 8015c50:	78d9      	ldrb	r1, [r3, #3]
 8015c52:	2901      	cmp	r1, #1
 8015c54:	d106      	bne.n	8015c64 <USB_OTG_EPStartXfer+0xf8>
    {
      if (ep->even_odd_frame)
 8015c56:	7959      	ldrb	r1, [r3, #5]
 8015c58:	b111      	cbz	r1, 8015c60 <USB_OTG_EPStartXfer+0xf4>
      {
        depctl.b.setd1pid = 1;
 8015c5a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8015c5e:	e001      	b.n	8015c64 <USB_OTG_EPStartXfer+0xf8>
      }
      else
      {
        depctl.b.setd0pid = 1;
 8015c60:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
      }
    }
    /* EP enable */
    depctl.b.cnak = 1;
    depctl.b.epena = 1;
    USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL, depctl.d32);
 8015c64:	781b      	ldrb	r3, [r3, #0]
 8015c66:	eb00 0083 	add.w	r0, r0, r3, lsl #2
        depctl.b.setd0pid = 1;
      }
    }
    /* EP enable */
    depctl.b.cnak = 1;
    depctl.b.epena = 1;
 8015c6a:	f042 4104 	orr.w	r1, r2, #2214592512	; 0x84000000
    USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL, depctl.d32);
 8015c6e:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8015c70:	6011      	str	r1, [r2, #0]
  }
  return status;
}
 8015c72:	2000      	movs	r0, #0
 8015c74:	bd70      	pop	{r4, r5, r6, pc}

08015c76 <USB_OTG_EP0StartXfer>:
*         starts the xfer
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EP0StartXfer(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 8015c76:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t fifoemptymsk = 0;
  
  depctl.d32   = 0;
  deptsiz.d32  = 0;
  /* IN endpoint */
  if (ep->is_in == 1)
 8015c78:	784d      	ldrb	r5, [r1, #1]
 8015c7a:	2d01      	cmp	r5, #1
 8015c7c:	d13d      	bne.n	8015cfa <USB_OTG_EP0StartXfer+0x84>
  {
    in_regs = pdev->regs.INEP_REGS[0];
 8015c7e:	6983      	ldr	r3, [r0, #24]
    depctl.d32  = USB_OTG_READ_REG32(&in_regs->DIEPCTL);
    deptsiz.d32 = USB_OTG_READ_REG32(&in_regs->DIEPTSIZ);
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 8015c80:	694a      	ldr	r2, [r1, #20]
  deptsiz.d32  = 0;
  /* IN endpoint */
  if (ep->is_in == 1)
  {
    in_regs = pdev->regs.INEP_REGS[0];
    depctl.d32  = USB_OTG_READ_REG32(&in_regs->DIEPCTL);
 8015c82:	681e      	ldr	r6, [r3, #0]
    deptsiz.d32 = USB_OTG_READ_REG32(&in_regs->DIEPTSIZ);
 8015c84:	691c      	ldr	r4, [r3, #16]
 8015c86:	9400      	str	r4, [sp, #0]
 8015c88:	b2e4      	uxtb	r4, r4
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 8015c8a:	b942      	cbnz	r2, 8015c9e <USB_OTG_EP0StartXfer+0x28>
    {
      deptsiz.b.xfersize = 0;
 8015c8c:	f362 0406 	bfi	r4, r2, #0, #7
      deptsiz.b.pktcnt = 1;
 8015c90:	f89d 2002 	ldrb.w	r2, [sp, #2]
    depctl.d32  = USB_OTG_READ_REG32(&in_regs->DIEPCTL);
    deptsiz.d32 = USB_OTG_READ_REG32(&in_regs->DIEPTSIZ);
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
    {
      deptsiz.b.xfersize = 0;
 8015c94:	f88d 4000 	strb.w	r4, [sp]
      deptsiz.b.pktcnt = 1;
 8015c98:	f365 02c4 	bfi	r2, r5, #3, #2
 8015c9c:	e00e      	b.n	8015cbc <USB_OTG_EP0StartXfer+0x46>
      
    }
    else
    {
      if (ep->xfer_len > ep->maxpacket)
 8015c9e:	688d      	ldr	r5, [r1, #8]
 8015ca0:	42aa      	cmp	r2, r5
      {
        ep->xfer_len = ep->maxpacket;
 8015ca2:	bf8a      	itet	hi
 8015ca4:	614d      	strhi	r5, [r1, #20]
        deptsiz.b.xfersize = ep->maxpacket;
      }
      else
      {
        deptsiz.b.xfersize = ep->xfer_len;
 8015ca6:	f362 0406 	bfils	r4, r2, #0, #7
    else
    {
      if (ep->xfer_len > ep->maxpacket)
      {
        ep->xfer_len = ep->maxpacket;
        deptsiz.b.xfersize = ep->maxpacket;
 8015caa:	f365 0406 	bfihi	r4, r5, #0, #7
      }
      else
      {
        deptsiz.b.xfersize = ep->xfer_len;
      }
      deptsiz.b.pktcnt = 1;
 8015cae:	f89d 2002 	ldrb.w	r2, [sp, #2]
        ep->xfer_len = ep->maxpacket;
        deptsiz.b.xfersize = ep->maxpacket;
      }
      else
      {
        deptsiz.b.xfersize = ep->xfer_len;
 8015cb2:	f88d 4000 	strb.w	r4, [sp]
      }
      deptsiz.b.pktcnt = 1;
 8015cb6:	2401      	movs	r4, #1
 8015cb8:	f364 02c4 	bfi	r2, r4, #3, #2
 8015cbc:	f88d 2002 	strb.w	r2, [sp, #2]
    }
    USB_OTG_WRITE_REG32(&in_regs->DIEPTSIZ, deptsiz.d32);
 8015cc0:	9a00      	ldr	r2, [sp, #0]
 8015cc2:	611a      	str	r2, [r3, #16]
    
    if (pdev->cfg.dma_enable == 1)
 8015cc4:	78c2      	ldrb	r2, [r0, #3]
 8015cc6:	2a01      	cmp	r2, #1
 8015cc8:	d105      	bne.n	8015cd6 <USB_OTG_EP0StartXfer+0x60>
    {
      USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPDMA, ep->dma_addr);  
 8015cca:	780c      	ldrb	r4, [r1, #0]
 8015ccc:	eb00 0284 	add.w	r2, r0, r4, lsl #2
 8015cd0:	6994      	ldr	r4, [r2, #24]
 8015cd2:	690a      	ldr	r2, [r1, #16]
 8015cd4:	6162      	str	r2, [r4, #20]
    }
    
    /* EP enable, IN data in FIFO */
    depctl.b.cnak = 1;
    depctl.b.epena = 1;
 8015cd6:	f046 4604 	orr.w	r6, r6, #2214592512	; 0x84000000
    USB_OTG_WRITE_REG32(&in_regs->DIEPCTL, depctl.d32);
 8015cda:	601e      	str	r6, [r3, #0]
    
    
    
    if (pdev->cfg.dma_enable == 0)
 8015cdc:	78c3      	ldrb	r3, [r0, #3]
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	d134      	bne.n	8015d4c <USB_OTG_EP0StartXfer+0xd6>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0)
 8015ce2:	694a      	ldr	r2, [r1, #20]
 8015ce4:	2a00      	cmp	r2, #0
 8015ce6:	d031      	beq.n	8015d4c <USB_OTG_EP0StartXfer+0xd6>
      {
        {
          fifoemptymsk |= 1 << ep->num;
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 8015ce8:	6903      	ldr	r3, [r0, #16]
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0)
      {
        {
          fifoemptymsk |= 1 << ep->num;
 8015cea:	780a      	ldrb	r2, [r1, #0]
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 8015cec:	6b58      	ldr	r0, [r3, #52]	; 0x34
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0)
      {
        {
          fifoemptymsk |= 1 << ep->num;
 8015cee:	2101      	movs	r1, #1
 8015cf0:	fa01 f202 	lsl.w	r2, r1, r2
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 8015cf4:	4302      	orrs	r2, r0
 8015cf6:	635a      	str	r2, [r3, #52]	; 0x34
 8015cf8:	e028      	b.n	8015d4c <USB_OTG_EP0StartXfer+0xd6>
    }
  }
  else
  {
    /* OUT endpoint */
    depctl.d32  = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 8015cfa:	780b      	ldrb	r3, [r1, #0]
    deptsiz.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ);
    /* Program the transfer size and packet count as follows:
    * xfersize = N * (maxpacket + 4 - (maxpacket % 4))
    * pktcnt = N           */
    if (ep->xfer_len == 0)
 8015cfc:	694e      	ldr	r6, [r1, #20]
    }
  }
  else
  {
    /* OUT endpoint */
    depctl.d32  = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 8015cfe:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8015d02:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8015d04:	688a      	ldr	r2, [r1, #8]
 8015d06:	681d      	ldr	r5, [r3, #0]
    deptsiz.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ);
 8015d08:	691c      	ldr	r4, [r3, #16]
 8015d0a:	9400      	str	r4, [sp, #0]
 8015d0c:	b2e4      	uxtb	r4, r4
    /* Program the transfer size and packet count as follows:
    * xfersize = N * (maxpacket + 4 - (maxpacket % 4))
    * pktcnt = N           */
    if (ep->xfer_len == 0)
 8015d0e:	b106      	cbz	r6, 8015d12 <USB_OTG_EP0StartXfer+0x9c>
      deptsiz.b.xfersize = ep->maxpacket;
      deptsiz.b.pktcnt = 1;
    }
    else
    {
      ep->xfer_len = ep->maxpacket;
 8015d10:	614a      	str	r2, [r1, #20]
      deptsiz.b.xfersize = ep->maxpacket;
 8015d12:	f362 0406 	bfi	r4, r2, #0, #7
      deptsiz.b.pktcnt = 1;
 8015d16:	f89d 2002 	ldrb.w	r2, [sp, #2]
      deptsiz.b.pktcnt = 1;
    }
    else
    {
      ep->xfer_len = ep->maxpacket;
      deptsiz.b.xfersize = ep->maxpacket;
 8015d1a:	f88d 4000 	strb.w	r4, [sp]
      deptsiz.b.pktcnt = 1;
 8015d1e:	2401      	movs	r4, #1
 8015d20:	f364 02c4 	bfi	r2, r4, #3, #2
 8015d24:	f88d 2002 	strb.w	r2, [sp, #2]
    }
    USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ, deptsiz.d32);
 8015d28:	9a00      	ldr	r2, [sp, #0]
 8015d2a:	611a      	str	r2, [r3, #16]
    if (pdev->cfg.dma_enable == 1)
 8015d2c:	78c3      	ldrb	r3, [r0, #3]
 8015d2e:	2b01      	cmp	r3, #1
 8015d30:	d105      	bne.n	8015d3e <USB_OTG_EP0StartXfer+0xc8>
    {
      USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPDMA, ep->dma_addr);
 8015d32:	780a      	ldrb	r2, [r1, #0]
 8015d34:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8015d38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8015d3a:	690b      	ldr	r3, [r1, #16]
 8015d3c:	6153      	str	r3, [r2, #20]
    }
    /* EP enable */
    depctl.b.cnak = 1;
    depctl.b.epena = 1;
    USB_OTG_WRITE_REG32 (&(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL), depctl.d32);
 8015d3e:	7809      	ldrb	r1, [r1, #0]
 8015d40:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    {
      USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPDMA, ep->dma_addr);
    }
    /* EP enable */
    depctl.b.cnak = 1;
    depctl.b.epena = 1;
 8015d44:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
    USB_OTG_WRITE_REG32 (&(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL), depctl.d32);
 8015d48:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8015d4a:	6015      	str	r5, [r2, #0]
    
  }
  return status;
}
 8015d4c:	2000      	movs	r0, #0
 8015d4e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

08015d50 <USB_OTG_EPSetStall>:
  USB_OTG_STS status = USB_OTG_OK;
  USB_OTG_DEPCTL_TypeDef  depctl;
  __IO uint32_t *depctl_addr;
  
  depctl.d32 = 0;
  if (ep->is_in == 1)
 8015d50:	784b      	ldrb	r3, [r1, #1]
 8015d52:	7809      	ldrb	r1, [r1, #0]
 8015d54:	2b01      	cmp	r3, #1
  {
    depctl_addr = &(pdev->regs.INEP_REGS[ep->num]->DIEPCTL);
 8015d56:	eb00 0081 	add.w	r0, r0, r1, lsl #2
  USB_OTG_STS status = USB_OTG_OK;
  USB_OTG_DEPCTL_TypeDef  depctl;
  __IO uint32_t *depctl_addr;
  
  depctl.d32 = 0;
  if (ep->is_in == 1)
 8015d5a:	d10d      	bne.n	8015d78 <USB_OTG_EPSetStall+0x28>
  {
    depctl_addr = &(pdev->regs.INEP_REGS[ep->num]->DIEPCTL);
 8015d5c:	6980      	ldr	r0, [r0, #24]
    depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
 8015d5e:	6803      	ldr	r3, [r0, #0]
    /* set the disable and stall bits */
    if (depctl.b.epena)
 8015d60:	f3c3 6207 	ubfx	r2, r3, #24, #8
 8015d64:	f002 0180 	and.w	r1, r2, #128	; 0x80
 8015d68:	b2ca      	uxtb	r2, r1
 8015d6a:	b10a      	cbz	r2, 8015d70 <USB_OTG_EPSetStall+0x20>
    {
      depctl.b.epdis = 1;
 8015d6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    }
    depctl.b.stall = 1;
 8015d70:	f443 1100 	orr.w	r1, r3, #2097152	; 0x200000
    USB_OTG_WRITE_REG32(depctl_addr, depctl.d32);
 8015d74:	6001      	str	r1, [r0, #0]
 8015d76:	e004      	b.n	8015d82 <USB_OTG_EPSetStall+0x32>
  }
  else
  {
    depctl_addr = &(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 8015d78:	6d43      	ldr	r3, [r0, #84]	; 0x54
    depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
 8015d7a:	681a      	ldr	r2, [r3, #0]
    /* set the stall bit */
    depctl.b.stall = 1;
 8015d7c:	f442 1100 	orr.w	r1, r2, #2097152	; 0x200000
    USB_OTG_WRITE_REG32(depctl_addr, depctl.d32);
 8015d80:	6019      	str	r1, [r3, #0]
  }
  return status;
}
 8015d82:	2000      	movs	r0, #0
 8015d84:	4770      	bx	lr

08015d86 <USB_OTG_EPClearStall>:
  USB_OTG_DEPCTL_TypeDef  depctl;
  __IO uint32_t *depctl_addr;
  
  depctl.d32 = 0;
  
  if (ep->is_in == 1)
 8015d86:	784b      	ldrb	r3, [r1, #1]
 8015d88:	2b01      	cmp	r3, #1
 8015d8a:	780b      	ldrb	r3, [r1, #0]
    depctl_addr = &(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
  }
  depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
  /* clear the stall bits */
  depctl.b.stall = 0;
  if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8015d8c:	78c9      	ldrb	r1, [r1, #3]
  
  depctl.d32 = 0;
  
  if (ep->is_in == 1)
  {
    depctl_addr = &(pdev->regs.INEP_REGS[ep->num]->DIEPCTL);
 8015d8e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8015d92:	bf0c      	ite	eq
 8015d94:	6982      	ldreq	r2, [r0, #24]
  }
  else
  {
    depctl_addr = &(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 8015d96:	6d42      	ldrne	r2, [r0, #84]	; 0x54
  }
  depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
 8015d98:	6813      	ldr	r3, [r2, #0]
  /* clear the stall bits */
  depctl.b.stall = 0;
  if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8015d9a:	1e88      	subs	r0, r1, #2
  {
    depctl_addr = &(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
  }
  depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
  /* clear the stall bits */
  depctl.b.stall = 0;
 8015d9c:	f36f 5355 	bfc	r3, #21, #1
  if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8015da0:	2801      	cmp	r0, #1
  {
    depctl.b.setd0pid = 1; /* DATA0 */
 8015da2:	bf98      	it	ls
 8015da4:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
  }
  USB_OTG_WRITE_REG32(depctl_addr, depctl.d32);
 8015da8:	6013      	str	r3, [r2, #0]
  return status;
}
 8015daa:	2000      	movs	r0, #0
 8015dac:	4770      	bx	lr

08015dae <USB_OTG_ReadDevAllOutEp_itr>:
* @retval OUT endpoint interrupt bits
*/
uint32_t USB_OTG_ReadDevAllOutEp_itr(USB_OTG_CORE_HANDLE *pdev)
{
  uint32_t v;
  v  = USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINT);
 8015dae:	6903      	ldr	r3, [r0, #16]
 8015db0:	699a      	ldr	r2, [r3, #24]
  v &= USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINTMSK);
 8015db2:	69d8      	ldr	r0, [r3, #28]
 8015db4:	4010      	ands	r0, r2
  return ((v & 0xffff0000) >> 16);
}
 8015db6:	0c00      	lsrs	r0, r0, #16
 8015db8:	4770      	bx	lr

08015dba <USB_OTG_ReadDevOutEP_itr>:
* @retval Device OUT EP Interrupt register
*/
uint32_t USB_OTG_ReadDevOutEP_itr(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{
  uint32_t v;
  v  = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[epnum]->DOEPINT);
 8015dba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  v &= USB_OTG_READ_REG32(&pdev->regs.DREGS->DOEPMSK);
 8015dbe:	6902      	ldr	r2, [r0, #16]
* @retval Device OUT EP Interrupt register
*/
uint32_t USB_OTG_ReadDevOutEP_itr(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{
  uint32_t v;
  v  = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[epnum]->DOEPINT);
 8015dc0:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8015dc2:	6899      	ldr	r1, [r3, #8]
  v &= USB_OTG_READ_REG32(&pdev->regs.DREGS->DOEPMSK);
 8015dc4:	6950      	ldr	r0, [r2, #20]
  return v;
}
 8015dc6:	4008      	ands	r0, r1
 8015dc8:	4770      	bx	lr

08015dca <USB_OTG_ReadDevAllInEPItr>:
* @retval int status register
*/
uint32_t USB_OTG_ReadDevAllInEPItr(USB_OTG_CORE_HANDLE *pdev)
{
  uint32_t v;
  v = USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINT);
 8015dca:	6903      	ldr	r3, [r0, #16]
 8015dcc:	6998      	ldr	r0, [r3, #24]
  v &= USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINTMSK);
 8015dce:	69d9      	ldr	r1, [r3, #28]
 8015dd0:	4008      	ands	r0, r1
  return (v & 0xffff);
}
 8015dd2:	b280      	uxth	r0, r0
 8015dd4:	4770      	bx	lr

08015dd6 <USB_OTG_EP0_OutStart>:
* @brief  configures EPO to receive SETUP packets
* @param  None
* @retval : None
*/
void USB_OTG_EP0_OutStart(USB_OTG_CORE_HANDLE *pdev)
{
 8015dd6:	b082      	sub	sp, #8
  USB_OTG_DEP0XFRSIZ_TypeDef  doeptsize0;
  doeptsize0.d32 = 0;
 8015dd8:	2300      	movs	r3, #0
 8015dda:	9300      	str	r3, [sp, #0]
  doeptsize0.b.supcnt = 3;
 8015ddc:	21c0      	movs	r1, #192	; 0xc0
  doeptsize0.b.pktcnt = 1;
 8015dde:	2201      	movs	r2, #1
 8015de0:	2300      	movs	r3, #0
*/
void USB_OTG_EP0_OutStart(USB_OTG_CORE_HANDLE *pdev)
{
  USB_OTG_DEP0XFRSIZ_TypeDef  doeptsize0;
  doeptsize0.d32 = 0;
  doeptsize0.b.supcnt = 3;
 8015de2:	f88d 1003 	strb.w	r1, [sp, #3]
  doeptsize0.b.pktcnt = 1;
 8015de6:	f362 03c4 	bfi	r3, r2, #3, #2
  doeptsize0.b.xfersize = 8 * 3;
 8015dea:	2118      	movs	r1, #24
void USB_OTG_EP0_OutStart(USB_OTG_CORE_HANDLE *pdev)
{
  USB_OTG_DEP0XFRSIZ_TypeDef  doeptsize0;
  doeptsize0.d32 = 0;
  doeptsize0.b.supcnt = 3;
  doeptsize0.b.pktcnt = 1;
 8015dec:	f88d 3002 	strb.w	r3, [sp, #2]
  doeptsize0.b.xfersize = 8 * 3;
 8015df0:	f88d 1000 	strb.w	r1, [sp]
  USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[0]->DOEPTSIZ, doeptsize0.d32 );
 8015df4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8015df6:	9a00      	ldr	r2, [sp, #0]
 8015df8:	611a      	str	r2, [r3, #16]
  
  if (pdev->cfg.dma_enable == 1)
 8015dfa:	78c1      	ldrb	r1, [r0, #3]
 8015dfc:	2901      	cmp	r1, #1
 8015dfe:	d106      	bne.n	8015e0e <USB_OTG_EP0_OutStart+0x38>
  {
    USB_OTG_DEPCTL_TypeDef  doepctl;
    doepctl.d32 = 0;
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[0]->DOEPDMA, 
 8015e00:	f200 50cc 	addw	r0, r0, #1484	; 0x5cc
 8015e04:	6158      	str	r0, [r3, #20]
                        (uint32_t)&pdev->dev.setup_packet);
    
    /* EP enable */
    doepctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[0]->DOEPCTL);
 8015e06:	681a      	ldr	r2, [r3, #0]
    doepctl.b.epena = 1;
    doepctl.d32 = 0x80008000;
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[0]->DOEPCTL, doepctl.d32);
 8015e08:	f04f 2280 	mov.w	r2, #2147516416	; 0x80008000
 8015e0c:	601a      	str	r2, [r3, #0]
  }
}
 8015e0e:	b002      	add	sp, #8
 8015e10:	4770      	bx	lr

08015e12 <DCD_Init>:



void DCD_Init(USB_OTG_CORE_HANDLE *pdev , 
              USB_OTG_CORE_ID_TypeDef coreID)
{
 8015e12:	b510      	push	{r4, lr}
 8015e14:	4604      	mov	r4, r0
  uint32_t i;
  USB_OTG_EP *ep;
  
  USB_OTG_SelectCore (pdev , coreID);
 8015e16:	f7ff fa8d 	bl	8015334 <USB_OTG_SelectCore>
  
  pdev->dev.device_status = USB_OTG_DEFAULT;
 8015e1a:	2301      	movs	r3, #1
 8015e1c:	f884 3112 	strb.w	r3, [r4, #274]	; 0x112
  pdev->dev.device_address = 0;
 8015e20:	2300      	movs	r3, #0
 8015e22:	f884 3114 	strb.w	r3, [r4, #276]	; 0x114
  
  /* Init ep structure */
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8015e26:	7862      	ldrb	r2, [r4, #1]
 8015e28:	4293      	cmp	r3, r2
 8015e2a:	d213      	bcs.n	8015e54 <DCD_Init+0x42>
  {
    ep = &pdev->dev.in_ep[i];
 8015e2c:	2228      	movs	r2, #40	; 0x28
 8015e2e:	fb02 4103 	mla	r1, r2, r3, r4
 8015e32:	f501 728e 	add.w	r2, r1, #284	; 0x11c
    /* Init ep structure */
    ep->is_in = 1;
 8015e36:	2001      	movs	r0, #1
 8015e38:	f881 011d 	strb.w	r0, [r1, #285]	; 0x11d
    ep->num = i;
 8015e3c:	f881 311c 	strb.w	r3, [r1, #284]	; 0x11c
    ep->tx_fifo_num = i;
 8015e40:	f8a1 3122 	strh.w	r3, [r1, #290]	; 0x122
    /* Control until ep is actvated */
    ep->type = EP_TYPE_CTRL;
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
 8015e44:	2040      	movs	r0, #64	; 0x40
    /* Init ep structure */
    ep->is_in = 1;
    ep->num = i;
    ep->tx_fifo_num = i;
    /* Control until ep is actvated */
    ep->type = EP_TYPE_CTRL;
 8015e46:	2100      	movs	r1, #0
 8015e48:	70d1      	strb	r1, [r2, #3]
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
 8015e4a:	6090      	str	r0, [r2, #8]
    ep->xfer_buff = 0;
 8015e4c:	60d1      	str	r1, [r2, #12]
    ep->xfer_len = 0;
 8015e4e:	6151      	str	r1, [r2, #20]
  
  pdev->dev.device_status = USB_OTG_DEFAULT;
  pdev->dev.device_address = 0;
  
  /* Init ep structure */
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8015e50:	3301      	adds	r3, #1
 8015e52:	e7e8      	b.n	8015e26 <DCD_Init+0x14>
 8015e54:	2300      	movs	r3, #0
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
    ep->xfer_buff = 0;
    ep->xfer_len = 0;
  }
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8015e56:	7860      	ldrb	r0, [r4, #1]
 8015e58:	4283      	cmp	r3, r0
 8015e5a:	d213      	bcs.n	8015e84 <DCD_Init+0x72>
  {
    ep = &pdev->dev.out_ep[i];
 8015e5c:	2128      	movs	r1, #40	; 0x28
 8015e5e:	fb01 4003 	mla	r0, r1, r3, r4
 8015e62:	f500 725d 	add.w	r2, r0, #884	; 0x374
    /* Init ep structure */
    ep->is_in = 0;
 8015e66:	2100      	movs	r1, #0
    ep->num = i;
 8015e68:	f880 3374 	strb.w	r3, [r0, #884]	; 0x374
    ep->tx_fifo_num = i;
 8015e6c:	f8a0 337a 	strh.w	r3, [r0, #890]	; 0x37a
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
  {
    ep = &pdev->dev.out_ep[i];
    /* Init ep structure */
    ep->is_in = 0;
 8015e70:	f880 1375 	strb.w	r1, [r0, #885]	; 0x375
    ep->num = i;
    ep->tx_fifo_num = i;
    /* Control until ep is activated */
    ep->type = EP_TYPE_CTRL;
 8015e74:	f880 1377 	strb.w	r1, [r0, #887]	; 0x377
    ep->maxpacket = USB_OTG_MAX_EP0_SIZE;
 8015e78:	2040      	movs	r0, #64	; 0x40
 8015e7a:	6090      	str	r0, [r2, #8]
    ep->xfer_buff = 0;
 8015e7c:	60d1      	str	r1, [r2, #12]
    ep->xfer_len = 0;
 8015e7e:	6151      	str	r1, [r2, #20]
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
    ep->xfer_buff = 0;
    ep->xfer_len = 0;
  }
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8015e80:	3301      	adds	r3, #1
 8015e82:	e7e8      	b.n	8015e56 <DCD_Init+0x44>
    ep->maxpacket = USB_OTG_MAX_EP0_SIZE;
    ep->xfer_buff = 0;
    ep->xfer_len = 0;
  }
  
  USB_OTG_DisableGlobalInt(pdev);
 8015e84:	4620      	mov	r0, r4
 8015e86:	f7ff fb09 	bl	801549c <USB_OTG_DisableGlobalInt>
  
  /*Init the Core (common init.) */
  USB_OTG_CoreInit(pdev);
 8015e8a:	4620      	mov	r0, r4
 8015e8c:	f7ff fab2 	bl	80153f4 <USB_OTG_CoreInit>


  /* Force Device Mode*/
  USB_OTG_SetCurrentMode(pdev, DEVICE_MODE);
 8015e90:	2100      	movs	r1, #0
 8015e92:	4620      	mov	r0, r4
 8015e94:	f7ff fb42 	bl	801551c <USB_OTG_SetCurrentMode>
  
  /* Init Device */
  USB_OTG_CoreInitDev(pdev);
 8015e98:	4620      	mov	r0, r4
 8015e9a:	f7ff fd75 	bl	8015988 <USB_OTG_CoreInitDev>
  
  
  /* Enable USB Global interrupt */
  USB_OTG_EnableGlobalInt(pdev);
 8015e9e:	4620      	mov	r0, r4
}
 8015ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  /* Init Device */
  USB_OTG_CoreInitDev(pdev);
  
  
  /* Enable USB Global interrupt */
  USB_OTG_EnableGlobalInt(pdev);
 8015ea4:	f7ff baf3 	b.w	801548e <USB_OTG_EnableGlobalInt>

08015ea8 <DCD_EP_Open>:
*/
uint32_t DCD_EP_Open(USB_OTG_CORE_HANDLE *pdev , 
                     uint8_t ep_addr,
                     uint16_t ep_mps,
                     uint8_t ep_type)
{
 8015ea8:	b570      	push	{r4, r5, r6, lr}
  USB_OTG_EP *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 8015eaa:	b2cd      	uxtb	r5, r1
 8015eac:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8015eb0:	f04f 0628 	mov.w	r6, #40	; 0x28
  {
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 8015eb4:	fb06 0404 	mla	r4, r6, r4, r0
                     uint16_t ep_mps,
                     uint8_t ep_type)
{
  USB_OTG_EP *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 8015eb8:	f015 0f80 	tst.w	r5, #128	; 0x80
  {
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 8015ebc:	bf14      	ite	ne
 8015ebe:	f504 748e 	addne.w	r4, r4, #284	; 0x11c
  }
  else
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 8015ec2:	f504 745d 	addeq.w	r4, r4, #884	; 0x374
  }
  ep->num   = ep_addr & 0x7F;
 8015ec6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8015eca:	09ed      	lsrs	r5, r5, #7
  }
  else
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
 8015ecc:	7021      	strb	r1, [r4, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8015ece:	7065      	strb	r5, [r4, #1]
  ep->maxpacket = ep_mps;
 8015ed0:	60a2      	str	r2, [r4, #8]
  ep->type = ep_type;
 8015ed2:	70e3      	strb	r3, [r4, #3]
  if (ep->is_in)
 8015ed4:	b105      	cbz	r5, 8015ed8 <DCD_EP_Open+0x30>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8015ed6:	80e1      	strh	r1, [r4, #6]
  }
  /* Set initial data PID. */
  if (ep_type == USB_OTG_EP_BULK )
 8015ed8:	2b02      	cmp	r3, #2
 8015eda:	d101      	bne.n	8015ee0 <DCD_EP_Open+0x38>
  {
    ep->data_pid_start = 0;
 8015edc:	2300      	movs	r3, #0
 8015ede:	7123      	strb	r3, [r4, #4]
  }
  USB_OTG_EPActivate(pdev , ep );
 8015ee0:	4621      	mov	r1, r4
 8015ee2:	f7ff fdf5 	bl	8015ad0 <USB_OTG_EPActivate>
  return 0;
}
 8015ee6:	2000      	movs	r0, #0
 8015ee8:	bd70      	pop	{r4, r5, r6, pc}

08015eea <DCD_EP_Close>:
* @param pdev: device instance
* @param ep_addr: endpoint address
* @retval : status
*/
uint32_t DCD_EP_Close(USB_OTG_CORE_HANDLE *pdev , uint8_t  ep_addr)
{
 8015eea:	b510      	push	{r4, lr}
  USB_OTG_EP *ep;
  
  if ((ep_addr&0x80) == 0x80)
 8015eec:	b2ca      	uxtb	r2, r1
 8015eee:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8015ef2:	f04f 0428 	mov.w	r4, #40	; 0x28
  {
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 8015ef6:	fb04 0303 	mla	r3, r4, r3, r0
*/
uint32_t DCD_EP_Close(USB_OTG_CORE_HANDLE *pdev , uint8_t  ep_addr)
{
  USB_OTG_EP *ep;
  
  if ((ep_addr&0x80) == 0x80)
 8015efa:	f012 0f80 	tst.w	r2, #128	; 0x80
  {
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 8015efe:	bf14      	ite	ne
 8015f00:	f503 738e 	addne.w	r3, r3, #284	; 0x11c
  }
  else
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 8015f04:	f503 735d 	addeq.w	r3, r3, #884	; 0x374
  }
  ep->num   = ep_addr & 0x7F;
 8015f08:	f001 017f 	and.w	r1, r1, #127	; 0x7f
  ep->is_in = (0x80 & ep_addr) != 0;
 8015f0c:	09d2      	lsrs	r2, r2, #7
  }
  else
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
 8015f0e:	7019      	strb	r1, [r3, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8015f10:	705a      	strb	r2, [r3, #1]
  USB_OTG_EPDeactivate(pdev , ep );
 8015f12:	4619      	mov	r1, r3
 8015f14:	f7ff fe0b 	bl	8015b2e <USB_OTG_EPDeactivate>
  return 0;
}
 8015f18:	2000      	movs	r0, #0
 8015f1a:	bd10      	pop	{r4, pc}

08015f1c <DCD_EP_PrepareRx>:
*/
uint32_t   DCD_EP_PrepareRx( USB_OTG_CORE_HANDLE *pdev,
                            uint8_t   ep_addr,
                            uint8_t *pbuf,                        
                            uint16_t  buf_len)
{
 8015f1c:	b538      	push	{r3, r4, r5, lr}
  USB_OTG_EP *ep;
  
  ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 8015f1e:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8015f22:	2528      	movs	r5, #40	; 0x28
 8015f24:	fb05 0504 	mla	r5, r5, r4, r0
 8015f28:	f505 715d 	add.w	r1, r5, #884	; 0x374
  /*setup and start the Xfer */
  ep->xfer_buff = pbuf;  
  ep->xfer_len = buf_len;
  ep->xfer_count = 0;
  ep->is_in = 0;
  ep->num = ep_addr & 0x7F;
 8015f2c:	f885 4374 	strb.w	r4, [r5, #884]	; 0x374
  
  ep = &pdev->dev.out_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pbuf;  
  ep->xfer_len = buf_len;
 8015f30:	614b      	str	r3, [r1, #20]
  ep->xfer_count = 0;
 8015f32:	2300      	movs	r3, #0
  USB_OTG_EP *ep;
  
  ep = &pdev->dev.out_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pbuf;  
 8015f34:	60ca      	str	r2, [r1, #12]
  ep->xfer_len = buf_len;
  ep->xfer_count = 0;
 8015f36:	618b      	str	r3, [r1, #24]
  ep->is_in = 0;
 8015f38:	704b      	strb	r3, [r1, #1]
  ep->num = ep_addr & 0x7F;
  
  if (pdev->cfg.dma_enable == 1)
 8015f3a:	78c3      	ldrb	r3, [r0, #3]
 8015f3c:	2b01      	cmp	r3, #1
                            uint8_t *pbuf,                        
                            uint16_t  buf_len)
{
  USB_OTG_EP *ep;
  
  ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 8015f3e:	f505 755c 	add.w	r5, r5, #880	; 0x370
  ep->is_in = 0;
  ep->num = ep_addr & 0x7F;
  
  if (pdev->cfg.dma_enable == 1)
  {
    ep->dma_addr = (uint32_t)pbuf;  
 8015f42:	bf08      	it	eq
 8015f44:	610a      	streq	r2, [r1, #16]
  }
  
  if ( ep->num == 0 )
 8015f46:	b914      	cbnz	r4, 8015f4e <DCD_EP_PrepareRx+0x32>
  {
    USB_OTG_EP0StartXfer(pdev , ep);
 8015f48:	f7ff fe95 	bl	8015c76 <USB_OTG_EP0StartXfer>
 8015f4c:	e001      	b.n	8015f52 <DCD_EP_PrepareRx+0x36>
  }
  else
  {
    USB_OTG_EPStartXfer(pdev, ep );
 8015f4e:	f7ff fe0d 	bl	8015b6c <USB_OTG_EPStartXfer>
  }
  return 0;
}
 8015f52:	2000      	movs	r0, #0
 8015f54:	bd38      	pop	{r3, r4, r5, pc}

08015f56 <DCD_EP_Tx>:
*/
uint32_t  DCD_EP_Tx ( USB_OTG_CORE_HANDLE *pdev,
                     uint8_t   ep_addr,
                     uint8_t   *pbuf,
                     uint32_t   buf_len)
{
 8015f56:	b570      	push	{r4, r5, r6, lr}
  USB_OTG_EP *ep;
  
  ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 8015f58:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8015f5c:	2528      	movs	r5, #40	; 0x28
 8015f5e:	fb05 0504 	mla	r5, r5, r4, r0
 8015f62:	f505 718e 	add.w	r1, r5, #284	; 0x11c
  
  /* Setup and start the Transfer */
  ep->is_in = 1;
 8015f66:	2601      	movs	r6, #1
  ep->num = ep_addr & 0x7F;  
  ep->xfer_buff = pbuf;
 8015f68:	60ca      	str	r2, [r1, #12]
  ep->dma_addr = (uint32_t)pbuf;  
 8015f6a:	610a      	str	r2, [r1, #16]
  ep->xfer_count = 0;
 8015f6c:	2200      	movs	r2, #0
  
  ep = &pdev->dev.in_ep[ep_addr & 0x7F];
  
  /* Setup and start the Transfer */
  ep->is_in = 1;
  ep->num = ep_addr & 0x7F;  
 8015f6e:	f885 411c 	strb.w	r4, [r5, #284]	; 0x11c
  USB_OTG_EP *ep;
  
  ep = &pdev->dev.in_ep[ep_addr & 0x7F];
  
  /* Setup and start the Transfer */
  ep->is_in = 1;
 8015f72:	704e      	strb	r6, [r1, #1]
                     uint8_t   *pbuf,
                     uint32_t   buf_len)
{
  USB_OTG_EP *ep;
  
  ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 8015f74:	f505 758c 	add.w	r5, r5, #280	; 0x118
  /* Setup and start the Transfer */
  ep->is_in = 1;
  ep->num = ep_addr & 0x7F;  
  ep->xfer_buff = pbuf;
  ep->dma_addr = (uint32_t)pbuf;  
  ep->xfer_count = 0;
 8015f78:	618a      	str	r2, [r1, #24]
  ep->xfer_len  = buf_len;
 8015f7a:	614b      	str	r3, [r1, #20]
  
  if ( ep->num == 0 )
 8015f7c:	b914      	cbnz	r4, 8015f84 <DCD_EP_Tx+0x2e>
  {
    USB_OTG_EP0StartXfer(pdev , ep);
 8015f7e:	f7ff fe7a 	bl	8015c76 <USB_OTG_EP0StartXfer>
 8015f82:	e001      	b.n	8015f88 <DCD_EP_Tx+0x32>
  }
  else
  {
    USB_OTG_EPStartXfer(pdev, ep );
 8015f84:	f7ff fdf2 	bl	8015b6c <USB_OTG_EPStartXfer>
  }
  return 0;
}
 8015f88:	2000      	movs	r0, #0
 8015f8a:	bd70      	pop	{r4, r5, r6, pc}

08015f8c <DCD_EP_Stall>:
* @retval : status
*/
uint32_t  DCD_EP_Stall (USB_OTG_CORE_HANDLE *pdev, uint8_t   epnum)
{
  USB_OTG_EP *ep;
  if ((0x80 & epnum) == 0x80)
 8015f8c:	b2ca      	uxtb	r2, r1
 8015f8e:	f012 0f80 	tst.w	r2, #128	; 0x80
* @param pdev: device instance
* @param epnum: endpoint address
* @retval : status
*/
uint32_t  DCD_EP_Stall (USB_OTG_CORE_HANDLE *pdev, uint8_t   epnum)
{
 8015f92:	b510      	push	{r4, lr}
 8015f94:	f04f 0328 	mov.w	r3, #40	; 0x28
  USB_OTG_EP *ep;
  if ((0x80 & epnum) == 0x80)
 8015f98:	d006      	beq.n	8015fa8 <DCD_EP_Stall+0x1c>
  {
    ep = &pdev->dev.in_ep[epnum & 0x7F];
 8015f9a:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8015f9e:	fb03 0304 	mla	r3, r3, r4, r0
 8015fa2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8015fa6:	e003      	b.n	8015fb0 <DCD_EP_Stall+0x24>
  }
  else
  {
    ep = &pdev->dev.out_ep[epnum];
 8015fa8:	fb03 0401 	mla	r4, r3, r1, r0
 8015fac:	f504 735d 	add.w	r3, r4, #884	; 0x374
  }

  ep->is_stall = 1;
  ep->num   = epnum & 0x7F;
  ep->is_in = ((epnum & 0x80) == 0x80);
 8015fb0:	09d2      	lsrs	r2, r2, #7
  else
  {
    ep = &pdev->dev.out_ep[epnum];
  }

  ep->is_stall = 1;
 8015fb2:	2401      	movs	r4, #1
  ep->num   = epnum & 0x7F;
 8015fb4:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8015fb8:	7019      	strb	r1, [r3, #0]
  else
  {
    ep = &pdev->dev.out_ep[epnum];
  }

  ep->is_stall = 1;
 8015fba:	709c      	strb	r4, [r3, #2]
  ep->num   = epnum & 0x7F;
  ep->is_in = ((epnum & 0x80) == 0x80);
 8015fbc:	705a      	strb	r2, [r3, #1]
  
  USB_OTG_EPSetStall(pdev , ep);
 8015fbe:	4619      	mov	r1, r3
 8015fc0:	f7ff fec6 	bl	8015d50 <USB_OTG_EPSetStall>
  return (0);
}
 8015fc4:	2000      	movs	r0, #0
 8015fc6:	bd10      	pop	{r4, pc}

08015fc8 <DCD_EP_ClrStall>:
* @retval : status
*/
uint32_t  DCD_EP_ClrStall (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
  USB_OTG_EP *ep;
  if ((0x80 & epnum) == 0x80)
 8015fc8:	b2ca      	uxtb	r2, r1
 8015fca:	f012 0f80 	tst.w	r2, #128	; 0x80
* @param pdev: device instance
* @param epnum: endpoint address
* @retval : status
*/
uint32_t  DCD_EP_ClrStall (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
 8015fce:	b510      	push	{r4, lr}
 8015fd0:	f04f 0328 	mov.w	r3, #40	; 0x28
  USB_OTG_EP *ep;
  if ((0x80 & epnum) == 0x80)
 8015fd4:	d006      	beq.n	8015fe4 <DCD_EP_ClrStall+0x1c>
  {
    ep = &pdev->dev.in_ep[epnum & 0x7F];    
 8015fd6:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8015fda:	fb03 0304 	mla	r3, r3, r4, r0
 8015fde:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8015fe2:	e003      	b.n	8015fec <DCD_EP_ClrStall+0x24>
  }
  else
  {
    ep = &pdev->dev.out_ep[epnum];
 8015fe4:	fb03 0401 	mla	r4, r3, r1, r0
 8015fe8:	f504 735d 	add.w	r3, r4, #884	; 0x374
  }
  
  ep->is_stall = 0;  
 8015fec:	2400      	movs	r4, #0
  ep->num   = epnum & 0x7F;
  ep->is_in = ((epnum & 0x80) == 0x80);
 8015fee:	09d2      	lsrs	r2, r2, #7
  {
    ep = &pdev->dev.out_ep[epnum];
  }
  
  ep->is_stall = 0;  
  ep->num   = epnum & 0x7F;
 8015ff0:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8015ff4:	7019      	strb	r1, [r3, #0]
  else
  {
    ep = &pdev->dev.out_ep[epnum];
  }
  
  ep->is_stall = 0;  
 8015ff6:	709c      	strb	r4, [r3, #2]
  ep->num   = epnum & 0x7F;
  ep->is_in = ((epnum & 0x80) == 0x80);
 8015ff8:	705a      	strb	r2, [r3, #1]
  
  USB_OTG_EPClearStall(pdev , ep);
 8015ffa:	4619      	mov	r1, r3
 8015ffc:	f7ff fec3 	bl	8015d86 <USB_OTG_EPClearStall>
  return (0);
}
 8016000:	4620      	mov	r0, r4
 8016002:	bd10      	pop	{r4, pc}

08016004 <DCD_EP_SetAddress>:
void  DCD_EP_SetAddress (USB_OTG_CORE_HANDLE *pdev, uint8_t address)
{
  USB_OTG_DCFG_TypeDef  dcfg;
  dcfg.d32 = 0;
  dcfg.b.devaddr = address;
  USB_OTG_MODIFY_REG32( &pdev->regs.DREGS->DCFG, 0, dcfg.d32);
 8016004:	6902      	ldr	r2, [r0, #16]
* @retval : status
*/
void  DCD_EP_SetAddress (USB_OTG_CORE_HANDLE *pdev, uint8_t address)
{
  USB_OTG_DCFG_TypeDef  dcfg;
  dcfg.d32 = 0;
 8016006:	2300      	movs	r3, #0
  dcfg.b.devaddr = address;
 8016008:	f361 130a 	bfi	r3, r1, #4, #7
  USB_OTG_MODIFY_REG32( &pdev->regs.DREGS->DCFG, 0, dcfg.d32);
 801600c:	6811      	ldr	r1, [r2, #0]
 801600e:	430b      	orrs	r3, r1
 8016010:	6013      	str	r3, [r2, #0]
 8016012:	4770      	bx	lr

08016014 <DCD_DevConnect>:
* @brief  Connect device (enable internal pull-up)
* @param pdev: device instance
* @retval : None
*/
void  DCD_DevConnect (USB_OTG_CORE_HANDLE *pdev)
{
 8016014:	4770      	bx	lr

08016016 <DCD_DevDisconnect>:
* @brief  Disconnect device (disable internal pull-up)
* @param pdev: device instance
* @retval : None
*/
void  DCD_DevDisconnect (USB_OTG_CORE_HANDLE *pdev)
{
 8016016:	4770      	bx	lr

08016018 <USBD_OTG_ISR_Handler>:
*         handles all USB Interrupts
* @param  pdev: device instance
* @retval status
*/
uint32_t USBD_OTG_ISR_Handler (USB_OTG_CORE_HANDLE *pdev)
{
 8016018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801601c:	b085      	sub	sp, #20
 801601e:	4604      	mov	r4, r0
  USB_OTG_GINTSTS_TypeDef  gintr_status;
  uint32_t retval = 0;
  
  if (USB_OTG_IsDeviceMode(pdev)) /* ensure that we are in device mode */
 8016020:	f7ff fa91 	bl	8015546 <USB_OTG_IsDeviceMode>
 8016024:	b908      	cbnz	r0, 801602a <USBD_OTG_ISR_Handler+0x12>
* @retval status
*/
uint32_t USBD_OTG_ISR_Handler (USB_OTG_CORE_HANDLE *pdev)
{
  USB_OTG_GINTSTS_TypeDef  gintr_status;
  uint32_t retval = 0;
 8016026:	2000      	movs	r0, #0
 8016028:	e23a      	b.n	80164a0 <USBD_OTG_ISR_Handler+0x488>
  
  if (USB_OTG_IsDeviceMode(pdev)) /* ensure that we are in device mode */
  {
    gintr_status.d32 = USB_OTG_ReadCoreItr(pdev);
 801602a:	4620      	mov	r0, r4
 801602c:	f7ff fa97 	bl	801555e <USB_OTG_ReadCoreItr>
    if (!gintr_status.d32) /* avoid spurious interrupt */
 8016030:	4607      	mov	r7, r0
 8016032:	2800      	cmp	r0, #0
 8016034:	d0f7      	beq.n	8016026 <USBD_OTG_ISR_Handler+0xe>
    {
      return 0;
    }
    
    if (gintr_status.b.outepintr)
 8016036:	f3c0 4a07 	ubfx	sl, r0, #16, #8
 801603a:	f00a 0008 	and.w	r0, sl, #8
 801603e:	b2c0      	uxtb	r0, r0
 8016040:	2800      	cmp	r0, #0
 8016042:	d056      	beq.n	80160f2 <USBD_OTG_ISR_Handler+0xda>
  uint32_t epnum = 0;
  
  doepint.d32 = 0;
  
  /* Read in the device interrupt bits */
  ep_intr = USB_OTG_ReadDevAllOutEp_itr(pdev);
 8016044:	4620      	mov	r0, r4
 8016046:	f7ff feb2 	bl	8015dae <USB_OTG_ReadDevAllOutEp_itr>
 801604a:	46a3      	mov	fp, r4
 801604c:	4680      	mov	r8, r0
 801604e:	4626      	mov	r6, r4
static uint32_t DCD_HandleOutEP_ISR(USB_OTG_CORE_HANDLE *pdev)
{
  uint32_t ep_intr;
  USB_OTG_DOEPINTn_TypeDef  doepint;
  USB_OTG_DEPXFRSIZ_TypeDef  deptsiz;
  uint32_t epnum = 0;
 8016050:	f04f 0900 	mov.w	r9, #0
  doepint.d32 = 0;
  
  /* Read in the device interrupt bits */
  ep_intr = USB_OTG_ReadDevAllOutEp_itr(pdev);
  
  while ( ep_intr )
 8016054:	f1b8 0f00 	cmp.w	r8, #0
 8016058:	d04a      	beq.n	80160f0 <USBD_OTG_ISR_Handler+0xd8>
  {
    if (ep_intr&0x1)
 801605a:	f018 0f01 	tst.w	r8, #1
 801605e:	d03f      	beq.n	80160e0 <USBD_OTG_ISR_Handler+0xc8>
    {
      
      doepint.d32 = USB_OTG_ReadDevOutEP_itr(pdev, epnum);
 8016060:	fa5f f389 	uxtb.w	r3, r9
 8016064:	4619      	mov	r1, r3
 8016066:	4620      	mov	r0, r4
 8016068:	9300      	str	r3, [sp, #0]
 801606a:	f7ff fea6 	bl	8015dba <USB_OTG_ReadDevOutEP_itr>
      
      /* Transfer complete */
      if ( doepint.b.xfercompl )
 801606e:	f010 0f01 	tst.w	r0, #1
  while ( ep_intr )
  {
    if (ep_intr&0x1)
    {
      
      doepint.d32 = USB_OTG_ReadDevOutEP_itr(pdev, epnum);
 8016072:	4605      	mov	r5, r0
      
      /* Transfer complete */
      if ( doepint.b.xfercompl )
 8016074:	9b00      	ldr	r3, [sp, #0]
 8016076:	d020      	beq.n	80160ba <USBD_OTG_ISR_Handler+0xa2>
      {
        /* Clear the bit in DOEPINTn for this interrupt */
        CLEAR_OUT_EP_INTR(epnum, xfercompl);
 8016078:	6d70      	ldr	r0, [r6, #84]	; 0x54
 801607a:	2501      	movs	r5, #1
 801607c:	6085      	str	r5, [r0, #8]
        if (pdev->cfg.dma_enable == 1)
 801607e:	78e1      	ldrb	r1, [r4, #3]
 8016080:	42a9      	cmp	r1, r5
 8016082:	d107      	bne.n	8016094 <USBD_OTG_ISR_Handler+0x7c>
        {
          deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[epnum]->DOEPTSIZ));
 8016084:	6902      	ldr	r2, [r0, #16]
          /*ToDo : handle more than one single MPS size packet */
          pdev->dev.out_ep[epnum].xfer_count = pdev->dev.out_ep[epnum].maxpacket - \
 8016086:	f8db 137c 	ldr.w	r1, [fp, #892]	; 0x37c
            deptsiz.b.xfersize;
 801608a:	f3c2 0012 	ubfx	r0, r2, #0, #19
        CLEAR_OUT_EP_INTR(epnum, xfercompl);
        if (pdev->cfg.dma_enable == 1)
        {
          deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[epnum]->DOEPTSIZ));
          /*ToDo : handle more than one single MPS size packet */
          pdev->dev.out_ep[epnum].xfer_count = pdev->dev.out_ep[epnum].maxpacket - \
 801608e:	1a0a      	subs	r2, r1, r0
 8016090:	f8cb 238c 	str.w	r2, [fp, #908]	; 0x38c
            deptsiz.b.xfersize;
        }
        /* Inform upper layer: data ready */
        /* RX COMPLETE */
        USBD_DCD_INT_fops->DataOutStage(pdev , epnum);
 8016094:	4871      	ldr	r0, [pc, #452]	; (801625c <USBD_OTG_ISR_Handler+0x244>)
 8016096:	6801      	ldr	r1, [r0, #0]
 8016098:	4620      	mov	r0, r4
 801609a:	680a      	ldr	r2, [r1, #0]
 801609c:	4619      	mov	r1, r3
 801609e:	4790      	blx	r2
        
        if (pdev->cfg.dma_enable == 1)
 80160a0:	78e3      	ldrb	r3, [r4, #3]
 80160a2:	2b01      	cmp	r3, #1
 80160a4:	d109      	bne.n	80160ba <USBD_OTG_ISR_Handler+0xa2>
        {
          if((epnum == 0) && (pdev->dev.device_state == USB_OTG_EP0_STATUS_OUT))
 80160a6:	f1b9 0f00 	cmp.w	r9, #0
 80160aa:	d106      	bne.n	80160ba <USBD_OTG_ISR_Handler+0xa2>
 80160ac:	f894 0111 	ldrb.w	r0, [r4, #273]	; 0x111
 80160b0:	2805      	cmp	r0, #5
 80160b2:	d102      	bne.n	80160ba <USBD_OTG_ISR_Handler+0xa2>
          {
            /* prepare to rx more setup packets */
            USB_OTG_EP0_OutStart(pdev);
 80160b4:	4620      	mov	r0, r4
 80160b6:	f7ff fe8e 	bl	8015dd6 <USB_OTG_EP0_OutStart>
          }
        }        
      }
      /* Endpoint disable  */
      if ( doepint.b.epdisabled )
 80160ba:	f005 0102 	and.w	r1, r5, #2
 80160be:	b2ca      	uxtb	r2, r1
 80160c0:	b112      	cbz	r2, 80160c8 <USBD_OTG_ISR_Handler+0xb0>
      {
        /* Clear the bit in DOEPINTn for this interrupt */
        CLEAR_OUT_EP_INTR(epnum, epdisabled);
 80160c2:	6d73      	ldr	r3, [r6, #84]	; 0x54
 80160c4:	2502      	movs	r5, #2
 80160c6:	609d      	str	r5, [r3, #8]
      }
      /* Setup Phase Done (control EPs) */
      if ( doepint.b.setup )
 80160c8:	f005 0008 	and.w	r0, r5, #8
 80160cc:	b2c1      	uxtb	r1, r0
 80160ce:	b139      	cbz	r1, 80160e0 <USBD_OTG_ISR_Handler+0xc8>
      {
        
        /* inform the upper layer that a setup packet is available */
        /* SETUP COMPLETE */
        USBD_DCD_INT_fops->SetupStage(pdev);
 80160d0:	4a62      	ldr	r2, [pc, #392]	; (801625c <USBD_OTG_ISR_Handler+0x244>)
 80160d2:	6815      	ldr	r5, [r2, #0]
 80160d4:	4620      	mov	r0, r4
 80160d6:	68ab      	ldr	r3, [r5, #8]
 80160d8:	4798      	blx	r3
        CLEAR_OUT_EP_INTR(epnum, setup);
 80160da:	6d70      	ldr	r0, [r6, #84]	; 0x54
 80160dc:	2108      	movs	r1, #8
 80160de:	6081      	str	r1, [r0, #8]
      }
    }
    epnum++;
 80160e0:	f109 0901 	add.w	r9, r9, #1
    ep_intr >>= 1;
 80160e4:	ea4f 0858 	mov.w	r8, r8, lsr #1
 80160e8:	3604      	adds	r6, #4
 80160ea:	f10b 0b28 	add.w	fp, fp, #40	; 0x28
 80160ee:	e7b1      	b.n	8016054 <USBD_OTG_ISR_Handler+0x3c>
      return 0;
    }
    
    if (gintr_status.b.outepintr)
    {
      retval |= DCD_HandleOutEP_ISR(pdev);
 80160f0:	2001      	movs	r0, #1
    }    
    
    if (gintr_status.b.inepint)
 80160f2:	f00a 0a04 	and.w	sl, sl, #4
 80160f6:	fa5f f38a 	uxtb.w	r3, sl
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	f000 80b1 	beq.w	8016262 <USBD_OTG_ISR_Handler+0x24a>
  
  uint32_t ep_intr;
  uint32_t epnum = 0;
  uint32_t fifoemptymsk;
  diepint.d32 = 0;
  ep_intr = USB_OTG_ReadDevAllInEPItr(pdev);
 8016100:	4620      	mov	r0, r4
 8016102:	f7ff fe62 	bl	8015dca <USB_OTG_ReadDevAllInEPItr>
 8016106:	4626      	mov	r6, r4
 8016108:	4681      	mov	r9, r0
static uint32_t DCD_HandleInEP_ISR(USB_OTG_CORE_HANDLE *pdev)
{
  USB_OTG_DIEPINTn_TypeDef  diepint;
  
  uint32_t ep_intr;
  uint32_t epnum = 0;
 801610a:	f04f 0800 	mov.w	r8, #0
  uint32_t fifoemptymsk;
  diepint.d32 = 0;
  ep_intr = USB_OTG_ReadDevAllInEPItr(pdev);
  
  while ( ep_intr )
 801610e:	f1b9 0f00 	cmp.w	r9, #0
 8016112:	f000 80a5 	beq.w	8016260 <USBD_OTG_ISR_Handler+0x248>
  {
    if (ep_intr&0x1) /* In ITR */
 8016116:	f019 0f01 	tst.w	r9, #1
 801611a:	f000 8099 	beq.w	8016250 <USBD_OTG_ISR_Handler+0x238>
    {
      diepint.d32 = DCD_ReadDevInEP(pdev , epnum); /* Get In ITR status */
 801611e:	fa5f fa88 	uxtb.w	sl, r8
* @retval status
*/
static uint32_t DCD_ReadDevInEP (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
  uint32_t v, msk, emp;
  msk = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPMSK);
 8016122:	6923      	ldr	r3, [r4, #16]
  emp = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPEMPMSK);
  msk |= ((emp >> epnum) & 0x1) << 7;
  v = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DIEPINT) & msk;
 8016124:	eb04 008a 	add.w	r0, r4, sl, lsl #2
* @retval status
*/
static uint32_t DCD_ReadDevInEP (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
  uint32_t v, msk, emp;
  msk = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPMSK);
 8016128:	6919      	ldr	r1, [r3, #16]
  emp = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPEMPMSK);
 801612a:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  msk |= ((emp >> epnum) & 0x1) << 7;
  v = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DIEPINT) & msk;
 801612c:	6982      	ldr	r2, [r0, #24]
static uint32_t DCD_ReadDevInEP (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
  uint32_t v, msk, emp;
  msk = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPMSK);
  emp = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPEMPMSK);
  msk |= ((emp >> epnum) & 0x1) << 7;
 801612e:	fa25 f50a 	lsr.w	r5, r5, sl
  v = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DIEPINT) & msk;
 8016132:	6890      	ldr	r0, [r2, #8]
static uint32_t DCD_ReadDevInEP (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
  uint32_t v, msk, emp;
  msk = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPMSK);
  emp = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPEMPMSK);
  msk |= ((emp >> epnum) & 0x1) << 7;
 8016134:	01ea      	lsls	r2, r5, #7
 8016136:	b2d5      	uxtb	r5, r2
 8016138:	430d      	orrs	r5, r1
  v = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DIEPINT) & msk;
 801613a:	4005      	ands	r5, r0
  while ( ep_intr )
  {
    if (ep_intr&0x1) /* In ITR */
    {
      diepint.d32 = DCD_ReadDevInEP(pdev , epnum); /* Get In ITR status */
      if ( diepint.b.xfercompl )
 801613c:	07ea      	lsls	r2, r5, #31
 801613e:	d51b      	bpl.n	8016178 <USBD_OTG_ISR_Handler+0x160>
      {
        fifoemptymsk = 0x1 << epnum;
        USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, fifoemptymsk, 0);
 8016140:	6b58      	ldr	r0, [r3, #52]	; 0x34
        CLEAR_IN_EP_INTR(epnum, xfercompl);
        /* TX COMPLETE */
        USBD_DCD_INT_fops->DataInStage(pdev , epnum);
 8016142:	4a46      	ldr	r2, [pc, #280]	; (801625c <USBD_OTG_ISR_Handler+0x244>)
    if (ep_intr&0x1) /* In ITR */
    {
      diepint.d32 = DCD_ReadDevInEP(pdev , epnum); /* Get In ITR status */
      if ( diepint.b.xfercompl )
      {
        fifoemptymsk = 0x1 << epnum;
 8016144:	2501      	movs	r5, #1
 8016146:	fa05 f108 	lsl.w	r1, r5, r8
        USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, fifoemptymsk, 0);
 801614a:	ea20 0001 	bic.w	r0, r0, r1
 801614e:	6358      	str	r0, [r3, #52]	; 0x34
        CLEAR_IN_EP_INTR(epnum, xfercompl);
 8016150:	69b3      	ldr	r3, [r6, #24]
        /* TX COMPLETE */
        USBD_DCD_INT_fops->DataInStage(pdev , epnum);
 8016152:	6810      	ldr	r0, [r2, #0]
      diepint.d32 = DCD_ReadDevInEP(pdev , epnum); /* Get In ITR status */
      if ( diepint.b.xfercompl )
      {
        fifoemptymsk = 0x1 << epnum;
        USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, fifoemptymsk, 0);
        CLEAR_IN_EP_INTR(epnum, xfercompl);
 8016154:	609d      	str	r5, [r3, #8]
        /* TX COMPLETE */
        USBD_DCD_INT_fops->DataInStage(pdev , epnum);
 8016156:	4651      	mov	r1, sl
 8016158:	6843      	ldr	r3, [r0, #4]
 801615a:	4620      	mov	r0, r4
 801615c:	4798      	blx	r3
        
        if (pdev->cfg.dma_enable == 1)
 801615e:	78e1      	ldrb	r1, [r4, #3]
 8016160:	42a9      	cmp	r1, r5
 8016162:	d109      	bne.n	8016178 <USBD_OTG_ISR_Handler+0x160>
        {
          if((epnum == 0) && (pdev->dev.device_state == USB_OTG_EP0_STATUS_IN))
 8016164:	f1b8 0f00 	cmp.w	r8, #0
 8016168:	d106      	bne.n	8016178 <USBD_OTG_ISR_Handler+0x160>
 801616a:	f894 2111 	ldrb.w	r2, [r4, #273]	; 0x111
 801616e:	2a04      	cmp	r2, #4
 8016170:	d102      	bne.n	8016178 <USBD_OTG_ISR_Handler+0x160>
          {
            /* prepare to rx more setup packets */
            USB_OTG_EP0_OutStart(pdev);
 8016172:	4620      	mov	r0, r4
 8016174:	f7ff fe2f 	bl	8015dd6 <USB_OTG_EP0_OutStart>
          }
        }           
      }
      if ( diepint.b.timeout )
 8016178:	f005 0008 	and.w	r0, r5, #8
 801617c:	b2c3      	uxtb	r3, r0
 801617e:	b113      	cbz	r3, 8016186 <USBD_OTG_ISR_Handler+0x16e>
      {
        CLEAR_IN_EP_INTR(epnum, timeout);
 8016180:	69b1      	ldr	r1, [r6, #24]
 8016182:	2508      	movs	r5, #8
 8016184:	608d      	str	r5, [r1, #8]
      }
      if (diepint.b.intktxfemp)
 8016186:	f005 0210 	and.w	r2, r5, #16
 801618a:	b2d0      	uxtb	r0, r2
 801618c:	b110      	cbz	r0, 8016194 <USBD_OTG_ISR_Handler+0x17c>
      {
        CLEAR_IN_EP_INTR(epnum, intktxfemp);
 801618e:	69b3      	ldr	r3, [r6, #24]
 8016190:	2510      	movs	r5, #16
 8016192:	609d      	str	r5, [r3, #8]
      }
      if (diepint.b.inepnakeff)
 8016194:	f005 0140 	and.w	r1, r5, #64	; 0x40
 8016198:	b2ca      	uxtb	r2, r1
 801619a:	b112      	cbz	r2, 80161a2 <USBD_OTG_ISR_Handler+0x18a>
      {
        CLEAR_IN_EP_INTR(epnum, inepnakeff);
 801619c:	69b0      	ldr	r0, [r6, #24]
 801619e:	2540      	movs	r5, #64	; 0x40
 80161a0:	6085      	str	r5, [r0, #8]
      }
      if ( diepint.b.epdisabled )
 80161a2:	f005 0302 	and.w	r3, r5, #2
 80161a6:	b2d9      	uxtb	r1, r3
 80161a8:	b111      	cbz	r1, 80161b0 <USBD_OTG_ISR_Handler+0x198>
      {
        CLEAR_IN_EP_INTR(epnum, epdisabled);
 80161aa:	69b2      	ldr	r2, [r6, #24]
 80161ac:	2502      	movs	r5, #2
 80161ae:	6095      	str	r5, [r2, #8]
      }       
      if (diepint.b.emptyintr)
 80161b0:	f025 007f 	bic.w	r0, r5, #127	; 0x7f
 80161b4:	f010 0fff 	tst.w	r0, #255	; 0xff
 80161b8:	d04a      	beq.n	8016250 <USBD_OTG_ISR_Handler+0x238>
  USB_OTG_EP *ep;
  uint32_t len = 0;
  uint32_t len32b;
  txstatus.d32 = 0;
  
  ep = &pdev->dev.in_ep[epnum];    
 80161ba:	2328      	movs	r3, #40	; 0x28
 80161bc:	fb03 4108 	mla	r1, r3, r8, r4
 80161c0:	f501 758c 	add.w	r5, r1, #280	; 0x118
 80161c4:	9501      	str	r5, [sp, #4]
 80161c6:	3504      	adds	r5, #4
  
  len = ep->xfer_len - ep->xfer_count;
 80161c8:	6968      	ldr	r0, [r5, #20]
 80161ca:	69ab      	ldr	r3, [r5, #24]
  
  if (len > ep->maxpacket)
 80161cc:	68aa      	ldr	r2, [r5, #8]
  uint32_t len32b;
  txstatus.d32 = 0;
  
  ep = &pdev->dev.in_ep[epnum];    
  
  len = ep->xfer_len - ep->xfer_count;
 80161ce:	1ac1      	subs	r1, r0, r3
  {
    len = ep->maxpacket;
  }
  
  len32b = (len + 3) / 4;
  txstatus.d32 = USB_OTG_READ_REG32( &pdev->regs.INEP_REGS[epnum]->DTXFSTS);
 80161d0:	69b0      	ldr	r0, [r6, #24]
  if (len > ep->maxpacket)
  {
    len = ep->maxpacket;
  }
  
  len32b = (len + 3) / 4;
 80161d2:	4291      	cmp	r1, r2
 80161d4:	bf38      	it	cc
 80161d6:	460a      	movcc	r2, r1
 80161d8:	f102 0c03 	add.w	ip, r2, #3
  txstatus.d32 = USB_OTG_READ_REG32( &pdev->regs.INEP_REGS[epnum]->DTXFSTS);
 80161dc:	6982      	ldr	r2, [r0, #24]
  if (len > ep->maxpacket)
  {
    len = ep->maxpacket;
  }
  
  len32b = (len + 3) / 4;
 80161de:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
  txstatus.d32 = USB_OTG_READ_REG32( &pdev->regs.INEP_REGS[epnum]->DTXFSTS);
  
  
  
  while  (txstatus.b.txfspcavail > len32b &&
 80161e2:	b293      	uxth	r3, r2
 80161e4:	4563      	cmp	r3, ip
 80161e6:	d930      	bls.n	801624a <USBD_OTG_ISR_Handler+0x232>
          ep->xfer_count < ep->xfer_len &&
 80161e8:	69a9      	ldr	r1, [r5, #24]
 80161ea:	696a      	ldr	r2, [r5, #20]
  len32b = (len + 3) / 4;
  txstatus.d32 = USB_OTG_READ_REG32( &pdev->regs.INEP_REGS[epnum]->DTXFSTS);
  
  
  
  while  (txstatus.b.txfspcavail > len32b &&
 80161ec:	4291      	cmp	r1, r2
 80161ee:	d22c      	bcs.n	801624a <USBD_OTG_ISR_Handler+0x232>
          ep->xfer_count < ep->xfer_len &&
 80161f0:	b35a      	cbz	r2, 801624a <USBD_OTG_ISR_Handler+0x232>
            ep->xfer_len != 0)
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
    
    if (len > ep->maxpacket)
 80161f2:	68a8      	ldr	r0, [r5, #8]
  while  (txstatus.b.txfspcavail > len32b &&
          ep->xfer_count < ep->xfer_len &&
            ep->xfer_len != 0)
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80161f4:	ebc1 0b02 	rsb	fp, r1, r2
 80161f8:	4583      	cmp	fp, r0
 80161fa:	bf28      	it	cs
 80161fc:	4683      	movcs	fp, r0
    
    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3) / 4;
 80161fe:	f10b 0e03 	add.w	lr, fp, #3
 8016202:	ea4f 0c9e 	mov.w	ip, lr, lsr #2
    
    USB_OTG_WritePacket (pdev , ep->xfer_buff, epnum, len);
 8016206:	68e9      	ldr	r1, [r5, #12]
 8016208:	f8cd c000 	str.w	ip, [sp]
 801620c:	4652      	mov	r2, sl
 801620e:	fa1f f38b 	uxth.w	r3, fp
 8016212:	4620      	mov	r0, r4
 8016214:	f7ff f86a 	bl	80152ec <USB_OTG_WritePacket>
    
    ep->xfer_buff  += len;
 8016218:	68eb      	ldr	r3, [r5, #12]
    ep->xfer_count += len;
 801621a:	69aa      	ldr	r2, [r5, #24]
    
    txstatus.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DTXFSTS);

    // BEGIN USB IRQ HANGUP PATCH
    // See also https://my.st.com/public/STe2ecommunities/mcu/Lists/cortex_mx_stm32/Flat.aspx?RootFolder=https%3a%2f%2fmy%2est%2ecom%2fpublic%2fSTe2ecommunities%2fmcu%2fLists%2fcortex%5fmx%5fstm32%2fYet%20another%20STM32F1057%20USB%20OTG%20driver%20issue%20%28VCP%20device%29&FolderCTID=0x01200200770978C69A1141439FE559EB459D7580009C4E14902C3CDE46A77F0FFD06506F5B&currentviews=2734
    if( ep->xfer_count >= ep->xfer_len){
 801621c:	f8dd c000 	ldr.w	ip, [sp]
    }
    len32b = (len + 3) / 4;
    
    USB_OTG_WritePacket (pdev , ep->xfer_buff, epnum, len);
    
    ep->xfer_buff  += len;
 8016220:	eb03 010b 	add.w	r1, r3, fp
    ep->xfer_count += len;
 8016224:	eb0b 0002 	add.w	r0, fp, r2
    }
    len32b = (len + 3) / 4;
    
    USB_OTG_WritePacket (pdev , ep->xfer_buff, epnum, len);
    
    ep->xfer_buff  += len;
 8016228:	60e9      	str	r1, [r5, #12]
    ep->xfer_count += len;
 801622a:	61a8      	str	r0, [r5, #24]
    
    txstatus.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DTXFSTS);

    // BEGIN USB IRQ HANGUP PATCH
    // See also https://my.st.com/public/STe2ecommunities/mcu/Lists/cortex_mx_stm32/Flat.aspx?RootFolder=https%3a%2f%2fmy%2est%2ecom%2fpublic%2fSTe2ecommunities%2fmcu%2fLists%2fcortex%5fmx%5fstm32%2fYet%20another%20STM32F1057%20USB%20OTG%20driver%20issue%20%28VCP%20device%29&FolderCTID=0x01200200770978C69A1141439FE559EB459D7580009C4E14902C3CDE46A77F0FFD06506F5B&currentviews=2734
    if( ep->xfer_count >= ep->xfer_len){
 801622c:	6969      	ldr	r1, [r5, #20]
    USB_OTG_WritePacket (pdev , ep->xfer_buff, epnum, len);
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
    
    txstatus.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DTXFSTS);
 801622e:	69b3      	ldr	r3, [r6, #24]

    // BEGIN USB IRQ HANGUP PATCH
    // See also https://my.st.com/public/STe2ecommunities/mcu/Lists/cortex_mx_stm32/Flat.aspx?RootFolder=https%3a%2f%2fmy%2est%2ecom%2fpublic%2fSTe2ecommunities%2fmcu%2fLists%2fcortex%5fmx%5fstm32%2fYet%20another%20STM32F1057%20USB%20OTG%20driver%20issue%20%28VCP%20device%29&FolderCTID=0x01200200770978C69A1141439FE559EB459D7580009C4E14902C3CDE46A77F0FFD06506F5B&currentviews=2734
    if( ep->xfer_count >= ep->xfer_len){
 8016230:	4288      	cmp	r0, r1
    USB_OTG_WritePacket (pdev , ep->xfer_buff, epnum, len);
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
    
    txstatus.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DTXFSTS);
 8016232:	699a      	ldr	r2, [r3, #24]

    // BEGIN USB IRQ HANGUP PATCH
    // See also https://my.st.com/public/STe2ecommunities/mcu/Lists/cortex_mx_stm32/Flat.aspx?RootFolder=https%3a%2f%2fmy%2est%2ecom%2fpublic%2fSTe2ecommunities%2fmcu%2fLists%2fcortex%5fmx%5fstm32%2fYet%20another%20STM32F1057%20USB%20OTG%20driver%20issue%20%28VCP%20device%29&FolderCTID=0x01200200770978C69A1141439FE559EB459D7580009C4E14902C3CDE46A77F0FFD06506F5B&currentviews=2734
    if( ep->xfer_count >= ep->xfer_len){
 8016234:	d3d5      	bcc.n	80161e2 <USBD_OTG_ISR_Handler+0x1ca>
      uint32_t fifoemptymsk = 1 << ep->num;
 8016236:	9801      	ldr	r0, [sp, #4]
      USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, fifoemptymsk, 0);
 8016238:	6925      	ldr	r5, [r4, #16]
    txstatus.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DTXFSTS);

    // BEGIN USB IRQ HANGUP PATCH
    // See also https://my.st.com/public/STe2ecommunities/mcu/Lists/cortex_mx_stm32/Flat.aspx?RootFolder=https%3a%2f%2fmy%2est%2ecom%2fpublic%2fSTe2ecommunities%2fmcu%2fLists%2fcortex%5fmx%5fstm32%2fYet%20another%20STM32F1057%20USB%20OTG%20driver%20issue%20%28VCP%20device%29&FolderCTID=0x01200200770978C69A1141439FE559EB459D7580009C4E14902C3CDE46A77F0FFD06506F5B&currentviews=2734
    if( ep->xfer_count >= ep->xfer_len){
      uint32_t fifoemptymsk = 1 << ep->num;
 801623a:	7902      	ldrb	r2, [r0, #4]
      USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, fifoemptymsk, 0);
 801623c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    txstatus.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DTXFSTS);

    // BEGIN USB IRQ HANGUP PATCH
    // See also https://my.st.com/public/STe2ecommunities/mcu/Lists/cortex_mx_stm32/Flat.aspx?RootFolder=https%3a%2f%2fmy%2est%2ecom%2fpublic%2fSTe2ecommunities%2fmcu%2fLists%2fcortex%5fmx%5fstm32%2fYet%20another%20STM32F1057%20USB%20OTG%20driver%20issue%20%28VCP%20device%29&FolderCTID=0x01200200770978C69A1141439FE559EB459D7580009C4E14902C3CDE46A77F0FFD06506F5B&currentviews=2734
    if( ep->xfer_count >= ep->xfer_len){
      uint32_t fifoemptymsk = 1 << ep->num;
 801623e:	2101      	movs	r1, #1
 8016240:	fa01 f002 	lsl.w	r0, r1, r2
      USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, fifoemptymsk, 0);
 8016244:	ea23 0300 	bic.w	r3, r3, r0
 8016248:	636b      	str	r3, [r5, #52]	; 0x34
      if (diepint.b.emptyintr)
      {
        
        DCD_WriteEmptyTxFifo(pdev , epnum);
        
        CLEAR_IN_EP_INTR(epnum, emptyintr);
 801624a:	69b5      	ldr	r5, [r6, #24]
 801624c:	2280      	movs	r2, #128	; 0x80
 801624e:	60aa      	str	r2, [r5, #8]
      }
    }
    epnum++;
 8016250:	f108 0801 	add.w	r8, r8, #1
    ep_intr >>= 1;
 8016254:	ea4f 0959 	mov.w	r9, r9, lsr #1
 8016258:	3604      	adds	r6, #4
 801625a:	e758      	b.n	801610e <USBD_OTG_ISR_Handler+0xf6>
 801625c:	2000001c 	.word	0x2000001c
      retval |= DCD_HandleOutEP_ISR(pdev);
    }    
    
    if (gintr_status.b.inepint)
    {
      retval |= DCD_HandleInEP_ISR(pdev);
 8016260:	2001      	movs	r0, #1
    }
    
    if (gintr_status.b.modemismatch)
 8016262:	b2fd      	uxtb	r5, r7
 8016264:	f005 0102 	and.w	r1, r5, #2
 8016268:	b2ca      	uxtb	r2, r1
 801626a:	b112      	cbz	r2, 8016272 <USBD_OTG_ISR_Handler+0x25a>
      USB_OTG_GINTSTS_TypeDef  gintsts;
      
      /* Clear interrupt */
      gintsts.d32 = 0;
      gintsts.b.modemismatch = 1;
      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 801626c:	68e3      	ldr	r3, [r4, #12]
 801626e:	2102      	movs	r1, #2
 8016270:	6159      	str	r1, [r3, #20]
    }
    
    if (gintr_status.b.wkupintr)
 8016272:	f3c7 6207 	ubfx	r2, r7, #24, #8
 8016276:	f002 0380 	and.w	r3, r2, #128	; 0x80
 801627a:	b2d9      	uxtb	r1, r3
 801627c:	b1c9      	cbz	r1, 80162b2 <USBD_OTG_ISR_Handler+0x29a>
{
  USB_OTG_GINTSTS_TypeDef  gintsts;
  USB_OTG_DCTL_TypeDef     devctl;
  USB_OTG_PCGCCTL_TypeDef  power;
  
  if(pdev->cfg.low_power)
 801627e:	7aa0      	ldrb	r0, [r4, #10]
 8016280:	b140      	cbz	r0, 8016294 <USBD_OTG_ISR_Handler+0x27c>
  {
    /* un-gate USB Core clock */
    power.d32 = USB_OTG_READ_REG32(&pdev->regs.PCGCCTL);
 8016282:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    power.b.gatehclk = 0;
    power.b.stoppclk = 0;
    USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, power.d32);
 8016286:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
  
  if(pdev->cfg.low_power)
  {
    /* un-gate USB Core clock */
    power.d32 = USB_OTG_READ_REG32(&pdev->regs.PCGCCTL);
    power.b.gatehclk = 0;
 801628a:	f36f 0341 	bfc	r3, #1, #1
    power.b.stoppclk = 0;
 801628e:	f36f 0300 	bfc	r3, #0, #1
    USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, power.d32);
 8016292:	6013      	str	r3, [r2, #0]
  }
  
  /* Clear the Remote Wake-up Signaling */
  devctl.d32 = 0;
  devctl.b.rmtwkupsig = 1;
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, devctl.d32, 0);
 8016294:	6921      	ldr	r1, [r4, #16]
  
  /* Inform upper layer by the Resume Event */
  USBD_DCD_INT_fops->Resume (pdev);
 8016296:	4a84      	ldr	r2, [pc, #528]	; (80164a8 <USBD_OTG_ISR_Handler+0x490>)
  }
  
  /* Clear the Remote Wake-up Signaling */
  devctl.d32 = 0;
  devctl.b.rmtwkupsig = 1;
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, devctl.d32, 0);
 8016298:	6848      	ldr	r0, [r1, #4]
 801629a:	f020 0301 	bic.w	r3, r0, #1
 801629e:	604b      	str	r3, [r1, #4]
  
  /* Inform upper layer by the Resume Event */
  USBD_DCD_INT_fops->Resume (pdev);
 80162a0:	6811      	ldr	r1, [r2, #0]
 80162a2:	4620      	mov	r0, r4
 80162a4:	698b      	ldr	r3, [r1, #24]
 80162a6:	4798      	blx	r3
  
  /* Clear interrupt */
  gintsts.d32 = 0;
  gintsts.b.wkupintr = 1;
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 80162a8:	68e0      	ldr	r0, [r4, #12]
 80162aa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80162ae:	6142      	str	r2, [r0, #20]
      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
    }
    
    if (gintr_status.b.wkupintr)
    {
      retval |= DCD_HandleResume_ISR(pdev);
 80162b0:	2001      	movs	r0, #1
    }
    
    if (gintr_status.b.usbsuspend)
 80162b2:	f3c7 2807 	ubfx	r8, r7, #8, #8
 80162b6:	f008 0108 	and.w	r1, r8, #8
 80162ba:	b2cb      	uxtb	r3, r1
 80162bc:	b36b      	cbz	r3, 801631a <USBD_OTG_ISR_Handler+0x302>
  USB_OTG_PCGCCTL_TypeDef  power;
  USB_OTG_DSTS_TypeDef     dsts;
  __IO uint8_t prev_status = 0;
  
  prev_status = pdev->dev.device_status;
  USBD_DCD_INT_fops->Suspend (pdev);      
 80162be:	497a      	ldr	r1, [pc, #488]	; (80164a8 <USBD_OTG_ISR_Handler+0x490>)
  USB_OTG_GINTSTS_TypeDef  gintsts;
  USB_OTG_PCGCCTL_TypeDef  power;
  USB_OTG_DSTS_TypeDef     dsts;
  __IO uint8_t prev_status = 0;
  
  prev_status = pdev->dev.device_status;
 80162c0:	f894 2112 	ldrb.w	r2, [r4, #274]	; 0x112
  USBD_DCD_INT_fops->Suspend (pdev);      
 80162c4:	680b      	ldr	r3, [r1, #0]
static uint32_t DCD_HandleUSBSuspend_ISR(USB_OTG_CORE_HANDLE *pdev)
{
  USB_OTG_GINTSTS_TypeDef  gintsts;
  USB_OTG_PCGCCTL_TypeDef  power;
  USB_OTG_DSTS_TypeDef     dsts;
  __IO uint8_t prev_status = 0;
 80162c6:	2000      	movs	r0, #0
 80162c8:	f88d 000f 	strb.w	r0, [sp, #15]
  
  prev_status = pdev->dev.device_status;
 80162cc:	f88d 200f 	strb.w	r2, [sp, #15]
  USBD_DCD_INT_fops->Suspend (pdev);      
 80162d0:	4620      	mov	r0, r4
 80162d2:	695a      	ldr	r2, [r3, #20]
 80162d4:	4790      	blx	r2
  
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 80162d6:	6920      	ldr	r0, [r4, #16]
    
  /* Clear interrupt */
  gintsts.d32 = 0;
  gintsts.b.usbsuspend = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 80162d8:	68e3      	ldr	r3, [r4, #12]
  __IO uint8_t prev_status = 0;
  
  prev_status = pdev->dev.device_status;
  USBD_DCD_INT_fops->Suspend (pdev);      
  
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 80162da:	6882      	ldr	r2, [r0, #8]
    
  /* Clear interrupt */
  gintsts.d32 = 0;
  gintsts.b.usbsuspend = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 80162dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80162e0:	6159      	str	r1, [r3, #20]
  
  if((pdev->cfg.low_power) && (dsts.b.suspsts == 1)  && 
 80162e2:	7aa0      	ldrb	r0, [r4, #10]
 80162e4:	b1c0      	cbz	r0, 8016318 <USBD_OTG_ISR_Handler+0x300>
 80162e6:	07d3      	lsls	r3, r2, #31
 80162e8:	d516      	bpl.n	8016318 <USBD_OTG_ISR_Handler+0x300>
 80162ea:	f894 2115 	ldrb.w	r2, [r4, #277]	; 0x115
 80162ee:	2a01      	cmp	r2, #1
 80162f0:	d112      	bne.n	8016318 <USBD_OTG_ISR_Handler+0x300>
    (pdev->dev.connection_status == 1) && 
    (prev_status  == USB_OTG_CONFIGURED))
 80162f2:	f89d 300f 	ldrb.w	r3, [sp, #15]
  gintsts.d32 = 0;
  gintsts.b.usbsuspend = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
  
  if((pdev->cfg.low_power) && (dsts.b.suspsts == 1)  && 
    (pdev->dev.connection_status == 1) && 
 80162f6:	2b03      	cmp	r3, #3
 80162f8:	d10e      	bne.n	8016318 <USBD_OTG_ISR_Handler+0x300>
    (prev_status  == USB_OTG_CONFIGURED))
  {
	/*  switch-off the clocks */
    power.d32 = 0;
    power.b.stoppclk = 1;
    USB_OTG_MODIFY_REG32(pdev->regs.PCGCCTL, 0, power.d32);  
 80162fa:	f8d4 110c 	ldr.w	r1, [r4, #268]	; 0x10c
 80162fe:	6808      	ldr	r0, [r1, #0]
 8016300:	f040 0201 	orr.w	r2, r0, #1
 8016304:	600a      	str	r2, [r1, #0]
    
    power.b.gatehclk = 1;
    USB_OTG_MODIFY_REG32(pdev->regs.PCGCCTL, 0, power.d32);
 8016306:	680b      	ldr	r3, [r1, #0]
 8016308:	f043 0003 	orr.w	r0, r3, #3
 801630c:	6008      	str	r0, [r1, #0]
    
    /* Request to enter Sleep mode after exit from current ISR */
    SCB->SCR |= (SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk);
 801630e:	4967      	ldr	r1, [pc, #412]	; (80164ac <USBD_OTG_ISR_Handler+0x494>)
 8016310:	690a      	ldr	r2, [r1, #16]
 8016312:	f042 0306 	orr.w	r3, r2, #6
 8016316:	610b      	str	r3, [r1, #16]
      retval |= DCD_HandleResume_ISR(pdev);
    }
    
    if (gintr_status.b.usbsuspend)
    {
      retval |= DCD_HandleUSBSuspend_ISR(pdev);
 8016318:	2001      	movs	r0, #1
    }
    if (gintr_status.b.sofintr)
 801631a:	f005 0108 	and.w	r1, r5, #8
 801631e:	b2ca      	uxtb	r2, r1
 8016320:	b142      	cbz	r2, 8016334 <USBD_OTG_ISR_Handler+0x31c>
static uint32_t DCD_HandleSof_ISR(USB_OTG_CORE_HANDLE *pdev)
{
  USB_OTG_GINTSTS_TypeDef  GINTSTS;
  
  
  USBD_DCD_INT_fops->SOF(pdev);
 8016322:	4861      	ldr	r0, [pc, #388]	; (80164a8 <USBD_OTG_ISR_Handler+0x490>)
 8016324:	6803      	ldr	r3, [r0, #0]
 8016326:	4620      	mov	r0, r4
 8016328:	68d9      	ldr	r1, [r3, #12]
 801632a:	4788      	blx	r1
  
  /* Clear interrupt */
  GINTSTS.d32 = 0;
  GINTSTS.b.sofintr = 1;
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, GINTSTS.d32);
 801632c:	68e0      	ldr	r0, [r4, #12]
 801632e:	2208      	movs	r2, #8
 8016330:	6142      	str	r2, [r0, #20]
    {
      retval |= DCD_HandleUSBSuspend_ISR(pdev);
    }
    if (gintr_status.b.sofintr)
    {
      retval |= DCD_HandleSof_ISR(pdev);
 8016332:	2001      	movs	r0, #1
      
    }
    
    if (gintr_status.b.rxstsqlvl)
 8016334:	f005 0510 	and.w	r5, r5, #16
 8016338:	b2ed      	uxtb	r5, r5
 801633a:	2d00      	cmp	r5, #0
 801633c:	d035      	beq.n	80163aa <USBD_OTG_ISR_Handler+0x392>
  USB_OTG_EP *ep;
  
  /* Disable the Rx Status Queue Level interrupt */
  int_mask.d32 = 0;
  int_mask.b.rxstsqlvl = 1;
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, int_mask.d32, 0);
 801633e:	68e6      	ldr	r6, [r4, #12]
 8016340:	69b3      	ldr	r3, [r6, #24]
 8016342:	f023 0110 	bic.w	r1, r3, #16
 8016346:	61b1      	str	r1, [r6, #24]
  
  /* Get the Status from the top of the FIFO */
  status.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRXSTSP );
 8016348:	6a36      	ldr	r6, [r6, #32]
  
  ep = &pdev->dev.out_ep[status.b.epnum];
 801634a:	2228      	movs	r2, #40	; 0x28
 801634c:	f006 000f 	and.w	r0, r6, #15
  
  switch (status.b.pktsts)
 8016350:	f3c6 4343 	ubfx	r3, r6, #17, #4
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, int_mask.d32, 0);
  
  /* Get the Status from the top of the FIFO */
  status.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRXSTSP );
  
  ep = &pdev->dev.out_ep[status.b.epnum];
 8016354:	fb02 4500 	mla	r5, r2, r0, r4
  
  switch (status.b.pktsts)
 8016358:	2b02      	cmp	r3, #2
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, int_mask.d32, 0);
  
  /* Get the Status from the top of the FIFO */
  status.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRXSTSP );
  
  ep = &pdev->dev.out_ep[status.b.epnum];
 801635a:	f505 755d 	add.w	r5, r5, #884	; 0x374
  
  switch (status.b.pktsts)
 801635e:	d00d      	beq.n	801637c <USBD_OTG_ISR_Handler+0x364>
 8016360:	2b06      	cmp	r3, #6
 8016362:	d11c      	bne.n	801639e <USBD_OTG_ISR_Handler+0x386>
    break;
  case STS_SETUP_COMP:
    break;
  case STS_SETUP_UPDT:
    /* Copy the setup packet received in FIFO into the setup buffer in RAM */
    USB_OTG_ReadPacket(pdev , pdev->dev.setup_packet, 8);
 8016364:	f204 51cc 	addw	r1, r4, #1484	; 0x5cc
 8016368:	4620      	mov	r0, r4
 801636a:	2208      	movs	r2, #8
 801636c:	f7fe ffd1 	bl	8015312 <USB_OTG_ReadPacket>
    ep->xfer_count += status.b.bcnt;
 8016370:	69a9      	ldr	r1, [r5, #24]
 8016372:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8016376:	1988      	adds	r0, r1, r6
 8016378:	61a8      	str	r0, [r5, #24]
 801637a:	e010      	b.n	801639e <USBD_OTG_ISR_Handler+0x386>
  switch (status.b.pktsts)
  {
  case STS_GOUT_NAK:
    break;
  case STS_DATA_UPDT:
    if (status.b.bcnt)
 801637c:	f647 72f0 	movw	r2, #32752	; 0x7ff0
 8016380:	4032      	ands	r2, r6
 8016382:	b162      	cbz	r2, 801639e <USBD_OTG_ISR_Handler+0x386>
    {
      USB_OTG_ReadPacket(pdev,ep->xfer_buff, status.b.bcnt);
 8016384:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8016388:	68e9      	ldr	r1, [r5, #12]
 801638a:	4632      	mov	r2, r6
 801638c:	4620      	mov	r0, r4
 801638e:	f7fe ffc0 	bl	8015312 <USB_OTG_ReadPacket>
      ep->xfer_buff += status.b.bcnt;
 8016392:	68eb      	ldr	r3, [r5, #12]
      ep->xfer_count += status.b.bcnt;
 8016394:	69a8      	ldr	r0, [r5, #24]
    break;
  case STS_DATA_UPDT:
    if (status.b.bcnt)
    {
      USB_OTG_ReadPacket(pdev,ep->xfer_buff, status.b.bcnt);
      ep->xfer_buff += status.b.bcnt;
 8016396:	1999      	adds	r1, r3, r6
      ep->xfer_count += status.b.bcnt;
 8016398:	1986      	adds	r6, r0, r6
    break;
  case STS_DATA_UPDT:
    if (status.b.bcnt)
    {
      USB_OTG_ReadPacket(pdev,ep->xfer_buff, status.b.bcnt);
      ep->xfer_buff += status.b.bcnt;
 801639a:	60e9      	str	r1, [r5, #12]
      ep->xfer_count += status.b.bcnt;
 801639c:	61ae      	str	r6, [r5, #24]
  default:
    break;
  }
  
  /* Enable the Rx Status Queue Level interrupt */
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, 0, int_mask.d32);
 801639e:	68e3      	ldr	r3, [r4, #12]
 80163a0:	699a      	ldr	r2, [r3, #24]
 80163a2:	f042 0110 	orr.w	r1, r2, #16
 80163a6:	6199      	str	r1, [r3, #24]
      
    }
    
    if (gintr_status.b.rxstsqlvl)
    {
      retval |= DCD_HandleRxStatusQueueLevel_ISR(pdev);
 80163a8:	2001      	movs	r0, #1
      
    }
    
    if (gintr_status.b.usbreset)
 80163aa:	f008 0310 	and.w	r3, r8, #16
 80163ae:	b2da      	uxtb	r2, r3
 80163b0:	2a00      	cmp	r2, #0
 80163b2:	d034      	beq.n	801641e <USBD_OTG_ISR_Handler+0x406>
  dcfg.d32 = 0;
  gintsts.d32 = 0;
  
  /* Clear the Remote Wake-up Signaling */
  dctl.b.rmtwkupsig = 1;
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, dctl.d32, 0 );
 80163b4:	6926      	ldr	r6, [r4, #16]
 80163b6:	6870      	ldr	r0, [r6, #4]
  USB_OTG_DCFG_TypeDef     dcfg;
  USB_OTG_DCTL_TypeDef     dctl;
  USB_OTG_GINTSTS_TypeDef  gintsts;
  uint32_t i;
  
  dctl.d32 = 0;
 80163b8:	2500      	movs	r5, #0
  dcfg.d32 = 0;
  gintsts.d32 = 0;
  
  /* Clear the Remote Wake-up Signaling */
  dctl.b.rmtwkupsig = 1;
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, dctl.d32, 0 );
 80163ba:	f020 0101 	bic.w	r1, r0, #1
 80163be:	6071      	str	r1, [r6, #4]
  
  /* Flush the Tx FIFO */
  USB_OTG_FlushTxFifo(pdev ,  0 );
 80163c0:	4620      	mov	r0, r4
 80163c2:	4629      	mov	r1, r5
 80163c4:	f7ff f872 	bl	80154ac <USB_OTG_FlushTxFifo>
 80163c8:	4623      	mov	r3, r4
  
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 80163ca:	462a      	mov	r2, r5
 80163cc:	7866      	ldrb	r6, [r4, #1]
 80163ce:	3304      	adds	r3, #4
 80163d0:	42b2      	cmp	r2, r6
 80163d2:	d206      	bcs.n	80163e2 <USBD_OTG_ISR_Handler+0x3ca>
  {
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 80163d4:	695e      	ldr	r6, [r3, #20]
 80163d6:	21ff      	movs	r1, #255	; 0xff
 80163d8:	60b1      	str	r1, [r6, #8]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 80163da:	6d18      	ldr	r0, [r3, #80]	; 0x50
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, dctl.d32, 0 );
  
  /* Flush the Tx FIFO */
  USB_OTG_FlushTxFifo(pdev ,  0 );
  
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 80163dc:	3201      	adds	r2, #1
  {
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 80163de:	6081      	str	r1, [r0, #8]
 80163e0:	e7f4      	b.n	80163cc <USBD_OTG_ISR_Handler+0x3b4>
  }
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
  
  daintmsk.ep.in = 1;
 80163e2:	2601      	movs	r6, #1
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
  {
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
  }
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
 80163e4:	6920      	ldr	r0, [r4, #16]
  
  daintmsk.ep.in = 1;
 80163e6:	f366 050f 	bfi	r5, r6, #0, #16
  daintmsk.ep.out = 1;
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, daintmsk.d32 );
  
  doepmsk.b.setup = 1;
  doepmsk.b.xfercompl = 1;
  doepmsk.b.epdisabled = 1;
 80163ea:	210b      	movs	r1, #11
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
  {
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
  }
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
 80163ec:	f04f 32ff 	mov.w	r2, #4294967295
  
  daintmsk.ep.in = 1;
  daintmsk.ep.out = 1;
 80163f0:	f366 451f 	bfi	r5, r6, #16, #16
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
  {
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
  }
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
 80163f4:	6182      	str	r2, [r0, #24]
  
  daintmsk.ep.in = 1;
  daintmsk.ep.out = 1;
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, daintmsk.d32 );
 80163f6:	61c5      	str	r5, [r0, #28]
  
  doepmsk.b.setup = 1;
  doepmsk.b.xfercompl = 1;
  doepmsk.b.epdisabled = 1;
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, doepmsk.d32 );
 80163f8:	6141      	str	r1, [r0, #20]
#endif
  diepmsk.b.xfercompl = 1;
  diepmsk.b.timeout = 1;
  diepmsk.b.epdisabled = 1;

  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, diepmsk.d32 );
 80163fa:	6101      	str	r1, [r0, #16]
#ifdef USB_OTG_HS_DEDICATED_EP1_ENABLED  
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DINEP1MSK, diepmsk.d32 );
#endif
  /* Reset Device Address */
  dcfg.d32 = USB_OTG_READ_REG32( &pdev->regs.DREGS->DCFG);
 80163fc:	6803      	ldr	r3, [r0, #0]
  dcfg.b.devaddr = 0;
 80163fe:	f36f 130a 	bfc	r3, #4, #7
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DCFG, dcfg.d32);
 8016402:	6003      	str	r3, [r0, #0]
  
  
  /* setup EP0 to receive SETUP packets */
  USB_OTG_EP0_OutStart(pdev);
 8016404:	4620      	mov	r0, r4
 8016406:	f7ff fce6 	bl	8015dd6 <USB_OTG_EP0_OutStart>
  gintsts.d32 = 0;
  gintsts.b.usbreset = 1;
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
  
  /*Reset internal state machine */
  USBD_DCD_INT_fops->Reset(pdev);
 801640a:	4927      	ldr	r1, [pc, #156]	; (80164a8 <USBD_OTG_ISR_Handler+0x490>)
  USB_OTG_EP0_OutStart(pdev);
  
  /* Clear interrupt */
  gintsts.d32 = 0;
  gintsts.b.usbreset = 1;
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 801640c:	68e0      	ldr	r0, [r4, #12]
  
  /*Reset internal state machine */
  USBD_DCD_INT_fops->Reset(pdev);
 801640e:	680b      	ldr	r3, [r1, #0]
  USB_OTG_EP0_OutStart(pdev);
  
  /* Clear interrupt */
  gintsts.d32 = 0;
  gintsts.b.usbreset = 1;
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8016410:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8016414:	6142      	str	r2, [r0, #20]
  
  /*Reset internal state machine */
  USBD_DCD_INT_fops->Reset(pdev);
 8016416:	691a      	ldr	r2, [r3, #16]
 8016418:	4620      	mov	r0, r4
 801641a:	4790      	blx	r2
      
    }
    
    if (gintr_status.b.usbreset)
    {
      retval |= DCD_HandleUsbReset_ISR(pdev);
 801641c:	4630      	mov	r0, r6
      
    }
    if (gintr_status.b.enumdone)
 801641e:	f008 0820 	and.w	r8, r8, #32
 8016422:	fa5f f188 	uxtb.w	r1, r8
 8016426:	b1e9      	cbz	r1, 8016464 <USBD_OTG_ISR_Handler+0x44c>
static uint32_t DCD_HandleEnumDone_ISR(USB_OTG_CORE_HANDLE *pdev)
{
  USB_OTG_GINTSTS_TypeDef  gintsts;
  USB_OTG_GUSBCFG_TypeDef  gusbcfg;
  
  USB_OTG_EP0Activate(pdev);
 8016428:	4620      	mov	r0, r4
 801642a:	f7ff fb3b 	bl	8015aa4 <USB_OTG_EP0Activate>
  
  /* Set USB turn-around time based on device speed and PHY interface. */
  gusbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 801642e:	68e5      	ldr	r5, [r4, #12]
  
  /* Full or High speed */
  if ( USB_OTG_GetDeviceSpeed(pdev) == USB_SPEED_HIGH)
 8016430:	4620      	mov	r0, r4
  USB_OTG_GUSBCFG_TypeDef  gusbcfg;
  
  USB_OTG_EP0Activate(pdev);
  
  /* Set USB turn-around time based on device speed and PHY interface. */
  gusbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 8016432:	68ed      	ldr	r5, [r5, #12]
  
  /* Full or High speed */
  if ( USB_OTG_GetDeviceSpeed(pdev) == USB_SPEED_HIGH)
 8016434:	f7ff fb28 	bl	8015a88 <USB_OTG_GetDeviceSpeed>
 8016438:	2803      	cmp	r0, #3
 801643a:	d106      	bne.n	801644a <USBD_OTG_ISR_Handler+0x432>
  {
    pdev->cfg.speed            = USB_OTG_SPEED_HIGH;
 801643c:	2100      	movs	r1, #0
    pdev->cfg.mps              = USB_OTG_HS_MAX_PACKET_SIZE ;    
 801643e:	f44f 7000 	mov.w	r0, #512	; 0x200
  gusbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
  
  /* Full or High speed */
  if ( USB_OTG_GetDeviceSpeed(pdev) == USB_SPEED_HIGH)
  {
    pdev->cfg.speed            = USB_OTG_SPEED_HIGH;
 8016442:	70a1      	strb	r1, [r4, #2]
    pdev->cfg.mps              = USB_OTG_HS_MAX_PACKET_SIZE ;    
 8016444:	80a0      	strh	r0, [r4, #4]
    gusbcfg.b.usbtrdtim = 9;
 8016446:	2209      	movs	r2, #9
 8016448:	e004      	b.n	8016454 <USBD_OTG_ISR_Handler+0x43c>
  }
  else
  {
    pdev->cfg.speed            = USB_OTG_SPEED_FULL;
 801644a:	2001      	movs	r0, #1
    pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;  
 801644c:	2340      	movs	r3, #64	; 0x40
    pdev->cfg.mps              = USB_OTG_HS_MAX_PACKET_SIZE ;    
    gusbcfg.b.usbtrdtim = 9;
  }
  else
  {
    pdev->cfg.speed            = USB_OTG_SPEED_FULL;
 801644e:	70a0      	strb	r0, [r4, #2]
    pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;  
 8016450:	80a3      	strh	r3, [r4, #4]
    gusbcfg.b.usbtrdtim = 5;
 8016452:	2205      	movs	r2, #5
  }
  
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, gusbcfg.d32);
 8016454:	68e3      	ldr	r3, [r4, #12]
  }
  else
  {
    pdev->cfg.speed            = USB_OTG_SPEED_FULL;
    pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;  
    gusbcfg.b.usbtrdtim = 5;
 8016456:	f362 258d 	bfi	r5, r2, #10, #4
  
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, gusbcfg.d32);
  
  /* Clear interrupt */
  gintsts.d32 = 0;
  gintsts.b.enumdone = 1;
 801645a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    pdev->cfg.speed            = USB_OTG_SPEED_FULL;
    pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;  
    gusbcfg.b.usbtrdtim = 5;
  }
  
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, gusbcfg.d32);
 801645e:	60dd      	str	r5, [r3, #12]
      retval |= DCD_HandleUsbReset_ISR(pdev);
      
    }
    if (gintr_status.b.enumdone)
    {
      retval |= DCD_HandleEnumDone_ISR(pdev);
 8016460:	2001      	movs	r0, #1
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, gusbcfg.d32);
  
  /* Clear interrupt */
  gintsts.d32 = 0;
  gintsts.b.enumdone = 1;
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, gintsts.d32 );
 8016462:	615a      	str	r2, [r3, #20]
    if (gintr_status.b.enumdone)
    {
      retval |= DCD_HandleEnumDone_ISR(pdev);
    }
    
    if (gintr_status.b.incomplisoin)
 8016464:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8016468:	f007 0110 	and.w	r1, r7, #16
 801646c:	b2cb      	uxtb	r3, r1
 801646e:	b14b      	cbz	r3, 8016484 <USBD_OTG_ISR_Handler+0x46c>
{
  USB_OTG_GINTSTS_TypeDef gintsts;  
  
  gintsts.d32 = 0;

  USBD_DCD_INT_fops->IsoINIncomplete (pdev); 
 8016470:	480d      	ldr	r0, [pc, #52]	; (80164a8 <USBD_OTG_ISR_Handler+0x490>)
 8016472:	6802      	ldr	r2, [r0, #0]
 8016474:	4620      	mov	r0, r4
 8016476:	69d1      	ldr	r1, [r2, #28]
 8016478:	4788      	blx	r1
  
  /* Clear interrupt */
  gintsts.b.incomplisoin = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 801647a:	68e3      	ldr	r3, [r4, #12]
 801647c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8016480:	6158      	str	r0, [r3, #20]
      retval |= DCD_HandleEnumDone_ISR(pdev);
    }
    
    if (gintr_status.b.incomplisoin)
    {
      retval |= DCD_IsoINIncomplete_ISR(pdev);
 8016482:	2001      	movs	r0, #1
    }

    if (gintr_status.b.incomplisoout)
 8016484:	f007 0720 	and.w	r7, r7, #32
 8016488:	b2ff      	uxtb	r7, r7
 801648a:	b14f      	cbz	r7, 80164a0 <USBD_OTG_ISR_Handler+0x488>
{
  USB_OTG_GINTSTS_TypeDef gintsts;  
  
  gintsts.d32 = 0;

  USBD_DCD_INT_fops->IsoOUTIncomplete (pdev); 
 801648c:	4a06      	ldr	r2, [pc, #24]	; (80164a8 <USBD_OTG_ISR_Handler+0x490>)
 801648e:	6811      	ldr	r1, [r2, #0]
 8016490:	4620      	mov	r0, r4
 8016492:	6a0b      	ldr	r3, [r1, #32]
 8016494:	4798      	blx	r3
  
  /* Clear interrupt */
  gintsts.b.incomplisoout = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8016496:	68e0      	ldr	r0, [r4, #12]
 8016498:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801649c:	6142      	str	r2, [r0, #20]
      retval |= DCD_IsoINIncomplete_ISR(pdev);
    }

    if (gintr_status.b.incomplisoout)
    {
      retval |= DCD_IsoOUTIncomplete_ISR(pdev);
 801649e:	2001      	movs	r0, #1
      retval |= DCD_OTG_ISR(pdev);
    }   
#endif    
  }
  return retval;
}
 80164a0:	b005      	add	sp, #20
 80164a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164a6:	bf00      	nop
 80164a8:	2000001c 	.word	0x2000001c
 80164ac:	e000ed00 	.word	0xe000ed00

080164b0 <HCD_Init>:
  * @param  base_address: OTG base address
  * @retval Status
  */
uint32_t HCD_Init(USB_OTG_CORE_HANDLE *pdev , 
                  USB_OTG_CORE_ID_TypeDef coreID)
{
 80164b0:	b538      	push	{r3, r4, r5, lr}
  uint8_t i = 0;
  pdev->host.ConnSts = 0;
 80164b2:	2300      	movs	r3, #0
  * @param  base_address: OTG base address
  * @retval Status
  */
uint32_t HCD_Init(USB_OTG_CORE_HANDLE *pdev , 
                  USB_OTG_CORE_ID_TypeDef coreID)
{
 80164b4:	4604      	mov	r4, r0
  uint8_t i = 0;
  pdev->host.ConnSts = 0;
 80164b6:	f8c0 37f4 	str.w	r3, [r0, #2036]	; 0x7f4
  
  for (i= 0; i< USB_OTG_MAX_TX_FIFOS; i++)
  {
  pdev->host.ErrCnt[i]  = 0;
 80164ba:	f503 72fe 	add.w	r2, r3, #508	; 0x1fc
 80164be:	eb04 0082 	add.w	r0, r4, r2, lsl #2
 80164c2:	2500      	movs	r5, #0
  pdev->host.XferCnt[i]   = 0;
 80164c4:	f503 7203 	add.w	r2, r3, #524	; 0x20c
  uint8_t i = 0;
  pdev->host.ConnSts = 0;
  
  for (i= 0; i< USB_OTG_MAX_TX_FIFOS; i++)
  {
  pdev->host.ErrCnt[i]  = 0;
 80164c8:	6085      	str	r5, [r0, #8]
  pdev->host.XferCnt[i]   = 0;
 80164ca:	eb04 0082 	add.w	r0, r4, r2, lsl #2
  pdev->host.HC_Status[i]   = HC_IDLE;
 80164ce:	18e2      	adds	r2, r4, r3
 80164d0:	3301      	adds	r3, #1
                  USB_OTG_CORE_ID_TypeDef coreID)
{
  uint8_t i = 0;
  pdev->host.ConnSts = 0;
  
  for (i= 0; i< USB_OTG_MAX_TX_FIFOS; i++)
 80164d2:	2b0f      	cmp	r3, #15
  {
  pdev->host.ErrCnt[i]  = 0;
  pdev->host.XferCnt[i]   = 0;
 80164d4:	6045      	str	r5, [r0, #4]
  pdev->host.HC_Status[i]   = HC_IDLE;
 80164d6:	f882 5870 	strb.w	r5, [r2, #2160]	; 0x870
                  USB_OTG_CORE_ID_TypeDef coreID)
{
  uint8_t i = 0;
  pdev->host.ConnSts = 0;
  
  for (i= 0; i< USB_OTG_MAX_TX_FIFOS; i++)
 80164da:	d1ee      	bne.n	80164ba <HCD_Init+0xa>
  {
  pdev->host.ErrCnt[i]  = 0;
  pdev->host.XferCnt[i]   = 0;
  pdev->host.HC_Status[i]   = HC_IDLE;
  }
  pdev->host.hc[0].max_packet  = 8; 
 80164dc:	2008      	movs	r0, #8
 80164de:	f8a4 0896 	strh.w	r0, [r4, #2198]	; 0x896

  USB_OTG_SelectCore(pdev, coreID);
 80164e2:	4620      	mov	r0, r4
 80164e4:	f7fe ff26 	bl	8015334 <USB_OTG_SelectCore>
#ifndef DUAL_ROLE_MODE_ENABLED
  USB_OTG_DisableGlobalInt(pdev);
 80164e8:	4620      	mov	r0, r4
 80164ea:	f7fe ffd7 	bl	801549c <USB_OTG_DisableGlobalInt>
  USB_OTG_CoreInit(pdev);
 80164ee:	4620      	mov	r0, r4
 80164f0:	f7fe ff80 	bl	80153f4 <USB_OTG_CoreInit>

  /* Force Host Mode*/
  USB_OTG_SetCurrentMode(pdev , HOST_MODE);
 80164f4:	2101      	movs	r1, #1
 80164f6:	4620      	mov	r0, r4
 80164f8:	f7ff f810 	bl	801551c <USB_OTG_SetCurrentMode>
  USB_OTG_CoreInitHost(pdev);
 80164fc:	4620      	mov	r0, r4
 80164fe:	f7ff f8a3 	bl	8015648 <USB_OTG_CoreInitHost>
  USB_OTG_EnableGlobalInt(pdev);
 8016502:	4620      	mov	r0, r4
 8016504:	f7fe ffc3 	bl	801548e <USB_OTG_EnableGlobalInt>
#endif
   
  return 0;
}
 8016508:	4628      	mov	r0, r5
 801650a:	bd38      	pop	{r3, r4, r5, pc}

0801650c <HCD_GetCurrentSpeed>:
  */

uint32_t HCD_GetCurrentSpeed (USB_OTG_CORE_HANDLE *pdev)
{    
    USB_OTG_HPRT0_TypeDef  HPRT0;
    HPRT0.d32 = USB_OTG_READ_REG32(pdev->regs.HPRT0);
 801650c:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
 8016510:	6818      	ldr	r0, [r3, #0]
    
    return HPRT0.b.prtspd;
}
 8016512:	f3c0 4041 	ubfx	r0, r0, #17, #2
 8016516:	4770      	bx	lr

08016518 <HCD_ResetPort>:
  *         Issues the reset command to device
  * @param  pdev : Selected device
  * @retval Status
  */
uint32_t HCD_ResetPort(USB_OTG_CORE_HANDLE *pdev)
{
 8016518:	b508      	push	{r3, lr}
  interrupt triggered by the debounce done bit (DBCDNE bit in OTG_FS_GOTGINT), 
  which indicates that the bus is stable again after the electrical debounce 
  caused by the attachment of a pull-up resistor on DP (FS) or DM (LS).
  */
  
  USB_OTG_ResetPort(pdev); 
 801651a:	f7ff f87f 	bl	801561c <USB_OTG_ResetPort>
  return 0;
}
 801651e:	2000      	movs	r0, #0
 8016520:	bd08      	pop	{r3, pc}

08016522 <HCD_IsDeviceConnected>:
  * @retval Device connection status. 1 -> connected and 0 -> disconnected
  * 
  */
uint32_t HCD_IsDeviceConnected(USB_OTG_CORE_HANDLE *pdev)
{
  return (pdev->host.ConnSts);
 8016522:	f8d0 07f4 	ldr.w	r0, [r0, #2036]	; 0x7f4
}
 8016526:	4770      	bx	lr

08016528 <HCD_GetCurrentFrame>:
  * @retval Frame number
  * 
  */
uint32_t HCD_GetCurrentFrame (USB_OTG_CORE_HANDLE *pdev) 
{
 return (USB_OTG_READ_REG32(&pdev->regs.HREGS->HFNUM) & 0xFFFF) ;
 8016528:	6943      	ldr	r3, [r0, #20]
 801652a:	6898      	ldr	r0, [r3, #8]
}
 801652c:	b280      	uxth	r0, r0
 801652e:	4770      	bx	lr

08016530 <HCD_GetURB_State>:
  * @retval URB_STATE
  * 
  */
URB_STATE HCD_GetURB_State (USB_OTG_CORE_HANDLE *pdev , uint8_t ch_num) 
{
  return pdev->host.URB_State[ch_num] ;
 8016530:	1841      	adds	r1, r0, r1
 8016532:	f891 087f 	ldrb.w	r0, [r1, #2175]	; 0x87f
}
 8016536:	4770      	bx	lr

08016538 <HCD_SubmitRequest>:
  * @param  pdev: Selected device
  * @param  hc_num: Channel number 
  * @retval status
  */
uint32_t HCD_SubmitRequest (USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num) 
{
 8016538:	b538      	push	{r3, r4, r5, lr}
  
  pdev->host.URB_State[hc_num] =   URB_IDLE;  
  pdev->host.hc[hc_num].xfer_count = 0 ;
 801653a:	eb00 1241 	add.w	r2, r0, r1, lsl #5
  * @retval status
  */
uint32_t HCD_SubmitRequest (USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num) 
{
  
  pdev->host.URB_State[hc_num] =   URB_IDLE;  
 801653e:	1845      	adds	r5, r0, r1
 8016540:	2300      	movs	r3, #0
 8016542:	f885 387f 	strb.w	r3, [r5, #2175]	; 0x87f
  pdev->host.hc[hc_num].xfer_count = 0 ;
 8016546:	f8c2 38a4 	str.w	r3, [r2, #2212]	; 0x8a4
  * @param  pdev: Selected device
  * @param  hc_num: Channel number 
  * @retval status
  */
uint32_t HCD_SubmitRequest (USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num) 
{
 801654a:	460c      	mov	r4, r1
  
  pdev->host.URB_State[hc_num] =   URB_IDLE;  
  pdev->host.hc[hc_num].xfer_count = 0 ;
  return USB_OTG_HC_StartXfer(pdev, hc_num);
 801654c:	f7ff f93c 	bl	80157c8 <USB_OTG_HC_StartXfer>
}
 8016550:	bd38      	pop	{r3, r4, r5, pc}
	...

08016554 <USB_OTG_USBH_handle_sof_ISR>:
*         Handles the start-of-frame interrupt in host mode.
* @param  pdev: Selected device
* @retval status 
*/
static uint32_t USB_OTG_USBH_handle_sof_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 8016554:	b580      	push	{r7, lr}
 8016556:	b084      	sub	sp, #16
 8016558:	af00      	add	r7, sp, #0
 801655a:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef      gintsts;
  gintsts.d32 = 0;
 801655c:	f04f 0300 	mov.w	r3, #0
 8016560:	60fb      	str	r3, [r7, #12]
  
  USBH_HCD_INT_fops->SOF(pdev);
 8016562:	f240 034c 	movw	r3, #76	; 0x4c
 8016566:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801656a:	681b      	ldr	r3, [r3, #0]
 801656c:	681b      	ldr	r3, [r3, #0]
 801656e:	6878      	ldr	r0, [r7, #4]
 8016570:	4798      	blx	r3
  
  /* Clear interrupt */
  gintsts.b.sofintr = 1;
 8016572:	68fb      	ldr	r3, [r7, #12]
 8016574:	f043 0308 	orr.w	r3, r3, #8
 8016578:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	68db      	ldr	r3, [r3, #12]
 801657e:	68fa      	ldr	r2, [r7, #12]
 8016580:	615a      	str	r2, [r3, #20]
  
  return 1;
 8016582:	f04f 0301 	mov.w	r3, #1
}
 8016586:	4618      	mov	r0, r3
 8016588:	f107 0710 	add.w	r7, r7, #16
 801658c:	46bd      	mov	sp, r7
 801658e:	bd80      	pop	{r7, pc}

08016590 <USB_OTG_USBH_handle_Disconnect_ISR>:
*         Handles disconnect event.
* @param  pdev: Selected device
* @retval status 
*/
static uint32_t USB_OTG_USBH_handle_Disconnect_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 8016590:	b580      	push	{r7, lr}
 8016592:	b084      	sub	sp, #16
 8016594:	af00      	add	r7, sp, #0
 8016596:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef      gintsts;
  
  gintsts.d32 = 0;
 8016598:	f04f 0300 	mov.w	r3, #0
 801659c:	60fb      	str	r3, [r7, #12]
  
  USBH_HCD_INT_fops->DevDisconnected(pdev);
 801659e:	f240 034c 	movw	r3, #76	; 0x4c
 80165a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80165a6:	681b      	ldr	r3, [r3, #0]
 80165a8:	689b      	ldr	r3, [r3, #8]
 80165aa:	6878      	ldr	r0, [r7, #4]
 80165ac:	4798      	blx	r3
  
  /* Clear interrupt */
  gintsts.b.disconnect = 1;
 80165ae:	68fb      	ldr	r3, [r7, #12]
 80165b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80165b4:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 80165b6:	687b      	ldr	r3, [r7, #4]
 80165b8:	68db      	ldr	r3, [r3, #12]
 80165ba:	68fa      	ldr	r2, [r7, #12]
 80165bc:	615a      	str	r2, [r3, #20]
  
  return 1;
 80165be:	f04f 0301 	mov.w	r3, #1
}
 80165c2:	4618      	mov	r0, r3
 80165c4:	f107 0710 	add.w	r7, r7, #16
 80165c8:	46bd      	mov	sp, r7
 80165ca:	bd80      	pop	{r7, pc}

080165cc <USB_OTG_USBH_handle_nptxfempty_ISR>:
*         Handles non periodic tx fifo empty.
* @param  pdev: Selected device
* @retval status 
*/
static uint32_t USB_OTG_USBH_handle_nptxfempty_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 80165cc:	b580      	push	{r7, lr}
 80165ce:	b088      	sub	sp, #32
 80165d0:	af00      	add	r7, sp, #0
 80165d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTMSK_TypeDef      intmsk;
  USB_OTG_HNPTXSTS_TypeDef     hnptxsts; 
  uint16_t                     len_words , len; 
  
  hnptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	68db      	ldr	r3, [r3, #12]
 80165d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80165da:	60fb      	str	r3, [r7, #12]
  
  len_words = (pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len + 3) / 4;
 80165dc:	7c3b      	ldrb	r3, [r7, #16]
 80165de:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 80165e2:	b2db      	uxtb	r3, r3
 80165e4:	687a      	ldr	r2, [r7, #4]
 80165e6:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80165ea:	18d3      	adds	r3, r2, r3
 80165ec:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 80165f0:	681b      	ldr	r3, [r3, #0]
 80165f2:	f103 0303 	add.w	r3, r3, #3
 80165f6:	ea4f 0393 	mov.w	r3, r3, lsr #2
 80165fa:	83fb      	strh	r3, [r7, #30]
  
  while ((hnptxsts.b.nptxfspcavail > len_words)&&
 80165fc:	e0a4      	b.n	8016748 <USB_OTG_USBH_handle_nptxfempty_ISR+0x17c>
         (pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len != 0))
  {
    
    len = hnptxsts.b.nptxfspcavail * 4;
 80165fe:	89bb      	ldrh	r3, [r7, #12]
 8016600:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8016604:	83bb      	strh	r3, [r7, #28]
    
    if (len > pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len)
 8016606:	8bba      	ldrh	r2, [r7, #28]
 8016608:	7c3b      	ldrb	r3, [r7, #16]
 801660a:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 801660e:	b2db      	uxtb	r3, r3
 8016610:	6879      	ldr	r1, [r7, #4]
 8016612:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8016616:	18cb      	adds	r3, r1, r3
 8016618:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 801661c:	681b      	ldr	r3, [r3, #0]
 801661e:	429a      	cmp	r2, r3
 8016620:	d91c      	bls.n	801665c <USB_OTG_USBH_handle_nptxfempty_ISR+0x90>
    {
      /* Last packet */
      len = pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len;
 8016622:	7c3b      	ldrb	r3, [r7, #16]
 8016624:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8016628:	b2db      	uxtb	r3, r3
 801662a:	687a      	ldr	r2, [r7, #4]
 801662c:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8016630:	18d3      	adds	r3, r2, r3
 8016632:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8016636:	681b      	ldr	r3, [r3, #0]
 8016638:	83bb      	strh	r3, [r7, #28]
      
      intmsk.d32 = 0;
 801663a:	f04f 0300 	mov.w	r3, #0
 801663e:	61bb      	str	r3, [r7, #24]
      intmsk.b.nptxfempty = 1;
 8016640:	69bb      	ldr	r3, [r7, #24]
 8016642:	f043 0320 	orr.w	r3, r3, #32
 8016646:	61bb      	str	r3, [r7, #24]
      USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, 0);       
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	68db      	ldr	r3, [r3, #12]
 801664c:	687a      	ldr	r2, [r7, #4]
 801664e:	68d2      	ldr	r2, [r2, #12]
 8016650:	6991      	ldr	r1, [r2, #24]
 8016652:	69ba      	ldr	r2, [r7, #24]
 8016654:	ea6f 0202 	mvn.w	r2, r2
 8016658:	400a      	ands	r2, r1
 801665a:	619a      	str	r2, [r3, #24]
    }
    
    len_words = (pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len + 3) / 4;
 801665c:	7c3b      	ldrb	r3, [r7, #16]
 801665e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8016662:	b2db      	uxtb	r3, r3
 8016664:	687a      	ldr	r2, [r7, #4]
 8016666:	ea4f 1343 	mov.w	r3, r3, lsl #5
 801666a:	18d3      	adds	r3, r2, r3
 801666c:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8016670:	681b      	ldr	r3, [r3, #0]
 8016672:	f103 0303 	add.w	r3, r3, #3
 8016676:	ea4f 0393 	mov.w	r3, r3, lsr #2
 801667a:	83fb      	strh	r3, [r7, #30]
    
    USB_OTG_WritePacket (pdev , pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_buff, hnptxsts.b.nptxqtop.chnum, len);
 801667c:	7c3b      	ldrb	r3, [r7, #16]
 801667e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8016682:	b2db      	uxtb	r3, r3
 8016684:	687a      	ldr	r2, [r7, #4]
 8016686:	f103 0315 	add.w	r3, r3, #21
 801668a:	ea4f 1343 	mov.w	r3, r3, lsl #5
 801668e:	18d3      	adds	r3, r2, r3
 8016690:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 8016694:	6819      	ldr	r1, [r3, #0]
 8016696:	7c3b      	ldrb	r3, [r7, #16]
 8016698:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 801669c:	b2db      	uxtb	r3, r3
 801669e:	461a      	mov	r2, r3
 80166a0:	8bbb      	ldrh	r3, [r7, #28]
 80166a2:	6878      	ldr	r0, [r7, #4]
 80166a4:	f7fe fe22 	bl	80152ec <USB_OTG_WritePacket>
    
    pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_buff  += len;
 80166a8:	7c3b      	ldrb	r3, [r7, #16]
 80166aa:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 80166ae:	b2db      	uxtb	r3, r3
 80166b0:	7c3a      	ldrb	r2, [r7, #16]
 80166b2:	f3c2 02c3 	ubfx	r2, r2, #3, #4
 80166b6:	b2d2      	uxtb	r2, r2
 80166b8:	6879      	ldr	r1, [r7, #4]
 80166ba:	f102 0215 	add.w	r2, r2, #21
 80166be:	ea4f 1242 	mov.w	r2, r2, lsl #5
 80166c2:	188a      	adds	r2, r1, r2
 80166c4:	f202 52fc 	addw	r2, r2, #1532	; 0x5fc
 80166c8:	6811      	ldr	r1, [r2, #0]
 80166ca:	8bba      	ldrh	r2, [r7, #28]
 80166cc:	188a      	adds	r2, r1, r2
 80166ce:	6879      	ldr	r1, [r7, #4]
 80166d0:	f103 0315 	add.w	r3, r3, #21
 80166d4:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80166d8:	18cb      	adds	r3, r1, r3
 80166da:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 80166de:	601a      	str	r2, [r3, #0]
    pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len   -= len;
 80166e0:	7c3b      	ldrb	r3, [r7, #16]
 80166e2:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 80166e6:	b2db      	uxtb	r3, r3
 80166e8:	7c3a      	ldrb	r2, [r7, #16]
 80166ea:	f3c2 02c3 	ubfx	r2, r2, #3, #4
 80166ee:	b2d2      	uxtb	r2, r2
 80166f0:	6879      	ldr	r1, [r7, #4]
 80166f2:	ea4f 1242 	mov.w	r2, r2, lsl #5
 80166f6:	188a      	adds	r2, r1, r2
 80166f8:	f502 620a 	add.w	r2, r2, #2208	; 0x8a0
 80166fc:	6811      	ldr	r1, [r2, #0]
 80166fe:	8bba      	ldrh	r2, [r7, #28]
 8016700:	1a8a      	subs	r2, r1, r2
 8016702:	6879      	ldr	r1, [r7, #4]
 8016704:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8016708:	18cb      	adds	r3, r1, r3
 801670a:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 801670e:	601a      	str	r2, [r3, #0]
    pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_count  += len; 
 8016710:	7c3b      	ldrb	r3, [r7, #16]
 8016712:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8016716:	b2db      	uxtb	r3, r3
 8016718:	7c3a      	ldrb	r2, [r7, #16]
 801671a:	f3c2 02c3 	ubfx	r2, r2, #3, #4
 801671e:	b2d2      	uxtb	r2, r2
 8016720:	6879      	ldr	r1, [r7, #4]
 8016722:	ea4f 1242 	mov.w	r2, r2, lsl #5
 8016726:	188a      	adds	r2, r1, r2
 8016728:	f602 02a4 	addw	r2, r2, #2212	; 0x8a4
 801672c:	6811      	ldr	r1, [r2, #0]
 801672e:	8bba      	ldrh	r2, [r7, #28]
 8016730:	188a      	adds	r2, r1, r2
 8016732:	6879      	ldr	r1, [r7, #4]
 8016734:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8016738:	18cb      	adds	r3, r1, r3
 801673a:	f603 03a4 	addw	r3, r3, #2212	; 0x8a4
 801673e:	601a      	str	r2, [r3, #0]
    
    hnptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	68db      	ldr	r3, [r3, #12]
 8016744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016746:	60fb      	str	r3, [r7, #12]
  
  hnptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
  
  len_words = (pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len + 3) / 4;
  
  while ((hnptxsts.b.nptxfspcavail > len_words)&&
 8016748:	89bb      	ldrh	r3, [r7, #12]
 801674a:	8bfa      	ldrh	r2, [r7, #30]
 801674c:	429a      	cmp	r2, r3
 801674e:	d20d      	bcs.n	801676c <USB_OTG_USBH_handle_nptxfempty_ISR+0x1a0>
         (pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len != 0))
 8016750:	7c3b      	ldrb	r3, [r7, #16]
 8016752:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8016756:	b2db      	uxtb	r3, r3
 8016758:	687a      	ldr	r2, [r7, #4]
 801675a:	ea4f 1343 	mov.w	r3, r3, lsl #5
 801675e:	18d3      	adds	r3, r2, r3
 8016760:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8016764:	681b      	ldr	r3, [r3, #0]
  
  hnptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
  
  len_words = (pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len + 3) / 4;
  
  while ((hnptxsts.b.nptxfspcavail > len_words)&&
 8016766:	2b00      	cmp	r3, #0
 8016768:	f47f af49 	bne.w	80165fe <USB_OTG_USBH_handle_nptxfempty_ISR+0x32>
    pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_count  += len; 
    
    hnptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
  }  
  
  return 1;
 801676c:	f04f 0301 	mov.w	r3, #1
}
 8016770:	4618      	mov	r0, r3
 8016772:	f107 0720 	add.w	r7, r7, #32
 8016776:	46bd      	mov	sp, r7
 8016778:	bd80      	pop	{r7, pc}
 801677a:	bf00      	nop

0801677c <USB_OTG_USBH_handle_ptxfempty_ISR>:
*         Handles periodic tx fifo empty
* @param  pdev: Selected device
* @retval status 
*/
static uint32_t USB_OTG_USBH_handle_ptxfempty_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 801677c:	b580      	push	{r7, lr}
 801677e:	b086      	sub	sp, #24
 8016780:	af00      	add	r7, sp, #0
 8016782:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTMSK_TypeDef      intmsk;
  USB_OTG_HPTXSTS_TypeDef      hptxsts; 
  uint16_t                     len_words , len; 
  
  hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	695b      	ldr	r3, [r3, #20]
 8016788:	691b      	ldr	r3, [r3, #16]
 801678a:	60bb      	str	r3, [r7, #8]
  
  len_words = (pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len + 3) / 4;
 801678c:	7b3b      	ldrb	r3, [r7, #12]
 801678e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8016792:	b2db      	uxtb	r3, r3
 8016794:	687a      	ldr	r2, [r7, #4]
 8016796:	ea4f 1343 	mov.w	r3, r3, lsl #5
 801679a:	18d3      	adds	r3, r2, r3
 801679c:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 80167a0:	681b      	ldr	r3, [r3, #0]
 80167a2:	f103 0303 	add.w	r3, r3, #3
 80167a6:	ea4f 0393 	mov.w	r3, r3, lsr #2
 80167aa:	82fb      	strh	r3, [r7, #22]
  
  while ((hptxsts.b.ptxfspcavail > len_words)&&
 80167ac:	e0a4      	b.n	80168f8 <USB_OTG_USBH_handle_ptxfempty_ISR+0x17c>
         (pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len != 0))    
  {
    
    len = hptxsts.b.ptxfspcavail * 4;
 80167ae:	893b      	ldrh	r3, [r7, #8]
 80167b0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80167b4:	82bb      	strh	r3, [r7, #20]
    
    if (len > pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len)
 80167b6:	8aba      	ldrh	r2, [r7, #20]
 80167b8:	7b3b      	ldrb	r3, [r7, #12]
 80167ba:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 80167be:	b2db      	uxtb	r3, r3
 80167c0:	6879      	ldr	r1, [r7, #4]
 80167c2:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80167c6:	18cb      	adds	r3, r1, r3
 80167c8:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 80167cc:	681b      	ldr	r3, [r3, #0]
 80167ce:	429a      	cmp	r2, r3
 80167d0:	d91c      	bls.n	801680c <USB_OTG_USBH_handle_ptxfempty_ISR+0x90>
    {
      len = pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len;
 80167d2:	7b3b      	ldrb	r3, [r7, #12]
 80167d4:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 80167d8:	b2db      	uxtb	r3, r3
 80167da:	687a      	ldr	r2, [r7, #4]
 80167dc:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80167e0:	18d3      	adds	r3, r2, r3
 80167e2:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 80167e6:	681b      	ldr	r3, [r3, #0]
 80167e8:	82bb      	strh	r3, [r7, #20]
      /* Last packet */
      intmsk.d32 = 0;
 80167ea:	f04f 0300 	mov.w	r3, #0
 80167ee:	613b      	str	r3, [r7, #16]
      intmsk.b.ptxfempty = 1;
 80167f0:	693b      	ldr	r3, [r7, #16]
 80167f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80167f6:	613b      	str	r3, [r7, #16]
      USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, 0); 
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	68db      	ldr	r3, [r3, #12]
 80167fc:	687a      	ldr	r2, [r7, #4]
 80167fe:	68d2      	ldr	r2, [r2, #12]
 8016800:	6991      	ldr	r1, [r2, #24]
 8016802:	693a      	ldr	r2, [r7, #16]
 8016804:	ea6f 0202 	mvn.w	r2, r2
 8016808:	400a      	ands	r2, r1
 801680a:	619a      	str	r2, [r3, #24]
    }
    
    len_words = (pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len + 3) / 4;
 801680c:	7b3b      	ldrb	r3, [r7, #12]
 801680e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8016812:	b2db      	uxtb	r3, r3
 8016814:	687a      	ldr	r2, [r7, #4]
 8016816:	ea4f 1343 	mov.w	r3, r3, lsl #5
 801681a:	18d3      	adds	r3, r2, r3
 801681c:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8016820:	681b      	ldr	r3, [r3, #0]
 8016822:	f103 0303 	add.w	r3, r3, #3
 8016826:	ea4f 0393 	mov.w	r3, r3, lsr #2
 801682a:	82fb      	strh	r3, [r7, #22]
    
    USB_OTG_WritePacket (pdev , pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_buff, hptxsts.b.ptxqtop.chnum, len);
 801682c:	7b3b      	ldrb	r3, [r7, #12]
 801682e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8016832:	b2db      	uxtb	r3, r3
 8016834:	687a      	ldr	r2, [r7, #4]
 8016836:	f103 0315 	add.w	r3, r3, #21
 801683a:	ea4f 1343 	mov.w	r3, r3, lsl #5
 801683e:	18d3      	adds	r3, r2, r3
 8016840:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 8016844:	6819      	ldr	r1, [r3, #0]
 8016846:	7b3b      	ldrb	r3, [r7, #12]
 8016848:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 801684c:	b2db      	uxtb	r3, r3
 801684e:	461a      	mov	r2, r3
 8016850:	8abb      	ldrh	r3, [r7, #20]
 8016852:	6878      	ldr	r0, [r7, #4]
 8016854:	f7fe fd4a 	bl	80152ec <USB_OTG_WritePacket>
    
    pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_buff  += len;
 8016858:	7b3b      	ldrb	r3, [r7, #12]
 801685a:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 801685e:	b2db      	uxtb	r3, r3
 8016860:	7b3a      	ldrb	r2, [r7, #12]
 8016862:	f3c2 02c3 	ubfx	r2, r2, #3, #4
 8016866:	b2d2      	uxtb	r2, r2
 8016868:	6879      	ldr	r1, [r7, #4]
 801686a:	f102 0215 	add.w	r2, r2, #21
 801686e:	ea4f 1242 	mov.w	r2, r2, lsl #5
 8016872:	188a      	adds	r2, r1, r2
 8016874:	f202 52fc 	addw	r2, r2, #1532	; 0x5fc
 8016878:	6811      	ldr	r1, [r2, #0]
 801687a:	8aba      	ldrh	r2, [r7, #20]
 801687c:	188a      	adds	r2, r1, r2
 801687e:	6879      	ldr	r1, [r7, #4]
 8016880:	f103 0315 	add.w	r3, r3, #21
 8016884:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8016888:	18cb      	adds	r3, r1, r3
 801688a:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 801688e:	601a      	str	r2, [r3, #0]
    pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len   -= len;
 8016890:	7b3b      	ldrb	r3, [r7, #12]
 8016892:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8016896:	b2db      	uxtb	r3, r3
 8016898:	7b3a      	ldrb	r2, [r7, #12]
 801689a:	f3c2 02c3 	ubfx	r2, r2, #3, #4
 801689e:	b2d2      	uxtb	r2, r2
 80168a0:	6879      	ldr	r1, [r7, #4]
 80168a2:	ea4f 1242 	mov.w	r2, r2, lsl #5
 80168a6:	188a      	adds	r2, r1, r2
 80168a8:	f502 620a 	add.w	r2, r2, #2208	; 0x8a0
 80168ac:	6811      	ldr	r1, [r2, #0]
 80168ae:	8aba      	ldrh	r2, [r7, #20]
 80168b0:	1a8a      	subs	r2, r1, r2
 80168b2:	6879      	ldr	r1, [r7, #4]
 80168b4:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80168b8:	18cb      	adds	r3, r1, r3
 80168ba:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 80168be:	601a      	str	r2, [r3, #0]
    pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_count  += len; 
 80168c0:	7b3b      	ldrb	r3, [r7, #12]
 80168c2:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 80168c6:	b2db      	uxtb	r3, r3
 80168c8:	7b3a      	ldrb	r2, [r7, #12]
 80168ca:	f3c2 02c3 	ubfx	r2, r2, #3, #4
 80168ce:	b2d2      	uxtb	r2, r2
 80168d0:	6879      	ldr	r1, [r7, #4]
 80168d2:	ea4f 1242 	mov.w	r2, r2, lsl #5
 80168d6:	188a      	adds	r2, r1, r2
 80168d8:	f602 02a4 	addw	r2, r2, #2212	; 0x8a4
 80168dc:	6811      	ldr	r1, [r2, #0]
 80168de:	8aba      	ldrh	r2, [r7, #20]
 80168e0:	188a      	adds	r2, r1, r2
 80168e2:	6879      	ldr	r1, [r7, #4]
 80168e4:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80168e8:	18cb      	adds	r3, r1, r3
 80168ea:	f603 03a4 	addw	r3, r3, #2212	; 0x8a4
 80168ee:	601a      	str	r2, [r3, #0]
    
    hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	695b      	ldr	r3, [r3, #20]
 80168f4:	691b      	ldr	r3, [r3, #16]
 80168f6:	60bb      	str	r3, [r7, #8]
  
  hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
  
  len_words = (pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len + 3) / 4;
  
  while ((hptxsts.b.ptxfspcavail > len_words)&&
 80168f8:	893b      	ldrh	r3, [r7, #8]
 80168fa:	8afa      	ldrh	r2, [r7, #22]
 80168fc:	429a      	cmp	r2, r3
 80168fe:	d20d      	bcs.n	801691c <USB_OTG_USBH_handle_ptxfempty_ISR+0x1a0>
         (pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len != 0))    
 8016900:	7b3b      	ldrb	r3, [r7, #12]
 8016902:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8016906:	b2db      	uxtb	r3, r3
 8016908:	687a      	ldr	r2, [r7, #4]
 801690a:	ea4f 1343 	mov.w	r3, r3, lsl #5
 801690e:	18d3      	adds	r3, r2, r3
 8016910:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8016914:	681b      	ldr	r3, [r3, #0]
  
  hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
  
  len_words = (pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len + 3) / 4;
  
  while ((hptxsts.b.ptxfspcavail > len_words)&&
 8016916:	2b00      	cmp	r3, #0
 8016918:	f47f af49 	bne.w	80167ae <USB_OTG_USBH_handle_ptxfempty_ISR+0x32>
    pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_count  += len; 
    
    hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
  }  
  
  return 1;
 801691c:	f04f 0301 	mov.w	r3, #1
}
 8016920:	4618      	mov	r0, r3
 8016922:	f107 0718 	add.w	r7, r7, #24
 8016926:	46bd      	mov	sp, r7
 8016928:	bd80      	pop	{r7, pc}
 801692a:	bf00      	nop

0801692c <USB_OTG_USBH_handle_port_ISR>:
*/
#if defined ( __ICCARM__ ) /*!< IAR Compiler */
#pragma optimize = none
#endif /* __CC_ARM */
static uint32_t USB_OTG_USBH_handle_port_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 801692c:	b580      	push	{r7, lr}
 801692e:	b088      	sub	sp, #32
 8016930:	af00      	add	r7, sp, #0
 8016932:	6078      	str	r0, [r7, #4]
  USB_OTG_HPRT0_TypeDef  hprt0;
  USB_OTG_HPRT0_TypeDef  hprt0_dup;
  USB_OTG_HCFG_TypeDef   hcfg;    
  uint32_t do_reset = 0;
 8016934:	f04f 0300 	mov.w	r3, #0
 8016938:	61fb      	str	r3, [r7, #28]
  uint32_t retval = 0;
 801693a:	f04f 0300 	mov.w	r3, #0
 801693e:	61bb      	str	r3, [r7, #24]
  
  hcfg.d32 = 0;
 8016940:	f04f 0300 	mov.w	r3, #0
 8016944:	60fb      	str	r3, [r7, #12]
  hprt0.d32 = 0;
 8016946:	f04f 0300 	mov.w	r3, #0
 801694a:	617b      	str	r3, [r7, #20]
  hprt0_dup.d32 = 0;
 801694c:	f04f 0300 	mov.w	r3, #0
 8016950:	613b      	str	r3, [r7, #16]
  
  hprt0.d32 = USB_OTG_READ_REG32(pdev->regs.HPRT0);
 8016952:	687b      	ldr	r3, [r7, #4]
 8016954:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8016958:	681b      	ldr	r3, [r3, #0]
 801695a:	617b      	str	r3, [r7, #20]
  hprt0_dup.d32 = USB_OTG_READ_REG32(pdev->regs.HPRT0);
 801695c:	687b      	ldr	r3, [r7, #4]
 801695e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8016962:	681b      	ldr	r3, [r3, #0]
 8016964:	613b      	str	r3, [r7, #16]
  
  /* Clear the interrupt bits in GINTSTS */
  
  hprt0_dup.b.prtena = 0;
 8016966:	693b      	ldr	r3, [r7, #16]
 8016968:	f36f 0382 	bfc	r3, #2, #1
 801696c:	613b      	str	r3, [r7, #16]
  hprt0_dup.b.prtconndet = 0;
 801696e:	693b      	ldr	r3, [r7, #16]
 8016970:	f36f 0341 	bfc	r3, #1, #1
 8016974:	613b      	str	r3, [r7, #16]
  hprt0_dup.b.prtenchng = 0;
 8016976:	693b      	ldr	r3, [r7, #16]
 8016978:	f36f 03c3 	bfc	r3, #3, #1
 801697c:	613b      	str	r3, [r7, #16]
  hprt0_dup.b.prtovrcurrchng = 0;
 801697e:	693b      	ldr	r3, [r7, #16]
 8016980:	f36f 1345 	bfc	r3, #5, #1
 8016984:	613b      	str	r3, [r7, #16]
  
  /* Port Connect Detected */
  if (hprt0.b.prtconndet)
 8016986:	7d3b      	ldrb	r3, [r7, #20]
 8016988:	f003 0302 	and.w	r3, r3, #2
 801698c:	b2db      	uxtb	r3, r3
 801698e:	2b00      	cmp	r3, #0
 8016990:	d00f      	beq.n	80169b2 <USB_OTG_USBH_handle_port_ISR+0x86>
  {

    hprt0_dup.b.prtconndet = 1;
 8016992:	693b      	ldr	r3, [r7, #16]
 8016994:	f043 0302 	orr.w	r3, r3, #2
 8016998:	613b      	str	r3, [r7, #16]
    USBH_HCD_INT_fops->DevConnected(pdev);
 801699a:	f240 034c 	movw	r3, #76	; 0x4c
 801699e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80169a2:	681b      	ldr	r3, [r3, #0]
 80169a4:	685b      	ldr	r3, [r3, #4]
 80169a6:	6878      	ldr	r0, [r7, #4]
 80169a8:	4798      	blx	r3
    retval |= 1;
 80169aa:	69bb      	ldr	r3, [r7, #24]
 80169ac:	f043 0301 	orr.w	r3, r3, #1
 80169b0:	61bb      	str	r3, [r7, #24]
  }
  
  /* Port Enable Changed */
  if (hprt0.b.prtenchng)
 80169b2:	7d3b      	ldrb	r3, [r7, #20]
 80169b4:	f003 0308 	and.w	r3, r3, #8
 80169b8:	b2db      	uxtb	r3, r3
 80169ba:	2b00      	cmp	r3, #0
 80169bc:	d058      	beq.n	8016a70 <USB_OTG_USBH_handle_port_ISR+0x144>
  {
    hprt0_dup.b.prtenchng = 1;
 80169be:	693b      	ldr	r3, [r7, #16]
 80169c0:	f043 0308 	orr.w	r3, r3, #8
 80169c4:	613b      	str	r3, [r7, #16]
    
    if (hprt0.b.prtena == 1)
 80169c6:	7d3b      	ldrb	r3, [r7, #20]
 80169c8:	f003 0304 	and.w	r3, r3, #4
 80169cc:	b2db      	uxtb	r3, r3
 80169ce:	2b00      	cmp	r3, #0
 80169d0:	d04e      	beq.n	8016a70 <USB_OTG_USBH_handle_port_ISR+0x144>
    {
      
      USBH_HCD_INT_fops->DevConnected(pdev);
 80169d2:	f240 034c 	movw	r3, #76	; 0x4c
 80169d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80169da:	681b      	ldr	r3, [r3, #0]
 80169dc:	685b      	ldr	r3, [r3, #4]
 80169de:	6878      	ldr	r0, [r7, #4]
 80169e0:	4798      	blx	r3
      
      if ((hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED) ||
 80169e2:	7dbb      	ldrb	r3, [r7, #22]
 80169e4:	f003 0306 	and.w	r3, r3, #6
 80169e8:	b2db      	uxtb	r3, r3
 80169ea:	2b04      	cmp	r3, #4
 80169ec:	d005      	beq.n	80169fa <USB_OTG_USBH_handle_port_ISR+0xce>
          (hprt0.b.prtspd == HPRT0_PRTSPD_FULL_SPEED))
 80169ee:	7dbb      	ldrb	r3, [r7, #22]
 80169f0:	f003 0306 	and.w	r3, r3, #6
 80169f4:	b2db      	uxtb	r3, r3
    if (hprt0.b.prtena == 1)
    {
      
      USBH_HCD_INT_fops->DevConnected(pdev);
      
      if ((hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED) ||
 80169f6:	2b02      	cmp	r3, #2
 80169f8:	d135      	bne.n	8016a66 <USB_OTG_USBH_handle_port_ISR+0x13a>
          (hprt0.b.prtspd == HPRT0_PRTSPD_FULL_SPEED))
      {
        
        hcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HCFG);
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	695b      	ldr	r3, [r3, #20]
 80169fe:	681b      	ldr	r3, [r3, #0]
 8016a00:	60fb      	str	r3, [r7, #12]
        
        if (hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED)
 8016a02:	7dbb      	ldrb	r3, [r7, #22]
 8016a04:	f003 0306 	and.w	r3, r3, #6
 8016a08:	b2db      	uxtb	r3, r3
 8016a0a:	2b04      	cmp	r3, #4
 8016a0c:	d117      	bne.n	8016a3e <USB_OTG_USBH_handle_port_ISR+0x112>
        {
          USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HFIR, 6000 );
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	695b      	ldr	r3, [r3, #20]
 8016a12:	f241 7270 	movw	r2, #6000	; 0x1770
 8016a16:	605a      	str	r2, [r3, #4]
          if (hcfg.b.fslspclksel != HCFG_6_MHZ)
 8016a18:	7b3b      	ldrb	r3, [r7, #12]
 8016a1a:	f003 0303 	and.w	r3, r3, #3
 8016a1e:	b2db      	uxtb	r3, r3
 8016a20:	2b02      	cmp	r3, #2
 8016a22:	d024      	beq.n	8016a6e <USB_OTG_USBH_handle_port_ISR+0x142>
          {
            if(pdev->cfg.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	7a1b      	ldrb	r3, [r3, #8]
 8016a28:	2b02      	cmp	r3, #2
 8016a2a:	d104      	bne.n	8016a36 <USB_OTG_USBH_handle_port_ISR+0x10a>
            {
              USB_OTG_InitFSLSPClkSel(pdev ,HCFG_6_MHZ );
 8016a2c:	6878      	ldr	r0, [r7, #4]
 8016a2e:	f04f 0102 	mov.w	r1, #2
 8016a32:	f7fe fdbe 	bl	80155b2 <USB_OTG_InitFSLSPClkSel>
            }
            do_reset = 1;
 8016a36:	f04f 0301 	mov.w	r3, #1
 8016a3a:	61fb      	str	r3, [r7, #28]
          (hprt0.b.prtspd == HPRT0_PRTSPD_FULL_SPEED))
      {
        
        hcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HCFG);
        
        if (hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED)
 8016a3c:	e017      	b.n	8016a6e <USB_OTG_USBH_handle_port_ISR+0x142>
          }
        }
        else
        {
          
          USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HFIR, 48000 );            
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	695b      	ldr	r3, [r3, #20]
 8016a42:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8016a46:	605a      	str	r2, [r3, #4]
          if (hcfg.b.fslspclksel != HCFG_48_MHZ)
 8016a48:	7b3b      	ldrb	r3, [r7, #12]
 8016a4a:	f003 0303 	and.w	r3, r3, #3
 8016a4e:	b2db      	uxtb	r3, r3
 8016a50:	2b01      	cmp	r3, #1
 8016a52:	d00c      	beq.n	8016a6e <USB_OTG_USBH_handle_port_ISR+0x142>
          {
            USB_OTG_InitFSLSPClkSel(pdev ,HCFG_48_MHZ );
 8016a54:	6878      	ldr	r0, [r7, #4]
 8016a56:	f04f 0101 	mov.w	r1, #1
 8016a5a:	f7fe fdaa 	bl	80155b2 <USB_OTG_InitFSLSPClkSel>
            do_reset = 1;
 8016a5e:	f04f 0301 	mov.w	r3, #1
 8016a62:	61fb      	str	r3, [r7, #28]
          (hprt0.b.prtspd == HPRT0_PRTSPD_FULL_SPEED))
      {
        
        hcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HCFG);
        
        if (hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED)
 8016a64:	e003      	b.n	8016a6e <USB_OTG_USBH_handle_port_ISR+0x142>
          }
        }
      }
      else
      {
        do_reset = 1;
 8016a66:	f04f 0301 	mov.w	r3, #1
 8016a6a:	61fb      	str	r3, [r7, #28]
 8016a6c:	e000      	b.n	8016a70 <USB_OTG_USBH_handle_port_ISR+0x144>
          (hprt0.b.prtspd == HPRT0_PRTSPD_FULL_SPEED))
      {
        
        hcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HCFG);
        
        if (hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED)
 8016a6e:	bf00      	nop
        do_reset = 1;
      }
    }
  }
  /* Overcurrent Change Interrupt */
  if (hprt0.b.prtovrcurrchng)
 8016a70:	7d3b      	ldrb	r3, [r7, #20]
 8016a72:	f003 0320 	and.w	r3, r3, #32
 8016a76:	b2db      	uxtb	r3, r3
 8016a78:	2b00      	cmp	r3, #0
 8016a7a:	d007      	beq.n	8016a8c <USB_OTG_USBH_handle_port_ISR+0x160>
  {
    hprt0_dup.b.prtovrcurrchng = 1;
 8016a7c:	693b      	ldr	r3, [r7, #16]
 8016a7e:	f043 0320 	orr.w	r3, r3, #32
 8016a82:	613b      	str	r3, [r7, #16]
    retval |= 1;
 8016a84:	69bb      	ldr	r3, [r7, #24]
 8016a86:	f043 0301 	orr.w	r3, r3, #1
 8016a8a:	61bb      	str	r3, [r7, #24]
  }
  if (do_reset)
 8016a8c:	69fb      	ldr	r3, [r7, #28]
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d002      	beq.n	8016a98 <USB_OTG_USBH_handle_port_ISR+0x16c>
  {
    USB_OTG_ResetPort(pdev);
 8016a92:	6878      	ldr	r0, [r7, #4]
 8016a94:	f7fe fdc2 	bl	801561c <USB_OTG_ResetPort>
  }
  /* Clear Port Interrupts */
  USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0_dup.d32);
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8016a9e:	693a      	ldr	r2, [r7, #16]
 8016aa0:	601a      	str	r2, [r3, #0]
  
  return retval;
 8016aa2:	69bb      	ldr	r3, [r7, #24]
}
 8016aa4:	4618      	mov	r0, r3
 8016aa6:	f107 0720 	add.w	r7, r7, #32
 8016aaa:	46bd      	mov	sp, r7
 8016aac:	bd80      	pop	{r7, pc}
 8016aae:	bf00      	nop

08016ab0 <USB_OTG_USBH_handle_hc_n_Out_ISR>:
* @param  pdev: Selected device
* @param  hc_num: Channel number
* @retval status 
*/
uint32_t USB_OTG_USBH_handle_hc_n_Out_ISR (USB_OTG_CORE_HANDLE *pdev , uint32_t num)
{
 8016ab0:	b580      	push	{r7, lr}
 8016ab2:	b09a      	sub	sp, #104	; 0x68
 8016ab4:	af00      	add	r7, sp, #0
 8016ab6:	6078      	str	r0, [r7, #4]
 8016ab8:	6039      	str	r1, [r7, #0]
  USB_OTG_HCINTn_TypeDef     hcint;
  USB_OTG_HCINTMSK_TypeDef  hcintmsk;
  USB_OTG_HC_REGS *hcreg;
  USB_OTG_HCCHAR_TypeDef     hcchar; 
  
  hcreg = pdev->regs.HC_REGS[num];
 8016aba:	687a      	ldr	r2, [r7, #4]
 8016abc:	683b      	ldr	r3, [r7, #0]
 8016abe:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8016ac2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8016ac6:	18d3      	adds	r3, r2, r3
 8016ac8:	689b      	ldr	r3, [r3, #8]
 8016aca:	667b      	str	r3, [r7, #100]	; 0x64
  hcint.d32 = USB_OTG_READ_REG32(&hcreg->HCINT);
 8016acc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016ace:	689b      	ldr	r3, [r3, #8]
 8016ad0:	663b      	str	r3, [r7, #96]	; 0x60
  hcintmsk.d32 = USB_OTG_READ_REG32(&hcreg->HCINTMSK);
 8016ad2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016ad4:	68db      	ldr	r3, [r3, #12]
 8016ad6:	65fb      	str	r3, [r7, #92]	; 0x5c
  hcint.d32 = hcint.d32 & hcintmsk.d32;
 8016ad8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016ada:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016adc:	4013      	ands	r3, r2
 8016ade:	663b      	str	r3, [r7, #96]	; 0x60
  
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[num]->HCCHAR);
 8016ae0:	687a      	ldr	r2, [r7, #4]
 8016ae2:	683b      	ldr	r3, [r7, #0]
 8016ae4:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8016ae8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8016aec:	18d3      	adds	r3, r2, r3
 8016aee:	689b      	ldr	r3, [r3, #8]
 8016af0:	681b      	ldr	r3, [r3, #0]
 8016af2:	65bb      	str	r3, [r7, #88]	; 0x58
  
  if (hcint.b.ahberr)
 8016af4:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8016af8:	f003 0304 	and.w	r3, r3, #4
 8016afc:	b2db      	uxtb	r3, r3
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	d022      	beq.n	8016b48 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x98>
  {
    CLEAR_HC_INT(hcreg ,ahberr);
 8016b02:	f04f 0300 	mov.w	r3, #0
 8016b06:	657b      	str	r3, [r7, #84]	; 0x54
 8016b08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016b0a:	f043 0304 	orr.w	r3, r3, #4
 8016b0e:	657b      	str	r3, [r7, #84]	; 0x54
 8016b10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016b12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016b14:	609a      	str	r2, [r3, #8]
    UNMASK_HOST_INT_CHH (num);
 8016b16:	687a      	ldr	r2, [r7, #4]
 8016b18:	683b      	ldr	r3, [r7, #0]
 8016b1a:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8016b1e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8016b22:	18d3      	adds	r3, r2, r3
 8016b24:	689b      	ldr	r3, [r3, #8]
 8016b26:	68db      	ldr	r3, [r3, #12]
 8016b28:	653b      	str	r3, [r7, #80]	; 0x50
 8016b2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016b2c:	f043 0302 	orr.w	r3, r3, #2
 8016b30:	653b      	str	r3, [r7, #80]	; 0x50
 8016b32:	687a      	ldr	r2, [r7, #4]
 8016b34:	683b      	ldr	r3, [r7, #0]
 8016b36:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8016b3a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8016b3e:	18d3      	adds	r3, r2, r3
 8016b40:	689b      	ldr	r3, [r3, #8]
 8016b42:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016b44:	60da      	str	r2, [r3, #12]
 8016b46:	e28c      	b.n	8017062 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x5b2>
  } 
  else if (hcint.b.ack)
 8016b48:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8016b4c:	f003 0320 	and.w	r3, r3, #32
 8016b50:	b2db      	uxtb	r3, r3
 8016b52:	2b00      	cmp	r3, #0
 8016b54:	d00a      	beq.n	8016b6c <USB_OTG_USBH_handle_hc_n_Out_ISR+0xbc>
  {
    CLEAR_HC_INT(hcreg , ack);
 8016b56:	f04f 0300 	mov.w	r3, #0
 8016b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016b5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016b5e:	f043 0320 	orr.w	r3, r3, #32
 8016b62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016b64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016b66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016b68:	609a      	str	r2, [r3, #8]
 8016b6a:	e27a      	b.n	8017062 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x5b2>
  }
  else if (hcint.b.frmovrun)
 8016b6c:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8016b70:	f003 0302 	and.w	r3, r3, #2
 8016b74:	b2db      	uxtb	r3, r3
 8016b76:	2b00      	cmp	r3, #0
 8016b78:	d028      	beq.n	8016bcc <USB_OTG_USBH_handle_hc_n_Out_ISR+0x11c>
  {
    UNMASK_HOST_INT_CHH (num);
 8016b7a:	687a      	ldr	r2, [r7, #4]
 8016b7c:	683b      	ldr	r3, [r7, #0]
 8016b7e:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8016b82:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8016b86:	18d3      	adds	r3, r2, r3
 8016b88:	689b      	ldr	r3, [r3, #8]
 8016b8a:	68db      	ldr	r3, [r3, #12]
 8016b8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8016b8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016b90:	f043 0302 	orr.w	r3, r3, #2
 8016b94:	64bb      	str	r3, [r7, #72]	; 0x48
 8016b96:	687a      	ldr	r2, [r7, #4]
 8016b98:	683b      	ldr	r3, [r7, #0]
 8016b9a:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8016b9e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8016ba2:	18d3      	adds	r3, r2, r3
 8016ba4:	689b      	ldr	r3, [r3, #8]
 8016ba6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016ba8:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 8016baa:	683b      	ldr	r3, [r7, #0]
 8016bac:	b2db      	uxtb	r3, r3
 8016bae:	6878      	ldr	r0, [r7, #4]
 8016bb0:	4619      	mov	r1, r3
 8016bb2:	f7fe fe93 	bl	80158dc <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg ,frmovrun);
 8016bb6:	f04f 0300 	mov.w	r3, #0
 8016bba:	647b      	str	r3, [r7, #68]	; 0x44
 8016bbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016bbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8016bc2:	647b      	str	r3, [r7, #68]	; 0x44
 8016bc4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016bc6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016bc8:	609a      	str	r2, [r3, #8]
 8016bca:	e24a      	b.n	8017062 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x5b2>
  }
  else if (hcint.b.xfercompl)
 8016bcc:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8016bd0:	f003 0301 	and.w	r3, r3, #1
 8016bd4:	b2db      	uxtb	r3, r3
 8016bd6:	2b00      	cmp	r3, #0
 8016bd8:	d03a      	beq.n	8016c50 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x1a0>
  {
    pdev->host.ErrCnt[num] = 0;
 8016bda:	687a      	ldr	r2, [r7, #4]
 8016bdc:	683b      	ldr	r3, [r7, #0]
 8016bde:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8016be2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8016be6:	18d3      	adds	r3, r2, r3
 8016be8:	f04f 0200 	mov.w	r2, #0
 8016bec:	609a      	str	r2, [r3, #8]
    UNMASK_HOST_INT_CHH (num);
 8016bee:	687a      	ldr	r2, [r7, #4]
 8016bf0:	683b      	ldr	r3, [r7, #0]
 8016bf2:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8016bf6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8016bfa:	18d3      	adds	r3, r2, r3
 8016bfc:	689b      	ldr	r3, [r3, #8]
 8016bfe:	68db      	ldr	r3, [r3, #12]
 8016c00:	643b      	str	r3, [r7, #64]	; 0x40
 8016c02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016c04:	f043 0302 	orr.w	r3, r3, #2
 8016c08:	643b      	str	r3, [r7, #64]	; 0x40
 8016c0a:	687a      	ldr	r2, [r7, #4]
 8016c0c:	683b      	ldr	r3, [r7, #0]
 8016c0e:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8016c12:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8016c16:	18d3      	adds	r3, r2, r3
 8016c18:	689b      	ldr	r3, [r3, #8]
 8016c1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016c1c:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 8016c1e:	683b      	ldr	r3, [r7, #0]
 8016c20:	b2db      	uxtb	r3, r3
 8016c22:	6878      	ldr	r0, [r7, #4]
 8016c24:	4619      	mov	r1, r3
 8016c26:	f7fe fe59 	bl	80158dc <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg , xfercompl);
 8016c2a:	f04f 0300 	mov.w	r3, #0
 8016c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016c30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016c32:	f043 0301 	orr.w	r3, r3, #1
 8016c36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016c38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016c3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016c3c:	609a      	str	r2, [r3, #8]
    pdev->host.HC_Status[num] = HC_XFRC;            
 8016c3e:	687a      	ldr	r2, [r7, #4]
 8016c40:	683b      	ldr	r3, [r7, #0]
 8016c42:	18d3      	adds	r3, r2, r3
 8016c44:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8016c48:	f04f 0201 	mov.w	r2, #1
 8016c4c:	721a      	strb	r2, [r3, #8]
 8016c4e:	e208      	b.n	8017062 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x5b2>
  }
  
  else if (hcint.b.stall)
 8016c50:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8016c54:	f003 0308 	and.w	r3, r3, #8
 8016c58:	b2db      	uxtb	r3, r3
 8016c5a:	2b00      	cmp	r3, #0
 8016c5c:	d030      	beq.n	8016cc0 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x210>
  {
    CLEAR_HC_INT(hcreg , stall);
 8016c5e:	f04f 0300 	mov.w	r3, #0
 8016c62:	63bb      	str	r3, [r7, #56]	; 0x38
 8016c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c66:	f043 0308 	orr.w	r3, r3, #8
 8016c6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8016c6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016c6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016c70:	609a      	str	r2, [r3, #8]
    UNMASK_HOST_INT_CHH (num);
 8016c72:	687a      	ldr	r2, [r7, #4]
 8016c74:	683b      	ldr	r3, [r7, #0]
 8016c76:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8016c7a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8016c7e:	18d3      	adds	r3, r2, r3
 8016c80:	689b      	ldr	r3, [r3, #8]
 8016c82:	68db      	ldr	r3, [r3, #12]
 8016c84:	637b      	str	r3, [r7, #52]	; 0x34
 8016c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016c88:	f043 0302 	orr.w	r3, r3, #2
 8016c8c:	637b      	str	r3, [r7, #52]	; 0x34
 8016c8e:	687a      	ldr	r2, [r7, #4]
 8016c90:	683b      	ldr	r3, [r7, #0]
 8016c92:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8016c96:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8016c9a:	18d3      	adds	r3, r2, r3
 8016c9c:	689b      	ldr	r3, [r3, #8]
 8016c9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016ca0:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 8016ca2:	683b      	ldr	r3, [r7, #0]
 8016ca4:	b2db      	uxtb	r3, r3
 8016ca6:	6878      	ldr	r0, [r7, #4]
 8016ca8:	4619      	mov	r1, r3
 8016caa:	f7fe fe17 	bl	80158dc <USB_OTG_HC_Halt>
    pdev->host.HC_Status[num] = HC_STALL;      
 8016cae:	687a      	ldr	r2, [r7, #4]
 8016cb0:	683b      	ldr	r3, [r7, #0]
 8016cb2:	18d3      	adds	r3, r2, r3
 8016cb4:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8016cb8:	f04f 0205 	mov.w	r2, #5
 8016cbc:	721a      	strb	r2, [r3, #8]
 8016cbe:	e1d0      	b.n	8017062 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x5b2>
  }
  
  else if (hcint.b.nak)
 8016cc0:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8016cc4:	f003 0310 	and.w	r3, r3, #16
 8016cc8:	b2db      	uxtb	r3, r3
 8016cca:	2b00      	cmp	r3, #0
 8016ccc:	d03a      	beq.n	8016d44 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x294>
  {
    pdev->host.ErrCnt[num] = 0;
 8016cce:	687a      	ldr	r2, [r7, #4]
 8016cd0:	683b      	ldr	r3, [r7, #0]
 8016cd2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8016cd6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8016cda:	18d3      	adds	r3, r2, r3
 8016cdc:	f04f 0200 	mov.w	r2, #0
 8016ce0:	609a      	str	r2, [r3, #8]
    UNMASK_HOST_INT_CHH (num);
 8016ce2:	687a      	ldr	r2, [r7, #4]
 8016ce4:	683b      	ldr	r3, [r7, #0]
 8016ce6:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8016cea:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8016cee:	18d3      	adds	r3, r2, r3
 8016cf0:	689b      	ldr	r3, [r3, #8]
 8016cf2:	68db      	ldr	r3, [r3, #12]
 8016cf4:	633b      	str	r3, [r7, #48]	; 0x30
 8016cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cf8:	f043 0302 	orr.w	r3, r3, #2
 8016cfc:	633b      	str	r3, [r7, #48]	; 0x30
 8016cfe:	687a      	ldr	r2, [r7, #4]
 8016d00:	683b      	ldr	r3, [r7, #0]
 8016d02:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8016d06:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8016d0a:	18d3      	adds	r3, r2, r3
 8016d0c:	689b      	ldr	r3, [r3, #8]
 8016d0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016d10:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 8016d12:	683b      	ldr	r3, [r7, #0]
 8016d14:	b2db      	uxtb	r3, r3
 8016d16:	6878      	ldr	r0, [r7, #4]
 8016d18:	4619      	mov	r1, r3
 8016d1a:	f7fe fddf 	bl	80158dc <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg , nak);
 8016d1e:	f04f 0300 	mov.w	r3, #0
 8016d22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d26:	f043 0310 	orr.w	r3, r3, #16
 8016d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016d2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016d2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016d30:	609a      	str	r2, [r3, #8]
    pdev->host.HC_Status[num] = HC_NAK;      
 8016d32:	687a      	ldr	r2, [r7, #4]
 8016d34:	683b      	ldr	r3, [r7, #0]
 8016d36:	18d3      	adds	r3, r2, r3
 8016d38:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8016d3c:	f04f 0203 	mov.w	r2, #3
 8016d40:	721a      	strb	r2, [r3, #8]
 8016d42:	e18e      	b.n	8017062 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x5b2>
  }
  
  else if (hcint.b.xacterr)
 8016d44:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8016d48:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8016d4c:	b2db      	uxtb	r3, r3
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	d042      	beq.n	8016dd8 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x328>
  {
    UNMASK_HOST_INT_CHH (num);
 8016d52:	687a      	ldr	r2, [r7, #4]
 8016d54:	683b      	ldr	r3, [r7, #0]
 8016d56:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8016d5a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8016d5e:	18d3      	adds	r3, r2, r3
 8016d60:	689b      	ldr	r3, [r3, #8]
 8016d62:	68db      	ldr	r3, [r3, #12]
 8016d64:	62bb      	str	r3, [r7, #40]	; 0x28
 8016d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d68:	f043 0302 	orr.w	r3, r3, #2
 8016d6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8016d6e:	687a      	ldr	r2, [r7, #4]
 8016d70:	683b      	ldr	r3, [r7, #0]
 8016d72:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8016d76:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8016d7a:	18d3      	adds	r3, r2, r3
 8016d7c:	689b      	ldr	r3, [r3, #8]
 8016d7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016d80:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 8016d82:	683b      	ldr	r3, [r7, #0]
 8016d84:	b2db      	uxtb	r3, r3
 8016d86:	6878      	ldr	r0, [r7, #4]
 8016d88:	4619      	mov	r1, r3
 8016d8a:	f7fe fda7 	bl	80158dc <USB_OTG_HC_Halt>
    pdev->host.ErrCnt[num] ++;
 8016d8e:	687a      	ldr	r2, [r7, #4]
 8016d90:	683b      	ldr	r3, [r7, #0]
 8016d92:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8016d96:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8016d9a:	18d3      	adds	r3, r2, r3
 8016d9c:	689b      	ldr	r3, [r3, #8]
 8016d9e:	f103 0201 	add.w	r2, r3, #1
 8016da2:	6879      	ldr	r1, [r7, #4]
 8016da4:	683b      	ldr	r3, [r7, #0]
 8016da6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8016daa:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8016dae:	18cb      	adds	r3, r1, r3
 8016db0:	609a      	str	r2, [r3, #8]
    pdev->host.HC_Status[num] = HC_XACTERR;
 8016db2:	687a      	ldr	r2, [r7, #4]
 8016db4:	683b      	ldr	r3, [r7, #0]
 8016db6:	18d3      	adds	r3, r2, r3
 8016db8:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8016dbc:	f04f 0206 	mov.w	r2, #6
 8016dc0:	721a      	strb	r2, [r3, #8]
    CLEAR_HC_INT(hcreg , xacterr);
 8016dc2:	f04f 0300 	mov.w	r3, #0
 8016dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8016dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016dce:	627b      	str	r3, [r7, #36]	; 0x24
 8016dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016dd2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016dd4:	609a      	str	r2, [r3, #8]
 8016dd6:	e144      	b.n	8017062 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x5b2>
  }
  else if (hcint.b.nyet)
 8016dd8:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8016ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016de0:	b2db      	uxtb	r3, r3
 8016de2:	2b00      	cmp	r3, #0
 8016de4:	d03a      	beq.n	8016e5c <USB_OTG_USBH_handle_hc_n_Out_ISR+0x3ac>
  {
    pdev->host.ErrCnt[num] = 0;
 8016de6:	687a      	ldr	r2, [r7, #4]
 8016de8:	683b      	ldr	r3, [r7, #0]
 8016dea:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8016dee:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8016df2:	18d3      	adds	r3, r2, r3
 8016df4:	f04f 0200 	mov.w	r2, #0
 8016df8:	609a      	str	r2, [r3, #8]
    UNMASK_HOST_INT_CHH (num);
 8016dfa:	687a      	ldr	r2, [r7, #4]
 8016dfc:	683b      	ldr	r3, [r7, #0]
 8016dfe:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8016e02:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8016e06:	18d3      	adds	r3, r2, r3
 8016e08:	689b      	ldr	r3, [r3, #8]
 8016e0a:	68db      	ldr	r3, [r3, #12]
 8016e0c:	623b      	str	r3, [r7, #32]
 8016e0e:	6a3b      	ldr	r3, [r7, #32]
 8016e10:	f043 0302 	orr.w	r3, r3, #2
 8016e14:	623b      	str	r3, [r7, #32]
 8016e16:	687a      	ldr	r2, [r7, #4]
 8016e18:	683b      	ldr	r3, [r7, #0]
 8016e1a:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8016e1e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8016e22:	18d3      	adds	r3, r2, r3
 8016e24:	689b      	ldr	r3, [r3, #8]
 8016e26:	6a3a      	ldr	r2, [r7, #32]
 8016e28:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 8016e2a:	683b      	ldr	r3, [r7, #0]
 8016e2c:	b2db      	uxtb	r3, r3
 8016e2e:	6878      	ldr	r0, [r7, #4]
 8016e30:	4619      	mov	r1, r3
 8016e32:	f7fe fd53 	bl	80158dc <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg , nyet);
 8016e36:	f04f 0300 	mov.w	r3, #0
 8016e3a:	61fb      	str	r3, [r7, #28]
 8016e3c:	69fb      	ldr	r3, [r7, #28]
 8016e3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016e42:	61fb      	str	r3, [r7, #28]
 8016e44:	69fa      	ldr	r2, [r7, #28]
 8016e46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016e48:	609a      	str	r2, [r3, #8]
    pdev->host.HC_Status[num] = HC_NYET;    
 8016e4a:	687a      	ldr	r2, [r7, #4]
 8016e4c:	683b      	ldr	r3, [r7, #0]
 8016e4e:	18d3      	adds	r3, r2, r3
 8016e50:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8016e54:	f04f 0204 	mov.w	r2, #4
 8016e58:	721a      	strb	r2, [r3, #8]
 8016e5a:	e102      	b.n	8017062 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x5b2>
  }
  else if (hcint.b.datatglerr)
 8016e5c:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8016e60:	f003 0304 	and.w	r3, r3, #4
 8016e64:	b2db      	uxtb	r3, r3
 8016e66:	2b00      	cmp	r3, #0
 8016e68:	d03a      	beq.n	8016ee0 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x430>
  {
    
    UNMASK_HOST_INT_CHH (num);
 8016e6a:	687a      	ldr	r2, [r7, #4]
 8016e6c:	683b      	ldr	r3, [r7, #0]
 8016e6e:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8016e72:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8016e76:	18d3      	adds	r3, r2, r3
 8016e78:	689b      	ldr	r3, [r3, #8]
 8016e7a:	68db      	ldr	r3, [r3, #12]
 8016e7c:	61bb      	str	r3, [r7, #24]
 8016e7e:	69bb      	ldr	r3, [r7, #24]
 8016e80:	f043 0302 	orr.w	r3, r3, #2
 8016e84:	61bb      	str	r3, [r7, #24]
 8016e86:	687a      	ldr	r2, [r7, #4]
 8016e88:	683b      	ldr	r3, [r7, #0]
 8016e8a:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8016e8e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8016e92:	18d3      	adds	r3, r2, r3
 8016e94:	689b      	ldr	r3, [r3, #8]
 8016e96:	69ba      	ldr	r2, [r7, #24]
 8016e98:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 8016e9a:	683b      	ldr	r3, [r7, #0]
 8016e9c:	b2db      	uxtb	r3, r3
 8016e9e:	6878      	ldr	r0, [r7, #4]
 8016ea0:	4619      	mov	r1, r3
 8016ea2:	f7fe fd1b 	bl	80158dc <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg , nak);   
 8016ea6:	f04f 0300 	mov.w	r3, #0
 8016eaa:	617b      	str	r3, [r7, #20]
 8016eac:	697b      	ldr	r3, [r7, #20]
 8016eae:	f043 0310 	orr.w	r3, r3, #16
 8016eb2:	617b      	str	r3, [r7, #20]
 8016eb4:	697a      	ldr	r2, [r7, #20]
 8016eb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016eb8:	609a      	str	r2, [r3, #8]
    pdev->host.HC_Status[num] = HC_DATATGLERR;
 8016eba:	687a      	ldr	r2, [r7, #4]
 8016ebc:	683b      	ldr	r3, [r7, #0]
 8016ebe:	18d3      	adds	r3, r2, r3
 8016ec0:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8016ec4:	f04f 0208 	mov.w	r2, #8
 8016ec8:	721a      	strb	r2, [r3, #8]
    
    CLEAR_HC_INT(hcreg , datatglerr);
 8016eca:	f04f 0300 	mov.w	r3, #0
 8016ece:	613b      	str	r3, [r7, #16]
 8016ed0:	693b      	ldr	r3, [r7, #16]
 8016ed2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8016ed6:	613b      	str	r3, [r7, #16]
 8016ed8:	693a      	ldr	r2, [r7, #16]
 8016eda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016edc:	609a      	str	r2, [r3, #8]
 8016ede:	e0c0      	b.n	8017062 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x5b2>
  }  
  else if (hcint.b.chhltd)
 8016ee0:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8016ee4:	f003 0302 	and.w	r3, r3, #2
 8016ee8:	b2db      	uxtb	r3, r3
 8016eea:	2b00      	cmp	r3, #0
 8016eec:	f000 80b9 	beq.w	8017062 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x5b2>
  {
    MASK_HOST_INT_CHH (num);
 8016ef0:	687a      	ldr	r2, [r7, #4]
 8016ef2:	683b      	ldr	r3, [r7, #0]
 8016ef4:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8016ef8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8016efc:	18d3      	adds	r3, r2, r3
 8016efe:	689b      	ldr	r3, [r3, #8]
 8016f00:	68db      	ldr	r3, [r3, #12]
 8016f02:	60fb      	str	r3, [r7, #12]
 8016f04:	68fb      	ldr	r3, [r7, #12]
 8016f06:	f36f 0341 	bfc	r3, #1, #1
 8016f0a:	60fb      	str	r3, [r7, #12]
 8016f0c:	687a      	ldr	r2, [r7, #4]
 8016f0e:	683b      	ldr	r3, [r7, #0]
 8016f10:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8016f14:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8016f18:	18d3      	adds	r3, r2, r3
 8016f1a:	689b      	ldr	r3, [r3, #8]
 8016f1c:	68fa      	ldr	r2, [r7, #12]
 8016f1e:	60da      	str	r2, [r3, #12]
    
    if(pdev->host.HC_Status[num] == HC_XFRC)
 8016f20:	687a      	ldr	r2, [r7, #4]
 8016f22:	683b      	ldr	r3, [r7, #0]
 8016f24:	18d3      	adds	r3, r2, r3
 8016f26:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8016f2a:	7a1b      	ldrb	r3, [r3, #8]
 8016f2c:	b2db      	uxtb	r3, r3
 8016f2e:	2b01      	cmp	r3, #1
 8016f30:	d122      	bne.n	8016f78 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x4c8>
    {
      pdev->host.URB_State[num] = URB_DONE;  
 8016f32:	687a      	ldr	r2, [r7, #4]
 8016f34:	683b      	ldr	r3, [r7, #0]
 8016f36:	18d3      	adds	r3, r2, r3
 8016f38:	f603 0378 	addw	r3, r3, #2168	; 0x878
 8016f3c:	f04f 0201 	mov.w	r2, #1
 8016f40:	71da      	strb	r2, [r3, #7]
      
      if (hcchar.b.eptype == EP_TYPE_BULK)
 8016f42:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8016f46:	f003 030c 	and.w	r3, r3, #12
 8016f4a:	b2db      	uxtb	r3, r3
 8016f4c:	2b08      	cmp	r3, #8
 8016f4e:	d17e      	bne.n	801704e <USB_OTG_USBH_handle_hc_n_Out_ISR+0x59e>
      {
        pdev->host.hc[num].toggle_out ^= 1; 
 8016f50:	687a      	ldr	r2, [r7, #4]
 8016f52:	683b      	ldr	r3, [r7, #0]
 8016f54:	f103 0345 	add.w	r3, r3, #69	; 0x45
 8016f58:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8016f5c:	18d3      	adds	r3, r2, r3
 8016f5e:	7a5b      	ldrb	r3, [r3, #9]
 8016f60:	f083 0301 	eor.w	r3, r3, #1
 8016f64:	b2da      	uxtb	r2, r3
 8016f66:	6879      	ldr	r1, [r7, #4]
 8016f68:	683b      	ldr	r3, [r7, #0]
 8016f6a:	f103 0345 	add.w	r3, r3, #69	; 0x45
 8016f6e:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8016f72:	18cb      	adds	r3, r1, r3
 8016f74:	725a      	strb	r2, [r3, #9]
 8016f76:	e06a      	b.n	801704e <USB_OTG_USBH_handle_hc_n_Out_ISR+0x59e>
      }
    }
    else if(pdev->host.HC_Status[num] == HC_NAK)
 8016f78:	687a      	ldr	r2, [r7, #4]
 8016f7a:	683b      	ldr	r3, [r7, #0]
 8016f7c:	18d3      	adds	r3, r2, r3
 8016f7e:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8016f82:	7a1b      	ldrb	r3, [r3, #8]
 8016f84:	b2db      	uxtb	r3, r3
 8016f86:	2b03      	cmp	r3, #3
 8016f88:	d108      	bne.n	8016f9c <USB_OTG_USBH_handle_hc_n_Out_ISR+0x4ec>
    {
      pdev->host.URB_State[num] = URB_NOTREADY;      
 8016f8a:	687a      	ldr	r2, [r7, #4]
 8016f8c:	683b      	ldr	r3, [r7, #0]
 8016f8e:	18d3      	adds	r3, r2, r3
 8016f90:	f603 0378 	addw	r3, r3, #2168	; 0x878
 8016f94:	f04f 0202 	mov.w	r2, #2
 8016f98:	71da      	strb	r2, [r3, #7]
 8016f9a:	e058      	b.n	801704e <USB_OTG_USBH_handle_hc_n_Out_ISR+0x59e>
    }    
    else if(pdev->host.HC_Status[num] == HC_NYET)
 8016f9c:	687a      	ldr	r2, [r7, #4]
 8016f9e:	683b      	ldr	r3, [r7, #0]
 8016fa0:	18d3      	adds	r3, r2, r3
 8016fa2:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8016fa6:	7a1b      	ldrb	r3, [r3, #8]
 8016fa8:	b2db      	uxtb	r3, r3
 8016faa:	2b04      	cmp	r3, #4
 8016fac:	d118      	bne.n	8016fe0 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x530>
    {
      if(pdev->host.hc[num].do_ping == 1)
 8016fae:	687a      	ldr	r2, [r7, #4]
 8016fb0:	683b      	ldr	r3, [r7, #0]
 8016fb2:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8016fb6:	18d3      	adds	r3, r2, r3
 8016fb8:	f603 0388 	addw	r3, r3, #2184	; 0x888
 8016fbc:	7b1b      	ldrb	r3, [r3, #12]
 8016fbe:	2b01      	cmp	r3, #1
 8016fc0:	d105      	bne.n	8016fce <USB_OTG_USBH_handle_hc_n_Out_ISR+0x51e>
      {
        USB_OTG_HC_DoPing(pdev, num);
 8016fc2:	683b      	ldr	r3, [r7, #0]
 8016fc4:	b2db      	uxtb	r3, r3
 8016fc6:	6878      	ldr	r0, [r7, #4]
 8016fc8:	4619      	mov	r1, r3
 8016fca:	f7fe fca4 	bl	8015916 <USB_OTG_HC_DoPing>
      }
      pdev->host.URB_State[num] = URB_NOTREADY;      
 8016fce:	687a      	ldr	r2, [r7, #4]
 8016fd0:	683b      	ldr	r3, [r7, #0]
 8016fd2:	18d3      	adds	r3, r2, r3
 8016fd4:	f603 0378 	addw	r3, r3, #2168	; 0x878
 8016fd8:	f04f 0202 	mov.w	r2, #2
 8016fdc:	71da      	strb	r2, [r3, #7]
 8016fde:	e036      	b.n	801704e <USB_OTG_USBH_handle_hc_n_Out_ISR+0x59e>
    }      
    else if(pdev->host.HC_Status[num] == HC_STALL)
 8016fe0:	687a      	ldr	r2, [r7, #4]
 8016fe2:	683b      	ldr	r3, [r7, #0]
 8016fe4:	18d3      	adds	r3, r2, r3
 8016fe6:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8016fea:	7a1b      	ldrb	r3, [r3, #8]
 8016fec:	b2db      	uxtb	r3, r3
 8016fee:	2b05      	cmp	r3, #5
 8016ff0:	d108      	bne.n	8017004 <USB_OTG_USBH_handle_hc_n_Out_ISR+0x554>
    {
      pdev->host.URB_State[num] = URB_STALL;      
 8016ff2:	687a      	ldr	r2, [r7, #4]
 8016ff4:	683b      	ldr	r3, [r7, #0]
 8016ff6:	18d3      	adds	r3, r2, r3
 8016ff8:	f603 0378 	addw	r3, r3, #2168	; 0x878
 8016ffc:	f04f 0204 	mov.w	r2, #4
 8017000:	71da      	strb	r2, [r3, #7]
 8017002:	e024      	b.n	801704e <USB_OTG_USBH_handle_hc_n_Out_ISR+0x59e>
    }  
    else if(pdev->host.HC_Status[num] == HC_XACTERR)
 8017004:	687a      	ldr	r2, [r7, #4]
 8017006:	683b      	ldr	r3, [r7, #0]
 8017008:	18d3      	adds	r3, r2, r3
 801700a:	f603 0368 	addw	r3, r3, #2152	; 0x868
 801700e:	7a1b      	ldrb	r3, [r3, #8]
 8017010:	b2db      	uxtb	r3, r3
 8017012:	2b06      	cmp	r3, #6
 8017014:	d11b      	bne.n	801704e <USB_OTG_USBH_handle_hc_n_Out_ISR+0x59e>
    {
      if (pdev->host.ErrCnt[num] == 3)
 8017016:	687a      	ldr	r2, [r7, #4]
 8017018:	683b      	ldr	r3, [r7, #0]
 801701a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 801701e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017022:	18d3      	adds	r3, r2, r3
 8017024:	689b      	ldr	r3, [r3, #8]
 8017026:	2b03      	cmp	r3, #3
 8017028:	d111      	bne.n	801704e <USB_OTG_USBH_handle_hc_n_Out_ISR+0x59e>
      {
        pdev->host.URB_State[num] = URB_ERROR;  
 801702a:	687a      	ldr	r2, [r7, #4]
 801702c:	683b      	ldr	r3, [r7, #0]
 801702e:	18d3      	adds	r3, r2, r3
 8017030:	f603 0378 	addw	r3, r3, #2168	; 0x878
 8017034:	f04f 0203 	mov.w	r2, #3
 8017038:	71da      	strb	r2, [r3, #7]
        pdev->host.ErrCnt[num] = 0;
 801703a:	687a      	ldr	r2, [r7, #4]
 801703c:	683b      	ldr	r3, [r7, #0]
 801703e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8017042:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017046:	18d3      	adds	r3, r2, r3
 8017048:	f04f 0200 	mov.w	r2, #0
 801704c:	609a      	str	r2, [r3, #8]
      }
    }
    CLEAR_HC_INT(hcreg , chhltd);    
 801704e:	f04f 0300 	mov.w	r3, #0
 8017052:	60bb      	str	r3, [r7, #8]
 8017054:	68bb      	ldr	r3, [r7, #8]
 8017056:	f043 0302 	orr.w	r3, r3, #2
 801705a:	60bb      	str	r3, [r7, #8]
 801705c:	68ba      	ldr	r2, [r7, #8]
 801705e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017060:	609a      	str	r2, [r3, #8]
  }
  
  
  return 1;
 8017062:	f04f 0301 	mov.w	r3, #1
}
 8017066:	4618      	mov	r0, r3
 8017068:	f107 0768 	add.w	r7, r7, #104	; 0x68
 801706c:	46bd      	mov	sp, r7
 801706e:	bd80      	pop	{r7, pc}

08017070 <USB_OTG_USBH_handle_hc_n_In_ISR>:
* @param  pdev: Selected device
* @param  hc_num: Channel number
* @retval status 
*/
uint32_t USB_OTG_USBH_handle_hc_n_In_ISR (USB_OTG_CORE_HANDLE *pdev , uint32_t num)
{
 8017070:	b580      	push	{r7, lr}
 8017072:	b09c      	sub	sp, #112	; 0x70
 8017074:	af00      	add	r7, sp, #0
 8017076:	6078      	str	r0, [r7, #4]
 8017078:	6039      	str	r1, [r7, #0]
  USB_OTG_HCCHAR_TypeDef     hcchar; 
  USB_OTG_HCTSIZn_TypeDef  hctsiz;
  USB_OTG_HC_REGS *hcreg;
  
  
  hcreg = pdev->regs.HC_REGS[num];
 801707a:	687a      	ldr	r2, [r7, #4]
 801707c:	683b      	ldr	r3, [r7, #0]
 801707e:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8017082:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017086:	18d3      	adds	r3, r2, r3
 8017088:	689b      	ldr	r3, [r3, #8]
 801708a:	66fb      	str	r3, [r7, #108]	; 0x6c
  hcint.d32 = USB_OTG_READ_REG32(&hcreg->HCINT);
 801708c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801708e:	689b      	ldr	r3, [r3, #8]
 8017090:	66bb      	str	r3, [r7, #104]	; 0x68
  hcintmsk.d32 = USB_OTG_READ_REG32(&hcreg->HCINTMSK);
 8017092:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017094:	68db      	ldr	r3, [r3, #12]
 8017096:	667b      	str	r3, [r7, #100]	; 0x64
  hcint.d32 = hcint.d32 & hcintmsk.d32;
 8017098:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801709a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801709c:	4013      	ands	r3, r2
 801709e:	66bb      	str	r3, [r7, #104]	; 0x68
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[num]->HCCHAR);
 80170a0:	687a      	ldr	r2, [r7, #4]
 80170a2:	683b      	ldr	r3, [r7, #0]
 80170a4:	f103 0322 	add.w	r3, r3, #34	; 0x22
 80170a8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80170ac:	18d3      	adds	r3, r2, r3
 80170ae:	689b      	ldr	r3, [r3, #8]
 80170b0:	681b      	ldr	r3, [r3, #0]
 80170b2:	663b      	str	r3, [r7, #96]	; 0x60
  hcintmsk.d32 = 0;
 80170b4:	f04f 0300 	mov.w	r3, #0
 80170b8:	667b      	str	r3, [r7, #100]	; 0x64
  
  
  if (hcint.b.ahberr)
 80170ba:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80170be:	f003 0304 	and.w	r3, r3, #4
 80170c2:	b2db      	uxtb	r3, r3
 80170c4:	2b00      	cmp	r3, #0
 80170c6:	d022      	beq.n	801710e <USB_OTG_USBH_handle_hc_n_In_ISR+0x9e>
  {
    CLEAR_HC_INT(hcreg ,ahberr);
 80170c8:	f04f 0300 	mov.w	r3, #0
 80170cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80170ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80170d0:	f043 0304 	orr.w	r3, r3, #4
 80170d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80170d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80170d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80170da:	609a      	str	r2, [r3, #8]
    UNMASK_HOST_INT_CHH (num);
 80170dc:	687a      	ldr	r2, [r7, #4]
 80170de:	683b      	ldr	r3, [r7, #0]
 80170e0:	f103 0322 	add.w	r3, r3, #34	; 0x22
 80170e4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80170e8:	18d3      	adds	r3, r2, r3
 80170ea:	689b      	ldr	r3, [r3, #8]
 80170ec:	68db      	ldr	r3, [r3, #12]
 80170ee:	657b      	str	r3, [r7, #84]	; 0x54
 80170f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80170f2:	f043 0302 	orr.w	r3, r3, #2
 80170f6:	657b      	str	r3, [r7, #84]	; 0x54
 80170f8:	687a      	ldr	r2, [r7, #4]
 80170fa:	683b      	ldr	r3, [r7, #0]
 80170fc:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8017100:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017104:	18d3      	adds	r3, r2, r3
 8017106:	689b      	ldr	r3, [r3, #8]
 8017108:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801710a:	60da      	str	r2, [r3, #12]
 801710c:	e098      	b.n	8017240 <USB_OTG_USBH_handle_hc_n_In_ISR+0x1d0>
  }  
  else if (hcint.b.ack)
 801710e:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8017112:	f003 0320 	and.w	r3, r3, #32
 8017116:	b2db      	uxtb	r3, r3
 8017118:	2b00      	cmp	r3, #0
 801711a:	d00a      	beq.n	8017132 <USB_OTG_USBH_handle_hc_n_In_ISR+0xc2>
  {
    CLEAR_HC_INT(hcreg ,ack);
 801711c:	f04f 0300 	mov.w	r3, #0
 8017120:	653b      	str	r3, [r7, #80]	; 0x50
 8017122:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017124:	f043 0320 	orr.w	r3, r3, #32
 8017128:	653b      	str	r3, [r7, #80]	; 0x50
 801712a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801712c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801712e:	609a      	str	r2, [r3, #8]
 8017130:	e086      	b.n	8017240 <USB_OTG_USBH_handle_hc_n_In_ISR+0x1d0>
  }
  
  else if (hcint.b.stall)  
 8017132:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8017136:	f003 0308 	and.w	r3, r3, #8
 801713a:	b2db      	uxtb	r3, r3
 801713c:	2b00      	cmp	r3, #0
 801713e:	d03e      	beq.n	80171be <USB_OTG_USBH_handle_hc_n_In_ISR+0x14e>
  {
    UNMASK_HOST_INT_CHH (num);
 8017140:	687a      	ldr	r2, [r7, #4]
 8017142:	683b      	ldr	r3, [r7, #0]
 8017144:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8017148:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801714c:	18d3      	adds	r3, r2, r3
 801714e:	689b      	ldr	r3, [r3, #8]
 8017150:	68db      	ldr	r3, [r3, #12]
 8017152:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017154:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017156:	f043 0302 	orr.w	r3, r3, #2
 801715a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801715c:	687a      	ldr	r2, [r7, #4]
 801715e:	683b      	ldr	r3, [r7, #0]
 8017160:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8017164:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017168:	18d3      	adds	r3, r2, r3
 801716a:	689b      	ldr	r3, [r3, #8]
 801716c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801716e:	60da      	str	r2, [r3, #12]
    pdev->host.HC_Status[num] = HC_STALL; 
 8017170:	687a      	ldr	r2, [r7, #4]
 8017172:	683b      	ldr	r3, [r7, #0]
 8017174:	18d3      	adds	r3, r2, r3
 8017176:	f603 0368 	addw	r3, r3, #2152	; 0x868
 801717a:	f04f 0205 	mov.w	r2, #5
 801717e:	721a      	strb	r2, [r3, #8]
    CLEAR_HC_INT(hcreg , nak);   /* Clear the NAK Condition */
 8017180:	f04f 0300 	mov.w	r3, #0
 8017184:	64bb      	str	r3, [r7, #72]	; 0x48
 8017186:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017188:	f043 0310 	orr.w	r3, r3, #16
 801718c:	64bb      	str	r3, [r7, #72]	; 0x48
 801718e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017190:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017192:	609a      	str	r2, [r3, #8]
    CLEAR_HC_INT(hcreg , stall); /* Clear the STALL Condition */
 8017194:	f04f 0300 	mov.w	r3, #0
 8017198:	647b      	str	r3, [r7, #68]	; 0x44
 801719a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801719c:	f043 0308 	orr.w	r3, r3, #8
 80171a0:	647b      	str	r3, [r7, #68]	; 0x44
 80171a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80171a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80171a6:	609a      	str	r2, [r3, #8]
    hcint.b.nak = 0;           /* NOTE: When there is a 'stall', reset also nak, 
 80171a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80171aa:	f36f 1304 	bfc	r3, #4, #1
 80171ae:	66bb      	str	r3, [r7, #104]	; 0x68
                                  else, the pdev->host.HC_Status = HC_STALL
    will be overwritten by 'nak' in code below */
    USB_OTG_HC_Halt(pdev, num);    
 80171b0:	683b      	ldr	r3, [r7, #0]
 80171b2:	b2db      	uxtb	r3, r3
 80171b4:	6878      	ldr	r0, [r7, #4]
 80171b6:	4619      	mov	r1, r3
 80171b8:	f7fe fb90 	bl	80158dc <USB_OTG_HC_Halt>
 80171bc:	e040      	b.n	8017240 <USB_OTG_USBH_handle_hc_n_In_ISR+0x1d0>
  }
  else if (hcint.b.datatglerr)
 80171be:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 80171c2:	f003 0304 	and.w	r3, r3, #4
 80171c6:	b2db      	uxtb	r3, r3
 80171c8:	2b00      	cmp	r3, #0
 80171ca:	d039      	beq.n	8017240 <USB_OTG_USBH_handle_hc_n_In_ISR+0x1d0>
  {
    
    UNMASK_HOST_INT_CHH (num);
 80171cc:	687a      	ldr	r2, [r7, #4]
 80171ce:	683b      	ldr	r3, [r7, #0]
 80171d0:	f103 0322 	add.w	r3, r3, #34	; 0x22
 80171d4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80171d8:	18d3      	adds	r3, r2, r3
 80171da:	689b      	ldr	r3, [r3, #8]
 80171dc:	68db      	ldr	r3, [r3, #12]
 80171de:	643b      	str	r3, [r7, #64]	; 0x40
 80171e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80171e2:	f043 0302 	orr.w	r3, r3, #2
 80171e6:	643b      	str	r3, [r7, #64]	; 0x40
 80171e8:	687a      	ldr	r2, [r7, #4]
 80171ea:	683b      	ldr	r3, [r7, #0]
 80171ec:	f103 0322 	add.w	r3, r3, #34	; 0x22
 80171f0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80171f4:	18d3      	adds	r3, r2, r3
 80171f6:	689b      	ldr	r3, [r3, #8]
 80171f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80171fa:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 80171fc:	683b      	ldr	r3, [r7, #0]
 80171fe:	b2db      	uxtb	r3, r3
 8017200:	6878      	ldr	r0, [r7, #4]
 8017202:	4619      	mov	r1, r3
 8017204:	f7fe fb6a 	bl	80158dc <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg , nak);   
 8017208:	f04f 0300 	mov.w	r3, #0
 801720c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801720e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017210:	f043 0310 	orr.w	r3, r3, #16
 8017214:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017216:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017218:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801721a:	609a      	str	r2, [r3, #8]
    pdev->host.HC_Status[num] = HC_DATATGLERR; 
 801721c:	687a      	ldr	r2, [r7, #4]
 801721e:	683b      	ldr	r3, [r7, #0]
 8017220:	18d3      	adds	r3, r2, r3
 8017222:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8017226:	f04f 0208 	mov.w	r2, #8
 801722a:	721a      	strb	r2, [r3, #8]
    CLEAR_HC_INT(hcreg , datatglerr);
 801722c:	f04f 0300 	mov.w	r3, #0
 8017230:	63bb      	str	r3, [r7, #56]	; 0x38
 8017232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017234:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8017238:	63bb      	str	r3, [r7, #56]	; 0x38
 801723a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801723c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801723e:	609a      	str	r2, [r3, #8]
  }    
  
  if (hcint.b.frmovrun)
 8017240:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8017244:	f003 0302 	and.w	r3, r3, #2
 8017248:	b2db      	uxtb	r3, r3
 801724a:	2b00      	cmp	r3, #0
 801724c:	d028      	beq.n	80172a0 <USB_OTG_USBH_handle_hc_n_In_ISR+0x230>
  {
    UNMASK_HOST_INT_CHH (num);
 801724e:	687a      	ldr	r2, [r7, #4]
 8017250:	683b      	ldr	r3, [r7, #0]
 8017252:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8017256:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801725a:	18d3      	adds	r3, r2, r3
 801725c:	689b      	ldr	r3, [r3, #8]
 801725e:	68db      	ldr	r3, [r3, #12]
 8017260:	637b      	str	r3, [r7, #52]	; 0x34
 8017262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017264:	f043 0302 	orr.w	r3, r3, #2
 8017268:	637b      	str	r3, [r7, #52]	; 0x34
 801726a:	687a      	ldr	r2, [r7, #4]
 801726c:	683b      	ldr	r3, [r7, #0]
 801726e:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8017272:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017276:	18d3      	adds	r3, r2, r3
 8017278:	689b      	ldr	r3, [r3, #8]
 801727a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801727c:	60da      	str	r2, [r3, #12]
    USB_OTG_HC_Halt(pdev, num);
 801727e:	683b      	ldr	r3, [r7, #0]
 8017280:	b2db      	uxtb	r3, r3
 8017282:	6878      	ldr	r0, [r7, #4]
 8017284:	4619      	mov	r1, r3
 8017286:	f7fe fb29 	bl	80158dc <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg ,frmovrun);
 801728a:	f04f 0300 	mov.w	r3, #0
 801728e:	633b      	str	r3, [r7, #48]	; 0x30
 8017290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017292:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8017296:	633b      	str	r3, [r7, #48]	; 0x30
 8017298:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801729a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801729c:	609a      	str	r2, [r3, #8]
 801729e:	e1e7      	b.n	8017670 <USB_OTG_USBH_handle_hc_n_In_ISR+0x600>
  }
  
  else if (hcint.b.xfercompl)
 80172a0:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80172a4:	f003 0301 	and.w	r3, r3, #1
 80172a8:	b2db      	uxtb	r3, r3
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	f000 80a7 	beq.w	80173fe <USB_OTG_USBH_handle_hc_n_In_ISR+0x38e>
  {
    
    if (pdev->cfg.dma_enable == 1)
 80172b0:	687b      	ldr	r3, [r7, #4]
 80172b2:	78db      	ldrb	r3, [r3, #3]
 80172b4:	2b01      	cmp	r3, #1
 80172b6:	d11d      	bne.n	80172f4 <USB_OTG_USBH_handle_hc_n_In_ISR+0x284>
    {
      hctsiz.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[num]->HCTSIZ);
 80172b8:	687a      	ldr	r2, [r7, #4]
 80172ba:	683b      	ldr	r3, [r7, #0]
 80172bc:	f103 0322 	add.w	r3, r3, #34	; 0x22
 80172c0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80172c4:	18d3      	adds	r3, r2, r3
 80172c6:	689b      	ldr	r3, [r3, #8]
 80172c8:	691b      	ldr	r3, [r3, #16]
 80172ca:	65fb      	str	r3, [r7, #92]	; 0x5c
      pdev->host.XferCnt[num] =  pdev->host.hc[num].xfer_len - hctsiz.b.xfersize;
 80172cc:	687a      	ldr	r2, [r7, #4]
 80172ce:	683b      	ldr	r3, [r7, #0]
 80172d0:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80172d4:	18d3      	adds	r3, r2, r3
 80172d6:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 80172da:	681a      	ldr	r2, [r3, #0]
 80172dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80172de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80172e2:	1ad2      	subs	r2, r2, r3
 80172e4:	6879      	ldr	r1, [r7, #4]
 80172e6:	683b      	ldr	r3, [r7, #0]
 80172e8:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80172ec:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80172f0:	18cb      	adds	r3, r1, r3
 80172f2:	605a      	str	r2, [r3, #4]
    }
    
    pdev->host.HC_Status[num] = HC_XFRC;     
 80172f4:	687a      	ldr	r2, [r7, #4]
 80172f6:	683b      	ldr	r3, [r7, #0]
 80172f8:	18d3      	adds	r3, r2, r3
 80172fa:	f603 0368 	addw	r3, r3, #2152	; 0x868
 80172fe:	f04f 0201 	mov.w	r2, #1
 8017302:	721a      	strb	r2, [r3, #8]
    pdev->host.ErrCnt [num]= 0;
 8017304:	687a      	ldr	r2, [r7, #4]
 8017306:	683b      	ldr	r3, [r7, #0]
 8017308:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 801730c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017310:	18d3      	adds	r3, r2, r3
 8017312:	f04f 0200 	mov.w	r2, #0
 8017316:	609a      	str	r2, [r3, #8]
    CLEAR_HC_INT(hcreg , xfercompl);
 8017318:	f04f 0300 	mov.w	r3, #0
 801731c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801731e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017320:	f043 0301 	orr.w	r3, r3, #1
 8017324:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017326:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017328:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801732a:	609a      	str	r2, [r3, #8]
    
    if ((hcchar.b.eptype == EP_TYPE_CTRL)||
 801732c:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8017330:	f003 030c 	and.w	r3, r3, #12
 8017334:	b2db      	uxtb	r3, r3
 8017336:	2b00      	cmp	r3, #0
 8017338:	d006      	beq.n	8017348 <USB_OTG_USBH_handle_hc_n_In_ISR+0x2d8>
        (hcchar.b.eptype == EP_TYPE_BULK))
 801733a:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 801733e:	f003 030c 	and.w	r3, r3, #12
 8017342:	b2db      	uxtb	r3, r3
    
    pdev->host.HC_Status[num] = HC_XFRC;     
    pdev->host.ErrCnt [num]= 0;
    CLEAR_HC_INT(hcreg , xfercompl);
    
    if ((hcchar.b.eptype == EP_TYPE_CTRL)||
 8017344:	2b08      	cmp	r3, #8
 8017346:	d13b      	bne.n	80173c0 <USB_OTG_USBH_handle_hc_n_In_ISR+0x350>
        (hcchar.b.eptype == EP_TYPE_BULK))
    {
      UNMASK_HOST_INT_CHH (num);
 8017348:	687a      	ldr	r2, [r7, #4]
 801734a:	683b      	ldr	r3, [r7, #0]
 801734c:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8017350:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017354:	18d3      	adds	r3, r2, r3
 8017356:	689b      	ldr	r3, [r3, #8]
 8017358:	68db      	ldr	r3, [r3, #12]
 801735a:	62bb      	str	r3, [r7, #40]	; 0x28
 801735c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801735e:	f043 0302 	orr.w	r3, r3, #2
 8017362:	62bb      	str	r3, [r7, #40]	; 0x28
 8017364:	687a      	ldr	r2, [r7, #4]
 8017366:	683b      	ldr	r3, [r7, #0]
 8017368:	f103 0322 	add.w	r3, r3, #34	; 0x22
 801736c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017370:	18d3      	adds	r3, r2, r3
 8017372:	689b      	ldr	r3, [r3, #8]
 8017374:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017376:	60da      	str	r2, [r3, #12]
      USB_OTG_HC_Halt(pdev, num);
 8017378:	683b      	ldr	r3, [r7, #0]
 801737a:	b2db      	uxtb	r3, r3
 801737c:	6878      	ldr	r0, [r7, #4]
 801737e:	4619      	mov	r1, r3
 8017380:	f7fe faac 	bl	80158dc <USB_OTG_HC_Halt>
      CLEAR_HC_INT(hcreg , nak); 
 8017384:	f04f 0300 	mov.w	r3, #0
 8017388:	627b      	str	r3, [r7, #36]	; 0x24
 801738a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801738c:	f043 0310 	orr.w	r3, r3, #16
 8017390:	627b      	str	r3, [r7, #36]	; 0x24
 8017392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017394:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017396:	609a      	str	r2, [r3, #8]
      pdev->host.hc[num].toggle_in ^= 1;
 8017398:	687a      	ldr	r2, [r7, #4]
 801739a:	683b      	ldr	r3, [r7, #0]
 801739c:	f103 0345 	add.w	r3, r3, #69	; 0x45
 80173a0:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80173a4:	18d3      	adds	r3, r2, r3
 80173a6:	7a1b      	ldrb	r3, [r3, #8]
 80173a8:	f083 0301 	eor.w	r3, r3, #1
 80173ac:	b2da      	uxtb	r2, r3
 80173ae:	6879      	ldr	r1, [r7, #4]
 80173b0:	683b      	ldr	r3, [r7, #0]
 80173b2:	f103 0345 	add.w	r3, r3, #69	; 0x45
 80173b6:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80173ba:	18cb      	adds	r3, r1, r3
 80173bc:	721a      	strb	r2, [r3, #8]
 80173be:	e157      	b.n	8017670 <USB_OTG_USBH_handle_hc_n_In_ISR+0x600>
      
    }
    else if(hcchar.b.eptype == EP_TYPE_INTR)
 80173c0:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 80173c4:	f003 030c 	and.w	r3, r3, #12
 80173c8:	b2db      	uxtb	r3, r3
 80173ca:	2b0c      	cmp	r3, #12
 80173cc:	f040 814f 	bne.w	801766e <USB_OTG_USBH_handle_hc_n_In_ISR+0x5fe>
    {
      hcchar.b.oddfrm  = 1;
 80173d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80173d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80173d6:	663b      	str	r3, [r7, #96]	; 0x60
      USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[num]->HCCHAR, hcchar.d32); 
 80173d8:	687a      	ldr	r2, [r7, #4]
 80173da:	683b      	ldr	r3, [r7, #0]
 80173dc:	f103 0322 	add.w	r3, r3, #34	; 0x22
 80173e0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80173e4:	18d3      	adds	r3, r2, r3
 80173e6:	689b      	ldr	r3, [r3, #8]
 80173e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80173ea:	601a      	str	r2, [r3, #0]
      pdev->host.URB_State[num] = URB_DONE;  
 80173ec:	687a      	ldr	r2, [r7, #4]
 80173ee:	683b      	ldr	r3, [r7, #0]
 80173f0:	18d3      	adds	r3, r2, r3
 80173f2:	f603 0378 	addw	r3, r3, #2168	; 0x878
 80173f6:	f04f 0201 	mov.w	r2, #1
 80173fa:	71da      	strb	r2, [r3, #7]
 80173fc:	e137      	b.n	801766e <USB_OTG_USBH_handle_hc_n_In_ISR+0x5fe>
    }
    
  }
  else if (hcint.b.chhltd)
 80173fe:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8017402:	f003 0302 	and.w	r3, r3, #2
 8017406:	b2db      	uxtb	r3, r3
 8017408:	2b00      	cmp	r3, #0
 801740a:	f000 8086 	beq.w	801751a <USB_OTG_USBH_handle_hc_n_In_ISR+0x4aa>
  {
    MASK_HOST_INT_CHH (num);
 801740e:	687a      	ldr	r2, [r7, #4]
 8017410:	683b      	ldr	r3, [r7, #0]
 8017412:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8017416:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801741a:	18d3      	adds	r3, r2, r3
 801741c:	689b      	ldr	r3, [r3, #8]
 801741e:	68db      	ldr	r3, [r3, #12]
 8017420:	623b      	str	r3, [r7, #32]
 8017422:	6a3b      	ldr	r3, [r7, #32]
 8017424:	f36f 0341 	bfc	r3, #1, #1
 8017428:	623b      	str	r3, [r7, #32]
 801742a:	687a      	ldr	r2, [r7, #4]
 801742c:	683b      	ldr	r3, [r7, #0]
 801742e:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8017432:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017436:	18d3      	adds	r3, r2, r3
 8017438:	689b      	ldr	r3, [r3, #8]
 801743a:	6a3a      	ldr	r2, [r7, #32]
 801743c:	60da      	str	r2, [r3, #12]
    
    if(pdev->host.HC_Status[num] == HC_XFRC)
 801743e:	687a      	ldr	r2, [r7, #4]
 8017440:	683b      	ldr	r3, [r7, #0]
 8017442:	18d3      	adds	r3, r2, r3
 8017444:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8017448:	7a1b      	ldrb	r3, [r3, #8]
 801744a:	b2db      	uxtb	r3, r3
 801744c:	2b01      	cmp	r3, #1
 801744e:	d108      	bne.n	8017462 <USB_OTG_USBH_handle_hc_n_In_ISR+0x3f2>
    {
      pdev->host.URB_State[num] = URB_DONE;      
 8017450:	687a      	ldr	r2, [r7, #4]
 8017452:	683b      	ldr	r3, [r7, #0]
 8017454:	18d3      	adds	r3, r2, r3
 8017456:	f603 0378 	addw	r3, r3, #2168	; 0x878
 801745a:	f04f 0201 	mov.w	r2, #1
 801745e:	71da      	strb	r2, [r3, #7]
 8017460:	e050      	b.n	8017504 <USB_OTG_USBH_handle_hc_n_In_ISR+0x494>
    }
    
    else if (pdev->host.HC_Status[num] == HC_STALL) 
 8017462:	687a      	ldr	r2, [r7, #4]
 8017464:	683b      	ldr	r3, [r7, #0]
 8017466:	18d3      	adds	r3, r2, r3
 8017468:	f603 0368 	addw	r3, r3, #2152	; 0x868
 801746c:	7a1b      	ldrb	r3, [r3, #8]
 801746e:	b2db      	uxtb	r3, r3
 8017470:	2b05      	cmp	r3, #5
 8017472:	d108      	bne.n	8017486 <USB_OTG_USBH_handle_hc_n_In_ISR+0x416>
    {
      pdev->host.URB_State[num] = URB_STALL;
 8017474:	687a      	ldr	r2, [r7, #4]
 8017476:	683b      	ldr	r3, [r7, #0]
 8017478:	18d3      	adds	r3, r2, r3
 801747a:	f603 0378 	addw	r3, r3, #2168	; 0x878
 801747e:	f04f 0204 	mov.w	r2, #4
 8017482:	71da      	strb	r2, [r3, #7]
 8017484:	e03e      	b.n	8017504 <USB_OTG_USBH_handle_hc_n_In_ISR+0x494>
    }   
    
    else if((pdev->host.HC_Status[num] == HC_XACTERR) ||
 8017486:	687a      	ldr	r2, [r7, #4]
 8017488:	683b      	ldr	r3, [r7, #0]
 801748a:	18d3      	adds	r3, r2, r3
 801748c:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8017490:	7a1b      	ldrb	r3, [r3, #8]
 8017492:	b2db      	uxtb	r3, r3
 8017494:	2b06      	cmp	r3, #6
 8017496:	d008      	beq.n	80174aa <USB_OTG_USBH_handle_hc_n_In_ISR+0x43a>
            (pdev->host.HC_Status[num] == HC_DATATGLERR))
 8017498:	687a      	ldr	r2, [r7, #4]
 801749a:	683b      	ldr	r3, [r7, #0]
 801749c:	18d3      	adds	r3, r2, r3
 801749e:	f603 0368 	addw	r3, r3, #2152	; 0x868
 80174a2:	7a1b      	ldrb	r3, [r3, #8]
 80174a4:	b2db      	uxtb	r3, r3
    else if (pdev->host.HC_Status[num] == HC_STALL) 
    {
      pdev->host.URB_State[num] = URB_STALL;
    }   
    
    else if((pdev->host.HC_Status[num] == HC_XACTERR) ||
 80174a6:	2b08      	cmp	r3, #8
 80174a8:	d112      	bne.n	80174d0 <USB_OTG_USBH_handle_hc_n_In_ISR+0x460>
            (pdev->host.HC_Status[num] == HC_DATATGLERR))
    {
      pdev->host.ErrCnt[num] = 0;
 80174aa:	687a      	ldr	r2, [r7, #4]
 80174ac:	683b      	ldr	r3, [r7, #0]
 80174ae:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80174b2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80174b6:	18d3      	adds	r3, r2, r3
 80174b8:	f04f 0200 	mov.w	r2, #0
 80174bc:	609a      	str	r2, [r3, #8]
      pdev->host.URB_State[num] = URB_ERROR;  
 80174be:	687a      	ldr	r2, [r7, #4]
 80174c0:	683b      	ldr	r3, [r7, #0]
 80174c2:	18d3      	adds	r3, r2, r3
 80174c4:	f603 0378 	addw	r3, r3, #2168	; 0x878
 80174c8:	f04f 0203 	mov.w	r2, #3
 80174cc:	71da      	strb	r2, [r3, #7]
 80174ce:	e019      	b.n	8017504 <USB_OTG_USBH_handle_hc_n_In_ISR+0x494>
      
    }
    else if(hcchar.b.eptype == EP_TYPE_INTR)
 80174d0:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 80174d4:	f003 030c 	and.w	r3, r3, #12
 80174d8:	b2db      	uxtb	r3, r3
 80174da:	2b0c      	cmp	r3, #12
 80174dc:	d112      	bne.n	8017504 <USB_OTG_USBH_handle_hc_n_In_ISR+0x494>
    {
      pdev->host.hc[num].toggle_in ^= 1;
 80174de:	687a      	ldr	r2, [r7, #4]
 80174e0:	683b      	ldr	r3, [r7, #0]
 80174e2:	f103 0345 	add.w	r3, r3, #69	; 0x45
 80174e6:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80174ea:	18d3      	adds	r3, r2, r3
 80174ec:	7a1b      	ldrb	r3, [r3, #8]
 80174ee:	f083 0301 	eor.w	r3, r3, #1
 80174f2:	b2da      	uxtb	r2, r3
 80174f4:	6879      	ldr	r1, [r7, #4]
 80174f6:	683b      	ldr	r3, [r7, #0]
 80174f8:	f103 0345 	add.w	r3, r3, #69	; 0x45
 80174fc:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8017500:	18cb      	adds	r3, r1, r3
 8017502:	721a      	strb	r2, [r3, #8]
    }
    
    CLEAR_HC_INT(hcreg , chhltd);    
 8017504:	f04f 0300 	mov.w	r3, #0
 8017508:	61fb      	str	r3, [r7, #28]
 801750a:	69fb      	ldr	r3, [r7, #28]
 801750c:	f043 0302 	orr.w	r3, r3, #2
 8017510:	61fb      	str	r3, [r7, #28]
 8017512:	69fa      	ldr	r2, [r7, #28]
 8017514:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017516:	609a      	str	r2, [r3, #8]
 8017518:	e0aa      	b.n	8017670 <USB_OTG_USBH_handle_hc_n_In_ISR+0x600>
    
  }    
  else if (hcint.b.xacterr)
 801751a:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 801751e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8017522:	b2db      	uxtb	r3, r3
 8017524:	2b00      	cmp	r3, #0
 8017526:	d042      	beq.n	80175ae <USB_OTG_USBH_handle_hc_n_In_ISR+0x53e>
  {
    UNMASK_HOST_INT_CHH (num);
 8017528:	687a      	ldr	r2, [r7, #4]
 801752a:	683b      	ldr	r3, [r7, #0]
 801752c:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8017530:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017534:	18d3      	adds	r3, r2, r3
 8017536:	689b      	ldr	r3, [r3, #8]
 8017538:	68db      	ldr	r3, [r3, #12]
 801753a:	61bb      	str	r3, [r7, #24]
 801753c:	69bb      	ldr	r3, [r7, #24]
 801753e:	f043 0302 	orr.w	r3, r3, #2
 8017542:	61bb      	str	r3, [r7, #24]
 8017544:	687a      	ldr	r2, [r7, #4]
 8017546:	683b      	ldr	r3, [r7, #0]
 8017548:	f103 0322 	add.w	r3, r3, #34	; 0x22
 801754c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017550:	18d3      	adds	r3, r2, r3
 8017552:	689b      	ldr	r3, [r3, #8]
 8017554:	69ba      	ldr	r2, [r7, #24]
 8017556:	60da      	str	r2, [r3, #12]
    pdev->host.ErrCnt[num] ++;
 8017558:	687a      	ldr	r2, [r7, #4]
 801755a:	683b      	ldr	r3, [r7, #0]
 801755c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8017560:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017564:	18d3      	adds	r3, r2, r3
 8017566:	689b      	ldr	r3, [r3, #8]
 8017568:	f103 0201 	add.w	r2, r3, #1
 801756c:	6879      	ldr	r1, [r7, #4]
 801756e:	683b      	ldr	r3, [r7, #0]
 8017570:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8017574:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017578:	18cb      	adds	r3, r1, r3
 801757a:	609a      	str	r2, [r3, #8]
    pdev->host.HC_Status[num] = HC_XACTERR;
 801757c:	687a      	ldr	r2, [r7, #4]
 801757e:	683b      	ldr	r3, [r7, #0]
 8017580:	18d3      	adds	r3, r2, r3
 8017582:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8017586:	f04f 0206 	mov.w	r2, #6
 801758a:	721a      	strb	r2, [r3, #8]
    USB_OTG_HC_Halt(pdev, num);
 801758c:	683b      	ldr	r3, [r7, #0]
 801758e:	b2db      	uxtb	r3, r3
 8017590:	6878      	ldr	r0, [r7, #4]
 8017592:	4619      	mov	r1, r3
 8017594:	f7fe f9a2 	bl	80158dc <USB_OTG_HC_Halt>
    CLEAR_HC_INT(hcreg , xacterr);    
 8017598:	f04f 0300 	mov.w	r3, #0
 801759c:	617b      	str	r3, [r7, #20]
 801759e:	697b      	ldr	r3, [r7, #20]
 80175a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80175a4:	617b      	str	r3, [r7, #20]
 80175a6:	697a      	ldr	r2, [r7, #20]
 80175a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80175aa:	609a      	str	r2, [r3, #8]
 80175ac:	e060      	b.n	8017670 <USB_OTG_USBH_handle_hc_n_In_ISR+0x600>
    
  }
  else if (hcint.b.nak)  
 80175ae:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80175b2:	f003 0310 	and.w	r3, r3, #16
 80175b6:	b2db      	uxtb	r3, r3
 80175b8:	2b00      	cmp	r3, #0
 80175ba:	d059      	beq.n	8017670 <USB_OTG_USBH_handle_hc_n_In_ISR+0x600>
  {  
    if(hcchar.b.eptype == EP_TYPE_INTR)
 80175bc:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 80175c0:	f003 030c 	and.w	r3, r3, #12
 80175c4:	b2db      	uxtb	r3, r3
 80175c6:	2b0c      	cmp	r3, #12
 80175c8:	d11e      	bne.n	8017608 <USB_OTG_USBH_handle_hc_n_In_ISR+0x598>
    {
      UNMASK_HOST_INT_CHH (num);
 80175ca:	687a      	ldr	r2, [r7, #4]
 80175cc:	683b      	ldr	r3, [r7, #0]
 80175ce:	f103 0322 	add.w	r3, r3, #34	; 0x22
 80175d2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80175d6:	18d3      	adds	r3, r2, r3
 80175d8:	689b      	ldr	r3, [r3, #8]
 80175da:	68db      	ldr	r3, [r3, #12]
 80175dc:	613b      	str	r3, [r7, #16]
 80175de:	693b      	ldr	r3, [r7, #16]
 80175e0:	f043 0302 	orr.w	r3, r3, #2
 80175e4:	613b      	str	r3, [r7, #16]
 80175e6:	687a      	ldr	r2, [r7, #4]
 80175e8:	683b      	ldr	r3, [r7, #0]
 80175ea:	f103 0322 	add.w	r3, r3, #34	; 0x22
 80175ee:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80175f2:	18d3      	adds	r3, r2, r3
 80175f4:	689b      	ldr	r3, [r3, #8]
 80175f6:	693a      	ldr	r2, [r7, #16]
 80175f8:	60da      	str	r2, [r3, #12]
      USB_OTG_HC_Halt(pdev, num);
 80175fa:	683b      	ldr	r3, [r7, #0]
 80175fc:	b2db      	uxtb	r3, r3
 80175fe:	6878      	ldr	r0, [r7, #4]
 8017600:	4619      	mov	r1, r3
 8017602:	f7fe f96b 	bl	80158dc <USB_OTG_HC_Halt>
 8017606:	e01f      	b.n	8017648 <USB_OTG_USBH_handle_hc_n_In_ISR+0x5d8>
    }
    else if  ((hcchar.b.eptype == EP_TYPE_CTRL)||
 8017608:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 801760c:	f003 030c 	and.w	r3, r3, #12
 8017610:	b2db      	uxtb	r3, r3
 8017612:	2b00      	cmp	r3, #0
 8017614:	d006      	beq.n	8017624 <USB_OTG_USBH_handle_hc_n_In_ISR+0x5b4>
              (hcchar.b.eptype == EP_TYPE_BULK))
 8017616:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 801761a:	f003 030c 	and.w	r3, r3, #12
 801761e:	b2db      	uxtb	r3, r3
    if(hcchar.b.eptype == EP_TYPE_INTR)
    {
      UNMASK_HOST_INT_CHH (num);
      USB_OTG_HC_Halt(pdev, num);
    }
    else if  ((hcchar.b.eptype == EP_TYPE_CTRL)||
 8017620:	2b08      	cmp	r3, #8
 8017622:	d111      	bne.n	8017648 <USB_OTG_USBH_handle_hc_n_In_ISR+0x5d8>
              (hcchar.b.eptype == EP_TYPE_BULK))
    {
      /* re-activate the channel  */
      hcchar.b.chen = 1;
 8017624:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017626:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801762a:	663b      	str	r3, [r7, #96]	; 0x60
      hcchar.b.chdis = 0;
 801762c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801762e:	f36f 739e 	bfc	r3, #30, #1
 8017632:	663b      	str	r3, [r7, #96]	; 0x60
      USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[num]->HCCHAR, hcchar.d32); 
 8017634:	687a      	ldr	r2, [r7, #4]
 8017636:	683b      	ldr	r3, [r7, #0]
 8017638:	f103 0322 	add.w	r3, r3, #34	; 0x22
 801763c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8017640:	18d3      	adds	r3, r2, r3
 8017642:	689b      	ldr	r3, [r3, #8]
 8017644:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8017646:	601a      	str	r2, [r3, #0]
    }
    pdev->host.HC_Status[num] = HC_NAK;
 8017648:	687a      	ldr	r2, [r7, #4]
 801764a:	683b      	ldr	r3, [r7, #0]
 801764c:	18d3      	adds	r3, r2, r3
 801764e:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8017652:	f04f 0203 	mov.w	r2, #3
 8017656:	721a      	strb	r2, [r3, #8]
    CLEAR_HC_INT(hcreg , nak);   
 8017658:	f04f 0300 	mov.w	r3, #0
 801765c:	60fb      	str	r3, [r7, #12]
 801765e:	68fb      	ldr	r3, [r7, #12]
 8017660:	f043 0310 	orr.w	r3, r3, #16
 8017664:	60fb      	str	r3, [r7, #12]
 8017666:	68fa      	ldr	r2, [r7, #12]
 8017668:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801766a:	609a      	str	r2, [r3, #8]
 801766c:	e000      	b.n	8017670 <USB_OTG_USBH_handle_hc_n_In_ISR+0x600>
    }
    else if(hcchar.b.eptype == EP_TYPE_INTR)
    {
      hcchar.b.oddfrm  = 1;
      USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[num]->HCCHAR, hcchar.d32); 
      pdev->host.URB_State[num] = URB_DONE;  
 801766e:	bf00      	nop
    pdev->host.HC_Status[num] = HC_NAK;
    CLEAR_HC_INT(hcreg , nak);   
  }
  
  
  return 1;
 8017670:	f04f 0301 	mov.w	r3, #1
  
}
 8017674:	4618      	mov	r0, r3
 8017676:	f107 0770 	add.w	r7, r7, #112	; 0x70
 801767a:	46bd      	mov	sp, r7
 801767c:	bd80      	pop	{r7, pc}
 801767e:	bf00      	nop

08017680 <USB_OTG_USBH_handle_hc_ISR>:
*         This function indicates that one or more host channels has a pending
* @param  pdev: Selected device
* @retval status 
*/
static uint32_t USB_OTG_USBH_handle_hc_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 8017680:	b580      	push	{r7, lr}
 8017682:	b086      	sub	sp, #24
 8017684:	af00      	add	r7, sp, #0
 8017686:	6078      	str	r0, [r7, #4]
  USB_OTG_HAINT_TypeDef        haint;
  USB_OTG_HCCHAR_TypeDef       hcchar;
  uint32_t i = 0;
 8017688:	f04f 0300 	mov.w	r3, #0
 801768c:	617b      	str	r3, [r7, #20]
  uint32_t retval = 0;
 801768e:	f04f 0300 	mov.w	r3, #0
 8017692:	613b      	str	r3, [r7, #16]
  
  /* Clear appropriate bits in HCINTn to clear the interrupt bit in
  * GINTSTS */
  
  haint.d32 = USB_OTG_ReadHostAllChannels_intr(pdev);
 8017694:	6878      	ldr	r0, [r7, #4]
 8017696:	f7fd ffbe 	bl	8015616 <USB_OTG_ReadHostAllChannels_intr>
 801769a:	4603      	mov	r3, r0
 801769c:	60fb      	str	r3, [r7, #12]
  
  for (i = 0; i < pdev->cfg.host_channels ; i++)
 801769e:	f04f 0300 	mov.w	r3, #0
 80176a2:	617b      	str	r3, [r7, #20]
 80176a4:	e02d      	b.n	8017702 <USB_OTG_USBH_handle_hc_ISR+0x82>
  {
    if (haint.b.chint & (1 << i))
 80176a6:	89bb      	ldrh	r3, [r7, #12]
 80176a8:	461a      	mov	r2, r3
 80176aa:	697b      	ldr	r3, [r7, #20]
 80176ac:	fa42 f303 	asr.w	r3, r2, r3
 80176b0:	f003 0301 	and.w	r3, r3, #1
 80176b4:	2b00      	cmp	r3, #0
 80176b6:	d020      	beq.n	80176fa <USB_OTG_USBH_handle_hc_ISR+0x7a>
    {
      hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[i]->HCCHAR);
 80176b8:	687a      	ldr	r2, [r7, #4]
 80176ba:	697b      	ldr	r3, [r7, #20]
 80176bc:	f103 0322 	add.w	r3, r3, #34	; 0x22
 80176c0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80176c4:	18d3      	adds	r3, r2, r3
 80176c6:	689b      	ldr	r3, [r3, #8]
 80176c8:	681b      	ldr	r3, [r3, #0]
 80176ca:	60bb      	str	r3, [r7, #8]
      
      if (hcchar.b.epdir)
 80176cc:	7a7b      	ldrb	r3, [r7, #9]
 80176ce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80176d2:	b2db      	uxtb	r3, r3
 80176d4:	2b00      	cmp	r3, #0
 80176d6:	d008      	beq.n	80176ea <USB_OTG_USBH_handle_hc_ISR+0x6a>
      {
        retval |= USB_OTG_USBH_handle_hc_n_In_ISR (pdev, i);
 80176d8:	6878      	ldr	r0, [r7, #4]
 80176da:	6979      	ldr	r1, [r7, #20]
 80176dc:	f7ff fcc8 	bl	8017070 <USB_OTG_USBH_handle_hc_n_In_ISR>
 80176e0:	4603      	mov	r3, r0
 80176e2:	693a      	ldr	r2, [r7, #16]
 80176e4:	4313      	orrs	r3, r2
 80176e6:	613b      	str	r3, [r7, #16]
 80176e8:	e007      	b.n	80176fa <USB_OTG_USBH_handle_hc_ISR+0x7a>
      }
      else
      {
        retval |=  USB_OTG_USBH_handle_hc_n_Out_ISR (pdev, i);
 80176ea:	6878      	ldr	r0, [r7, #4]
 80176ec:	6979      	ldr	r1, [r7, #20]
 80176ee:	f7ff f9df 	bl	8016ab0 <USB_OTG_USBH_handle_hc_n_Out_ISR>
 80176f2:	4603      	mov	r3, r0
 80176f4:	693a      	ldr	r2, [r7, #16]
 80176f6:	4313      	orrs	r3, r2
 80176f8:	613b      	str	r3, [r7, #16]
  /* Clear appropriate bits in HCINTn to clear the interrupt bit in
  * GINTSTS */
  
  haint.d32 = USB_OTG_ReadHostAllChannels_intr(pdev);
  
  for (i = 0; i < pdev->cfg.host_channels ; i++)
 80176fa:	697b      	ldr	r3, [r7, #20]
 80176fc:	f103 0301 	add.w	r3, r3, #1
 8017700:	617b      	str	r3, [r7, #20]
 8017702:	687b      	ldr	r3, [r7, #4]
 8017704:	781b      	ldrb	r3, [r3, #0]
 8017706:	461a      	mov	r2, r3
 8017708:	697b      	ldr	r3, [r7, #20]
 801770a:	429a      	cmp	r2, r3
 801770c:	d8cb      	bhi.n	80176a6 <USB_OTG_USBH_handle_hc_ISR+0x26>
        retval |=  USB_OTG_USBH_handle_hc_n_Out_ISR (pdev, i);
      }
    }
  }
  
  return retval;
 801770e:	693b      	ldr	r3, [r7, #16]
}
 8017710:	4618      	mov	r0, r3
 8017712:	f107 0718 	add.w	r7, r7, #24
 8017716:	46bd      	mov	sp, r7
 8017718:	bd80      	pop	{r7, pc}
 801771a:	bf00      	nop

0801771c <USB_OTG_USBH_handle_rx_qlvl_ISR>:
*/
#if defined ( __ICCARM__ ) /*!< IAR Compiler */
#pragma optimize = none
#endif /* __CC_ARM */
static uint32_t USB_OTG_USBH_handle_rx_qlvl_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 801771c:	b580      	push	{r7, lr}
 801771e:	b088      	sub	sp, #32
 8017720:	af00      	add	r7, sp, #0
 8017722:	6078      	str	r0, [r7, #4]
  USB_OTG_GRXFSTS_TypeDef       grxsts;
  USB_OTG_GINTMSK_TypeDef       intmsk;
  USB_OTG_HCTSIZn_TypeDef       hctsiz; 
  USB_OTG_HCCHAR_TypeDef        hcchar;
  __IO uint8_t                  channelnum =0;  
 8017724:	f04f 0300 	mov.w	r3, #0
 8017728:	72fb      	strb	r3, [r7, #11]
  uint32_t                      count;    
  
  /* Disable the Rx Status Queue Level interrupt */
  intmsk.d32 = 0;
 801772a:	f04f 0300 	mov.w	r3, #0
 801772e:	617b      	str	r3, [r7, #20]
  intmsk.b.rxstsqlvl = 1;
 8017730:	697b      	ldr	r3, [r7, #20]
 8017732:	f043 0310 	orr.w	r3, r3, #16
 8017736:	617b      	str	r3, [r7, #20]
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, 0);
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	68db      	ldr	r3, [r3, #12]
 801773c:	687a      	ldr	r2, [r7, #4]
 801773e:	68d2      	ldr	r2, [r2, #12]
 8017740:	6991      	ldr	r1, [r2, #24]
 8017742:	697a      	ldr	r2, [r7, #20]
 8017744:	ea6f 0202 	mvn.w	r2, r2
 8017748:	400a      	ands	r2, r1
 801774a:	619a      	str	r2, [r3, #24]
  
  grxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRXSTSP);
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	68db      	ldr	r3, [r3, #12]
 8017750:	6a1b      	ldr	r3, [r3, #32]
 8017752:	61bb      	str	r3, [r7, #24]
  channelnum = grxsts.b.chnum;  
 8017754:	69bb      	ldr	r3, [r7, #24]
 8017756:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801775a:	b2db      	uxtb	r3, r3
 801775c:	72fb      	strb	r3, [r7, #11]
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[channelnum]->HCCHAR);
 801775e:	7afb      	ldrb	r3, [r7, #11]
 8017760:	b2db      	uxtb	r3, r3
 8017762:	687a      	ldr	r2, [r7, #4]
 8017764:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8017768:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801776c:	18d3      	adds	r3, r2, r3
 801776e:	689b      	ldr	r3, [r3, #8]
 8017770:	681b      	ldr	r3, [r3, #0]
 8017772:	60fb      	str	r3, [r7, #12]
  
  switch (grxsts.b.pktsts)
 8017774:	69bb      	ldr	r3, [r7, #24]
 8017776:	f3c3 4343 	ubfx	r3, r3, #17, #4
 801777a:	b2db      	uxtb	r3, r3
 801777c:	2b02      	cmp	r3, #2
 801777e:	f040 809c 	bne.w	80178ba <USB_OTG_USBH_handle_rx_qlvl_ISR+0x19e>
  {
  case GRXSTS_PKTSTS_IN:
    /* Read the data into the host buffer. */
    if ((grxsts.b.bcnt > 0) && (pdev->host.hc[channelnum].xfer_buff != (void  *)0))
 8017782:	69bb      	ldr	r3, [r7, #24]
 8017784:	f3c3 130a 	ubfx	r3, r3, #4, #11
 8017788:	b29b      	uxth	r3, r3
 801778a:	2b00      	cmp	r3, #0
 801778c:	f340 8096 	ble.w	80178bc <USB_OTG_USBH_handle_rx_qlvl_ISR+0x1a0>
 8017790:	7afb      	ldrb	r3, [r7, #11]
 8017792:	b2db      	uxtb	r3, r3
 8017794:	687a      	ldr	r2, [r7, #4]
 8017796:	f103 0315 	add.w	r3, r3, #21
 801779a:	ea4f 1343 	mov.w	r3, r3, lsl #5
 801779e:	18d3      	adds	r3, r2, r3
 80177a0:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 80177a4:	681b      	ldr	r3, [r3, #0]
 80177a6:	2b00      	cmp	r3, #0
 80177a8:	f000 8088 	beq.w	80178bc <USB_OTG_USBH_handle_rx_qlvl_ISR+0x1a0>
    {  
      
      USB_OTG_ReadPacket(pdev, pdev->host.hc[channelnum].xfer_buff, grxsts.b.bcnt);
 80177ac:	7afb      	ldrb	r3, [r7, #11]
 80177ae:	b2db      	uxtb	r3, r3
 80177b0:	687a      	ldr	r2, [r7, #4]
 80177b2:	f103 0315 	add.w	r3, r3, #21
 80177b6:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80177ba:	18d3      	adds	r3, r2, r3
 80177bc:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 80177c0:	681a      	ldr	r2, [r3, #0]
 80177c2:	69bb      	ldr	r3, [r7, #24]
 80177c4:	f3c3 130a 	ubfx	r3, r3, #4, #11
 80177c8:	b29b      	uxth	r3, r3
 80177ca:	6878      	ldr	r0, [r7, #4]
 80177cc:	4611      	mov	r1, r2
 80177ce:	461a      	mov	r2, r3
 80177d0:	f7fd fd9f 	bl	8015312 <USB_OTG_ReadPacket>
      /*manage multiple Xfer */
      pdev->host.hc[grxsts.b.chnum].xfer_buff += grxsts.b.bcnt;           
 80177d4:	69bb      	ldr	r3, [r7, #24]
 80177d6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80177da:	b2db      	uxtb	r3, r3
 80177dc:	69ba      	ldr	r2, [r7, #24]
 80177de:	f3c2 0203 	ubfx	r2, r2, #0, #4
 80177e2:	b2d2      	uxtb	r2, r2
 80177e4:	6879      	ldr	r1, [r7, #4]
 80177e6:	f102 0215 	add.w	r2, r2, #21
 80177ea:	ea4f 1242 	mov.w	r2, r2, lsl #5
 80177ee:	188a      	adds	r2, r1, r2
 80177f0:	f202 52fc 	addw	r2, r2, #1532	; 0x5fc
 80177f4:	6811      	ldr	r1, [r2, #0]
 80177f6:	69ba      	ldr	r2, [r7, #24]
 80177f8:	f3c2 120a 	ubfx	r2, r2, #4, #11
 80177fc:	b292      	uxth	r2, r2
 80177fe:	188a      	adds	r2, r1, r2
 8017800:	6879      	ldr	r1, [r7, #4]
 8017802:	f103 0315 	add.w	r3, r3, #21
 8017806:	ea4f 1343 	mov.w	r3, r3, lsl #5
 801780a:	18cb      	adds	r3, r1, r3
 801780c:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 8017810:	601a      	str	r2, [r3, #0]
      pdev->host.hc[grxsts.b.chnum].xfer_count  += grxsts.b.bcnt;
 8017812:	69bb      	ldr	r3, [r7, #24]
 8017814:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8017818:	b2db      	uxtb	r3, r3
 801781a:	69ba      	ldr	r2, [r7, #24]
 801781c:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8017820:	b2d2      	uxtb	r2, r2
 8017822:	6879      	ldr	r1, [r7, #4]
 8017824:	ea4f 1242 	mov.w	r2, r2, lsl #5
 8017828:	188a      	adds	r2, r1, r2
 801782a:	f602 02a4 	addw	r2, r2, #2212	; 0x8a4
 801782e:	6811      	ldr	r1, [r2, #0]
 8017830:	69ba      	ldr	r2, [r7, #24]
 8017832:	f3c2 120a 	ubfx	r2, r2, #4, #11
 8017836:	b292      	uxth	r2, r2
 8017838:	188a      	adds	r2, r1, r2
 801783a:	6879      	ldr	r1, [r7, #4]
 801783c:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8017840:	18cb      	adds	r3, r1, r3
 8017842:	f603 03a4 	addw	r3, r3, #2212	; 0x8a4
 8017846:	601a      	str	r2, [r3, #0]
      
      
      count = pdev->host.hc[channelnum].xfer_count;
 8017848:	7afb      	ldrb	r3, [r7, #11]
 801784a:	b2db      	uxtb	r3, r3
 801784c:	687a      	ldr	r2, [r7, #4]
 801784e:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8017852:	18d3      	adds	r3, r2, r3
 8017854:	f603 03a4 	addw	r3, r3, #2212	; 0x8a4
 8017858:	681b      	ldr	r3, [r3, #0]
 801785a:	61fb      	str	r3, [r7, #28]
      pdev->host.XferCnt[channelnum]  = count;
 801785c:	7afb      	ldrb	r3, [r7, #11]
 801785e:	b2db      	uxtb	r3, r3
 8017860:	687a      	ldr	r2, [r7, #4]
 8017862:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8017866:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801786a:	18d3      	adds	r3, r2, r3
 801786c:	69fa      	ldr	r2, [r7, #28]
 801786e:	605a      	str	r2, [r3, #4]
      
      hctsiz.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[channelnum]->HCTSIZ);
 8017870:	7afb      	ldrb	r3, [r7, #11]
 8017872:	b2db      	uxtb	r3, r3
 8017874:	687a      	ldr	r2, [r7, #4]
 8017876:	f103 0322 	add.w	r3, r3, #34	; 0x22
 801787a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801787e:	18d3      	adds	r3, r2, r3
 8017880:	689b      	ldr	r3, [r3, #8]
 8017882:	691b      	ldr	r3, [r3, #16]
 8017884:	613b      	str	r3, [r7, #16]
      if(hctsiz.b.pktcnt > 0)
 8017886:	693b      	ldr	r3, [r7, #16]
 8017888:	f3c3 43c9 	ubfx	r3, r3, #19, #10
 801788c:	b29b      	uxth	r3, r3
 801788e:	2b00      	cmp	r3, #0
 8017890:	dd14      	ble.n	80178bc <USB_OTG_USBH_handle_rx_qlvl_ISR+0x1a0>
      {
        /* re-activate the channel when more packets are expected */
        hcchar.b.chen = 1;
 8017892:	68fb      	ldr	r3, [r7, #12]
 8017894:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8017898:	60fb      	str	r3, [r7, #12]
        hcchar.b.chdis = 0;
 801789a:	68fb      	ldr	r3, [r7, #12]
 801789c:	f36f 739e 	bfc	r3, #30, #1
 80178a0:	60fb      	str	r3, [r7, #12]
        USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[channelnum]->HCCHAR, hcchar.d32);
 80178a2:	7afb      	ldrb	r3, [r7, #11]
 80178a4:	b2db      	uxtb	r3, r3
 80178a6:	687a      	ldr	r2, [r7, #4]
 80178a8:	f103 0322 	add.w	r3, r3, #34	; 0x22
 80178ac:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80178b0:	18d3      	adds	r3, r2, r3
 80178b2:	689b      	ldr	r3, [r3, #8]
 80178b4:	68fa      	ldr	r2, [r7, #12]
 80178b6:	601a      	str	r2, [r3, #0]
      }
    }
    break;
 80178b8:	e000      	b.n	80178bc <USB_OTG_USBH_handle_rx_qlvl_ISR+0x1a0>
  case GRXSTS_PKTSTS_IN_XFER_COMP:
    
  case GRXSTS_PKTSTS_DATA_TOGGLE_ERR:
  case GRXSTS_PKTSTS_CH_HALTED:
  default:
    break;
 80178ba:	e000      	b.n	80178be <USB_OTG_USBH_handle_rx_qlvl_ISR+0x1a2>
        hcchar.b.chen = 1;
        hcchar.b.chdis = 0;
        USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[channelnum]->HCCHAR, hcchar.d32);
      }
    }
    break;
 80178bc:	bf00      	nop
  default:
    break;
  }
  
  /* Enable the Rx Status Queue Level interrupt */
  intmsk.b.rxstsqlvl = 1;
 80178be:	697b      	ldr	r3, [r7, #20]
 80178c0:	f043 0310 	orr.w	r3, r3, #16
 80178c4:	617b      	str	r3, [r7, #20]
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, 0, intmsk.d32);
 80178c6:	687b      	ldr	r3, [r7, #4]
 80178c8:	68db      	ldr	r3, [r3, #12]
 80178ca:	687a      	ldr	r2, [r7, #4]
 80178cc:	68d2      	ldr	r2, [r2, #12]
 80178ce:	6991      	ldr	r1, [r2, #24]
 80178d0:	697a      	ldr	r2, [r7, #20]
 80178d2:	430a      	orrs	r2, r1
 80178d4:	619a      	str	r2, [r3, #24]
  return 1;
 80178d6:	f04f 0301 	mov.w	r3, #1
}
 80178da:	4618      	mov	r0, r3
 80178dc:	f107 0720 	add.w	r7, r7, #32
 80178e0:	46bd      	mov	sp, r7
 80178e2:	bd80      	pop	{r7, pc}

080178e4 <USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR>:
*/
#if defined ( __ICCARM__ ) /*!< IAR Compiler */
#pragma optimize = none
#endif /* __CC_ARM */
static uint32_t USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR (USB_OTG_CORE_HANDLE *pdev)
{
 80178e4:	b480      	push	{r7}
 80178e6:	b085      	sub	sp, #20
 80178e8:	af00      	add	r7, sp, #0
 80178ea:	6078      	str	r0, [r7, #4]
  USB_OTG_HCCHAR_TypeDef        hcchar; 
  
  
  
  
  hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[0]->HCCHAR);
 80178ec:	687b      	ldr	r3, [r7, #4]
 80178ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80178f2:	681b      	ldr	r3, [r3, #0]
 80178f4:	60bb      	str	r3, [r7, #8]
  hcchar.b.chen = 1;
 80178f6:	68bb      	ldr	r3, [r7, #8]
 80178f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80178fc:	60bb      	str	r3, [r7, #8]
  hcchar.b.chdis = 1;
 80178fe:	68bb      	ldr	r3, [r7, #8]
 8017900:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8017904:	60bb      	str	r3, [r7, #8]
  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[0]->HCCHAR, hcchar.d32);  
 8017906:	687b      	ldr	r3, [r7, #4]
 8017908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801790c:	68ba      	ldr	r2, [r7, #8]
 801790e:	601a      	str	r2, [r3, #0]
  
  gintsts.d32 = 0;
 8017910:	f04f 0300 	mov.w	r3, #0
 8017914:	60fb      	str	r3, [r7, #12]
  /* Clear interrupt */
  gintsts.b.incomplisoout = 1;
 8017916:	68fb      	ldr	r3, [r7, #12]
 8017918:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801791c:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 801791e:	687b      	ldr	r3, [r7, #4]
 8017920:	68db      	ldr	r3, [r3, #12]
 8017922:	68fa      	ldr	r2, [r7, #12]
 8017924:	615a      	str	r2, [r3, #20]
  
  return 1;
 8017926:	f04f 0301 	mov.w	r3, #1
}
 801792a:	4618      	mov	r0, r3
 801792c:	f107 0714 	add.w	r7, r7, #20
 8017930:	46bd      	mov	sp, r7
 8017932:	bc80      	pop	{r7}
 8017934:	4770      	bx	lr
 8017936:	bf00      	nop

08017938 <USBH_OTG_ISR_Handler>:
* @param  pdev: Selected device
* @retval status 
*/

uint32_t USBH_OTG_ISR_Handler (USB_OTG_CORE_HANDLE *pdev)
{
 8017938:	b580      	push	{r7, lr}
 801793a:	b084      	sub	sp, #16
 801793c:	af00      	add	r7, sp, #0
 801793e:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef  gintsts;
  uint32_t retval = 0;
 8017940:	f04f 0300 	mov.w	r3, #0
 8017944:	60fb      	str	r3, [r7, #12]
  
  gintsts.d32 = 0;
 8017946:	f04f 0300 	mov.w	r3, #0
 801794a:	60bb      	str	r3, [r7, #8]
  
  /* Check if HOST Mode */
  if (USB_OTG_IsHostMode(pdev))
 801794c:	6878      	ldr	r0, [r7, #4]
 801794e:	f7fd fe01 	bl	8015554 <USB_OTG_IsHostMode>
 8017952:	4603      	mov	r3, r0
 8017954:	2b00      	cmp	r3, #0
 8017956:	d072      	beq.n	8017a3e <USBH_OTG_ISR_Handler+0x106>
  {
    gintsts.d32 = USB_OTG_ReadCoreItr(pdev);
 8017958:	6878      	ldr	r0, [r7, #4]
 801795a:	f7fd fe00 	bl	801555e <USB_OTG_ReadCoreItr>
 801795e:	4603      	mov	r3, r0
 8017960:	60bb      	str	r3, [r7, #8]
    if (!gintsts.d32)
 8017962:	68bb      	ldr	r3, [r7, #8]
 8017964:	2b00      	cmp	r3, #0
 8017966:	d102      	bne.n	801796e <USBH_OTG_ISR_Handler+0x36>
    {
      return 0;
 8017968:	f04f 0300 	mov.w	r3, #0
 801796c:	e068      	b.n	8017a40 <USBH_OTG_ISR_Handler+0x108>
    }
    
    if (gintsts.b.sofintr)
 801796e:	7a3b      	ldrb	r3, [r7, #8]
 8017970:	f003 0308 	and.w	r3, r3, #8
 8017974:	b2db      	uxtb	r3, r3
 8017976:	2b00      	cmp	r3, #0
 8017978:	d006      	beq.n	8017988 <USBH_OTG_ISR_Handler+0x50>
    {
      retval |= USB_OTG_USBH_handle_sof_ISR (pdev);
 801797a:	6878      	ldr	r0, [r7, #4]
 801797c:	f7fe fdea 	bl	8016554 <USB_OTG_USBH_handle_sof_ISR>
 8017980:	4603      	mov	r3, r0
 8017982:	68fa      	ldr	r2, [r7, #12]
 8017984:	4313      	orrs	r3, r2
 8017986:	60fb      	str	r3, [r7, #12]
    }
    
    if (gintsts.b.rxstsqlvl)
 8017988:	7a3b      	ldrb	r3, [r7, #8]
 801798a:	f003 0310 	and.w	r3, r3, #16
 801798e:	b2db      	uxtb	r3, r3
 8017990:	2b00      	cmp	r3, #0
 8017992:	d006      	beq.n	80179a2 <USBH_OTG_ISR_Handler+0x6a>
    {
      retval |= USB_OTG_USBH_handle_rx_qlvl_ISR (pdev);
 8017994:	6878      	ldr	r0, [r7, #4]
 8017996:	f7ff fec1 	bl	801771c <USB_OTG_USBH_handle_rx_qlvl_ISR>
 801799a:	4603      	mov	r3, r0
 801799c:	68fa      	ldr	r2, [r7, #12]
 801799e:	4313      	orrs	r3, r2
 80179a0:	60fb      	str	r3, [r7, #12]
    }
    
    if (gintsts.b.nptxfempty)
 80179a2:	7a3b      	ldrb	r3, [r7, #8]
 80179a4:	f003 0320 	and.w	r3, r3, #32
 80179a8:	b2db      	uxtb	r3, r3
 80179aa:	2b00      	cmp	r3, #0
 80179ac:	d006      	beq.n	80179bc <USBH_OTG_ISR_Handler+0x84>
    {
      retval |= USB_OTG_USBH_handle_nptxfempty_ISR (pdev);
 80179ae:	6878      	ldr	r0, [r7, #4]
 80179b0:	f7fe fe0c 	bl	80165cc <USB_OTG_USBH_handle_nptxfempty_ISR>
 80179b4:	4603      	mov	r3, r0
 80179b6:	68fa      	ldr	r2, [r7, #12]
 80179b8:	4313      	orrs	r3, r2
 80179ba:	60fb      	str	r3, [r7, #12]
    }
    
    if (gintsts.b.ptxfempty)
 80179bc:	7afb      	ldrb	r3, [r7, #11]
 80179be:	f003 0304 	and.w	r3, r3, #4
 80179c2:	b2db      	uxtb	r3, r3
 80179c4:	2b00      	cmp	r3, #0
 80179c6:	d006      	beq.n	80179d6 <USBH_OTG_ISR_Handler+0x9e>
    {
      retval |= USB_OTG_USBH_handle_ptxfempty_ISR (pdev);
 80179c8:	6878      	ldr	r0, [r7, #4]
 80179ca:	f7fe fed7 	bl	801677c <USB_OTG_USBH_handle_ptxfempty_ISR>
 80179ce:	4603      	mov	r3, r0
 80179d0:	68fa      	ldr	r2, [r7, #12]
 80179d2:	4313      	orrs	r3, r2
 80179d4:	60fb      	str	r3, [r7, #12]
    }    
    
    if (gintsts.b.hcintr)
 80179d6:	7afb      	ldrb	r3, [r7, #11]
 80179d8:	f003 0302 	and.w	r3, r3, #2
 80179dc:	b2db      	uxtb	r3, r3
 80179de:	2b00      	cmp	r3, #0
 80179e0:	d006      	beq.n	80179f0 <USBH_OTG_ISR_Handler+0xb8>
    {
      retval |= USB_OTG_USBH_handle_hc_ISR (pdev);
 80179e2:	6878      	ldr	r0, [r7, #4]
 80179e4:	f7ff fe4c 	bl	8017680 <USB_OTG_USBH_handle_hc_ISR>
 80179e8:	4603      	mov	r3, r0
 80179ea:	68fa      	ldr	r2, [r7, #12]
 80179ec:	4313      	orrs	r3, r2
 80179ee:	60fb      	str	r3, [r7, #12]
    }
    
    if (gintsts.b.portintr)
 80179f0:	7afb      	ldrb	r3, [r7, #11]
 80179f2:	f003 0301 	and.w	r3, r3, #1
 80179f6:	b2db      	uxtb	r3, r3
 80179f8:	2b00      	cmp	r3, #0
 80179fa:	d006      	beq.n	8017a0a <USBH_OTG_ISR_Handler+0xd2>
    {
      retval |= USB_OTG_USBH_handle_port_ISR (pdev);
 80179fc:	6878      	ldr	r0, [r7, #4]
 80179fe:	f7fe ff95 	bl	801692c <USB_OTG_USBH_handle_port_ISR>
 8017a02:	4603      	mov	r3, r0
 8017a04:	68fa      	ldr	r2, [r7, #12]
 8017a06:	4313      	orrs	r3, r2
 8017a08:	60fb      	str	r3, [r7, #12]
    }
    
    if (gintsts.b.disconnect)
 8017a0a:	7afb      	ldrb	r3, [r7, #11]
 8017a0c:	f003 0320 	and.w	r3, r3, #32
 8017a10:	b2db      	uxtb	r3, r3
 8017a12:	2b00      	cmp	r3, #0
 8017a14:	d006      	beq.n	8017a24 <USBH_OTG_ISR_Handler+0xec>
    {
      retval |= USB_OTG_USBH_handle_Disconnect_ISR (pdev);  
 8017a16:	6878      	ldr	r0, [r7, #4]
 8017a18:	f7fe fdba 	bl	8016590 <USB_OTG_USBH_handle_Disconnect_ISR>
 8017a1c:	4603      	mov	r3, r0
 8017a1e:	68fa      	ldr	r2, [r7, #12]
 8017a20:	4313      	orrs	r3, r2
 8017a22:	60fb      	str	r3, [r7, #12]
      
    }
    
    if (gintsts.b.incomplisoout)
 8017a24:	7abb      	ldrb	r3, [r7, #10]
 8017a26:	f003 0320 	and.w	r3, r3, #32
 8017a2a:	b2db      	uxtb	r3, r3
 8017a2c:	2b00      	cmp	r3, #0
 8017a2e:	d006      	beq.n	8017a3e <USBH_OTG_ISR_Handler+0x106>
    {
      retval |= USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR (pdev);
 8017a30:	6878      	ldr	r0, [r7, #4]
 8017a32:	f7ff ff57 	bl	80178e4 <USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR>
 8017a36:	4603      	mov	r3, r0
 8017a38:	68fa      	ldr	r2, [r7, #12]
 8017a3a:	4313      	orrs	r3, r2
 8017a3c:	60fb      	str	r3, [r7, #12]
    }
    
    
  }
  return retval;
 8017a3e:	68fb      	ldr	r3, [r7, #12]
}
 8017a40:	4618      	mov	r0, r3
 8017a42:	f107 0710 	add.w	r7, r7, #16
 8017a46:	46bd      	mov	sp, r7
 8017a48:	bd80      	pop	{r7, pc}
 8017a4a:	bf00      	nop

08017a4c <STM32_USBO_OTG_ISR_Handler>:
  *         
  * @param  None
  * @retval : None
  */
uint32_t STM32_USBO_OTG_ISR_Handler(USB_OTG_CORE_HANDLE *pdev)
{
 8017a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* OTG interrupts */
  gintmsk_common.b.sessreqintr = 1;
  gintmsk_common.b.conidstschng = 1;
  gintmsk_common.b.otgintr = 1;
  
  gintsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTSTS);
 8017a4e:	68c3      	ldr	r3, [r0, #12]
  gintmsk.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTMSK);
  return ((gintsts.d32 & gintmsk.d32 ) & gintmsk_common.d32);
 8017a50:	4d45      	ldr	r5, [pc, #276]	; (8017b68 <STM32_USBO_OTG_ISR_Handler+0x11c>)
  /* OTG interrupts */
  gintmsk_common.b.sessreqintr = 1;
  gintmsk_common.b.conidstschng = 1;
  gintmsk_common.b.otgintr = 1;
  
  gintsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTSTS);
 8017a52:	695a      	ldr	r2, [r3, #20]
  gintmsk.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTMSK);
 8017a54:	6999      	ldr	r1, [r3, #24]
  return ((gintsts.d32 & gintmsk.d32 ) & gintmsk_common.d32);
 8017a56:	400a      	ands	r2, r1
 8017a58:	4015      	ands	r5, r2
  *         
  * @param  None
  * @retval : None
  */
uint32_t STM32_USBO_OTG_ISR_Handler(USB_OTG_CORE_HANDLE *pdev)
{
 8017a5a:	4604      	mov	r4, r0
  uint32_t retval = 0;
  USB_OTG_GINTSTS_TypeDef  gintsts ;
  gintsts.d32 = 0;

  gintsts.d32 = USB_OTG_Read_itr(pdev);
  if (gintsts.d32 == 0)
 8017a5c:	2d00      	cmp	r5, #0
 8017a5e:	f000 8081 	beq.w	8017b64 <STM32_USBO_OTG_ISR_Handler+0x118>
  {
    return 0;
  }
  if (gintsts.b.otgintr)
 8017a62:	f002 0204 	and.w	r2, r2, #4
 8017a66:	b2d1      	uxtb	r1, r2
 8017a68:	2900      	cmp	r1, #0
 8017a6a:	d040      	beq.n	8017aee <STM32_USBO_OTG_ISR_Handler+0xa2>
  
  
  gotgint.d32 = 0;
  gotgctl.d32 = 0;
  
  gotgint.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GOTGINT);
 8017a6c:	685e      	ldr	r6, [r3, #4]
  gotgctl.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GOTGCTL);
 8017a6e:	681a      	ldr	r2, [r3, #0]
  
  if (gotgint.b.sesenddet)
 8017a70:	f006 0704 	and.w	r7, r6, #4
 8017a74:	b2fa      	uxtb	r2, r7
 8017a76:	b132      	cbz	r2, 8017a86 <STM32_USBO_OTG_ISR_Handler+0x3a>
  {
    gotgctl.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GOTGCTL);
 8017a78:	681b      	ldr	r3, [r3, #0]
    
    
    if (USB_OTG_IsDeviceMode(pdev))
 8017a7a:	f7fd fd64 	bl	8015546 <USB_OTG_IsDeviceMode>
 8017a7e:	b910      	cbnz	r0, 8017a86 <STM32_USBO_OTG_ISR_Handler+0x3a>
    {

    }
    else if (USB_OTG_IsHostMode(pdev))
 8017a80:	4620      	mov	r0, r4
 8017a82:	f7fd fd67 	bl	8015554 <USB_OTG_IsHostMode>

    }
  }

  /* ----> SRP SUCCESS or FAILURE INTERRUPT <---- */
  if (gotgint.b.sesreqsucstschng)
 8017a86:	f3c6 2707 	ubfx	r7, r6, #8, #8
 8017a8a:	07f8      	lsls	r0, r7, #31
 8017a8c:	d50e      	bpl.n	8017aac <STM32_USBO_OTG_ISR_Handler+0x60>
  {
    gotgctl.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GOTGCTL);
 8017a8e:	68e0      	ldr	r0, [r4, #12]
 8017a90:	6803      	ldr	r3, [r0, #0]
    if (gotgctl.b.sesreqscs) /* Session request success                                          */
 8017a92:	07d9      	lsls	r1, r3, #31
    {
      if (USB_OTG_IsDeviceMode(pdev))
 8017a94:	4620      	mov	r0, r4

  /* ----> SRP SUCCESS or FAILURE INTERRUPT <---- */
  if (gotgint.b.sesreqsucstschng)
  {
    gotgctl.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GOTGCTL);
    if (gotgctl.b.sesreqscs) /* Session request success                                          */
 8017a96:	d507      	bpl.n	8017aa8 <STM32_USBO_OTG_ISR_Handler+0x5c>
    {
      if (USB_OTG_IsDeviceMode(pdev))
 8017a98:	f7fd fd55 	bl	8015546 <USB_OTG_IsDeviceMode>

      }
      /* Clear Session Request */
      gotgctl.d32 = 0;
      gotgctl.b.sesreq = 1;
      USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GOTGCTL, gotgctl.d32, 0);
 8017a9c:	68e1      	ldr	r1, [r4, #12]
 8017a9e:	680a      	ldr	r2, [r1, #0]
 8017aa0:	f022 0002 	bic.w	r0, r2, #2
 8017aa4:	6008      	str	r0, [r1, #0]
 8017aa6:	e001      	b.n	8017aac <STM32_USBO_OTG_ISR_Handler+0x60>
    }
    else /* Session request failure                                          */
    {
      if (USB_OTG_IsDeviceMode(pdev))
 8017aa8:	f7fd fd4d 	bl	8015546 <USB_OTG_IsDeviceMode>

      }
    }
  }
  /* ----> HNP SUCCESS or FAILURE INTERRUPT <---- */
  if (gotgint.b.hstnegsucstschng)
 8017aac:	f007 0702 	and.w	r7, r7, #2
 8017ab0:	b2fb      	uxtb	r3, r7
 8017ab2:	b143      	cbz	r3, 8017ac6 <STM32_USBO_OTG_ISR_Handler+0x7a>
  {
    gotgctl.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GOTGCTL);
 8017ab4:	68e1      	ldr	r1, [r4, #12]
 8017ab6:	680a      	ldr	r2, [r1, #0]

    if (gotgctl.b.hstnegscs)                                    /* Host negotiation success                                         */
 8017ab8:	05d2      	lsls	r2, r2, #23
 8017aba:	d502      	bpl.n	8017ac2 <STM32_USBO_OTG_ISR_Handler+0x76>
    {
      if (USB_OTG_IsHostMode(pdev))                              /* The core AUTOMATICALLY sets the Host mode                        */
 8017abc:	4620      	mov	r0, r4
 8017abe:	f7fd fd49 	bl	8015554 <USB_OTG_IsHostMode>
    }
    else                                                        /* Host negotiation failure */
    {

    }
    gotgint.b.hstnegsucstschng = 1;                             /* Ack "Host Negotiation Success Status Change" interrupt.          */
 8017ac2:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  }
  /* ----> HOST NEGOTIATION DETECTED INTERRUPT <---- */
  if (gotgint.b.hstnegdet)
 8017ac6:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8017aca:	f007 0002 	and.w	r0, r7, #2
 8017ace:	b2c3      	uxtb	r3, r0
 8017ad0:	b113      	cbz	r3, 8017ad8 <STM32_USBO_OTG_ISR_Handler+0x8c>
  {
    if (USB_OTG_IsDeviceMode(pdev))                              /* The core AUTOMATICALLY sets the Host mode                        */
 8017ad2:	4620      	mov	r0, r4
 8017ad4:	f7fd fd37 	bl	8015546 <USB_OTG_IsDeviceMode>

    }
  }
  if (gotgint.b.adevtoutchng)
  {}
  if (gotgint.b.debdone)
 8017ad8:	f007 0108 	and.w	r1, r7, #8
 8017adc:	b2cf      	uxtb	r7, r1
 8017ade:	b117      	cbz	r7, 8017ae6 <STM32_USBO_OTG_ISR_Handler+0x9a>
  {
    USB_OTG_ResetPort(pdev);
 8017ae0:	4620      	mov	r0, r4
 8017ae2:	f7fd fd9b 	bl	801561c <USB_OTG_ResetPort>
  }
  /* Clear OTG INT */
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GOTGINT, gotgint.d32);
 8017ae6:	68e2      	ldr	r2, [r4, #12]
  {
    return 0;
  }
  if (gintsts.b.otgintr)
  {
    retval |= USB_OTG_HandleOTG_ISR(pdev);
 8017ae8:	2001      	movs	r0, #1
  if (gotgint.b.debdone)
  {
    USB_OTG_ResetPort(pdev);
  }
  /* Clear OTG INT */
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GOTGINT, gotgint.d32);
 8017aea:	6056      	str	r6, [r2, #4]
 8017aec:	e000      	b.n	8017af0 <STM32_USBO_OTG_ISR_Handler+0xa4>
  * @param  None
  * @retval : None
  */
uint32_t STM32_USBO_OTG_ISR_Handler(USB_OTG_CORE_HANDLE *pdev)
{
  uint32_t retval = 0;
 8017aee:	4608      	mov	r0, r1
  }
  if (gintsts.b.otgintr)
  {
    retval |= USB_OTG_HandleOTG_ISR(pdev);
  }
  if (gintsts.b.conidstschng)
 8017af0:	f3c5 6307 	ubfx	r3, r5, #24, #8
 8017af4:	f003 0110 	and.w	r1, r3, #16
 8017af8:	b2ca      	uxtb	r2, r1
 8017afa:	b312      	cbz	r2, 8017b42 <STM32_USBO_OTG_ISR_Handler+0xf6>
  gintsts.d32 = 0 ;
  gintmsk.d32 = 0 ;
  gotgctl.d32 = 0 ;
  gintmsk.b.sofintr = 1;
  
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, gintmsk.d32, 0);
 8017afc:	68e0      	ldr	r0, [r4, #12]
 8017afe:	6983      	ldr	r3, [r0, #24]
 8017b00:	f023 0108 	bic.w	r1, r3, #8
 8017b04:	6181      	str	r1, [r0, #24]
  gotgctl.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GOTGCTL);
 8017b06:	6802      	ldr	r2, [r0, #0]
  
  /* B-Device connector (Device Mode) */
  if (gotgctl.b.conidsts)
 8017b08:	03d3      	lsls	r3, r2, #15
  {
    USB_OTG_DisableGlobalInt(pdev);
 8017b0a:	4620      	mov	r0, r4
  
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, gintmsk.d32, 0);
  gotgctl.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GOTGCTL);
  
  /* B-Device connector (Device Mode) */
  if (gotgctl.b.conidsts)
 8017b0c:	d509      	bpl.n	8017b22 <STM32_USBO_OTG_ISR_Handler+0xd6>
  {
    USB_OTG_DisableGlobalInt(pdev);
 8017b0e:	f7fd fcc5 	bl	801549c <USB_OTG_DisableGlobalInt>
    USB_OTG_CoreInitDev(pdev);
 8017b12:	4620      	mov	r0, r4
 8017b14:	f7fd ff38 	bl	8015988 <USB_OTG_CoreInitDev>
    USB_OTG_EnableGlobalInt(pdev);
 8017b18:	4620      	mov	r0, r4
 8017b1a:	f7fd fcb8 	bl	801548e <USB_OTG_EnableGlobalInt>
    pdev->otg.OTG_State = B_PERIPHERAL;
 8017b1e:	2004      	movs	r0, #4
 8017b20:	e008      	b.n	8017b34 <STM32_USBO_OTG_ISR_Handler+0xe8>
  }
  else
  {
    USB_OTG_DisableGlobalInt(pdev);
 8017b22:	f7fd fcbb 	bl	801549c <USB_OTG_DisableGlobalInt>
    USB_OTG_CoreInitHost(pdev);
 8017b26:	4620      	mov	r0, r4
 8017b28:	f7fd fd8e 	bl	8015648 <USB_OTG_CoreInitHost>
    USB_OTG_EnableGlobalInt(pdev);
 8017b2c:	4620      	mov	r0, r4
 8017b2e:	f7fd fcae 	bl	801548e <USB_OTG_EnableGlobalInt>
    pdev->otg.OTG_State = A_HOST;
 8017b32:	2001      	movs	r0, #1
  }
  /* Set flag and clear interrupt */
  gintsts.b.conidstschng = 1;
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8017b34:	68e3      	ldr	r3, [r4, #12]
  else
  {
    USB_OTG_DisableGlobalInt(pdev);
    USB_OTG_CoreInitHost(pdev);
    USB_OTG_EnableGlobalInt(pdev);
    pdev->otg.OTG_State = A_HOST;
 8017b36:	f884 0a90 	strb.w	r0, [r4, #2704]	; 0xa90
  }
  /* Set flag and clear interrupt */
  gintsts.b.conidstschng = 1;
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8017b3a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8017b3e:	6159      	str	r1, [r3, #20]
  {
    retval |= USB_OTG_HandleOTG_ISR(pdev);
  }
  if (gintsts.b.conidstschng)
  {
    retval |= USB_OTG_HandleConnectorIDStatusChange_ISR(pdev);
 8017b40:	2001      	movs	r0, #1
  }
  if (gintsts.b.sessreqintr)
 8017b42:	f3c5 6507 	ubfx	r5, r5, #24, #8
 8017b46:	f005 0240 	and.w	r2, r5, #64	; 0x40
 8017b4a:	b2d5      	uxtb	r5, r2
 8017b4c:	b15d      	cbz	r5, 8017b66 <STM32_USBO_OTG_ISR_Handler+0x11a>


  gotgctl.d32 = 0;
  gintsts.d32 = 0;

  gotgctl.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GOTGCTL );
 8017b4e:	68e0      	ldr	r0, [r4, #12]
 8017b50:	6803      	ldr	r3, [r0, #0]
  if (USB_OTG_IsDeviceMode(pdev) && (gotgctl.b.bsesvld))
 8017b52:	4620      	mov	r0, r4
 8017b54:	f7fd fcf7 	bl	8015546 <USB_OTG_IsDeviceMode>
    
  }
  /* Clear interrupt */
  gintsts.d32 = 0;
  gintsts.b.sessreqintr = 1;
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8017b58:	68e3      	ldr	r3, [r4, #12]
 8017b5a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8017b5e:	6159      	str	r1, [r3, #20]
  {
    retval |= USB_OTG_HandleConnectorIDStatusChange_ISR(pdev);
  }
  if (gintsts.b.sessreqintr)
  {
    retval |= USB_OTG_HandleSessionRequest_ISR(pdev);
 8017b60:	2001      	movs	r0, #1
 8017b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  gintsts.d32 = 0;

  gintsts.d32 = USB_OTG_Read_itr(pdev);
  if (gintsts.d32 == 0)
  {
    return 0;
 8017b64:	4628      	mov	r0, r5
  if (gintsts.b.sessreqintr)
  {
    retval |= USB_OTG_HandleSessionRequest_ISR(pdev);
  }
  return retval;
}
 8017b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017b68:	50000004 	.word	0x50000004

08017b6c <__libc_init_array>:
 8017b6c:	b538      	push	{r3, r4, r5, lr}
 8017b6e:	4d0e      	ldr	r5, [pc, #56]	; (8017ba8 <__libc_init_array+0x3c>)
 8017b70:	4b0e      	ldr	r3, [pc, #56]	; (8017bac <__libc_init_array+0x40>)
 8017b72:	1ae8      	subs	r0, r5, r3
 8017b74:	1085      	asrs	r5, r0, #2
 8017b76:	2400      	movs	r4, #0
 8017b78:	42ac      	cmp	r4, r5
 8017b7a:	d005      	beq.n	8017b88 <__libc_init_array+0x1c>
 8017b7c:	490b      	ldr	r1, [pc, #44]	; (8017bac <__libc_init_array+0x40>)
 8017b7e:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
 8017b82:	4790      	blx	r2
 8017b84:	3401      	adds	r4, #1
 8017b86:	e7f7      	b.n	8017b78 <__libc_init_array+0xc>
 8017b88:	f7f9 fae2 	bl	8011150 <_init>
 8017b8c:	4908      	ldr	r1, [pc, #32]	; (8017bb0 <__libc_init_array+0x44>)
 8017b8e:	4a09      	ldr	r2, [pc, #36]	; (8017bb4 <__libc_init_array+0x48>)
 8017b90:	1a54      	subs	r4, r2, r1
 8017b92:	10a5      	asrs	r5, r4, #2
 8017b94:	2400      	movs	r4, #0
 8017b96:	42ac      	cmp	r4, r5
 8017b98:	d005      	beq.n	8017ba6 <__libc_init_array+0x3a>
 8017b9a:	4b05      	ldr	r3, [pc, #20]	; (8017bb0 <__libc_init_array+0x44>)
 8017b9c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017ba0:	4780      	blx	r0
 8017ba2:	3401      	adds	r4, #1
 8017ba4:	e7f7      	b.n	8017b96 <__libc_init_array+0x2a>
 8017ba6:	bd38      	pop	{r3, r4, r5, pc}
 8017ba8:	080182c0 	.word	0x080182c0
 8017bac:	080182c0 	.word	0x080182c0
 8017bb0:	080182c0 	.word	0x080182c0
 8017bb4:	080182c0 	.word	0x080182c0

08017bb8 <memcpy>:
 8017bb8:	b510      	push	{r4, lr}
 8017bba:	2300      	movs	r3, #0
 8017bbc:	4293      	cmp	r3, r2
 8017bbe:	d003      	beq.n	8017bc8 <memcpy+0x10>
 8017bc0:	5ccc      	ldrb	r4, [r1, r3]
 8017bc2:	54c4      	strb	r4, [r0, r3]
 8017bc4:	3301      	adds	r3, #1
 8017bc6:	e7f9      	b.n	8017bbc <memcpy+0x4>
 8017bc8:	bd10      	pop	{r4, pc}

08017bca <memset>:
 8017bca:	1882      	adds	r2, r0, r2
 8017bcc:	4603      	mov	r3, r0
 8017bce:	4293      	cmp	r3, r2
 8017bd0:	d002      	beq.n	8017bd8 <memset+0xe>
 8017bd2:	f803 1b01 	strb.w	r1, [r3], #1
 8017bd6:	e7fa      	b.n	8017bce <memset+0x4>
 8017bd8:	4770      	bx	lr

08017bda <strlen>:
 8017bda:	4603      	mov	r3, r0
 8017bdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017be0:	2a00      	cmp	r2, #0
 8017be2:	d1fb      	bne.n	8017bdc <strlen+0x2>
 8017be4:	1a18      	subs	r0, r3, r0
 8017be6:	3801      	subs	r0, #1
 8017be8:	4770      	bx	lr

08017bea <strncpy>:
 8017bea:	b530      	push	{r4, r5, lr}
 8017bec:	3901      	subs	r1, #1
 8017bee:	4603      	mov	r3, r0
 8017bf0:	461c      	mov	r4, r3
 8017bf2:	b13a      	cbz	r2, 8017c04 <strncpy+0x1a>
 8017bf4:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8017bf8:	f803 5b01 	strb.w	r5, [r3], #1
 8017bfc:	3a01      	subs	r2, #1
 8017bfe:	461c      	mov	r4, r3
 8017c00:	2d00      	cmp	r5, #0
 8017c02:	d1f5      	bne.n	8017bf0 <strncpy+0x6>
 8017c04:	1899      	adds	r1, r3, r2
 8017c06:	428c      	cmp	r4, r1
 8017c08:	d003      	beq.n	8017c12 <strncpy+0x28>
 8017c0a:	2200      	movs	r2, #0
 8017c0c:	f804 2b01 	strb.w	r2, [r4], #1
 8017c10:	e7f9      	b.n	8017c06 <strncpy+0x1c>
 8017c12:	bd30      	pop	{r4, r5, pc}
